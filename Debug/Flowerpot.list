
Flowerpot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d74  08012390  08012390  00022390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013104  08013104  000301fc  2**0
                  CONTENTS
  4 .ARM          00000000  08013104  08013104  000301fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013104  08013104  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013104  08013104  00023104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013108  08013108  00023108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801310c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301fc  2**0
                  CONTENTS
 10 .bss          00000cc8  200001fc  200001fc  000301fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ec4  20000ec4  000301fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fb3d  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fb6  00000000  00000000  0004fd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  00053d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001438  00000000  00000000  000552f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cdb  00000000  00000000  00056728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f38c  00000000  00000000  00079403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5f24  00000000  00000000  0009878f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015e6b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007210  00000000  00000000  0015e708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012374 	.word	0x08012374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08012374 	.word	0x08012374

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <getRawTemp>:
void zalij(int time_ms);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float getRawTemp(sht3x_handle_t *handle){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	float temperature,hum;
	sht3x_read_temperature_and_humidity(handle, &temperature, &hum);
 8000d1c:	f107 0208 	add.w	r2, r7, #8
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f002 fdc4 	bl	80038b4 <sht3x_read_temperature_and_humidity>
	return temperature;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	ee07 3a90 	vmov	s15, r3
}
 8000d32:	eeb0 0a67 	vmov.f32	s0, s15
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <saveCalibration>:
bool saveCalibration(float k0, float k1){
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	f2ad 5d04 	subw	sp, sp, #1284	; 0x504
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	ed83 0a00 	vstr	s0, [r3]
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	edc3 0a00 	vstr	s1, [r3]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_SET);// orange led to indicate data logging
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d56:	489c      	ldr	r0, [pc, #624]	; (8000fc8 <saveCalibration+0x28c>)
 8000d58:	f004 fde2 	bl	8005920 <HAL_GPIO_WritePin>
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000d5c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8000d60:	2201      	movs	r2, #1
 8000d62:	499a      	ldr	r1, [pc, #616]	; (8000fcc <saveCalibration+0x290>)
 8000d64:	4618      	mov	r0, r3
 8000d66:	f00b fe15 	bl	800c994 <f_mount>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f887 34ff 	strb.w	r3, [r7, #1279]	; 0x4ff
	if (fres != FR_OK) {
 8000d70:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d018      	beq.n	8000daa <saveCalibration+0x6e>
		myprintf("f_mount error (%i)\r\n", fres);
 8000d78:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4894      	ldr	r0, [pc, #592]	; (8000fd0 <saveCalibration+0x294>)
 8000d80:	f000 fd1e 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8a:	488f      	ldr	r0, [pc, #572]	; (8000fc8 <saveCalibration+0x28c>)
 8000d8c:	f004 fdc8 	bl	8005920 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d96:	488c      	ldr	r0, [pc, #560]	; (8000fc8 <saveCalibration+0x28c>)
 8000d98:	f004 fdc2 	bl	8005920 <HAL_GPIO_WritePin>
		f_mount(NULL, "", 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	498b      	ldr	r1, [pc, #556]	; (8000fcc <saveCalibration+0x290>)
 8000da0:	2000      	movs	r0, #0
 8000da2:	f00b fdf7 	bl	800c994 <f_mount>
		return false;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e108      	b.n	8000fbc <saveCalibration+0x280>
	}

	DWORD free_clusters, free_sectors, total_sectors;
	FATFS* getFreeFs;
	fres = f_getfree("", &free_clusters, &getFreeFs);
 8000daa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000dae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000db2:	4619      	mov	r1, r3
 8000db4:	4885      	ldr	r0, [pc, #532]	; (8000fcc <saveCalibration+0x290>)
 8000db6:	f00c fe98 	bl	800daea <f_getfree>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f887 34ff 	strb.w	r3, [r7, #1279]	; 0x4ff
	if (fres != FR_OK) {
 8000dc0:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d013      	beq.n	8000df0 <saveCalibration+0xb4>
		myprintf("f_getfree error (%i)\r\n", fres);
 8000dc8:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4881      	ldr	r0, [pc, #516]	; (8000fd4 <saveCalibration+0x298>)
 8000dd0:	f000 fcf6 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dda:	487b      	ldr	r0, [pc, #492]	; (8000fc8 <saveCalibration+0x28c>)
 8000ddc:	f004 fda0 	bl	8005920 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de6:	4878      	ldr	r0, [pc, #480]	; (8000fc8 <saveCalibration+0x28c>)
 8000de8:	f004 fd9a 	bl	8005920 <HAL_GPIO_WritePin>
		return false;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e0e5      	b.n	8000fbc <saveCalibration+0x280>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000df0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000e00:	6812      	ldr	r2, [r2, #0]
 8000e02:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
	free_sectors = free_clusters * getFreeFs->csize;
 8000e0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8000e18:	461a      	mov	r2, r3
 8000e1a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	fb03 f302 	mul.w	r3, r3, r2
 8000e24:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
	myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000e28:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8000e2c:	0859      	lsrs	r1, r3, #1
 8000e2e:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	461a      	mov	r2, r3
 8000e36:	4868      	ldr	r0, [pc, #416]	; (8000fd8 <saveCalibration+0x29c>)
 8000e38:	f000 fcc2 	bl	80017c0 <myprintf>

	fres = f_open(&fil, "cal.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8000e3c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e40:	220a      	movs	r2, #10
 8000e42:	4966      	ldr	r1, [pc, #408]	; (8000fdc <saveCalibration+0x2a0>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	f00b fded 	bl	800ca24 <f_open>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f887 34ff 	strb.w	r3, [r7, #1279]	; 0x4ff
	if(fres == FR_OK) {
 8000e50:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d15d      	bne.n	8000f14 <saveCalibration+0x1d8>
		myprintf("I was able to open 'cal.txt' for writing\r\n");
 8000e58:	4861      	ldr	r0, [pc, #388]	; (8000fe0 <saveCalibration+0x2a4>)
 8000e5a:	f000 fcb1 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
		return false;
	}

	BYTE readBuf[128];
	memset(readBuf,0,128);
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f00d f81e 	bl	800dea8 <memset>

	char *write_buffer = (char*)malloc(128);
 8000e6c:	2080      	movs	r0, #128	; 0x80
 8000e6e:	f00d f805 	bl	800de7c <malloc>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
	*write_buffer = '\0';
 8000e78:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
	sprintf(write_buffer+strlen(write_buffer),"k0 = %e \n\r",k0);
 8000e80:	f8d7 04f0 	ldr.w	r0, [r7, #1264]	; 0x4f0
 8000e84:	f7ff f9ae 	bl	80001e4 <strlen>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8000e8e:	189c      	adds	r4, r3, r2
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	f7ff fb68 	bl	8000568 <__aeabi_f2d>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4951      	ldr	r1, [pc, #324]	; (8000fe4 <saveCalibration+0x2a8>)
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f00d fe88 	bl	800ebb4 <siprintf>
	sprintf(write_buffer+strlen(write_buffer),"k1 = %e \n\r\0",k1);
 8000ea4:	f8d7 04f0 	ldr.w	r0, [r7, #1264]	; 0x4f0
 8000ea8:	f7ff f99c 	bl	80001e4 <strlen>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8000eb2:	189c      	adds	r4, r3, r2
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f7ff fb56 	bl	8000568 <__aeabi_f2d>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4949      	ldr	r1, [pc, #292]	; (8000fe8 <saveCalibration+0x2ac>)
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f00d fe76 	bl	800ebb4 <siprintf>

	//Copy in a string
	strncpy((char*)readBuf, write_buffer, strlen(write_buffer));
 8000ec8:	f8d7 04f0 	ldr.w	r0, [r7, #1264]	; 0x4f0
 8000ecc:	f7ff f98a 	bl	80001e4 <strlen>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00d feb2 	bl	800ec44 <strncpy>
	UINT bytesWrote;
	myprintf(readBuf);
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fc6b 	bl	80017c0 <myprintf>
	fres = f_write(&fil, readBuf, strlen(write_buffer), &bytesWrote);
 8000eea:	f8d7 04f0 	ldr.w	r0, [r7, #1264]	; 0x4f0
 8000eee:	f7ff f979 	bl	80001e4 <strlen>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	f107 010c 	add.w	r1, r7, #12
 8000efc:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8000f00:	f00c f906 	bl	800d110 <f_write>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f887 34ff 	strb.w	r3, [r7, #1279]	; 0x4ff
	if(fres == FR_OK) {
 8000f0a:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d137      	bne.n	8000f82 <saveCalibration+0x246>
 8000f12:	e01d      	b.n	8000f50 <saveCalibration+0x214>
		myprintf("f_open error (%i)\r\n", fres);
 8000f14:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4834      	ldr	r0, [pc, #208]	; (8000fec <saveCalibration+0x2b0>)
 8000f1c:	f000 fc50 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	4828      	ldr	r0, [pc, #160]	; (8000fc8 <saveCalibration+0x28c>)
 8000f28:	f004 fcfa 	bl	8005920 <HAL_GPIO_WritePin>
		f_close(&fil);
 8000f2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00c fb54 	bl	800d5de <f_close>
		f_mount(NULL, "", 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	4924      	ldr	r1, [pc, #144]	; (8000fcc <saveCalibration+0x290>)
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f00b fd2a 	bl	800c994 <f_mount>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f46:	4820      	ldr	r0, [pc, #128]	; (8000fc8 <saveCalibration+0x28c>)
 8000f48:	f004 fcea 	bl	8005920 <HAL_GPIO_WritePin>
		return false;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e035      	b.n	8000fbc <saveCalibration+0x280>
		myprintf("Wrote %i bytes to 'cal.txt'!\r\n", bytesWrote);
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4825      	ldr	r0, [pc, #148]	; (8000ff0 <saveCalibration+0x2b4>)
 8000f5a:	f000 fc31 	bl	80017c0 <myprintf>
		f_close(&fil);
		f_mount(NULL, "", 0);
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
		return false;
	}
	f_close(&fil);
 8000f5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00c fb3b 	bl	800d5de <f_close>
	f_mount(NULL, "", 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4918      	ldr	r1, [pc, #96]	; (8000fcc <saveCalibration+0x290>)
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f00b fd11 	bl	800c994 <f_mount>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);// orange led to indicate data logging
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f78:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <saveCalibration+0x28c>)
 8000f7a:	f004 fcd1 	bl	8005920 <HAL_GPIO_WritePin>
	return true;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e01c      	b.n	8000fbc <saveCalibration+0x280>
		myprintf("f_write error (%i)\r\n",fres);
 8000f82:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8000f86:	4619      	mov	r1, r3
 8000f88:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <saveCalibration+0x2b8>)
 8000f8a:	f000 fc19 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <saveCalibration+0x28c>)
 8000f96:	f004 fcc3 	bl	8005920 <HAL_GPIO_WritePin>
		f_close(&fil);
 8000f9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00c fb1d 	bl	800d5de <f_close>
		f_mount(NULL, "", 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4909      	ldr	r1, [pc, #36]	; (8000fcc <saveCalibration+0x290>)
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f00b fcf3 	bl	800c994 <f_mount>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <saveCalibration+0x28c>)
 8000fb6:	f004 fcb3 	bl	8005920 <HAL_GPIO_WritePin>
		return false;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f207 5704 	addw	r7, r7, #1284	; 0x504
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	48001000 	.word	0x48001000
 8000fcc:	08012390 	.word	0x08012390
 8000fd0:	08012394 	.word	0x08012394
 8000fd4:	080123ac 	.word	0x080123ac
 8000fd8:	080123c4 	.word	0x080123c4
 8000fdc:	0801240c 	.word	0x0801240c
 8000fe0:	08012414 	.word	0x08012414
 8000fe4:	08012454 	.word	0x08012454
 8000fe8:	08012460 	.word	0x08012460
 8000fec:	08012440 	.word	0x08012440
 8000ff0:	0801246c 	.word	0x0801246c
 8000ff4:	0801248c 	.word	0x0801248c

08000ff8 <openCalibrationFile>:
bool openCalibrationFile(float *k0,float *k1){
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	6018      	str	r0, [r3, #0]
 8001004:	463b      	mov	r3, r7
 8001006:	6019      	str	r1, [r3, #0]
	//!!!!!!!!!!!!! POZOR .. v souboru nesmí být na začátku prázdné řádky!!!!!
	// .. teda .. je třeba odzkoušet .. možná jsem to akorát opravil
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_SET);// orange led to indicate SD activity
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100e:	48d3      	ldr	r0, [pc, #844]	; (800135c <openCalibrationFile+0x364>)
 8001010:	f004 fc86 	bl	8005920 <HAL_GPIO_WritePin>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001014:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001018:	2201      	movs	r2, #1
 800101a:	49d1      	ldr	r1, [pc, #836]	; (8001360 <openCalibrationFile+0x368>)
 800101c:	4618      	mov	r0, r3
 800101e:	f00b fcb9 	bl	800c994 <f_mount>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 34d3 	strb.w	r3, [r7, #1235]	; 0x4d3
    if (fres != FR_OK) {
 8001028:	f897 34d3 	ldrb.w	r3, [r7, #1235]	; 0x4d3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d018      	beq.n	8001062 <openCalibrationFile+0x6a>
		myprintf("f_mount error (%i)\r\n", fres);
 8001030:	f897 34d3 	ldrb.w	r3, [r7, #1235]	; 0x4d3
 8001034:	4619      	mov	r1, r3
 8001036:	48cb      	ldr	r0, [pc, #812]	; (8001364 <openCalibrationFile+0x36c>)
 8001038:	f000 fbc2 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001042:	48c6      	ldr	r0, [pc, #792]	; (800135c <openCalibrationFile+0x364>)
 8001044:	f004 fc6c 	bl	8005920 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104e:	48c3      	ldr	r0, [pc, #780]	; (800135c <openCalibrationFile+0x364>)
 8001050:	f004 fc66 	bl	8005920 <HAL_GPIO_WritePin>
		f_mount(NULL, "", 0);
 8001054:	2200      	movs	r2, #0
 8001056:	49c2      	ldr	r1, [pc, #776]	; (8001360 <openCalibrationFile+0x368>)
 8001058:	2000      	movs	r0, #0
 800105a:	f00b fc9b 	bl	800c994 <f_mount>
		return false;
 800105e:	2300      	movs	r3, #0
 8001060:	e1b5      	b.n	80013ce <openCalibrationFile+0x3d6>
    }

    DWORD free_clusters, free_sectors, total_sectors;
    FATFS* getFreeFs;
    fres = f_getfree("", &free_clusters, &getFreeFs);
 8001062:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001066:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800106a:	4619      	mov	r1, r3
 800106c:	48bc      	ldr	r0, [pc, #752]	; (8001360 <openCalibrationFile+0x368>)
 800106e:	f00c fd3c 	bl	800daea <f_getfree>
 8001072:	4603      	mov	r3, r0
 8001074:	f887 34d3 	strb.w	r3, [r7, #1235]	; 0x4d3
    if (fres != FR_OK) {
 8001078:	f897 34d3 	ldrb.w	r3, [r7, #1235]	; 0x4d3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d013      	beq.n	80010a8 <openCalibrationFile+0xb0>
		myprintf("f_getfree error (%i)\r\n", fres);
 8001080:	f897 34d3 	ldrb.w	r3, [r7, #1235]	; 0x4d3
 8001084:	4619      	mov	r1, r3
 8001086:	48b8      	ldr	r0, [pc, #736]	; (8001368 <openCalibrationFile+0x370>)
 8001088:	f000 fb9a 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001092:	48b2      	ldr	r0, [pc, #712]	; (800135c <openCalibrationFile+0x364>)
 8001094:	f004 fc44 	bl	8005920 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109e:	48af      	ldr	r0, [pc, #700]	; (800135c <openCalibrationFile+0x364>)
 80010a0:	f004 fc3e 	bl	8005920 <HAL_GPIO_WritePin>
  	  	return false;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e192      	b.n	80013ce <openCalibrationFile+0x3d6>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80010a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80010b2:	3b02      	subs	r3, #2
 80010b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80010be:	fb02 f303 	mul.w	r3, r2, r3
 80010c2:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
    free_sectors = free_clusters * getFreeFs->csize;
 80010c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80010d0:	461a      	mov	r2, r3
 80010d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	fb03 f302 	mul.w	r3, r3, r2
 80010dc:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80010e0:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 80010e4:	0859      	lsrs	r1, r3, #1
 80010e6:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 80010ea:	085b      	lsrs	r3, r3, #1
 80010ec:	461a      	mov	r2, r3
 80010ee:	489f      	ldr	r0, [pc, #636]	; (800136c <openCalibrationFile+0x374>)
 80010f0:	f000 fb66 	bl	80017c0 <myprintf>

    fres = f_open(&fil, "cal.txt", FA_READ);
 80010f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010f8:	2201      	movs	r2, #1
 80010fa:	499d      	ldr	r1, [pc, #628]	; (8001370 <openCalibrationFile+0x378>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00b fc91 	bl	800ca24 <f_open>
 8001102:	4603      	mov	r3, r0
 8001104:	f887 34d3 	strb.w	r3, [r7, #1235]	; 0x4d3
    if (fres != FR_OK) {
 8001108:	f897 34d3 	ldrb.w	r3, [r7, #1235]	; 0x4d3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d020      	beq.n	8001152 <openCalibrationFile+0x15a>
		myprintf("f_open error (%i)\r\n");
 8001110:	4898      	ldr	r0, [pc, #608]	; (8001374 <openCalibrationFile+0x37c>)
 8001112:	f000 fb55 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111c:	488f      	ldr	r0, [pc, #572]	; (800135c <openCalibrationFile+0x364>)
 800111e:	f004 fbff 	bl	8005920 <HAL_GPIO_WritePin>
		f_close(&fil);
 8001122:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001126:	4618      	mov	r0, r3
 8001128:	f00c fa59 	bl	800d5de <f_close>
		f_mount(NULL, "", 0);
 800112c:	2200      	movs	r2, #0
 800112e:	498c      	ldr	r1, [pc, #560]	; (8001360 <openCalibrationFile+0x368>)
 8001130:	2000      	movs	r0, #0
 8001132:	f00b fc2f 	bl	800c994 <f_mount>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113c:	4887      	ldr	r0, [pc, #540]	; (800135c <openCalibrationFile+0x364>)
 800113e:	f004 fbef 	bl	8005920 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001148:	4884      	ldr	r0, [pc, #528]	; (800135c <openCalibrationFile+0x364>)
 800114a:	f004 fbe9 	bl	8005920 <HAL_GPIO_WritePin>
  	  	return false;
 800114e:	2300      	movs	r3, #0
 8001150:	e13d      	b.n	80013ce <openCalibrationFile+0x3d6>
    }
    myprintf("I was able to open 'cal.txt' for reading!\r\n");
 8001152:	4889      	ldr	r0, [pc, #548]	; (8001378 <openCalibrationFile+0x380>)
 8001154:	f000 fb34 	bl	80017c0 <myprintf>

    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[64];

    for(int i = 0; i<3; i++){
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800115e:	e120      	b.n	80013a2 <openCalibrationFile+0x3aa>
    	TCHAR* rres = f_gets((TCHAR*)readBuf, 64, &fil);	// přečte celý řádek, pokud nezaplní buffer
 8001160:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2140      	movs	r1, #64	; 0x40
 800116a:	4618      	mov	r0, r3
 800116c:	f00c fd8a 	bl	800dc84 <f_gets>
 8001170:	f8c7 04c4 	str.w	r0, [r7, #1220]	; 0x4c4
		if(rres != 0) {
 8001174:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80d0 	beq.w	800131e <openCalibrationFile+0x326>
 800117e:	466b      	mov	r3, sp
 8001180:	461d      	mov	r5, r3
			myprintf("Read string from 'cal.txt' contents: %s\n\r", readBuf);
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	4619      	mov	r1, r3
 8001188:	487c      	ldr	r0, [pc, #496]	; (800137c <openCalibrationFile+0x384>)
 800118a:	f000 fb19 	bl	80017c0 <myprintf>
			char *data = &readBuf[0];
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
			char d[strlen(data)];
 8001196:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	; 0x4c0
 800119a:	f7ff f823 	bl	80001e4 <strlen>
 800119e:	4604      	mov	r4, r0
 80011a0:	4623      	mov	r3, r4
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 80011a8:	4620      	mov	r0, r4
 80011aa:	f04f 0100 	mov.w	r1, #0
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	00cb      	lsls	r3, r1, #3
 80011b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011bc:	00c2      	lsls	r2, r0, #3
 80011be:	4620      	mov	r0, r4
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	00cb      	lsls	r3, r1, #3
 80011ce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011d2:	00c2      	lsls	r2, r0, #3
 80011d4:	1de3      	adds	r3, r4, #7
 80011d6:	08db      	lsrs	r3, r3, #3
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	ebad 0d03 	sub.w	sp, sp, r3
 80011de:	466b      	mov	r3, sp
 80011e0:	3300      	adds	r3, #0
 80011e2:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
			strcpy(d,data);
 80011e6:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80011ea:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f00d fd0f 	bl	800ec12 <strcpy>
			data = removeSpaces(d);
 80011f4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fc4f 	bl	8001a9c <removeSpaces>
 80011fe:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
			strcpy(d,data);
 8001202:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8001206:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 800120a:	4618      	mov	r0, r3
 800120c:	f00d fd01 	bl	800ec12 <strcpy>
			int delic = strcspn(d,"=");// počet znaků před =
 8001210:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8001214:	495a      	ldr	r1, [pc, #360]	; (8001380 <openCalibrationFile+0x388>)
 8001216:	4618      	mov	r0, r3
 8001218:	f00d fd03 	bl	800ec22 <strcspn>
 800121c:	4603      	mov	r3, r0
 800121e:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4

			if (delic != strlen(d)){	// příkaz rozeznán
 8001222:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8001226:	4618      	mov	r0, r3
 8001228:	f7fe ffdc 	bl	80001e4 <strlen>
 800122c:	4602      	mov	r2, r0
 800122e:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001232:	429a      	cmp	r2, r3
 8001234:	d06c      	beq.n	8001310 <openCalibrationFile+0x318>
				char *key = (char*)malloc(delic+1);	// na konci přidám jene znak pro ukončení strungu
 8001236:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800123a:	3301      	adds	r3, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f00c fe1d 	bl	800de7c <malloc>
 8001242:	4603      	mov	r3, r0
 8001244:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
				memcpy(key,&d,delic);
 8001248:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800124c:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 8001250:	4619      	mov	r1, r3
 8001252:	f8d7 04b0 	ldr.w	r0, [r7, #1200]	; 0x4b0
 8001256:	f00c fe19 	bl	800de8c <memcpy>
				key[delic] = '\0';
 800125a:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800125e:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 8001262:	4413      	add	r3, r2
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
				char *value = (char*)malloc(sizeof(d)-delic+1);
 8001268:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800126c:	1ae3      	subs	r3, r4, r3
 800126e:	3301      	adds	r3, #1
 8001270:	4618      	mov	r0, r3
 8001272:	f00c fe03 	bl	800de7c <malloc>
 8001276:	4603      	mov	r3, r0
 8001278:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
				memcpy(value,&d[delic+1],sizeof(d)-delic);
 800127c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001280:	3301      	adds	r3, #1
 8001282:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 8001286:	18d1      	adds	r1, r2, r3
 8001288:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800128c:	1ae3      	subs	r3, r4, r3
 800128e:	461a      	mov	r2, r3
 8001290:	f8d7 04ac 	ldr.w	r0, [r7, #1196]	; 0x4ac
 8001294:	f00c fdfa 	bl	800de8c <memcpy>
				value[sizeof(d)-delic] = '\0';
 8001298:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800129c:	1ae3      	subs	r3, r4, r3
 800129e:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 80012a2:	4413      	add	r3, r2
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
				if(strcmp(key,"k0") == 0){
 80012a8:	4936      	ldr	r1, [pc, #216]	; (8001384 <openCalibrationFile+0x38c>)
 80012aa:	f8d7 04b0 	ldr.w	r0, [r7, #1200]	; 0x4b0
 80012ae:	f7fe ff8f 	bl	80001d0 <strcmp>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10e      	bne.n	80012d6 <openCalibrationFile+0x2de>
					*k0 = atof(value);
 80012b8:	f8d7 04ac 	ldr.w	r0, [r7, #1196]	; 0x4ac
 80012bc:	f00c fd9a 	bl	800ddf4 <atof>
 80012c0:	ec53 2b10 	vmov	r2, r3, d0
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc9e 	bl	8000c08 <__aeabi_d2f>
 80012cc:	4602      	mov	r2, r0
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	e021      	b.n	800131a <openCalibrationFile+0x322>
				}else if(strcmp(key, "k1") == 0){
 80012d6:	492c      	ldr	r1, [pc, #176]	; (8001388 <openCalibrationFile+0x390>)
 80012d8:	f8d7 04b0 	ldr.w	r0, [r7, #1200]	; 0x4b0
 80012dc:	f7fe ff78 	bl	80001d0 <strcmp>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10e      	bne.n	8001304 <openCalibrationFile+0x30c>
					*k1 = atof(value);
 80012e6:	f8d7 04ac 	ldr.w	r0, [r7, #1196]	; 0x4ac
 80012ea:	f00c fd83 	bl	800ddf4 <atof>
 80012ee:	ec53 2b10 	vmov	r2, r3, d0
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fc87 	bl	8000c08 <__aeabi_d2f>
 80012fa:	4602      	mov	r2, r0
 80012fc:	463b      	mov	r3, r7
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e00a      	b.n	800131a <openCalibrationFile+0x322>
				}else{
					myprintf("\n\rKey \"%s\" not recognized!\n\r",key);
 8001304:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 8001308:	4820      	ldr	r0, [pc, #128]	; (800138c <openCalibrationFile+0x394>)
 800130a:	f000 fa59 	bl	80017c0 <myprintf>
 800130e:	e004      	b.n	800131a <openCalibrationFile+0x322>
				}
			}else{
				myprintf("\n\rDidnt found \"=\" on line %i",i);
 8001310:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 8001314:	481e      	ldr	r0, [pc, #120]	; (8001390 <openCalibrationFile+0x398>)
 8001316:	f000 fa53 	bl	80017c0 <myprintf>
 800131a:	46ad      	mov	sp, r5
 800131c:	e03c      	b.n	8001398 <openCalibrationFile+0x3a0>
				HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
				return false;
				*/
			}
		} else {
			myprintf("f_gets error (%i)\r\n", fres);
 800131e:	f897 34d3 	ldrb.w	r3, [r7, #1235]	; 0x4d3
 8001322:	4619      	mov	r1, r3
 8001324:	481b      	ldr	r0, [pc, #108]	; (8001394 <openCalibrationFile+0x39c>)
 8001326:	f000 fa4b 	bl	80017c0 <myprintf>
			f_close(&fil);
 800132a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800132e:	4618      	mov	r0, r3
 8001330:	f00c f955 	bl	800d5de <f_close>
			f_mount(NULL, "", 0);
 8001334:	2200      	movs	r2, #0
 8001336:	490a      	ldr	r1, [pc, #40]	; (8001360 <openCalibrationFile+0x368>)
 8001338:	2000      	movs	r0, #0
 800133a:	f00b fb2b 	bl	800c994 <f_mount>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <openCalibrationFile+0x364>)
 8001346:	f004 faeb 	bl	8005920 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <openCalibrationFile+0x364>)
 8001352:	f004 fae5 	bl	8005920 <HAL_GPIO_WritePin>
			return false;
 8001356:	2300      	movs	r3, #0
 8001358:	e039      	b.n	80013ce <openCalibrationFile+0x3d6>
 800135a:	bf00      	nop
 800135c:	48001000 	.word	0x48001000
 8001360:	08012390 	.word	0x08012390
 8001364:	08012394 	.word	0x08012394
 8001368:	080123ac 	.word	0x080123ac
 800136c:	080123c4 	.word	0x080123c4
 8001370:	0801240c 	.word	0x0801240c
 8001374:	08012440 	.word	0x08012440
 8001378:	080124a4 	.word	0x080124a4
 800137c:	080124d0 	.word	0x080124d0
 8001380:	080124fc 	.word	0x080124fc
 8001384:	08012500 	.word	0x08012500
 8001388:	08012504 	.word	0x08012504
 800138c:	08012508 	.word	0x08012508
 8001390:	08012528 	.word	0x08012528
 8001394:	08012548 	.word	0x08012548
    for(int i = 0; i<3; i++){
 8001398:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800139c:	3301      	adds	r3, #1
 800139e:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 80013a2:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	f77f aeda 	ble.w	8001160 <openCalibrationFile+0x168>
		}
    }
    f_close(&fil);
 80013ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013b0:	4618      	mov	r0, r3
 80013b2:	f00c f914 	bl	800d5de <f_close>
    f_mount(NULL, "", 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <openCalibrationFile+0x3e0>)
 80013ba:	2000      	movs	r0, #0
 80013bc:	f00b faea 	bl	800c994 <f_mount>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);// orange led to indicate SD activity
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <openCalibrationFile+0x3e4>)
 80013c8:	f004 faaa 	bl	8005920 <HAL_GPIO_WritePin>
    return true;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	f507 679b 	add.w	r7, r7, #1240	; 0x4d8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bdb0      	pop	{r4, r5, r7, pc}
 80013d8:	08012390 	.word	0x08012390
 80013dc:	48001000 	.word	0x48001000

080013e0 <saveConfig>:
bool saveConfig(uint8_t mode, uint8_t temp, uint8_t hum){
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	f2ad 5d04 	subw	sp, sp, #1284	; 0x504
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4604      	mov	r4, r0
 80013ea:	4608      	mov	r0, r1
 80013ec:	4611      	mov	r1, r2
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	4622      	mov	r2, r4
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	1dbb      	adds	r3, r7, #6
 80013f6:	4602      	mov	r2, r0
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	1d7b      	adds	r3, r7, #5
 80013fc:	460a      	mov	r2, r1
 80013fe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_SET);// orange led to indicate data logging
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001406:	489f      	ldr	r0, [pc, #636]	; (8001684 <saveConfig+0x2a4>)
 8001408:	f004 fa8a 	bl	8005920 <HAL_GPIO_WritePin>
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800140c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001410:	2201      	movs	r2, #1
 8001412:	499d      	ldr	r1, [pc, #628]	; (8001688 <saveConfig+0x2a8>)
 8001414:	4618      	mov	r0, r3
 8001416:	f00b fabd 	bl	800c994 <f_mount>
 800141a:	4603      	mov	r3, r0
 800141c:	f887 34ff 	strb.w	r3, [r7, #1279]	; 0x4ff
	if (fres != FR_OK) {
 8001420:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8001424:	2b00      	cmp	r3, #0
 8001426:	d018      	beq.n	800145a <saveConfig+0x7a>
		myprintf("f_mount error (%i)\r\n", fres);
 8001428:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 800142c:	4619      	mov	r1, r3
 800142e:	4897      	ldr	r0, [pc, #604]	; (800168c <saveConfig+0x2ac>)
 8001430:	f000 f9c6 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143a:	4892      	ldr	r0, [pc, #584]	; (8001684 <saveConfig+0x2a4>)
 800143c:	f004 fa70 	bl	8005920 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001446:	488f      	ldr	r0, [pc, #572]	; (8001684 <saveConfig+0x2a4>)
 8001448:	f004 fa6a 	bl	8005920 <HAL_GPIO_WritePin>
		f_mount(NULL, "", 0);
 800144c:	2200      	movs	r2, #0
 800144e:	498e      	ldr	r1, [pc, #568]	; (8001688 <saveConfig+0x2a8>)
 8001450:	2000      	movs	r0, #0
 8001452:	f00b fa9f 	bl	800c994 <f_mount>
		return false;
 8001456:	2300      	movs	r3, #0
 8001458:	e10e      	b.n	8001678 <saveConfig+0x298>
	}

	DWORD free_clusters, free_sectors, total_sectors;
	FATFS* getFreeFs;
	fres = f_getfree("", &free_clusters, &getFreeFs);
 800145a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800145e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001462:	4619      	mov	r1, r3
 8001464:	4888      	ldr	r0, [pc, #544]	; (8001688 <saveConfig+0x2a8>)
 8001466:	f00c fb40 	bl	800daea <f_getfree>
 800146a:	4603      	mov	r3, r0
 800146c:	f887 34ff 	strb.w	r3, [r7, #1279]	; 0x4ff
	if (fres != FR_OK) {
 8001470:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <saveConfig+0xc0>
		myprintf("f_getfree error (%i)\r\n", fres);
 8001478:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 800147c:	4619      	mov	r1, r3
 800147e:	4884      	ldr	r0, [pc, #528]	; (8001690 <saveConfig+0x2b0>)
 8001480:	f000 f99e 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800148a:	487e      	ldr	r0, [pc, #504]	; (8001684 <saveConfig+0x2a4>)
 800148c:	f004 fa48 	bl	8005920 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001496:	487b      	ldr	r0, [pc, #492]	; (8001684 <saveConfig+0x2a4>)
 8001498:	f004 fa42 	bl	8005920 <HAL_GPIO_WritePin>
		return false;
 800149c:	2300      	movs	r3, #0
 800149e:	e0eb      	b.n	8001678 <saveConfig+0x298>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80014a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80014aa:	3b02      	subs	r3, #2
 80014ac:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80014b6:	fb02 f303 	mul.w	r3, r2, r3
 80014ba:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
	free_sectors = free_clusters * getFreeFs->csize;
 80014be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80014c8:	461a      	mov	r2, r3
 80014ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	fb03 f302 	mul.w	r3, r3, r2
 80014d4:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
	myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80014d8:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 80014dc:	0859      	lsrs	r1, r3, #1
 80014de:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 80014e2:	085b      	lsrs	r3, r3, #1
 80014e4:	461a      	mov	r2, r3
 80014e6:	486b      	ldr	r0, [pc, #428]	; (8001694 <saveConfig+0x2b4>)
 80014e8:	f000 f96a 	bl	80017c0 <myprintf>

	fres = f_open(&fil, "config.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80014ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014f0:	220a      	movs	r2, #10
 80014f2:	4969      	ldr	r1, [pc, #420]	; (8001698 <saveConfig+0x2b8>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00b fa95 	bl	800ca24 <f_open>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f887 34ff 	strb.w	r3, [r7, #1279]	; 0x4ff
	if(fres == FR_OK) {
 8001500:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8001504:	2b00      	cmp	r3, #0
 8001506:	d163      	bne.n	80015d0 <saveConfig+0x1f0>
		if(fres != FR_OK){
			myprintf("f_lseek error (%i)\r\n", fres);
			f_close(&fil);
			f_mount(NULL, "", 0);
		}*/
		myprintf("I was able to open 'config.txt' for writing\r\n");
 8001508:	4864      	ldr	r0, [pc, #400]	; (800169c <saveConfig+0x2bc>)
 800150a:	f000 f959 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
		return false;
	}

	BYTE readBuf[128];
	memset(readBuf,0,128);
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f00c fcc6 	bl	800dea8 <memset>
	//float *temp, float *hum, uint8_t *wcup, uint8_t *wrez, uint16_t *soil1, uint16_t *soil2
	char *write_buffer = (char*)malloc(128);
 800151c:	2080      	movs	r0, #128	; 0x80
 800151e:	f00c fcad 	bl	800de7c <malloc>
 8001522:	4603      	mov	r3, r0
 8001524:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
	*write_buffer = '\0';
 8001528:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
	sprintf(write_buffer+strlen(write_buffer),"mode = %i \n",mode);
 8001530:	f8d7 04f0 	ldr.w	r0, [r7, #1264]	; 0x4f0
 8001534:	f7fe fe56 	bl	80001e4 <strlen>
 8001538:	4602      	mov	r2, r0
 800153a:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 800153e:	1898      	adds	r0, r3, r2
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4956      	ldr	r1, [pc, #344]	; (80016a0 <saveConfig+0x2c0>)
 8001548:	f00d fb34 	bl	800ebb4 <siprintf>
	sprintf(write_buffer+strlen(write_buffer),"humidity = %i \n",hum);
 800154c:	f8d7 04f0 	ldr.w	r0, [r7, #1264]	; 0x4f0
 8001550:	f7fe fe48 	bl	80001e4 <strlen>
 8001554:	4602      	mov	r2, r0
 8001556:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 800155a:	1898      	adds	r0, r3, r2
 800155c:	1d7b      	adds	r3, r7, #5
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4950      	ldr	r1, [pc, #320]	; (80016a4 <saveConfig+0x2c4>)
 8001564:	f00d fb26 	bl	800ebb4 <siprintf>
	sprintf(write_buffer+strlen(write_buffer),"temperature = %i \n\r\0",temp);
 8001568:	f8d7 04f0 	ldr.w	r0, [r7, #1264]	; 0x4f0
 800156c:	f7fe fe3a 	bl	80001e4 <strlen>
 8001570:	4602      	mov	r2, r0
 8001572:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8001576:	1898      	adds	r0, r3, r2
 8001578:	1dbb      	adds	r3, r7, #6
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	494a      	ldr	r1, [pc, #296]	; (80016a8 <saveConfig+0x2c8>)
 8001580:	f00d fb18 	bl	800ebb4 <siprintf>

	//Copy in a string
	strncpy((char*)readBuf, write_buffer, strlen(write_buffer));
 8001584:	f8d7 04f0 	ldr.w	r0, [r7, #1264]	; 0x4f0
 8001588:	f7fe fe2c 	bl	80001e4 <strlen>
 800158c:	4602      	mov	r2, r0
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 8001596:	4618      	mov	r0, r3
 8001598:	f00d fb54 	bl	800ec44 <strncpy>
	UINT bytesWrote;
	myprintf(readBuf);
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f90d 	bl	80017c0 <myprintf>
	fres = f_write(&fil, readBuf, strlen(write_buffer), &bytesWrote);
 80015a6:	f8d7 04f0 	ldr.w	r0, [r7, #1264]	; 0x4f0
 80015aa:	f7fe fe1b 	bl	80001e4 <strlen>
 80015ae:	4602      	mov	r2, r0
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	f107 010c 	add.w	r1, r7, #12
 80015b8:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80015bc:	f00b fda8 	bl	800d110 <f_write>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f887 34ff 	strb.w	r3, [r7, #1279]	; 0x4ff
	if(fres == FR_OK) {
 80015c6:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d137      	bne.n	800163e <saveConfig+0x25e>
 80015ce:	e01d      	b.n	800160c <saveConfig+0x22c>
		myprintf("f_open error (%i)\r\n", fres);
 80015d0:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 80015d4:	4619      	mov	r1, r3
 80015d6:	4835      	ldr	r0, [pc, #212]	; (80016ac <saveConfig+0x2cc>)
 80015d8:	f000 f8f2 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e2:	4828      	ldr	r0, [pc, #160]	; (8001684 <saveConfig+0x2a4>)
 80015e4:	f004 f99c 	bl	8005920 <HAL_GPIO_WritePin>
		f_close(&fil);
 80015e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00b fff6 	bl	800d5de <f_close>
		f_mount(NULL, "", 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	4924      	ldr	r1, [pc, #144]	; (8001688 <saveConfig+0x2a8>)
 80015f6:	2000      	movs	r0, #0
 80015f8:	f00b f9cc 	bl	800c994 <f_mount>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001602:	4820      	ldr	r0, [pc, #128]	; (8001684 <saveConfig+0x2a4>)
 8001604:	f004 f98c 	bl	8005920 <HAL_GPIO_WritePin>
		return false;
 8001608:	2300      	movs	r3, #0
 800160a:	e035      	b.n	8001678 <saveConfig+0x298>
		myprintf("Wrote %i bytes to 'config.txt'!\r\n", bytesWrote);
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	4826      	ldr	r0, [pc, #152]	; (80016b0 <saveConfig+0x2d0>)
 8001616:	f000 f8d3 	bl	80017c0 <myprintf>
		f_close(&fil);
		f_mount(NULL, "", 0);
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
		return false;
	}
	f_close(&fil);
 800161a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800161e:	4618      	mov	r0, r3
 8001620:	f00b ffdd 	bl	800d5de <f_close>
	f_mount(NULL, "", 0);
 8001624:	2200      	movs	r2, #0
 8001626:	4918      	ldr	r1, [pc, #96]	; (8001688 <saveConfig+0x2a8>)
 8001628:	2000      	movs	r0, #0
 800162a:	f00b f9b3 	bl	800c994 <f_mount>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);// orange led to indicate data logging
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001634:	4813      	ldr	r0, [pc, #76]	; (8001684 <saveConfig+0x2a4>)
 8001636:	f004 f973 	bl	8005920 <HAL_GPIO_WritePin>
	return true;
 800163a:	2301      	movs	r3, #1
 800163c:	e01c      	b.n	8001678 <saveConfig+0x298>
		myprintf("f_write error (%i)\r\n",fres);
 800163e:	f897 34ff 	ldrb.w	r3, [r7, #1279]	; 0x4ff
 8001642:	4619      	mov	r1, r3
 8001644:	481b      	ldr	r0, [pc, #108]	; (80016b4 <saveConfig+0x2d4>)
 8001646:	f000 f8bb 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 800164a:	2201      	movs	r2, #1
 800164c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <saveConfig+0x2a4>)
 8001652:	f004 f965 	bl	8005920 <HAL_GPIO_WritePin>
		f_close(&fil);
 8001656:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800165a:	4618      	mov	r0, r3
 800165c:	f00b ffbf 	bl	800d5de <f_close>
		f_mount(NULL, "", 0);
 8001660:	2200      	movs	r2, #0
 8001662:	4909      	ldr	r1, [pc, #36]	; (8001688 <saveConfig+0x2a8>)
 8001664:	2000      	movs	r0, #0
 8001666:	f00b f995 	bl	800c994 <f_mount>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <saveConfig+0x2a4>)
 8001672:	f004 f955 	bl	8005920 <HAL_GPIO_WritePin>
		return false;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	f207 5704 	addw	r7, r7, #1284	; 0x504
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}
 8001682:	bf00      	nop
 8001684:	48001000 	.word	0x48001000
 8001688:	08012390 	.word	0x08012390
 800168c:	08012394 	.word	0x08012394
 8001690:	080123ac 	.word	0x080123ac
 8001694:	080123c4 	.word	0x080123c4
 8001698:	0801255c 	.word	0x0801255c
 800169c:	08012568 	.word	0x08012568
 80016a0:	08012598 	.word	0x08012598
 80016a4:	080125a4 	.word	0x080125a4
 80016a8:	080125b4 	.word	0x080125b4
 80016ac:	08012440 	.word	0x08012440
 80016b0:	080125cc 	.word	0x080125cc
 80016b4:	0801248c 	.word	0x0801248c

080016b8 <bcdToDec>:
uint8_t bcdToDec(uint8_t val){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	return RTC_Bcd2ToByte(val);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f006 fead 	bl	8008424 <RTC_Bcd2ToByte>
 80016ca:	4603      	mov	r3, r0
	return((val/10*10)+(val%16));
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <decToBcd>:
uint8_t decToBcd(uint8_t val){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	return RTC_ByteToBcd2(val);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f006 fe81 	bl	80083e8 <RTC_ByteToBcd2>
 80016e6:	4603      	mov	r3, r0
	return ((val/10*10)+(val%10));
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_UART_RxCpltCallback>:
		HAL_UART_Receive_IT(&huart1,&RXByte,1);
	}else{
		myprintf("UART is RX busy!");
	}*/
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_UART_RxCpltCallback+0x2c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d108      	bne.n	8001714 <HAL_UART_RxCpltCallback+0x24>
		// !!!!!!!!!!! POZOR .. nikdy nesmím v callbacku pro RX vysílat TX !!!!!!!!
		// jinak se podělají zprávy posílané z stm
		//HAL_UART_Transmit(&huart1, (uint8_t*)RXByte, 1, -1);//echo
		strcat(&RXBuffer,&RXByte);
 8001702:	4907      	ldr	r1, [pc, #28]	; (8001720 <HAL_UART_RxCpltCallback+0x30>)
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <HAL_UART_RxCpltCallback+0x34>)
 8001706:	f00d fa75 	bl	800ebf4 <strcat>
		HAL_UART_Receive_IT(&huart1,&RXByte,1);
 800170a:	2201      	movs	r2, #1
 800170c:	4904      	ldr	r1, [pc, #16]	; (8001720 <HAL_UART_RxCpltCallback+0x30>)
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <HAL_UART_RxCpltCallback+0x38>)
 8001710:	f007 fbaa 	bl	8008e68 <HAL_UART_Receive_IT>
	}
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40013800 	.word	0x40013800
 8001720:	200005cc 	.word	0x200005cc
 8001724:	200005f4 	.word	0x200005f4
 8001728:	200004c4 	.word	0x200004c4

0800172c <uart_buffering>:
void uart_buffering(){
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
	// ze všech nasbíraných dat se vezme pouze jeden řádek
	// předpokládám, že během průchodu jedné smyčky nepošlu dva příkazy
	if(strlen(RXLineBuffer)+strlen(RXBuffer) > 128){
 8001732:	481d      	ldr	r0, [pc, #116]	; (80017a8 <uart_buffering+0x7c>)
 8001734:	f7fe fd56 	bl	80001e4 <strlen>
 8001738:	4604      	mov	r4, r0
 800173a:	481c      	ldr	r0, [pc, #112]	; (80017ac <uart_buffering+0x80>)
 800173c:	f7fe fd52 	bl	80001e4 <strlen>
 8001740:	4603      	mov	r3, r0
 8001742:	4423      	add	r3, r4
 8001744:	2b80      	cmp	r3, #128	; 0x80
 8001746:	d905      	bls.n	8001754 <uart_buffering+0x28>
		myprintf("Buffer overflow!\n\r");
 8001748:	4819      	ldr	r0, [pc, #100]	; (80017b0 <uart_buffering+0x84>)
 800174a:	f000 f839 	bl	80017c0 <myprintf>
		RXLineBuffer[0] = '\0';
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <uart_buffering+0x7c>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
	}
	strcat(&RXLineBuffer,&RXBuffer);
 8001754:	4915      	ldr	r1, [pc, #84]	; (80017ac <uart_buffering+0x80>)
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <uart_buffering+0x7c>)
 8001758:	f00d fa4c 	bl	800ebf4 <strcat>
	RXBuffer[0] = '\0';
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <uart_buffering+0x80>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]

	int index = strcspn(RXLineBuffer,"\n\r");// počet znaků před
 8001762:	4914      	ldr	r1, [pc, #80]	; (80017b4 <uart_buffering+0x88>)
 8001764:	4810      	ldr	r0, [pc, #64]	; (80017a8 <uart_buffering+0x7c>)
 8001766:	f00d fa5c 	bl	800ec22 <strcspn>
 800176a:	4603      	mov	r3, r0
 800176c:	607b      	str	r3, [r7, #4]
	if(index != strlen(RXLineBuffer)){
 800176e:	480e      	ldr	r0, [pc, #56]	; (80017a8 <uart_buffering+0x7c>)
 8001770:	f7fe fd38 	bl	80001e4 <strlen>
 8001774:	4602      	mov	r2, r0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	429a      	cmp	r2, r3
 800177a:	d011      	beq.n	80017a0 <uart_buffering+0x74>
		//buffer obsahuje \n\r
		if(!RXDone){
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <uart_buffering+0x8c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f083 0301 	eor.w	r3, r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <uart_buffering+0x6e>
			strcpy(&RXLine,&RXLineBuffer);
 800178c:	4906      	ldr	r1, [pc, #24]	; (80017a8 <uart_buffering+0x7c>)
 800178e:	480b      	ldr	r0, [pc, #44]	; (80017bc <uart_buffering+0x90>)
 8001790:	f00d fa3f 	bl	800ec12 <strcpy>
			RXDone = true;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <uart_buffering+0x8c>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
			//myprintf(RXLine);
		}
		RXLineBuffer[0] = '\0';
 800179a:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <uart_buffering+0x7c>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
		}
		RXDone = true;
		RXBuffer[0] = '\0';
		//HAL_UART_AbortReceive(&huart1);
	}*/
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}
 80017a8:	20000548 	.word	0x20000548
 80017ac:	200005f4 	.word	0x200005f4
 80017b0:	080125f0 	.word	0x080125f0
 80017b4:	08012604 	.word	0x08012604
 80017b8:	20000218 	.word	0x20000218
 80017bc:	20000674 	.word	0x20000674

080017c0 <myprintf>:

void myprintf(const char *fmt, ...) {
 80017c0:	b40f      	push	{r0, r1, r2, r3}
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d6:	480b      	ldr	r0, [pc, #44]	; (8001804 <myprintf+0x44>)
 80017d8:	f00e f94a 	bl	800fa70 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80017dc:	4809      	ldr	r0, [pc, #36]	; (8001804 <myprintf+0x44>)
 80017de:	f7fe fd01 	bl	80001e4 <strlen>
 80017e2:	4603      	mov	r3, r0
 80017e4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ee:	4905      	ldr	r1, [pc, #20]	; (8001804 <myprintf+0x44>)
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <myprintf+0x48>)
 80017f2:	f007 faa5 	bl	8008d40 <HAL_UART_Transmit>

}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001800:	b004      	add	sp, #16
 8001802:	4770      	bx	lr
 8001804:	20000220 	.word	0x20000220
 8001808:	200004c4 	.word	0x200004c4

0800180c <setupSHT>:
sht3x_handle_t setupSHT(){
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	// Create the handle for the sensor.
	sht3x_handle_t handle = {
 8001814:	4a13      	ldr	r2, [pc, #76]	; (8001864 <setupSHT+0x58>)
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800181e:	e883 0003 	stmia.w	r3, {r0, r1}
	  .i2c_handle = &hi2c1,
	  .device_address = SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_HIGH
	};

	// Initialise sensor (tests connection by reading the status register).
	if (!sht3x_init(&handle)) {
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4618      	mov	r0, r3
 8001828:	f002 f804 	bl	8003834 <sht3x_init>
 800182c:	4603      	mov	r3, r0
 800182e:	f083 0301 	eor.w	r3, r3, #1
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <setupSHT+0x3e>
	  myprintf("SHT3x access failed.\n\r");
 8001838:	480b      	ldr	r0, [pc, #44]	; (8001868 <setupSHT+0x5c>)
 800183a:	f7ff ffc1 	bl	80017c0 <myprintf>
	  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 800183e:	2201      	movs	r2, #1
 8001840:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001844:	4809      	ldr	r0, [pc, #36]	; (800186c <setupSHT+0x60>)
 8001846:	f004 f86b 	bl	8005920 <HAL_GPIO_WritePin>
	}
	return handle;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	461a      	mov	r2, r3
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001856:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	08012620 	.word	0x08012620
 8001868:	08012608 	.word	0x08012608
 800186c:	48001000 	.word	0x48001000

08001870 <readData>:
void readData(sht3x_handle_t *handle, float *temp, float *hum, uint8_t *wcup, uint8_t *wrez, float *soil1, float *soil2){
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
	// teplota ve stupních, hum v %
	sht3x_read_temperature_and_humidity(handle, temp, hum);
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f002 f816 	bl	80038b4 <sht3x_read_temperature_and_humidity>
	if(abs(*temp) < 100){
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001892:	ee17 3a90 	vmov	r3, s15
 8001896:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800189a:	db18      	blt.n	80018ce <readData+0x5e>
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a6:	ee17 3a90 	vmov	r3, s15
 80018aa:	2b63      	cmp	r3, #99	; 0x63
 80018ac:	dc0f      	bgt.n	80018ce <readData+0x5e>
		*temp = k0_temp + k1_temp*(*temp);	// kalibřaní křivka
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	ed93 7a00 	vldr	s14, [r3]
 80018b4:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <readData+0x1f4>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018be:	4b6a      	ldr	r3, [pc, #424]	; (8001a68 <readData+0x1f8>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	edc3 7a00 	vstr	s15, [r3]
	}
	// digitální vstupy - miska, rezervoár
	// nejdříve se musí zapnout napáení květináče
	HAL_GPIO_WritePin(pwr_GPIO_Port,pwr_Pin,SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2104      	movs	r1, #4
 80018d2:	4866      	ldr	r0, [pc, #408]	; (8001a6c <readData+0x1fc>)
 80018d4:	f004 f824 	bl	8005920 <HAL_GPIO_WritePin>
	HAL_Delay(50);// pro jistotu chvilku počkám, aby vše naběhlo
 80018d8:	2032      	movs	r0, #50	; 0x32
 80018da:	f002 fc35 	bl	8004148 <HAL_Delay>
	if(!HAL_GPIO_ReadPin(cup_med_GPIO_Port,cup_med_Pin)){
 80018de:	2101      	movs	r1, #1
 80018e0:	4863      	ldr	r0, [pc, #396]	; (8001a70 <readData+0x200>)
 80018e2:	f004 f805 	bl	80058f0 <HAL_GPIO_ReadPin>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10e      	bne.n	800190a <readData+0x9a>
		if(!HAL_GPIO_ReadPin(cup_high_GPIO_Port,cup_high_Pin)){
 80018ec:	2102      	movs	r1, #2
 80018ee:	4860      	ldr	r0, [pc, #384]	; (8001a70 <readData+0x200>)
 80018f0:	f003 fffe 	bl	80058f0 <HAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d103      	bne.n	8001902 <readData+0x92>
			*wcup = 2;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2202      	movs	r2, #2
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e006      	b.n	8001910 <readData+0xa0>
		}else{
			*wcup = 1;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	e002      	b.n	8001910 <readData+0xa0>
		}
	}else{
		*wcup = 0;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
	}
	if(!HAL_GPIO_ReadPin(rez_med_GPIO_Port,rez_med_Pin)){
 8001910:	2104      	movs	r1, #4
 8001912:	4857      	ldr	r0, [pc, #348]	; (8001a70 <readData+0x200>)
 8001914:	f003 ffec 	bl	80058f0 <HAL_GPIO_ReadPin>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10e      	bne.n	800193c <readData+0xcc>
		if(!HAL_GPIO_ReadPin(rez_high_GPIO_Port,rez_high_Pin)){
 800191e:	2108      	movs	r1, #8
 8001920:	4853      	ldr	r0, [pc, #332]	; (8001a70 <readData+0x200>)
 8001922:	f003 ffe5 	bl	80058f0 <HAL_GPIO_ReadPin>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d103      	bne.n	8001934 <readData+0xc4>
			*wrez = 2;
 800192c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	e006      	b.n	8001942 <readData+0xd2>
		}else{
			*wrez = 1;
 8001934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e002      	b.n	8001942 <readData+0xd2>
		}
	}else{
		*wrez = 0;
 800193c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]

	// Soil adc humidities
	// Get ADC value
	int adc1;
	int adc2;
	if( HAL_ADC_Start(&hadc1) != HAL_OK){
 8001942:	484c      	ldr	r0, [pc, #304]	; (8001a74 <readData+0x204>)
 8001944:	f002 fe04 	bl	8004550 <HAL_ADC_Start>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <readData+0xe6>
		myprintf("HAL ADC1 Start fucked up!\n\r");
 800194e:	484a      	ldr	r0, [pc, #296]	; (8001a78 <readData+0x208>)
 8001950:	f7ff ff36 	bl	80017c0 <myprintf>
		return;
 8001954:	e083      	b.n	8001a5e <readData+0x1ee>
	}
	if( HAL_ADC_Start(&hadc2) != HAL_OK){
 8001956:	4849      	ldr	r0, [pc, #292]	; (8001a7c <readData+0x20c>)
 8001958:	f002 fdfa 	bl	8004550 <HAL_ADC_Start>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <readData+0xfa>
			myprintf("HAL ADC2 Start fucked up!\n\r");
 8001962:	4847      	ldr	r0, [pc, #284]	; (8001a80 <readData+0x210>)
 8001964:	f7ff ff2c 	bl	80017c0 <myprintf>
			return;
 8001968:	e079      	b.n	8001a5e <readData+0x1ee>
	}
	if(HAL_ADC_PollForConversion(&hadc1, 10) != HAL_OK){
 800196a:	210a      	movs	r1, #10
 800196c:	4841      	ldr	r0, [pc, #260]	; (8001a74 <readData+0x204>)
 800196e:	f002 ff05 	bl	800477c <HAL_ADC_PollForConversion>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <readData+0x110>
		myprintf("HAL ADC1 Poll fucked up!\n\r");
 8001978:	4842      	ldr	r0, [pc, #264]	; (8001a84 <readData+0x214>)
 800197a:	f7ff ff21 	bl	80017c0 <myprintf>
		return;
 800197e:	e06e      	b.n	8001a5e <readData+0x1ee>
	}
	adc1 = HAL_ADC_GetValue(&hadc1);
 8001980:	483c      	ldr	r0, [pc, #240]	; (8001a74 <readData+0x204>)
 8001982:	f002 fffd 	bl	8004980 <HAL_ADC_GetValue>
 8001986:	4603      	mov	r3, r0
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(HAL_ADC_PollForConversion(&hadc2, 10) != HAL_OK){
 800198a:	210a      	movs	r1, #10
 800198c:	483b      	ldr	r0, [pc, #236]	; (8001a7c <readData+0x20c>)
 800198e:	f002 fef5 	bl	800477c <HAL_ADC_PollForConversion>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <readData+0x130>
		myprintf("HAL ADC2 Poll fucked up!\n\r");
 8001998:	483b      	ldr	r0, [pc, #236]	; (8001a88 <readData+0x218>)
 800199a:	f7ff ff11 	bl	80017c0 <myprintf>
		return;
 800199e:	e05e      	b.n	8001a5e <readData+0x1ee>
	}
	adc2 = HAL_ADC_GetValue(&hadc2);
 80019a0:	4836      	ldr	r0, [pc, #216]	; (8001a7c <readData+0x20c>)
 80019a2:	f002 ffed 	bl	8004980 <HAL_ADC_GetValue>
 80019a6:	4603      	mov	r3, r0
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
	float u_meas_1 = (adc1/4096.0f)*3.3f;	// !!!!!!!!! musím označit, že násobím flouty!!!!! jinak tady program zmarzne
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b4:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001a8c <readData+0x21c>
 80019b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019bc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001a90 <readData+0x220>
 80019c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float u_meas_2 = (adc2/4096.0f)*3.3f;
 80019c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d2:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001a8c <readData+0x21c>
 80019d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019da:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001a90 <readData+0x220>
 80019de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e2:	edc7 7a08 	vstr	s15, [r7, #32]
	float u_2 = 2.0f;		// h = 0%
 80019e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ea:	61fb      	str	r3, [r7, #28]
	float u_1 = 0.6f;	// h = 100%
 80019ec:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <readData+0x224>)
 80019ee:	61bb      	str	r3, [r7, #24]
	float a = 100.0f/(u_1 - u_2);	// rovnice přímky
 80019f0:	ed97 7a06 	vldr	s14, [r7, #24]
 80019f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80019f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019fc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001a98 <readData+0x228>
 8001a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a04:	edc7 7a05 	vstr	s15, [r7, #20]
	float b = 100.0f-a*u_1;
 8001a08:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a14:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001a98 <readData+0x228>
 8001a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1c:	edc7 7a04 	vstr	s15, [r7, #16]
	*soil1 = a*u_meas_1 + b;
 8001a20:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a36:	edc3 7a00 	vstr	s15, [r3]
	*soil2 = a*u_meas_2 + b;
 8001a3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a50:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(pwr_GPIO_Port,pwr_Pin,SET);
 8001a54:	2201      	movs	r2, #1
 8001a56:	2104      	movs	r1, #4
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <readData+0x1fc>)
 8001a5a:	f003 ff61 	bl	8005920 <HAL_GPIO_WritePin>
	/*
	// Enable heater for two seconds.
	sht3x_set_header_enable(&handle, true);
	HAL_Delay(2000);
	sht3x_set_header_enable(&handle, false);*/
}
 8001a5e:	3730      	adds	r7, #48	; 0x30
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000000 	.word	0x20000000
 8001a68:	2000021c 	.word	0x2000021c
 8001a6c:	48001400 	.word	0x48001400
 8001a70:	48000800 	.word	0x48000800
 8001a74:	20000474 	.word	0x20000474
 8001a78:	08012628 	.word	0x08012628
 8001a7c:	200003c4 	.word	0x200003c4
 8001a80:	08012644 	.word	0x08012644
 8001a84:	08012660 	.word	0x08012660
 8001a88:	0801267c 	.word	0x0801267c
 8001a8c:	45800000 	.word	0x45800000
 8001a90:	40533333 	.word	0x40533333
 8001a94:	3f19999a 	.word	0x3f19999a
 8001a98:	42c80000 	.word	0x42c80000

08001a9c <removeSpaces>:
char* removeSpaces(char *str){
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    int i =0,j=0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
    while(str[i]){
 8001aac:	e013      	b.n	8001ad6 <removeSpaces+0x3a>
        if(str[i] != ' '){
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	d00a      	beq.n	8001ad0 <removeSpaces+0x34>
            str[j++] = str[i];
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	441a      	add	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c59      	adds	r1, r3, #1
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	440b      	add	r3, r1
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
    while(str[i]){
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1e5      	bne.n	8001aae <removeSpaces+0x12>
    }
    str[j] = '\0';
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
    return str;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <openConfigFile>:
bool openConfigFile(uint8_t *mode, uint8_t *hum, uint8_t *temp){
 8001afc:	b5b0      	push	{r4, r5, r7, lr}
 8001afe:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	6018      	str	r0, [r3, #0]
 8001b0a:	f107 0308 	add.w	r3, r7, #8
 8001b0e:	6019      	str	r1, [r3, #0]
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	601a      	str	r2, [r3, #0]
	//!!!!!!!!!!!!! POZOR .. v souboru nesmí být na začátku prázdné řádky!!!!!
	// .. teda .. je třeba odzkoušet .. možná jsem to akorát opravil
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_SET);// orange led to indicate SD activity
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b1a:	48d8      	ldr	r0, [pc, #864]	; (8001e7c <openConfigFile+0x380>)
 8001b1c:	f003 ff00 	bl	8005920 <HAL_GPIO_WritePin>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001b20:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001b24:	2201      	movs	r2, #1
 8001b26:	49d6      	ldr	r1, [pc, #856]	; (8001e80 <openConfigFile+0x384>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f00a ff33 	bl	800c994 <f_mount>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
    if (fres != FR_OK) {
 8001b34:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d018      	beq.n	8001b6e <openConfigFile+0x72>
		myprintf("f_mount error (%i)\r\n", fres);
 8001b3c:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8001b40:	4619      	mov	r1, r3
 8001b42:	48d0      	ldr	r0, [pc, #832]	; (8001e84 <openConfigFile+0x388>)
 8001b44:	f7ff fe3c 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4e:	48cb      	ldr	r0, [pc, #812]	; (8001e7c <openConfigFile+0x380>)
 8001b50:	f003 fee6 	bl	8005920 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5a:	48c8      	ldr	r0, [pc, #800]	; (8001e7c <openConfigFile+0x380>)
 8001b5c:	f003 fee0 	bl	8005920 <HAL_GPIO_WritePin>
		f_mount(NULL, "", 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	49c7      	ldr	r1, [pc, #796]	; (8001e80 <openConfigFile+0x384>)
 8001b64:	2000      	movs	r0, #0
 8001b66:	f00a ff15 	bl	800c994 <f_mount>
		return false;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e1c1      	b.n	8001ef2 <openConfigFile+0x3f6>
    }

    DWORD free_clusters, free_sectors, total_sectors;
    FATFS* getFreeFs;
    fres = f_getfree("", &free_clusters, &getFreeFs);
 8001b6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b76:	4619      	mov	r1, r3
 8001b78:	48c1      	ldr	r0, [pc, #772]	; (8001e80 <openConfigFile+0x384>)
 8001b7a:	f00b ffb6 	bl	800daea <f_getfree>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
    if (fres != FR_OK) {
 8001b84:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d013      	beq.n	8001bb4 <openConfigFile+0xb8>
		myprintf("f_getfree error (%i)\r\n", fres);
 8001b8c:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8001b90:	4619      	mov	r1, r3
 8001b92:	48bd      	ldr	r0, [pc, #756]	; (8001e88 <openConfigFile+0x38c>)
 8001b94:	f7ff fe14 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b9e:	48b7      	ldr	r0, [pc, #732]	; (8001e7c <openConfigFile+0x380>)
 8001ba0:	f003 febe 	bl	8005920 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001baa:	48b4      	ldr	r0, [pc, #720]	; (8001e7c <openConfigFile+0x380>)
 8001bac:	f003 feb8 	bl	8005920 <HAL_GPIO_WritePin>
  	  	return false;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e19e      	b.n	8001ef2 <openConfigFile+0x3f6>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8001bb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001bbe:	3b02      	subs	r3, #2
 8001bc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
    free_sectors = free_clusters * getFreeFs->csize;
 8001bd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fb03 f302 	mul.w	r3, r3, r2
 8001be8:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8001bec:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001bf0:	0859      	lsrs	r1, r3, #1
 8001bf2:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 8001bf6:	085b      	lsrs	r3, r3, #1
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	48a4      	ldr	r0, [pc, #656]	; (8001e8c <openConfigFile+0x390>)
 8001bfc:	f7ff fde0 	bl	80017c0 <myprintf>

    fres = f_open(&fil, "config.txt", FA_READ);
 8001c00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c04:	2201      	movs	r2, #1
 8001c06:	49a2      	ldr	r1, [pc, #648]	; (8001e90 <openConfigFile+0x394>)
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f00a ff0b 	bl	800ca24 <f_open>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
    if (fres != FR_OK) {
 8001c14:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <openConfigFile+0x162>
		myprintf("f_open error (%i)\r\n");
 8001c1c:	489d      	ldr	r0, [pc, #628]	; (8001e94 <openConfigFile+0x398>)
 8001c1e:	f7ff fdcf 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001c22:	2201      	movs	r2, #1
 8001c24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c28:	4894      	ldr	r0, [pc, #592]	; (8001e7c <openConfigFile+0x380>)
 8001c2a:	f003 fe79 	bl	8005920 <HAL_GPIO_WritePin>
		f_close(&fil);
 8001c2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c32:	4618      	mov	r0, r3
 8001c34:	f00b fcd3 	bl	800d5de <f_close>
		f_mount(NULL, "", 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4991      	ldr	r1, [pc, #580]	; (8001e80 <openConfigFile+0x384>)
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f00a fea9 	bl	800c994 <f_mount>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c48:	488c      	ldr	r0, [pc, #560]	; (8001e7c <openConfigFile+0x380>)
 8001c4a:	f003 fe69 	bl	8005920 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c54:	4889      	ldr	r0, [pc, #548]	; (8001e7c <openConfigFile+0x380>)
 8001c56:	f003 fe63 	bl	8005920 <HAL_GPIO_WritePin>
  	  	return false;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e149      	b.n	8001ef2 <openConfigFile+0x3f6>
    }
    myprintf("I was able to open 'config.txt' for reading!\r\n");
 8001c5e:	488e      	ldr	r0, [pc, #568]	; (8001e98 <openConfigFile+0x39c>)
 8001c60:	f7ff fdae 	bl	80017c0 <myprintf>

    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    for(int i = 0; i<3; i++){
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8001c6a:	e12c      	b.n	8001ec6 <openConfigFile+0x3ca>
    	TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);	// přečte celý řádek, pokud nezaplní buffer
 8001c6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	211e      	movs	r1, #30
 8001c76:	4618      	mov	r0, r3
 8001c78:	f00c f804 	bl	800dc84 <f_gets>
 8001c7c:	f8c7 04ac 	str.w	r0, [r7, #1196]	; 0x4ac
		if(rres != 0) {
 8001c80:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80da 	beq.w	8001e3e <openConfigFile+0x342>
 8001c8a:	466b      	mov	r3, sp
 8001c8c:	461d      	mov	r5, r3
			myprintf("Read string from 'config.txt' contents: %s\n\r", readBuf);
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	4619      	mov	r1, r3
 8001c94:	4881      	ldr	r0, [pc, #516]	; (8001e9c <openConfigFile+0x3a0>)
 8001c96:	f7ff fd93 	bl	80017c0 <myprintf>
			char *data = &readBuf[0];
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
			char d[strlen(data)];
 8001ca2:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 8001ca6:	f7fe fa9d 	bl	80001e4 <strlen>
 8001caa:	4604      	mov	r4, r0
 8001cac:	4623      	mov	r3, r4
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	00cb      	lsls	r3, r1, #3
 8001cc4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cc8:	00c2      	lsls	r2, r0, #3
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f04f 0100 	mov.w	r1, #0
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	00cb      	lsls	r3, r1, #3
 8001cda:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cde:	00c2      	lsls	r2, r0, #3
 8001ce0:	1de3      	adds	r3, r4, #7
 8001ce2:	08db      	lsrs	r3, r3, #3
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	ebad 0d03 	sub.w	sp, sp, r3
 8001cea:	466b      	mov	r3, sp
 8001cec:	3300      	adds	r3, #0
 8001cee:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
			strcpy(d,data);
 8001cf2:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001cf6:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f00c ff89 	bl	800ec12 <strcpy>
			data = removeSpaces(d);
 8001d00:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fec9 	bl	8001a9c <removeSpaces>
 8001d0a:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
			strcpy(d,data);
 8001d0e:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001d12:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 8001d16:	4618      	mov	r0, r3
 8001d18:	f00c ff7b 	bl	800ec12 <strcpy>
			int delic = strcspn(d,"=");// počet znaků před =
 8001d1c:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001d20:	495f      	ldr	r1, [pc, #380]	; (8001ea0 <openConfigFile+0x3a4>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f00c ff7d 	bl	800ec22 <strcspn>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c

			if (delic != strlen(d)){	// příkaz rozeznán
 8001d2e:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fa56 	bl	80001e4 <strlen>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d076      	beq.n	8001e30 <openConfigFile+0x334>
				char *key = (char*)malloc(delic+1);	// na konci přidám jene znak pro ukončení strungu
 8001d42:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001d46:	3301      	adds	r3, #1
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f00c f897 	bl	800de7c <malloc>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
				memcpy(key,&d,delic);
 8001d54:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001d58:	f8d7 249c 	ldr.w	r2, [r7, #1180]	; 0x49c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8001d62:	f00c f893 	bl	800de8c <memcpy>
				key[delic] = '\0';
 8001d66:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001d6a:	f8d7 2498 	ldr.w	r2, [r7, #1176]	; 0x498
 8001d6e:	4413      	add	r3, r2
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
				//strncpy(key,d,delic);
				char *value = (char*)malloc(sizeof(d)-delic+1);
 8001d74:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001d78:	1ae3      	subs	r3, r4, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f00c f87d 	bl	800de7c <malloc>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
				memcpy(value,&d[delic+1],sizeof(d)-delic);
 8001d88:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8001d92:	18d1      	adds	r1, r2, r3
 8001d94:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001d98:	1ae3      	subs	r3, r4, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 8001da0:	f00c f874 	bl	800de8c <memcpy>
				value[sizeof(d)-delic] = '\0';
 8001da4:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001da8:	1ae3      	subs	r3, r4, r3
 8001daa:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8001dae:	4413      	add	r3, r2
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
				//strcpy(value,d[delic+1]);
				if(strcmp(key,"mode") == 0){
 8001db4:	493b      	ldr	r1, [pc, #236]	; (8001ea4 <openConfigFile+0x3a8>)
 8001db6:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8001dba:	f7fe fa09 	bl	80001d0 <strcmp>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10a      	bne.n	8001dda <openConfigFile+0x2de>
					*mode = atoi(value);
 8001dc4:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 8001dc8:	f00c f817 	bl	800ddfa <atoi>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e02f      	b.n	8001e3a <openConfigFile+0x33e>
				}else if(strcmp(key, "humidity") == 0){
 8001dda:	4933      	ldr	r1, [pc, #204]	; (8001ea8 <openConfigFile+0x3ac>)
 8001ddc:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8001de0:	f7fe f9f6 	bl	80001d0 <strcmp>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10a      	bne.n	8001e00 <openConfigFile+0x304>
					*hum = atoi(value);
 8001dea:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 8001dee:	f00c f804 	bl	800ddfa <atoi>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	f107 0308 	add.w	r3, r7, #8
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	e01c      	b.n	8001e3a <openConfigFile+0x33e>
				}else if(strcmp(key, "temperature") == 0){
 8001e00:	492a      	ldr	r1, [pc, #168]	; (8001eac <openConfigFile+0x3b0>)
 8001e02:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8001e06:	f7fe f9e3 	bl	80001d0 <strcmp>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <openConfigFile+0x328>
					*temp = atoi(value);
 8001e10:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 8001e14:	f00b fff1 	bl	800ddfa <atoi>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e00a      	b.n	8001e3a <openConfigFile+0x33e>
				}else{
					myprintf("\n\rKey \"%s\" not recognized!\n\r",key);
 8001e24:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8001e28:	4821      	ldr	r0, [pc, #132]	; (8001eb0 <openConfigFile+0x3b4>)
 8001e2a:	f7ff fcc9 	bl	80017c0 <myprintf>
 8001e2e:	e004      	b.n	8001e3a <openConfigFile+0x33e>
				}
			}else{
				myprintf("\n\rDidnt found \"=\" on line %i",i);
 8001e30:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	; 0x4bc
 8001e34:	481f      	ldr	r0, [pc, #124]	; (8001eb4 <openConfigFile+0x3b8>)
 8001e36:	f7ff fcc3 	bl	80017c0 <myprintf>
 8001e3a:	46ad      	mov	sp, r5
 8001e3c:	e03e      	b.n	8001ebc <openConfigFile+0x3c0>
				HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
				return false;
				*/
			}
		} else {
			myprintf("f_gets error (%i)\r\n", fres);
 8001e3e:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8001e42:	4619      	mov	r1, r3
 8001e44:	481c      	ldr	r0, [pc, #112]	; (8001eb8 <openConfigFile+0x3bc>)
 8001e46:	f7ff fcbb 	bl	80017c0 <myprintf>
			f_close(&fil);
 8001e4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f00b fbc5 	bl	800d5de <f_close>
			f_mount(NULL, "", 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	490a      	ldr	r1, [pc, #40]	; (8001e80 <openConfigFile+0x384>)
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f00a fd9b 	bl	800c994 <f_mount>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e64:	4805      	ldr	r0, [pc, #20]	; (8001e7c <openConfigFile+0x380>)
 8001e66:	f003 fd5b 	bl	8005920 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <openConfigFile+0x380>)
 8001e72:	f003 fd55 	bl	8005920 <HAL_GPIO_WritePin>
			return false;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e03b      	b.n	8001ef2 <openConfigFile+0x3f6>
 8001e7a:	bf00      	nop
 8001e7c:	48001000 	.word	0x48001000
 8001e80:	08012390 	.word	0x08012390
 8001e84:	08012394 	.word	0x08012394
 8001e88:	080123ac 	.word	0x080123ac
 8001e8c:	080123c4 	.word	0x080123c4
 8001e90:	0801255c 	.word	0x0801255c
 8001e94:	08012440 	.word	0x08012440
 8001e98:	08012698 	.word	0x08012698
 8001e9c:	080126c8 	.word	0x080126c8
 8001ea0:	080124fc 	.word	0x080124fc
 8001ea4:	080126f8 	.word	0x080126f8
 8001ea8:	08012700 	.word	0x08012700
 8001eac:	0801270c 	.word	0x0801270c
 8001eb0:	08012508 	.word	0x08012508
 8001eb4:	08012528 	.word	0x08012528
 8001eb8:	08012548 	.word	0x08012548
    for(int i = 0; i<3; i++){
 8001ebc:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8001ec6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	f77f aece 	ble.w	8001c6c <openConfigFile+0x170>
		}
    }
    f_close(&fil);
 8001ed0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f00b fb82 	bl	800d5de <f_close>
    f_mount(NULL, "", 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	4907      	ldr	r1, [pc, #28]	; (8001efc <openConfigFile+0x400>)
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f00a fd58 	bl	800c994 <f_mount>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);// orange led to indicate SD activity
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <openConfigFile+0x404>)
 8001eec:	f003 fd18 	bl	8005920 <HAL_GPIO_WritePin>
    return true;
 8001ef0:	2301      	movs	r3, #1
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f507 6798 	add.w	r7, r7, #1216	; 0x4c0
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bdb0      	pop	{r4, r5, r7, pc}
 8001efc:	08012390 	.word	0x08012390
 8001f00:	48001000 	.word	0x48001000

08001f04 <writeToFile>:
bool writeToFile(float temp, float hum, uint8_t wcup, uint8_t wrez, float soil1, float soil2){
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f06:	f2ad 5d1c 	subw	sp, sp, #1308	; 0x51c
 8001f0a:	af02      	add	r7, sp, #8
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	ed83 0a00 	vstr	s0, [r3]
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	edc3 0a00 	vstr	s1, [r3]
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	ed83 1a00 	vstr	s2, [r3]
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	edc3 1a00 	vstr	s3, [r3]
 8001f2c:	f107 030f 	add.w	r3, r7, #15
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	f107 030e 	add.w	r3, r7, #14
 8001f36:	460a      	mov	r2, r1
 8001f38:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_SET);// orange led to indicate SD activity
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f40:	48d0      	ldr	r0, [pc, #832]	; (8002284 <writeToFile+0x380>)
 8001f42:	f003 fced 	bl	8005920 <HAL_GPIO_WritePin>
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8001f46:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	49ce      	ldr	r1, [pc, #824]	; (8002288 <writeToFile+0x384>)
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f00a fd20 	bl	800c994 <f_mount>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
	if (fres != FR_OK) {
 8001f5a:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d018      	beq.n	8001f94 <writeToFile+0x90>
		myprintf("f_mount error (%i)\r\n", fres);
 8001f62:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 8001f66:	4619      	mov	r1, r3
 8001f68:	48c8      	ldr	r0, [pc, #800]	; (800228c <writeToFile+0x388>)
 8001f6a:	f7ff fc29 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	48c3      	ldr	r0, [pc, #780]	; (8002284 <writeToFile+0x380>)
 8001f76:	f003 fcd3 	bl	8005920 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f80:	48c0      	ldr	r0, [pc, #768]	; (8002284 <writeToFile+0x380>)
 8001f82:	f003 fccd 	bl	8005920 <HAL_GPIO_WritePin>
		f_mount(NULL, "", 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	49bf      	ldr	r1, [pc, #764]	; (8002288 <writeToFile+0x384>)
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f00a fd02 	bl	800c994 <f_mount>
		return false;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e1ed      	b.n	8002370 <writeToFile+0x46c>
	}

	DWORD free_clusters, free_sectors, total_sectors;
	FATFS* getFreeFs;
	fres = f_getfree("", &free_clusters, &getFreeFs);
 8001f94:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001f98:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	48ba      	ldr	r0, [pc, #744]	; (8002288 <writeToFile+0x384>)
 8001fa0:	f00b fda3 	bl	800daea <f_getfree>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
	if (fres != FR_OK) {
 8001faa:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d013      	beq.n	8001fda <writeToFile+0xd6>
		myprintf("f_getfree error (%i)\r\n", fres);
 8001fb2:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	48b5      	ldr	r0, [pc, #724]	; (8002290 <writeToFile+0x38c>)
 8001fba:	f7ff fc01 	bl	80017c0 <myprintf>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc4:	48af      	ldr	r0, [pc, #700]	; (8002284 <writeToFile+0x380>)
 8001fc6:	f003 fcab 	bl	8005920 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd0:	48ac      	ldr	r0, [pc, #688]	; (8002284 <writeToFile+0x380>)
 8001fd2:	f003 fca5 	bl	8005920 <HAL_GPIO_WritePin>
		return false;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e1ca      	b.n	8002370 <writeToFile+0x46c>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8001fda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001fe4:	3b02      	subs	r3, #2
 8001fe6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
	free_sectors = free_clusters * getFreeFs->csize;
 8001ff8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002002:	461a      	mov	r2, r3
 8002004:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	fb03 f302 	mul.w	r3, r3, r2
 800200e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
	myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8002012:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8002016:	0859      	lsrs	r1, r3, #1
 8002018:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 800201c:	085b      	lsrs	r3, r3, #1
 800201e:	461a      	mov	r2, r3
 8002020:	489c      	ldr	r0, [pc, #624]	; (8002294 <writeToFile+0x390>)
 8002022:	f7ff fbcd 	bl	80017c0 <myprintf>

    fres = f_open(&fil, "data.txt", FA_WRITE | FA_OPEN_ALWAYS);
 8002026:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800202a:	2212      	movs	r2, #18
 800202c:	499a      	ldr	r1, [pc, #616]	; (8002298 <writeToFile+0x394>)
 800202e:	4618      	mov	r0, r3
 8002030:	f00a fcf8 	bl	800ca24 <f_open>
 8002034:	4603      	mov	r3, r0
 8002036:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
    if(fres == FR_OK) {
 800203a:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 8142 	bne.w	80022c8 <writeToFile+0x3c4>
    	fres = f_lseek(&fil,f_size(&fil));	// ukáže na konec souboru
 8002044:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002048:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800204c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f00b faeb 	bl	800d62e <f_lseek>
 8002058:	4603      	mov	r3, r0
 800205a:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
    	if(fres != FR_OK){
 800205e:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00f      	beq.n	8002086 <writeToFile+0x182>
    		myprintf("f_lseek error (%i)\r\n", fres);
 8002066:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 800206a:	4619      	mov	r1, r3
 800206c:	488b      	ldr	r0, [pc, #556]	; (800229c <writeToFile+0x398>)
 800206e:	f7ff fba7 	bl	80017c0 <myprintf>
    		f_close(&fil);
 8002072:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002076:	4618      	mov	r0, r3
 8002078:	f00b fab1 	bl	800d5de <f_close>
			f_mount(NULL, "", 0);
 800207c:	2200      	movs	r2, #0
 800207e:	4982      	ldr	r1, [pc, #520]	; (8002288 <writeToFile+0x384>)
 8002080:	2000      	movs	r0, #0
 8002082:	f00a fc87 	bl	800c994 <f_mount>
    	}
    	myprintf("I was able to open 'data.txt' for writing\r\n");
 8002086:	4886      	ldr	r0, [pc, #536]	; (80022a0 <writeToFile+0x39c>)
 8002088:	f7ff fb9a 	bl	80017c0 <myprintf>
		f_mount(NULL, "", 0);
		return false;
    }

    BYTE readBuf[128];
    memset(readBuf,0,128);
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f00b ff07 	bl	800dea8 <memset>
	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 800209a:	2201      	movs	r2, #1
 800209c:	4981      	ldr	r1, [pc, #516]	; (80022a4 <writeToFile+0x3a0>)
 800209e:	4882      	ldr	r0, [pc, #520]	; (80022a8 <writeToFile+0x3a4>)
 80020a0:	f005 fffa 	bl	8008098 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BCD);
 80020a4:	2201      	movs	r2, #1
 80020a6:	4981      	ldr	r1, [pc, #516]	; (80022ac <writeToFile+0x3a8>)
 80020a8:	487f      	ldr	r0, [pc, #508]	; (80022a8 <writeToFile+0x3a4>)
 80020aa:	f006 f8fa 	bl	80082a2 <HAL_RTC_GetDate>
    //float *temp, float *hum, uint8_t *wcup, uint8_t *wrez, uint16_t *soil1, uint16_t *soil2
	char *write_buffer = (char*)malloc(128);
 80020ae:	2080      	movs	r0, #128	; 0x80
 80020b0:	f00b fee4 	bl	800de7c <malloc>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
	*write_buffer = '\0';
 80020ba:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
	sprintf(write_buffer+strlen(write_buffer),"\n");
 80020c2:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
 80020c6:	f7fe f88d 	bl	80001e4 <strlen>
 80020ca:	4602      	mov	r2, r0
 80020cc:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80020d0:	4413      	add	r3, r2
 80020d2:	4977      	ldr	r1, [pc, #476]	; (80022b0 <writeToFile+0x3ac>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f00c fd6d 	bl	800ebb4 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," \t%02d.%02d.%02d\t ;",bcdToDec(sDate.Date),bcdToDec(sDate.Month),bcdToDec(sDate.Year));
 80020da:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
 80020de:	f7fe f881 	bl	80001e4 <strlen>
 80020e2:	4602      	mov	r2, r0
 80020e4:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80020e8:	189c      	adds	r4, r3, r2
 80020ea:	4b70      	ldr	r3, [pc, #448]	; (80022ac <writeToFile+0x3a8>)
 80020ec:	789b      	ldrb	r3, [r3, #2]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fae2 	bl	80016b8 <bcdToDec>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461d      	mov	r5, r3
 80020f8:	4b6c      	ldr	r3, [pc, #432]	; (80022ac <writeToFile+0x3a8>)
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fadb 	bl	80016b8 <bcdToDec>
 8002102:	4603      	mov	r3, r0
 8002104:	461e      	mov	r6, r3
 8002106:	4b69      	ldr	r3, [pc, #420]	; (80022ac <writeToFile+0x3a8>)
 8002108:	78db      	ldrb	r3, [r3, #3]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fad4 	bl	80016b8 <bcdToDec>
 8002110:	4603      	mov	r3, r0
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	4633      	mov	r3, r6
 8002116:	462a      	mov	r2, r5
 8002118:	4966      	ldr	r1, [pc, #408]	; (80022b4 <writeToFile+0x3b0>)
 800211a:	4620      	mov	r0, r4
 800211c:	f00c fd4a 	bl	800ebb4 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," \t%02d:%02d:%02d\t ;",bcdToDec(sTime.Hours),bcdToDec(sTime.Minutes),bcdToDec(sTime.Seconds));
 8002120:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
 8002124:	f7fe f85e 	bl	80001e4 <strlen>
 8002128:	4602      	mov	r2, r0
 800212a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800212e:	189c      	adds	r4, r3, r2
 8002130:	4b5c      	ldr	r3, [pc, #368]	; (80022a4 <writeToFile+0x3a0>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fabf 	bl	80016b8 <bcdToDec>
 800213a:	4603      	mov	r3, r0
 800213c:	461d      	mov	r5, r3
 800213e:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <writeToFile+0x3a0>)
 8002140:	785b      	ldrb	r3, [r3, #1]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fab8 	bl	80016b8 <bcdToDec>
 8002148:	4603      	mov	r3, r0
 800214a:	461e      	mov	r6, r3
 800214c:	4b55      	ldr	r3, [pc, #340]	; (80022a4 <writeToFile+0x3a0>)
 800214e:	789b      	ldrb	r3, [r3, #2]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fab1 	bl	80016b8 <bcdToDec>
 8002156:	4603      	mov	r3, r0
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	4633      	mov	r3, r6
 800215c:	462a      	mov	r2, r5
 800215e:	4956      	ldr	r1, [pc, #344]	; (80022b8 <writeToFile+0x3b4>)
 8002160:	4620      	mov	r0, r4
 8002162:	f00c fd27 	bl	800ebb4 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," \t%.2f\t ;",temp);
 8002166:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
 800216a:	f7fe f83b 	bl	80001e4 <strlen>
 800216e:	4602      	mov	r2, r0
 8002170:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002174:	189c      	adds	r4, r3, r2
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	f7fe f9f4 	bl	8000568 <__aeabi_f2d>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	494d      	ldr	r1, [pc, #308]	; (80022bc <writeToFile+0x3b8>)
 8002186:	4620      	mov	r0, r4
 8002188:	f00c fd14 	bl	800ebb4 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," \t%.2f\t ;",hum);
 800218c:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
 8002190:	f7fe f828 	bl	80001e4 <strlen>
 8002194:	4602      	mov	r2, r0
 8002196:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800219a:	189c      	adds	r4, r3, r2
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	f7fe f9e1 	bl	8000568 <__aeabi_f2d>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4944      	ldr	r1, [pc, #272]	; (80022bc <writeToFile+0x3b8>)
 80021ac:	4620      	mov	r0, r4
 80021ae:	f00c fd01 	bl	800ebb4 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," \t%i\t ;",wcup);
 80021b2:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
 80021b6:	f7fe f815 	bl	80001e4 <strlen>
 80021ba:	4602      	mov	r2, r0
 80021bc:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80021c0:	1898      	adds	r0, r3, r2
 80021c2:	f107 030f 	add.w	r3, r7, #15
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	493d      	ldr	r1, [pc, #244]	; (80022c0 <writeToFile+0x3bc>)
 80021cc:	f00c fcf2 	bl	800ebb4 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," \t%i\t ;",wrez);
 80021d0:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
 80021d4:	f7fe f806 	bl	80001e4 <strlen>
 80021d8:	4602      	mov	r2, r0
 80021da:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80021de:	1898      	adds	r0, r3, r2
 80021e0:	f107 030e 	add.w	r3, r7, #14
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	4935      	ldr	r1, [pc, #212]	; (80022c0 <writeToFile+0x3bc>)
 80021ea:	f00c fce3 	bl	800ebb4 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," \t%.2f\t ;",soil1);
 80021ee:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
 80021f2:	f7fd fff7 	bl	80001e4 <strlen>
 80021f6:	4602      	mov	r2, r0
 80021f8:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80021fc:	189c      	adds	r4, r3, r2
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	f7fe f9b0 	bl	8000568 <__aeabi_f2d>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	492b      	ldr	r1, [pc, #172]	; (80022bc <writeToFile+0x3b8>)
 800220e:	4620      	mov	r0, r4
 8002210:	f00c fcd0 	bl	800ebb4 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," \t%.2f\t ;\0",soil2);
 8002214:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
 8002218:	f7fd ffe4 	bl	80001e4 <strlen>
 800221c:	4602      	mov	r2, r0
 800221e:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002222:	189c      	adds	r4, r3, r2
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	f7fe f99e 	bl	8000568 <__aeabi_f2d>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4924      	ldr	r1, [pc, #144]	; (80022c4 <writeToFile+0x3c0>)
 8002232:	4620      	mov	r0, r4
 8002234:	f00c fcbe 	bl	800ebb4 <siprintf>

    //Copy in a string
    strncpy((char*)readBuf, write_buffer, strlen(write_buffer));
 8002238:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
 800223c:	f7fd ffd2 	bl	80001e4 <strlen>
 8002240:	4602      	mov	r2, r0
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 800224a:	4618      	mov	r0, r3
 800224c:	f00c fcfa 	bl	800ec44 <strncpy>
    UINT bytesWrote;
    myprintf(readBuf);
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fab3 	bl	80017c0 <myprintf>
    fres = f_write(&fil, readBuf, strlen(write_buffer), &bytesWrote);
 800225a:	f8d7 0500 	ldr.w	r0, [r7, #1280]	; 0x500
 800225e:	f7fd ffc1 	bl	80001e4 <strlen>
 8002262:	4602      	mov	r2, r0
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	f107 011c 	add.w	r1, r7, #28
 800226c:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8002270:	f00a ff4e 	bl	800d110 <f_write>
 8002274:	4603      	mov	r3, r0
 8002276:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
    if(fres == FR_OK) {
 800227a:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 800227e:	2b00      	cmp	r3, #0
 8002280:	d159      	bne.n	8002336 <writeToFile+0x432>
 8002282:	e03f      	b.n	8002304 <writeToFile+0x400>
 8002284:	48001000 	.word	0x48001000
 8002288:	08012390 	.word	0x08012390
 800228c:	08012394 	.word	0x08012394
 8002290:	080123ac 	.word	0x080123ac
 8002294:	080123c4 	.word	0x080123c4
 8002298:	08012718 	.word	0x08012718
 800229c:	08012724 	.word	0x08012724
 80022a0:	0801273c 	.word	0x0801273c
 80022a4:	20000460 	.word	0x20000460
 80022a8:	200005d4 	.word	0x200005d4
 80022ac:	200005c8 	.word	0x200005c8
 80022b0:	08012768 	.word	0x08012768
 80022b4:	0801276c 	.word	0x0801276c
 80022b8:	08012780 	.word	0x08012780
 80022bc:	08012794 	.word	0x08012794
 80022c0:	080127a0 	.word	0x080127a0
 80022c4:	080127a8 	.word	0x080127a8
    	myprintf("f_open error (%i)\r\n", fres);
 80022c8:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 80022cc:	4619      	mov	r1, r3
 80022ce:	482b      	ldr	r0, [pc, #172]	; (800237c <writeToFile+0x478>)
 80022d0:	f7ff fa76 	bl	80017c0 <myprintf>
    	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 80022d4:	2200      	movs	r2, #0
 80022d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022da:	4829      	ldr	r0, [pc, #164]	; (8002380 <writeToFile+0x47c>)
 80022dc:	f003 fb20 	bl	8005920 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 80022e0:	2201      	movs	r2, #1
 80022e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e6:	4826      	ldr	r0, [pc, #152]	; (8002380 <writeToFile+0x47c>)
 80022e8:	f003 fb1a 	bl	8005920 <HAL_GPIO_WritePin>
    	f_close(&fil);
 80022ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00b f974 	bl	800d5de <f_close>
		f_mount(NULL, "", 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	4922      	ldr	r1, [pc, #136]	; (8002384 <writeToFile+0x480>)
 80022fa:	2000      	movs	r0, #0
 80022fc:	f00a fb4a 	bl	800c994 <f_mount>
		return false;
 8002300:	2300      	movs	r3, #0
 8002302:	e035      	b.n	8002370 <writeToFile+0x46c>
    	myprintf("Wrote %i bytes to 'data.txt'!\r\n", bytesWrote);
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	481e      	ldr	r0, [pc, #120]	; (8002388 <writeToFile+0x484>)
 800230e:	f7ff fa57 	bl	80017c0 <myprintf>
    	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
    	f_close(&fil);
		f_mount(NULL, "", 0);
		return false;
    }
    f_close(&fil);
 8002312:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002316:	4618      	mov	r0, r3
 8002318:	f00b f961 	bl	800d5de <f_close>
	f_mount(NULL, "", 0);
 800231c:	2200      	movs	r2, #0
 800231e:	4919      	ldr	r1, [pc, #100]	; (8002384 <writeToFile+0x480>)
 8002320:	2000      	movs	r0, #0
 8002322:	f00a fb37 	bl	800c994 <f_mount>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);// orange led to indicate SD activity
 8002326:	2200      	movs	r2, #0
 8002328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800232c:	4814      	ldr	r0, [pc, #80]	; (8002380 <writeToFile+0x47c>)
 800232e:	f003 faf7 	bl	8005920 <HAL_GPIO_WritePin>
	return true;
 8002332:	2301      	movs	r3, #1
 8002334:	e01c      	b.n	8002370 <writeToFile+0x46c>
    	myprintf("f_write error (%i)\r\n",fres);
 8002336:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 800233a:	4619      	mov	r1, r3
 800233c:	4813      	ldr	r0, [pc, #76]	; (800238c <writeToFile+0x488>)
 800233e:	f7ff fa3f 	bl	80017c0 <myprintf>
    	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002348:	480d      	ldr	r0, [pc, #52]	; (8002380 <writeToFile+0x47c>)
 800234a:	f003 fae9 	bl	8005920 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 800234e:	2201      	movs	r2, #1
 8002350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002354:	480a      	ldr	r0, [pc, #40]	; (8002380 <writeToFile+0x47c>)
 8002356:	f003 fae3 	bl	8005920 <HAL_GPIO_WritePin>
    	f_close(&fil);
 800235a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800235e:	4618      	mov	r0, r3
 8002360:	f00b f93d 	bl	800d5de <f_close>
		f_mount(NULL, "", 0);
 8002364:	2200      	movs	r2, #0
 8002366:	4907      	ldr	r1, [pc, #28]	; (8002384 <writeToFile+0x480>)
 8002368:	2000      	movs	r0, #0
 800236a:	f00a fb13 	bl	800c994 <f_mount>
		return false;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	f207 5714 	addw	r7, r7, #1300	; 0x514
 8002376:	46bd      	mov	sp, r7
 8002378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800237a:	bf00      	nop
 800237c:	08012440 	.word	0x08012440
 8002380:	48001000 	.word	0x48001000
 8002384:	08012390 	.word	0x08012390
 8002388:	080127b4 	.word	0x080127b4
 800238c:	0801248c 	.word	0x0801248c

08002390 <sendMyData>:
void sendMyData(float temp, float hum, uint8_t wcup, uint8_t wrez, float soil1, float soil2){
 8002390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002394:	b0af      	sub	sp, #188	; 0xbc
 8002396:	af08      	add	r7, sp, #32
 8002398:	ed87 0a05 	vstr	s0, [r7, #20]
 800239c:	edc7 0a04 	vstr	s1, [r7, #16]
 80023a0:	4603      	mov	r3, r0
 80023a2:	460a      	mov	r2, r1
 80023a4:	ed87 1a02 	vstr	s2, [r7, #8]
 80023a8:	edc7 1a01 	vstr	s3, [r7, #4]
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	4613      	mov	r3, r2
 80023b0:	73bb      	strb	r3, [r7, #14]
	char data[128];
	sprintf(data,"{%.2f;%.2f;%i;%i;%.2f;%.2f}\n\r",temp,hum,wcup,wrez,soil1,soil2);
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f7fe f8d8 	bl	8000568 <__aeabi_f2d>
 80023b8:	4682      	mov	sl, r0
 80023ba:	468b      	mov	fp, r1
 80023bc:	6938      	ldr	r0, [r7, #16]
 80023be:	f7fe f8d3 	bl	8000568 <__aeabi_f2d>
 80023c2:	4604      	mov	r4, r0
 80023c4:	460d      	mov	r5, r1
 80023c6:	7bfe      	ldrb	r6, [r7, #15]
 80023c8:	7bbb      	ldrb	r3, [r7, #14]
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	68b8      	ldr	r0, [r7, #8]
 80023ce:	f7fe f8cb 	bl	8000568 <__aeabi_f2d>
 80023d2:	4680      	mov	r8, r0
 80023d4:	4689      	mov	r9, r1
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe f8c6 	bl	8000568 <__aeabi_f2d>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	f107 0018 	add.w	r0, r7, #24
 80023e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80023e8:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	9303      	str	r3, [sp, #12]
 80023f0:	9602      	str	r6, [sp, #8]
 80023f2:	e9cd 4500 	strd	r4, r5, [sp]
 80023f6:	4652      	mov	r2, sl
 80023f8:	465b      	mov	r3, fp
 80023fa:	490b      	ldr	r1, [pc, #44]	; (8002428 <sendMyData+0x98>)
 80023fc:	f00c fbda 	bl	800ebb4 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)data,strlen(data),-1);
 8002400:	f107 0318 	add.w	r3, r7, #24
 8002404:	4618      	mov	r0, r3
 8002406:	f7fd feed 	bl	80001e4 <strlen>
 800240a:	4603      	mov	r3, r0
 800240c:	b29a      	uxth	r2, r3
 800240e:	f107 0118 	add.w	r1, r7, #24
 8002412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <sendMyData+0x9c>)
 8002418:	f006 fc92 	bl	8008d40 <HAL_UART_Transmit>
}
 800241c:	bf00      	nop
 800241e:	379c      	adds	r7, #156	; 0x9c
 8002420:	46bd      	mov	sp, r7
 8002422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002426:	bf00      	nop
 8002428:	080127d4 	.word	0x080127d4
 800242c:	200004c4 	.word	0x200004c4

08002430 <sendConfig>:
void sendConfig(uint8_t modeset,uint8_t humset,uint8_t tempset){
 8002430:	b580      	push	{r7, lr}
 8002432:	b0a4      	sub	sp, #144	; 0x90
 8002434:	af02      	add	r7, sp, #8
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	460b      	mov	r3, r1
 800243c:	71bb      	strb	r3, [r7, #6]
 800243e:	4613      	mov	r3, r2
 8002440:	717b      	strb	r3, [r7, #5]
	char data[128];
	sprintf(data,"{%i;%i;%i}\n\r",modeset,tempset,humset);
 8002442:	79fa      	ldrb	r2, [r7, #7]
 8002444:	7979      	ldrb	r1, [r7, #5]
 8002446:	79bb      	ldrb	r3, [r7, #6]
 8002448:	f107 0008 	add.w	r0, r7, #8
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	460b      	mov	r3, r1
 8002450:	490a      	ldr	r1, [pc, #40]	; (800247c <sendConfig+0x4c>)
 8002452:	f00c fbaf 	bl	800ebb4 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)data,strlen(data),-1);
 8002456:	f107 0308 	add.w	r3, r7, #8
 800245a:	4618      	mov	r0, r3
 800245c:	f7fd fec2 	bl	80001e4 <strlen>
 8002460:	4603      	mov	r3, r0
 8002462:	b29a      	uxth	r2, r3
 8002464:	f107 0108 	add.w	r1, r7, #8
 8002468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800246c:	4804      	ldr	r0, [pc, #16]	; (8002480 <sendConfig+0x50>)
 800246e:	f006 fc67 	bl	8008d40 <HAL_UART_Transmit>
}
 8002472:	bf00      	nop
 8002474:	3788      	adds	r7, #136	; 0x88
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	080127f4 	.word	0x080127f4
 8002480:	200004c4 	.word	0x200004c4

08002484 <zalij>:
void zalij(int time_ms){
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	myprintf("{watter_on}\n\r");
 800248c:	4812      	ldr	r0, [pc, #72]	; (80024d8 <zalij+0x54>)
 800248e:	f7ff f997 	bl	80017c0 <myprintf>
	HAL_GPIO_WritePin(motor_GPIO_Port,motor_Pin,GPIO_PIN_SET);
 8002492:	2201      	movs	r2, #1
 8002494:	2108      	movs	r1, #8
 8002496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800249a:	f003 fa41 	bl	8005920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD7_GPIO_Port,LD7_Pin,GPIO_PIN_SET);
 800249e:	2201      	movs	r2, #1
 80024a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024a4:	480d      	ldr	r0, [pc, #52]	; (80024dc <zalij+0x58>)
 80024a6:	f003 fa3b 	bl	8005920 <HAL_GPIO_WritePin>
	HAL_Delay(time_ms);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 fe4b 	bl	8004148 <HAL_Delay>
	HAL_GPIO_WritePin(LD7_GPIO_Port,LD7_Pin,GPIO_PIN_RESET);
 80024b2:	2200      	movs	r2, #0
 80024b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024b8:	4808      	ldr	r0, [pc, #32]	; (80024dc <zalij+0x58>)
 80024ba:	f003 fa31 	bl	8005920 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_GPIO_Port,motor_Pin,GPIO_PIN_RESET);
 80024be:	2200      	movs	r2, #0
 80024c0:	2108      	movs	r1, #8
 80024c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c6:	f003 fa2b 	bl	8005920 <HAL_GPIO_WritePin>
	myprintf("{watter_off}\n\r");
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <zalij+0x5c>)
 80024cc:	f7ff f978 	bl	80017c0 <myprintf>
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	08012804 	.word	0x08012804
 80024dc:	48001000 	.word	0x48001000
 80024e0:	08012814 	.word	0x08012814

080024e4 <sendStatus>:
void sendStatus(bool zalevam, bool ohrivam){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0a4      	sub	sp, #144	; 0x90
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	460a      	mov	r2, r1
 80024ee:	71fb      	strb	r3, [r7, #7]
 80024f0:	4613      	mov	r3, r2
 80024f2:	71bb      	strb	r3, [r7, #6]
	char data[128];
	uint8_t watter,heat;
	if(zalevam){
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <sendStatus+0x1e>
		watter = 1;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002500:	e002      	b.n	8002508 <sendStatus+0x24>
	}else{
		watter = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}
	if(ohrivam){
 8002508:	79bb      	ldrb	r3, [r7, #6]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <sendStatus+0x32>
		heat = 1;
 800250e:	2301      	movs	r3, #1
 8002510:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8002514:	e002      	b.n	800251c <sendStatus+0x38>
	}else{
		heat = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	}
	sprintf(data,"{%i;%i}\n\r",watter,heat);
 800251c:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8002520:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002524:	f107 000c 	add.w	r0, r7, #12
 8002528:	490a      	ldr	r1, [pc, #40]	; (8002554 <sendStatus+0x70>)
 800252a:	f00c fb43 	bl	800ebb4 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)data,strlen(data),-1);
 800252e:	f107 030c 	add.w	r3, r7, #12
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd fe56 	bl	80001e4 <strlen>
 8002538:	4603      	mov	r3, r0
 800253a:	b29a      	uxth	r2, r3
 800253c:	f107 010c 	add.w	r1, r7, #12
 8002540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002544:	4804      	ldr	r0, [pc, #16]	; (8002558 <sendStatus+0x74>)
 8002546:	f006 fbfb 	bl	8008d40 <HAL_UART_Transmit>
}
 800254a:	bf00      	nop
 800254c:	3790      	adds	r7, #144	; 0x90
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	08012824 	.word	0x08012824
 8002558:	200004c4 	.word	0x200004c4

0800255c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800255c:	b5b0      	push	{r4, r5, r7, lr}
 800255e:	b09e      	sub	sp, #120	; 0x78
 8002560:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002562:	f001 fd8b 	bl	800407c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002566:	f000 fd85 	bl	8003074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800256a:	f001 f821 	bl	80035b0 <MX_GPIO_Init>
  MX_RTC_Init();
 800256e:	f000 fef7 	bl	8003360 <MX_RTC_Init>
  MX_I2C1_Init();
 8002572:	f000 feb5 	bl	80032e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002576:	f000 ff4d 	bl	8003414 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800257a:	f000 fff7 	bl	800356c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 800257e:	f000 fde1 	bl	8003144 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002582:	f000 ffc3 	bl	800350c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8002586:	f007 fe1d 	bl	800a1c4 <MX_FATFS_Init>
  MX_SPI2_Init();
 800258a:	f000 ff81 	bl	8003490 <MX_SPI2_Init>
  MX_ADC2_Init();
 800258e:	f000 fe49 	bl	8003224 <MX_ADC2_Init>
	*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 8002592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002596:	f001 fdd7 	bl	8004148 <HAL_Delay>
  sht3x_handle_t handle = setupSHT();
 800259a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff f934 	bl	800180c <setupSHT>

  myprintf("Flowerpot started\r\n");
 80025a4:	487a      	ldr	r0, [pc, #488]	; (8002790 <main+0x234>)
 80025a6:	f7ff f90b 	bl	80017c0 <myprintf>
  uint8_t watter_cup, watter_rez;
  float soil1, soil2;
  uint8_t modeset;
	uint8_t humset;
	uint8_t tempset;
  if(!openConfigFile(&modeset, &humset, &tempset)){
 80025aa:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80025ae:	f107 0126 	add.w	r1, r7, #38	; 0x26
 80025b2:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff faa0 	bl	8001afc <openConfigFile>
 80025bc:	4603      	mov	r3, r0
 80025be:	f083 0301 	eor.w	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <main+0x74>
  	myprintf("Something fucked up during opening of config file!\n\r");
 80025c8:	4872      	ldr	r0, [pc, #456]	; (8002794 <main+0x238>)
 80025ca:	f7ff f8f9 	bl	80017c0 <myprintf>
 80025ce:	e00a      	b.n	80025e6 <main+0x8a>
  }else{
  	myprintf("Modeset: %i, humset: %i, tempset: %i\n\r",modeset,humset,tempset);
 80025d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025d4:	4619      	mov	r1, r3
 80025d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025da:	461a      	mov	r2, r3
 80025dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80025e0:	486d      	ldr	r0, [pc, #436]	; (8002798 <main+0x23c>)
 80025e2:	f7ff f8ed 	bl	80017c0 <myprintf>
  }
  if(!openCalibrationFile(&k0_temp, &k1_temp)){
 80025e6:	496d      	ldr	r1, [pc, #436]	; (800279c <main+0x240>)
 80025e8:	486d      	ldr	r0, [pc, #436]	; (80027a0 <main+0x244>)
 80025ea:	f7fe fd05 	bl	8000ff8 <openCalibrationFile>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <main+0xa4>
    	myprintf("Something fucked up during opening of calibration file!\n\r");
 80025fa:	486a      	ldr	r0, [pc, #424]	; (80027a4 <main+0x248>)
 80025fc:	f7ff f8e0 	bl	80017c0 <myprintf>
  }

  // start listening on serial port
  HAL_UART_Receive_IT(&huart1,&RXByte,1);
 8002600:	2201      	movs	r2, #1
 8002602:	4969      	ldr	r1, [pc, #420]	; (80027a8 <main+0x24c>)
 8002604:	4869      	ldr	r0, [pc, #420]	; (80027ac <main+0x250>)
 8002606:	f006 fc2f 	bl	8008e68 <HAL_UART_Receive_IT>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    int index;
    char tmp[3],tmp_char[32];
    tmp[2] = '\0';// jo jo .. mohl bych použít jen tmp_char .. ale už se mi to nechce předělávat :D
 800260a:	2300      	movs	r3, #0
 800260c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    // nula ukončí string .. používá se u nastavení času, bez toho je čas nesmysl
    bool timeset = false;
 8002610:	2300      	movs	r3, #0
 8002612:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t log_perioda = 1; // hodina
 8002616:	2301      	movs	r3, #1
 8002618:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    int time_hours = -1;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002620:	663b      	str	r3, [r7, #96]	; 0x60
    int time = -1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002626:	653b      	str	r3, [r7, #80]	; 0x50
    int stop_day = -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800262c:	65fb      	str	r3, [r7, #92]	; 0x5c
    int stop_time = -1;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002632:	65bb      	str	r3, [r7, #88]	; 0x58
    bool zalevam = false;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    bool ohrivam = false;
 800263a:	2300      	movs	r3, #0
 800263c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    int watter_period = 10;	//minut mezi zaléváním
 8002640:	230a      	movs	r3, #10
 8002642:	64fb      	str	r3, [r7, #76]	; 0x4c

    myprintf("Waitig for time sequence: \n\r");
 8002644:	485a      	ldr	r0, [pc, #360]	; (80027b0 <main+0x254>)
 8002646:	f7ff f8bb 	bl	80017c0 <myprintf>
    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    	uart_buffering();
 800264a:	f7ff f86f 	bl	800172c <uart_buffering>
// smyčka pro úvodnmí nastaevgní času
    	while(false){// zkouška jestli funguje uart
 800264e:	bf00      	nop
    			myprintf(RXLine);
    			RXDone = false;
    		}
    	}

		while(!timeset){// wait to receive current date and time
 8002650:	e0c4      	b.n	80027dc <main+0x280>
			uart_buffering();
 8002652:	f7ff f86b 	bl	800172c <uart_buffering>
			if(RXDone){
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <main+0x258>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80bd 	beq.w	80027dc <main+0x280>
				myprintf(RXLine);
 8002662:	4855      	ldr	r0, [pc, #340]	; (80027b8 <main+0x25c>)
 8002664:	f7ff f8ac 	bl	80017c0 <myprintf>
				myprintf("\n\r");
 8002668:	4854      	ldr	r0, [pc, #336]	; (80027bc <main+0x260>)
 800266a:	f7ff f8a9 	bl	80017c0 <myprintf>
				//030622
				//205420
				if(strlen(RXLine) != 13){// včetně ukončovacího znaku
 800266e:	4852      	ldr	r0, [pc, #328]	; (80027b8 <main+0x25c>)
 8002670:	f7fd fdb8 	bl	80001e4 <strlen>
 8002674:	4603      	mov	r3, r0
 8002676:	2b0d      	cmp	r3, #13
 8002678:	d006      	beq.n	8002688 <main+0x12c>
					myprintf("Wrong structure!\n\r");
 800267a:	4851      	ldr	r0, [pc, #324]	; (80027c0 <main+0x264>)
 800267c:	f7ff f8a0 	bl	80017c0 <myprintf>
					RXDone = false;
 8002680:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <main+0x258>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e0a9      	b.n	80027dc <main+0x280>
					//getLine();
				}else{
					myprintf("Time received!\n\r");
 8002688:	484e      	ldr	r0, [pc, #312]	; (80027c4 <main+0x268>)
 800268a:	f7ff f899 	bl	80017c0 <myprintf>
					myprintf("Copying time to memory..");
 800268e:	484e      	ldr	r0, [pc, #312]	; (80027c8 <main+0x26c>)
 8002690:	f7ff f896 	bl	80017c0 <myprintf>
 8002694:	4b48      	ldr	r3, [pc, #288]	; (80027b8 <main+0x25c>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
					memcpy(tmp,&RXLine[0],2);
 800269a:	843b      	strh	r3, [r7, #32]
					sDate.Date = decToBcd(atoi(tmp));
 800269c:	f107 0320 	add.w	r3, r7, #32
 80026a0:	4618      	mov	r0, r3
 80026a2:	f00b fbaa 	bl	800ddfa <atoi>
 80026a6:	4603      	mov	r3, r0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f812 	bl	80016d4 <decToBcd>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b45      	ldr	r3, [pc, #276]	; (80027cc <main+0x270>)
 80026b6:	709a      	strb	r2, [r3, #2]
 80026b8:	4b3f      	ldr	r3, [pc, #252]	; (80027b8 <main+0x25c>)
 80026ba:	885b      	ldrh	r3, [r3, #2]
 80026bc:	b29b      	uxth	r3, r3
					memcpy(tmp,&RXLine[2],2);
 80026be:	843b      	strh	r3, [r7, #32]
					sDate.Month = decToBcd(atoi(tmp));
 80026c0:	f107 0320 	add.w	r3, r7, #32
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00b fb98 	bl	800ddfa <atoi>
 80026ca:	4603      	mov	r3, r0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f800 	bl	80016d4 <decToBcd>
 80026d4:	4603      	mov	r3, r0
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <main+0x270>)
 80026da:	705a      	strb	r2, [r3, #1]
 80026dc:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <main+0x25c>)
 80026de:	889b      	ldrh	r3, [r3, #4]
 80026e0:	b29b      	uxth	r3, r3
					memcpy(tmp,&RXLine[4],2);
 80026e2:	843b      	strh	r3, [r7, #32]
					sDate.Year = decToBcd(atoi(tmp));
 80026e4:	f107 0320 	add.w	r3, r7, #32
 80026e8:	4618      	mov	r0, r3
 80026ea:	f00b fb86 	bl	800ddfa <atoi>
 80026ee:	4603      	mov	r3, r0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe ffee 	bl	80016d4 <decToBcd>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b33      	ldr	r3, [pc, #204]	; (80027cc <main+0x270>)
 80026fe:	70da      	strb	r2, [r3, #3]
 8002700:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <main+0x25c>)
 8002702:	88db      	ldrh	r3, [r3, #6]
 8002704:	b29b      	uxth	r3, r3
					memcpy(tmp,&RXLine[6],2);
 8002706:	843b      	strh	r3, [r7, #32]
					sTime.Hours = decToBcd(atoi(tmp));
 8002708:	f107 0320 	add.w	r3, r7, #32
 800270c:	4618      	mov	r0, r3
 800270e:	f00b fb74 	bl	800ddfa <atoi>
 8002712:	4603      	mov	r3, r0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe ffdc 	bl	80016d4 <decToBcd>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <main+0x274>)
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <main+0x25c>)
 8002726:	891b      	ldrh	r3, [r3, #8]
 8002728:	b29b      	uxth	r3, r3
					memcpy(tmp,&RXLine[8],2);
 800272a:	843b      	strh	r3, [r7, #32]
					sTime.Minutes = decToBcd(atoi(tmp));
 800272c:	f107 0320 	add.w	r3, r7, #32
 8002730:	4618      	mov	r0, r3
 8002732:	f00b fb62 	bl	800ddfa <atoi>
 8002736:	4603      	mov	r3, r0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe ffca 	bl	80016d4 <decToBcd>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <main+0x274>)
 8002746:	705a      	strb	r2, [r3, #1]
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <main+0x25c>)
 800274a:	895b      	ldrh	r3, [r3, #10]
 800274c:	b29b      	uxth	r3, r3
					memcpy(tmp,&RXLine[10],2);
 800274e:	843b      	strh	r3, [r7, #32]
					sTime.Seconds = decToBcd(atoi(tmp));
 8002750:	f107 0320 	add.w	r3, r7, #32
 8002754:	4618      	mov	r0, r3
 8002756:	f00b fb50 	bl	800ddfa <atoi>
 800275a:	4603      	mov	r3, r0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe ffb8 	bl	80016d4 <decToBcd>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <main+0x274>)
 800276a:	709a      	strb	r2, [r3, #2]
					HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 800276c:	2201      	movs	r2, #1
 800276e:	4918      	ldr	r1, [pc, #96]	; (80027d0 <main+0x274>)
 8002770:	4818      	ldr	r0, [pc, #96]	; (80027d4 <main+0x278>)
 8002772:	f005 fbd4 	bl	8007f1e <HAL_RTC_SetTime>
					HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BCD);
 8002776:	2201      	movs	r2, #1
 8002778:	4914      	ldr	r1, [pc, #80]	; (80027cc <main+0x270>)
 800277a:	4816      	ldr	r0, [pc, #88]	; (80027d4 <main+0x278>)
 800277c:	f005 fcea 	bl	8008154 <HAL_RTC_SetDate>
					myprintf("Done!\n\r");
 8002780:	4815      	ldr	r0, [pc, #84]	; (80027d8 <main+0x27c>)
 8002782:	f7ff f81d 	bl	80017c0 <myprintf>
					timeset = true;
 8002786:	2301      	movs	r3, #1
 8002788:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					break;
 800278c:	e02e      	b.n	80027ec <main+0x290>
 800278e:	bf00      	nop
 8002790:	08012830 	.word	0x08012830
 8002794:	08012844 	.word	0x08012844
 8002798:	0801287c 	.word	0x0801287c
 800279c:	20000000 	.word	0x20000000
 80027a0:	2000021c 	.word	0x2000021c
 80027a4:	080128a4 	.word	0x080128a4
 80027a8:	200005cc 	.word	0x200005cc
 80027ac:	200004c4 	.word	0x200004c4
 80027b0:	080128e0 	.word	0x080128e0
 80027b4:	20000218 	.word	0x20000218
 80027b8:	20000674 	.word	0x20000674
 80027bc:	08012604 	.word	0x08012604
 80027c0:	08012900 	.word	0x08012900
 80027c4:	08012914 	.word	0x08012914
 80027c8:	08012928 	.word	0x08012928
 80027cc:	200005c8 	.word	0x200005c8
 80027d0:	20000460 	.word	0x20000460
 80027d4:	200005d4 	.word	0x200005d4
 80027d8:	08012944 	.word	0x08012944
		while(!timeset){// wait to receive current date and time
 80027dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80027e0:	f083 0301 	eor.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f47f af33 	bne.w	8002652 <main+0xf6>
				}
			}
		}// smyčka pro nastavení času

		// zapni sledování uartu
		if(RXDone){
 80027ec:	4bd2      	ldr	r3, [pc, #840]	; (8002b38 <main+0x5dc>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8282 	beq.w	8002cfc <main+0x7a0>
			// hledám packet s nastavením: {mode; temp; hum}
			uint8_t left = strcspn(RXLine,"{");
 80027f8:	49d0      	ldr	r1, [pc, #832]	; (8002b3c <main+0x5e0>)
 80027fa:	48d1      	ldr	r0, [pc, #836]	; (8002b40 <main+0x5e4>)
 80027fc:	f00c fa11 	bl	800ec22 <strcspn>
 8002800:	4603      	mov	r3, r0
 8002802:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			uint8_t right = strcspn(RXLine,"}");
 8002806:	49cf      	ldr	r1, [pc, #828]	; (8002b44 <main+0x5e8>)
 8002808:	48cd      	ldr	r0, [pc, #820]	; (8002b40 <main+0x5e4>)
 800280a:	f00c fa0a 	bl	800ec22 <strcspn>
 800280e:	4603      	mov	r3, r0
 8002810:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			uint8_t tmp_idx;
			uint8_t tmp_idx2;
			if(left < right && right != strlen(RXLine)){
 8002814:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8002818:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800281c:	429a      	cmp	r2, r3
 800281e:	f080 8154 	bcs.w	8002aca <main+0x56e>
 8002822:	f897 404a 	ldrb.w	r4, [r7, #74]	; 0x4a
 8002826:	48c6      	ldr	r0, [pc, #792]	; (8002b40 <main+0x5e4>)
 8002828:	f7fd fcdc 	bl	80001e4 <strlen>
 800282c:	4603      	mov	r3, r0
 800282e:	429c      	cmp	r4, r3
 8002830:	f000 814b 	beq.w	8002aca <main+0x56e>
				myprintf("Packet captured!\n\r");
 8002834:	48c4      	ldr	r0, [pc, #784]	; (8002b48 <main+0x5ec>)
 8002836:	f7fe ffc3 	bl	80017c0 <myprintf>
				tmp_idx = strcspn(RXLine,";");
 800283a:	49c4      	ldr	r1, [pc, #784]	; (8002b4c <main+0x5f0>)
 800283c:	48c0      	ldr	r0, [pc, #768]	; (8002b40 <main+0x5e4>)
 800283e:	f00c f9f0 	bl	800ec22 <strcspn>
 8002842:	4603      	mov	r3, r0
 8002844:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				tmp_idx2 = strcspn(&RXLine[tmp_idx+1],";") + tmp_idx + 1;//druhý středník => mám vše
 8002848:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800284c:	3301      	adds	r3, #1
 800284e:	4abc      	ldr	r2, [pc, #752]	; (8002b40 <main+0x5e4>)
 8002850:	4413      	add	r3, r2
 8002852:	49be      	ldr	r1, [pc, #760]	; (8002b4c <main+0x5f0>)
 8002854:	4618      	mov	r0, r3
 8002856:	f00c f9e4 	bl	800ec22 <strcspn>
 800285a:	4603      	mov	r3, r0
 800285c:	b2da      	uxtb	r2, r3
 800285e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002862:	4413      	add	r3, r2
 8002864:	b2db      	uxtb	r3, r3
 8002866:	3301      	adds	r3, #1
 8002868:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				if(tmp_idx == strlen(RXLine) || tmp_idx2 >= strlen(RXLine)){
 800286c:	f897 4049 	ldrb.w	r4, [r7, #73]	; 0x49
 8002870:	48b3      	ldr	r0, [pc, #716]	; (8002b40 <main+0x5e4>)
 8002872:	f7fd fcb7 	bl	80001e4 <strlen>
 8002876:	4603      	mov	r3, r0
 8002878:	429c      	cmp	r4, r3
 800287a:	d008      	beq.n	800288e <main+0x332>
 800287c:	f897 4048 	ldrb.w	r4, [r7, #72]	; 0x48
 8002880:	48af      	ldr	r0, [pc, #700]	; (8002b40 <main+0x5e4>)
 8002882:	f7fd fcaf 	bl	80001e4 <strlen>
 8002886:	4603      	mov	r3, r0
 8002888:	429c      	cmp	r4, r3
 800288a:	f0c0 808e 	bcc.w	80029aa <main+0x44e>
					if(tmp_idx != strlen(RXLine)){// mám jen jeden středník, pak předpokládám, že přišla kalibrační data
 800288e:	f897 4049 	ldrb.w	r4, [r7, #73]	; 0x49
 8002892:	48ab      	ldr	r0, [pc, #684]	; (8002b40 <main+0x5e4>)
 8002894:	f7fd fca6 	bl	80001e4 <strlen>
 8002898:	4603      	mov	r3, r0
 800289a:	429c      	cmp	r4, r3
 800289c:	f000 8081 	beq.w	80029a2 <main+0x446>
						memcpy(tmp_char,&RXLine[left+1],tmp_idx-left-1);
 80028a0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80028a4:	3301      	adds	r3, #1
 80028a6:	4aa6      	ldr	r2, [pc, #664]	; (8002b40 <main+0x5e4>)
 80028a8:	1899      	adds	r1, r3, r2
 80028aa:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80028ae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	461a      	mov	r2, r3
 80028b8:	463b      	mov	r3, r7
 80028ba:	4618      	mov	r0, r3
 80028bc:	f00b fae6 	bl	800de8c <memcpy>
						tmp_char[tmp_idx-left-1] = '\0';
 80028c0:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80028c4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80028d0:	4413      	add	r3, r2
 80028d2:	2200      	movs	r2, #0
 80028d4:	f803 2c68 	strb.w	r2, [r3, #-104]
						k0_temp = (float)atof(tmp_char);
 80028d8:	463b      	mov	r3, r7
 80028da:	4618      	mov	r0, r3
 80028dc:	f00b fa8a 	bl	800ddf4 <atof>
 80028e0:	ec53 2b10 	vmov	r2, r3, d0
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f98e 	bl	8000c08 <__aeabi_d2f>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4a98      	ldr	r2, [pc, #608]	; (8002b50 <main+0x5f4>)
 80028f0:	6013      	str	r3, [r2, #0]
						memcpy(tmp_char,&RXLine[tmp_idx+1],right-tmp_idx-1);// počítám s tím, že { nemusí být na nulové pozici
 80028f2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80028f6:	3301      	adds	r3, #1
 80028f8:	4a91      	ldr	r2, [pc, #580]	; (8002b40 <main+0x5e4>)
 80028fa:	1899      	adds	r1, r3, r2
 80028fc:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8002900:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	461a      	mov	r2, r3
 800290a:	463b      	mov	r3, r7
 800290c:	4618      	mov	r0, r3
 800290e:	f00b fabd 	bl	800de8c <memcpy>
						tmp_char[right-tmp_idx-1] = '\0';
 8002912:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8002916:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002922:	4413      	add	r3, r2
 8002924:	2200      	movs	r2, #0
 8002926:	f803 2c68 	strb.w	r2, [r3, #-104]
						k1_temp = (float)atof(tmp_char);
 800292a:	463b      	mov	r3, r7
 800292c:	4618      	mov	r0, r3
 800292e:	f00b fa61 	bl	800ddf4 <atof>
 8002932:	ec53 2b10 	vmov	r2, r3, d0
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	f7fe f965 	bl	8000c08 <__aeabi_d2f>
 800293e:	4603      	mov	r3, r0
 8002940:	4a84      	ldr	r2, [pc, #528]	; (8002b54 <main+0x5f8>)
 8002942:	6013      	str	r3, [r2, #0]
						myprintf("Calibration set!\n\r");
 8002944:	4884      	ldr	r0, [pc, #528]	; (8002b58 <main+0x5fc>)
 8002946:	f7fe ff3b 	bl	80017c0 <myprintf>
						myprintf("k0: %f\t k1: %e\n\r",k0_temp,k1_temp);
 800294a:	4b81      	ldr	r3, [pc, #516]	; (8002b50 <main+0x5f4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fe0a 	bl	8000568 <__aeabi_f2d>
 8002954:	4604      	mov	r4, r0
 8002956:	460d      	mov	r5, r1
 8002958:	4b7e      	ldr	r3, [pc, #504]	; (8002b54 <main+0x5f8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fe03 	bl	8000568 <__aeabi_f2d>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	e9cd 2300 	strd	r2, r3, [sp]
 800296a:	4622      	mov	r2, r4
 800296c:	462b      	mov	r3, r5
 800296e:	487b      	ldr	r0, [pc, #492]	; (8002b5c <main+0x600>)
 8002970:	f7fe ff26 	bl	80017c0 <myprintf>
						myprintf("Saving..\n\r");
 8002974:	487a      	ldr	r0, [pc, #488]	; (8002b60 <main+0x604>)
 8002976:	f7fe ff23 	bl	80017c0 <myprintf>
						if(saveCalibration(k0_temp,k1_temp)){
 800297a:	4b75      	ldr	r3, [pc, #468]	; (8002b50 <main+0x5f4>)
 800297c:	edd3 7a00 	vldr	s15, [r3]
 8002980:	4b74      	ldr	r3, [pc, #464]	; (8002b54 <main+0x5f8>)
 8002982:	ed93 7a00 	vldr	s14, [r3]
 8002986:	eef0 0a47 	vmov.f32	s1, s14
 800298a:	eeb0 0a67 	vmov.f32	s0, s15
 800298e:	f7fe f9d5 	bl	8000d3c <saveCalibration>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8096 	beq.w	8002ac6 <main+0x56a>
							myprintf("Calibration saved!\n\r");
 800299a:	4872      	ldr	r0, [pc, #456]	; (8002b64 <main+0x608>)
 800299c:	f7fe ff10 	bl	80017c0 <myprintf>
					if(tmp_idx != strlen(RXLine)){// mám jen jeden středník, pak předpokládám, že přišla kalibrační data
 80029a0:	e091      	b.n	8002ac6 <main+0x56a>
						}
					}else{
						myprintf("Not enough items inside the packet!");
 80029a2:	4871      	ldr	r0, [pc, #452]	; (8002b68 <main+0x60c>)
 80029a4:	f7fe ff0c 	bl	80017c0 <myprintf>
					if(tmp_idx != strlen(RXLine)){// mám jen jeden středník, pak předpokládám, že přišla kalibrační data
 80029a8:	e08d      	b.n	8002ac6 <main+0x56a>
					}
				}else{
					memcpy(tmp_char,&RXLine[left+1],tmp_idx-left-1);
 80029aa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80029ae:	3301      	adds	r3, #1
 80029b0:	4a63      	ldr	r2, [pc, #396]	; (8002b40 <main+0x5e4>)
 80029b2:	1899      	adds	r1, r3, r2
 80029b4:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80029b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	461a      	mov	r2, r3
 80029c2:	463b      	mov	r3, r7
 80029c4:	4618      	mov	r0, r3
 80029c6:	f00b fa61 	bl	800de8c <memcpy>
					tmp_char[tmp_idx-left-1] = '\0';
 80029ca:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80029ce:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80029da:	4413      	add	r3, r2
 80029dc:	2200      	movs	r2, #0
 80029de:	f803 2c68 	strb.w	r2, [r3, #-104]
					modeset = atoi(tmp_char);
 80029e2:	463b      	mov	r3, r7
 80029e4:	4618      	mov	r0, r3
 80029e6:	f00b fa08 	bl	800ddfa <atoi>
 80029ea:	4603      	mov	r3, r0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					memcpy(tmp_char,&RXLine[tmp_idx+1],tmp_idx2-tmp_idx-1);
 80029f2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80029f6:	3301      	adds	r3, #1
 80029f8:	4a51      	ldr	r2, [pc, #324]	; (8002b40 <main+0x5e4>)
 80029fa:	1899      	adds	r1, r3, r2
 80029fc:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8002a00:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	461a      	mov	r2, r3
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f00b fa3d 	bl	800de8c <memcpy>
					tmp_char[tmp_idx2-tmp_idx-1] = '\0';
 8002a12:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8002a16:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002a22:	4413      	add	r3, r2
 8002a24:	2200      	movs	r2, #0
 8002a26:	f803 2c68 	strb.w	r2, [r3, #-104]
					tempset = atoi(tmp_char);
 8002a2a:	463b      	mov	r3, r7
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f00b f9e4 	bl	800ddfa <atoi>
 8002a32:	4603      	mov	r3, r0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					memcpy(tmp_char,&RXLine[tmp_idx2+1],right-tmp_idx2-1);
 8002a3a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a3e:	3301      	adds	r3, #1
 8002a40:	4a3f      	ldr	r2, [pc, #252]	; (8002b40 <main+0x5e4>)
 8002a42:	1899      	adds	r1, r3, r2
 8002a44:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8002a48:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	461a      	mov	r2, r3
 8002a52:	463b      	mov	r3, r7
 8002a54:	4618      	mov	r0, r3
 8002a56:	f00b fa19 	bl	800de8c <memcpy>
					tmp_char[right-tmp_idx2-1] = '\0';
 8002a5a:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8002a5e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002a6a:	4413      	add	r3, r2
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f803 2c68 	strb.w	r2, [r3, #-104]
					humset = atoi(tmp_char);
 8002a72:	463b      	mov	r3, r7
 8002a74:	4618      	mov	r0, r3
 8002a76:	f00b f9c0 	bl	800ddfa <atoi>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					myprintf("Variables set!\n\r");
 8002a82:	483a      	ldr	r0, [pc, #232]	; (8002b6c <main+0x610>)
 8002a84:	f7fe fe9c 	bl	80017c0 <myprintf>
					myprintf("Modeset: %i\t Tempset: %i\t Humset: %i\n\r",modeset,tempset,humset);
 8002a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a92:	461a      	mov	r2, r3
 8002a94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a98:	4835      	ldr	r0, [pc, #212]	; (8002b70 <main+0x614>)
 8002a9a:	f7fe fe91 	bl	80017c0 <myprintf>
					myprintf("Saving..\n\r");
 8002a9e:	4830      	ldr	r0, [pc, #192]	; (8002b60 <main+0x604>)
 8002aa0:	f7fe fe8e 	bl	80017c0 <myprintf>
					if(saveConfig(modeset, tempset, humset)){
 8002aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aa8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002aac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fc95 	bl	80013e0 <saveConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 811b 	beq.w	8002cf4 <main+0x798>
						myprintf("Variables saved!\n\r");
 8002abe:	482d      	ldr	r0, [pc, #180]	; (8002b74 <main+0x618>)
 8002ac0:	f7fe fe7e 	bl	80017c0 <myprintf>
				if(tmp_idx == strlen(RXLine) || tmp_idx2 >= strlen(RXLine)){
 8002ac4:	e116      	b.n	8002cf4 <main+0x798>
					if(tmp_idx != strlen(RXLine)){// mám jen jeden středník, pak předpokládám, že přišla kalibrační data
 8002ac6:	bf00      	nop
				if(tmp_idx == strlen(RXLine) || tmp_idx2 >= strlen(RXLine)){
 8002ac8:	e114      	b.n	8002cf4 <main+0x798>
					}
				}
			}else if(strstr(RXLine,"getdata") != NULL){
 8002aca:	492b      	ldr	r1, [pc, #172]	; (8002b78 <main+0x61c>)
 8002acc:	481c      	ldr	r0, [pc, #112]	; (8002b40 <main+0x5e4>)
 8002ace:	f00c f8cc 	bl	800ec6a <strstr>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d053      	beq.n	8002b80 <main+0x624>
				myprintf("\n\r");
 8002ad8:	4828      	ldr	r0, [pc, #160]	; (8002b7c <main+0x620>)
 8002ada:	f7fe fe71 	bl	80017c0 <myprintf>
				readData(&handle, &temperature, &humidity, &watter_cup, &watter_rez, &soil1, &soil2);
 8002ade:	f107 0433 	add.w	r4, r7, #51	; 0x33
 8002ae2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ae6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002aea:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af2:	9302      	str	r3, [sp, #8]
 8002af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	4623      	mov	r3, r4
 8002b02:	f7fe feb5 	bl	8001870 <readData>
				//writeToFile(temperature, humidity, watter_cup, watter_rez, soil1, soil2);
				sendMyData(temperature, humidity, watter_cup, watter_rez, soil1, soil2);
 8002b06:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002b0a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002b0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b12:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8002b16:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002b1a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8002b1e:	eef0 1a46 	vmov.f32	s3, s12
 8002b22:	eeb0 1a66 	vmov.f32	s2, s13
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	eef0 0a47 	vmov.f32	s1, s14
 8002b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b32:	f7ff fc2d 	bl	8002390 <sendMyData>
 8002b36:	e0de      	b.n	8002cf6 <main+0x79a>
 8002b38:	20000218 	.word	0x20000218
 8002b3c:	0801294c 	.word	0x0801294c
 8002b40:	20000674 	.word	0x20000674
 8002b44:	08012950 	.word	0x08012950
 8002b48:	08012954 	.word	0x08012954
 8002b4c:	08012968 	.word	0x08012968
 8002b50:	2000021c 	.word	0x2000021c
 8002b54:	20000000 	.word	0x20000000
 8002b58:	0801296c 	.word	0x0801296c
 8002b5c:	08012980 	.word	0x08012980
 8002b60:	08012994 	.word	0x08012994
 8002b64:	080129a0 	.word	0x080129a0
 8002b68:	080129b8 	.word	0x080129b8
 8002b6c:	080129dc 	.word	0x080129dc
 8002b70:	080129f0 	.word	0x080129f0
 8002b74:	08012a18 	.word	0x08012a18
 8002b78:	08012a2c 	.word	0x08012a2c
 8002b7c:	08012604 	.word	0x08012604
			}else if(strstr(RXLine,"getconfig") != NULL){
 8002b80:	49c0      	ldr	r1, [pc, #768]	; (8002e84 <main+0x928>)
 8002b82:	48c1      	ldr	r0, [pc, #772]	; (8002e88 <main+0x92c>)
 8002b84:	f00c f871 	bl	800ec6a <strstr>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00c      	beq.n	8002ba8 <main+0x64c>
				myprintf("\n\r");
 8002b8e:	48bf      	ldr	r0, [pc, #764]	; (8002e8c <main+0x930>)
 8002b90:	f7fe fe16 	bl	80017c0 <myprintf>
				sendConfig(modeset,humset,tempset);
 8002b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b98:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002b9c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fc45 	bl	8002430 <sendConfig>
 8002ba6:	e0a6      	b.n	8002cf6 <main+0x79a>
			}else if(strstr(RXLine,"getstatus") != NULL){
 8002ba8:	49b9      	ldr	r1, [pc, #740]	; (8002e90 <main+0x934>)
 8002baa:	48b7      	ldr	r0, [pc, #732]	; (8002e88 <main+0x92c>)
 8002bac:	f00c f85d 	bl	800ec6a <strstr>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <main+0x672>
				myprintf("\n\r");
 8002bb6:	48b5      	ldr	r0, [pc, #724]	; (8002e8c <main+0x930>)
 8002bb8:	f7fe fe02 	bl	80017c0 <myprintf>
				sendStatus(zalevam,ohrivam);
 8002bbc:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002bc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fc8c 	bl	80024e4 <sendStatus>
 8002bcc:	e093      	b.n	8002cf6 <main+0x79a>
			}else if(strstr(RXLine,"gettime") != NULL){
 8002bce:	49b1      	ldr	r1, [pc, #708]	; (8002e94 <main+0x938>)
 8002bd0:	48ad      	ldr	r0, [pc, #692]	; (8002e88 <main+0x92c>)
 8002bd2:	f00c f84a 	bl	800ec6a <strstr>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d035      	beq.n	8002c48 <main+0x6ec>
				myprintf("\n\r");
 8002bdc:	48ab      	ldr	r0, [pc, #684]	; (8002e8c <main+0x930>)
 8002bde:	f7fe fdef 	bl	80017c0 <myprintf>
				myprintf("Date: %02d.%02d.%02d\t",bcdToDec(sDate.Date),bcdToDec(sDate.Month),bcdToDec(sDate.Year));
 8002be2:	4bad      	ldr	r3, [pc, #692]	; (8002e98 <main+0x93c>)
 8002be4:	789b      	ldrb	r3, [r3, #2]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fd66 	bl	80016b8 <bcdToDec>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461c      	mov	r4, r3
 8002bf0:	4ba9      	ldr	r3, [pc, #676]	; (8002e98 <main+0x93c>)
 8002bf2:	785b      	ldrb	r3, [r3, #1]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fd5f 	bl	80016b8 <bcdToDec>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461d      	mov	r5, r3
 8002bfe:	4ba6      	ldr	r3, [pc, #664]	; (8002e98 <main+0x93c>)
 8002c00:	78db      	ldrb	r3, [r3, #3]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe fd58 	bl	80016b8 <bcdToDec>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	462a      	mov	r2, r5
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	48a3      	ldr	r0, [pc, #652]	; (8002e9c <main+0x940>)
 8002c10:	f7fe fdd6 	bl	80017c0 <myprintf>
				myprintf("Time: %02d:%02d:%02d\r\n",bcdToDec(sTime.Hours),bcdToDec(sTime.Minutes),bcdToDec(sTime.Seconds));
 8002c14:	4ba2      	ldr	r3, [pc, #648]	; (8002ea0 <main+0x944>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe fd4d 	bl	80016b8 <bcdToDec>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461c      	mov	r4, r3
 8002c22:	4b9f      	ldr	r3, [pc, #636]	; (8002ea0 <main+0x944>)
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fd46 	bl	80016b8 <bcdToDec>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461d      	mov	r5, r3
 8002c30:	4b9b      	ldr	r3, [pc, #620]	; (8002ea0 <main+0x944>)
 8002c32:	789b      	ldrb	r3, [r3, #2]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe fd3f 	bl	80016b8 <bcdToDec>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	462a      	mov	r2, r5
 8002c3e:	4621      	mov	r1, r4
 8002c40:	4898      	ldr	r0, [pc, #608]	; (8002ea4 <main+0x948>)
 8002c42:	f7fe fdbd 	bl	80017c0 <myprintf>
 8002c46:	e056      	b.n	8002cf6 <main+0x79a>
			}else if(strstr(RXLine,"settime") != NULL){
 8002c48:	4997      	ldr	r1, [pc, #604]	; (8002ea8 <main+0x94c>)
 8002c4a:	488f      	ldr	r0, [pc, #572]	; (8002e88 <main+0x92c>)
 8002c4c:	f00c f80d 	bl	800ec6a <strstr>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <main+0x708>
				myprintf("\n\r");
 8002c56:	488d      	ldr	r0, [pc, #564]	; (8002e8c <main+0x930>)
 8002c58:	f7fe fdb2 	bl	80017c0 <myprintf>
				timeset = false;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c62:	e048      	b.n	8002cf6 <main+0x79a>
			}else if(strstr(RXLine,"getconnection") != NULL){
 8002c64:	4991      	ldr	r1, [pc, #580]	; (8002eac <main+0x950>)
 8002c66:	4888      	ldr	r0, [pc, #544]	; (8002e88 <main+0x92c>)
 8002c68:	f00b ffff 	bl	800ec6a <strstr>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <main+0x724>
				myprintf("\n\r");
 8002c72:	4886      	ldr	r0, [pc, #536]	; (8002e8c <main+0x930>)
 8002c74:	f7fe fda4 	bl	80017c0 <myprintf>
				myprintf("connected\n\r");
 8002c78:	488d      	ldr	r0, [pc, #564]	; (8002eb0 <main+0x954>)
 8002c7a:	f7fe fda1 	bl	80017c0 <myprintf>
 8002c7e:	e03a      	b.n	8002cf6 <main+0x79a>
			}else if(strstr(RXLine,"getcalibration") != NULL){
 8002c80:	498c      	ldr	r1, [pc, #560]	; (8002eb4 <main+0x958>)
 8002c82:	4881      	ldr	r0, [pc, #516]	; (8002e88 <main+0x92c>)
 8002c84:	f00b fff1 	bl	800ec6a <strstr>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d018      	beq.n	8002cc0 <main+0x764>
				myprintf("\n\r");
 8002c8e:	487f      	ldr	r0, [pc, #508]	; (8002e8c <main+0x930>)
 8002c90:	f7fe fd96 	bl	80017c0 <myprintf>
				myprintf("{%e;%e}\n\r",k0_temp,k1_temp);
 8002c94:	4b88      	ldr	r3, [pc, #544]	; (8002eb8 <main+0x95c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fc65 	bl	8000568 <__aeabi_f2d>
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	460d      	mov	r5, r1
 8002ca2:	4b86      	ldr	r3, [pc, #536]	; (8002ebc <main+0x960>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc5e 	bl	8000568 <__aeabi_f2d>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	e9cd 2300 	strd	r2, r3, [sp]
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	462b      	mov	r3, r5
 8002cb8:	4881      	ldr	r0, [pc, #516]	; (8002ec0 <main+0x964>)
 8002cba:	f7fe fd81 	bl	80017c0 <myprintf>
 8002cbe:	e01a      	b.n	8002cf6 <main+0x79a>
			}else if(strstr(RXLine,"getrawtemp") != NULL){
 8002cc0:	4980      	ldr	r1, [pc, #512]	; (8002ec4 <main+0x968>)
 8002cc2:	4871      	ldr	r0, [pc, #452]	; (8002e88 <main+0x92c>)
 8002cc4:	f00b ffd1 	bl	800ec6a <strstr>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d013      	beq.n	8002cf6 <main+0x79a>
				myprintf("\n\r");
 8002cce:	486f      	ldr	r0, [pc, #444]	; (8002e8c <main+0x930>)
 8002cd0:	f7fe fd76 	bl	80017c0 <myprintf>
				float temp = getRawTemp(&handle);
 8002cd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe f81b 	bl	8000d14 <getRawTemp>
 8002cde:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
				myprintf("{%f}\n\r",temp);
 8002ce2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002ce4:	f7fd fc40 	bl	8000568 <__aeabi_f2d>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4876      	ldr	r0, [pc, #472]	; (8002ec8 <main+0x96c>)
 8002cee:	f7fe fd67 	bl	80017c0 <myprintf>
 8002cf2:	e000      	b.n	8002cf6 <main+0x79a>
				if(tmp_idx == strlen(RXLine) || tmp_idx2 >= strlen(RXLine)){
 8002cf4:	bf00      	nop
			}
			RXDone = false;
 8002cf6:	4b75      	ldr	r3, [pc, #468]	; (8002ecc <main+0x970>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
			//getLine();
		}//sledování uartu

		//Řízení
		readData(&handle, &temperature, &humidity, &watter_cup, &watter_rez, &soil1, &soil2);
 8002cfc:	f107 0433 	add.w	r4, r7, #51	; 0x33
 8002d00:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d04:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002d08:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d10:	9302      	str	r3, [sp, #8]
 8002d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	4623      	mov	r3, r4
 8002d20:	f7fe fda6 	bl	8001870 <readData>
		// čas v minutách
		time = bcdToDec(sTime.Hours)*60 + bcdToDec(sTime.Minutes) + bcdToDec(sTime.Seconds)/60;
 8002d24:	4b5e      	ldr	r3, [pc, #376]	; (8002ea0 <main+0x944>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe fcc5 	bl	80016b8 <bcdToDec>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	461c      	mov	r4, r3
 8002d3c:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <main+0x944>)
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fcb9 	bl	80016b8 <bcdToDec>
 8002d46:	4603      	mov	r3, r0
 8002d48:	441c      	add	r4, r3
 8002d4a:	4b55      	ldr	r3, [pc, #340]	; (8002ea0 <main+0x944>)
 8002d4c:	789b      	ldrb	r3, [r3, #2]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe fcb2 	bl	80016b8 <bcdToDec>
 8002d54:	4603      	mov	r3, r0
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <main+0x974>)
 8002d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4423      	add	r3, r4
 8002d64:	653b      	str	r3, [r7, #80]	; 0x50
		if(watter_rez != 0){// není prázdná nádrž
 8002d66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80c1 	beq.w	8002ef2 <main+0x996>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,GPIO_PIN_RESET);// red led
 8002d70:	2200      	movs	r2, #0
 8002d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d76:	4857      	ldr	r0, [pc, #348]	; (8002ed4 <main+0x978>)
 8002d78:	f002 fdd2 	bl	8005920 <HAL_GPIO_WritePin>
			switch(modeset){//režimy zalévání
 8002d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d12b      	bne.n	8002ddc <main+0x880>
			case 0:
				//plná miska
				//udržuje misku mezi max a med hodnotou

				if(!zalevam && watter_cup < 1){
 8002d84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d88:	f083 0301 	eor.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <main+0x852>
 8002d92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <main+0x852>
					// voda klesla pod med => zalij
					zalevam = true;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,GPIO_PIN_SET);// blue led
 8002da0:	2201      	movs	r2, #1
 8002da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002da6:	484b      	ldr	r0, [pc, #300]	; (8002ed4 <main+0x978>)
 8002da8:	f002 fdba 	bl	8005920 <HAL_GPIO_WritePin>
 8002dac:	e015      	b.n	8002dda <main+0x87e>
					//zalij(1000);
				}else if(zalevam && watter_cup < 2){
 8002dae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <main+0x862>
 8002db6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d90d      	bls.n	8002dda <main+0x87e>
					//voda není na max => dále zalévám
					//zalij(1000);
				}else if(zalevam){
 8002dbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <main+0x87e>
					// vypni zalévání
					zalevam = false;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,GPIO_PIN_RESET);// blue led
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dd2:	4840      	ldr	r0, [pc, #256]	; (8002ed4 <main+0x978>)
 8002dd4:	f002 fda4 	bl	8005920 <HAL_GPIO_WritePin>
				}
				break;
 8002dd8:	e7ff      	b.n	8002dda <main+0x87e>
 8002dda:	bf00      	nop
			}//switch
			// proces zalévání
			// zalévá se pouze krátkce v časových intervalech
			if(stop_day == -1 && zalevam){// vynulováno pak zapni stopky
 8002ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de2:	d132      	bne.n	8002e4a <main+0x8ee>
 8002de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d02e      	beq.n	8002e4a <main+0x8ee>
				stop_day = bcdToDec(sDate.Date);
 8002dec:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <main+0x93c>)
 8002dee:	789b      	ldrb	r3, [r3, #2]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe fc61 	bl	80016b8 <bcdToDec>
 8002df6:	4603      	mov	r3, r0
 8002df8:	65fb      	str	r3, [r7, #92]	; 0x5c
				stop_time = time;
 8002dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfc:	65bb      	str	r3, [r7, #88]	; 0x58
				// před zalitím uložím data, abych mohl přímo pozorovat změny zapřčíčiněné zaléváním
				writeToFile(temperature, humidity, watter_cup, watter_rez, soil1, soil2);
 8002dfe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e02:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002e06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e0a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8002e0e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002e12:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8002e16:	eef0 1a46 	vmov.f32	s3, s12
 8002e1a:	eeb0 1a66 	vmov.f32	s2, s13
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	eef0 0a47 	vmov.f32	s1, s14
 8002e26:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2a:	f7ff f86b 	bl	8001f04 <writeToFile>
				if(watter_rez < 2){
 8002e2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d804      	bhi.n	8002e40 <main+0x8e4>
					zalij(2000);
 8002e36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e3a:	f7ff fb23 	bl	8002484 <zalij>
				if(watter_rez < 2){
 8002e3e:	e061      	b.n	8002f04 <main+0x9a8>
				}else{
					zalij(1000);
 8002e40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e44:	f7ff fb1e 	bl	8002484 <zalij>
				if(watter_rez < 2){
 8002e48:	e05c      	b.n	8002f04 <main+0x9a8>
				}

			}else if(zalevam){
 8002e4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d042      	beq.n	8002ed8 <main+0x97c>
				if(bcdToDec(sDate.Date) != stop_day){// při změně dne je třeba přičíst (odečíst) den
 8002e52:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <main+0x93c>)
 8002e54:	789b      	ldrb	r3, [r3, #2]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe fc2e 	bl	80016b8 <bcdToDec>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <main+0x912>
					stop_time = stop_time - 24*60;
 8002e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e68:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 8002e6c:	65bb      	str	r3, [r7, #88]	; 0x58
				}
				if(time - stop_time > watter_period){// každých pět minut na 1.5 sekundu zalij
 8002e6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e76:	429a      	cmp	r2, r3
 8002e78:	da44      	bge.n	8002f04 <main+0x9a8>
					stop_day = -1;// vynulování stopek
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e80:	e040      	b.n	8002f04 <main+0x9a8>
 8002e82:	bf00      	nop
 8002e84:	08012a34 	.word	0x08012a34
 8002e88:	20000674 	.word	0x20000674
 8002e8c:	08012604 	.word	0x08012604
 8002e90:	08012a40 	.word	0x08012a40
 8002e94:	08012a4c 	.word	0x08012a4c
 8002e98:	200005c8 	.word	0x200005c8
 8002e9c:	08012a54 	.word	0x08012a54
 8002ea0:	20000460 	.word	0x20000460
 8002ea4:	08012a6c 	.word	0x08012a6c
 8002ea8:	08012a84 	.word	0x08012a84
 8002eac:	08012a8c 	.word	0x08012a8c
 8002eb0:	08012a9c 	.word	0x08012a9c
 8002eb4:	08012aa8 	.word	0x08012aa8
 8002eb8:	2000021c 	.word	0x2000021c
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	08012ab8 	.word	0x08012ab8
 8002ec4:	08012ac4 	.word	0x08012ac4
 8002ec8:	08012ad0 	.word	0x08012ad0
 8002ecc:	20000218 	.word	0x20000218
 8002ed0:	88888889 	.word	0x88888889
 8002ed4:	48001000 	.word	0x48001000
				}
			}else{// nezalévám .. pak vynuluj stopky
				// pokud nastane zákmit .. nesmím hned začít pumpovat vodu ..
				// voda se může pumpovat jen v 5 min intervalech
				if(time - stop_time > watter_period){// každých pět minut na 1.5 sekundu zalij
 8002ed8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	da0f      	bge.n	8002f04 <main+0x9a8>
					stop_day = -1;// vynulování stopek
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
					stop_time = -1;
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eee:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ef0:	e008      	b.n	8002f04 <main+0x9a8>
				}
			}
		}else{
			zalevam = false;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,GPIO_PIN_SET);// red led
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002efe:	4856      	ldr	r0, [pc, #344]	; (8003058 <main+0xafc>)
 8002f00:	f002 fd0e 	bl	8005920 <HAL_GPIO_WritePin>
		}
		// ohřívání
		if(tempset > 0){
 8002f04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d041      	beq.n	8002f90 <main+0xa34>
			if(temperature < tempset - 1 && !ohrivam){
 8002f0c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f10:	3b01      	subs	r3, #1
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f1a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	dd12      	ble.n	8002f4e <main+0x9f2>
 8002f28:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002f2c:	f083 0301 	eor.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <main+0x9f2>
				HAL_GPIO_WritePin(lamp_GPIO_Port,lamp_Pin,GPIO_PIN_SET);
 8002f36:	2201      	movs	r2, #1
 8002f38:	2110      	movs	r1, #16
 8002f3a:	4848      	ldr	r0, [pc, #288]	; (800305c <main+0xb00>)
 8002f3c:	f002 fcf0 	bl	8005920 <HAL_GPIO_WritePin>
				ohrivam = true;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				myprintf("{heating_on}\n\r");
 8002f46:	4846      	ldr	r0, [pc, #280]	; (8003060 <main+0xb04>)
 8002f48:	f7fe fc3a 	bl	80017c0 <myprintf>
 8002f4c:	e028      	b.n	8002fa0 <main+0xa44>
			}else if(ohrivam && temperature > tempset + 0.5f){	// překročení požadované teploty .. vypni ohřívání
 8002f4e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d024      	beq.n	8002fa0 <main+0xa44>
 8002f56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f76:	d513      	bpl.n	8002fa0 <main+0xa44>
				HAL_GPIO_WritePin(lamp_GPIO_Port,lamp_Pin,GPIO_PIN_RESET);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2110      	movs	r1, #16
 8002f7c:	4837      	ldr	r0, [pc, #220]	; (800305c <main+0xb00>)
 8002f7e:	f002 fccf 	bl	8005920 <HAL_GPIO_WritePin>
				ohrivam = false;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				myprintf("{heating_off}\n\r");
 8002f88:	4836      	ldr	r0, [pc, #216]	; (8003064 <main+0xb08>)
 8002f8a:	f7fe fc19 	bl	80017c0 <myprintf>
 8002f8e:	e007      	b.n	8002fa0 <main+0xa44>
			}
		}else{
			HAL_GPIO_WritePin(lamp_GPIO_Port,lamp_Pin,GPIO_PIN_RESET);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2110      	movs	r1, #16
 8002f94:	4831      	ldr	r0, [pc, #196]	; (800305c <main+0xb00>)
 8002f96:	f002 fcc3 	bl	8005920 <HAL_GPIO_WritePin>
			ohrivam = false;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		}


		//Logování dat
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);//!!!!! POZOR .. čas se zasekne, pokud hned potom nevolám getDate!!!!!!!!!§
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	4931      	ldr	r1, [pc, #196]	; (8003068 <main+0xb0c>)
 8002fa4:	4831      	ldr	r0, [pc, #196]	; (800306c <main+0xb10>)
 8002fa6:	f005 f877 	bl	8008098 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8002faa:	2201      	movs	r2, #1
 8002fac:	4930      	ldr	r1, [pc, #192]	; (8003070 <main+0xb14>)
 8002fae:	482f      	ldr	r0, [pc, #188]	; (800306c <main+0xb10>)
 8002fb0:	f005 f977 	bl	80082a2 <HAL_RTC_GetDate>
		if(time_hours != bcdToDec(sTime.Hours)){	// čas se změnil, zkontroluj zda nemám logovat data
 8002fb4:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <main+0xb0c>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe fb7d 	bl	80016b8 <bcdToDec>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d03c      	beq.n	8003042 <main+0xae6>
			time_hours = bcdToDec(sTime.Hours);
 8002fc8:	4b27      	ldr	r3, [pc, #156]	; (8003068 <main+0xb0c>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe fb73 	bl	80016b8 <bcdToDec>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	663b      	str	r3, [r7, #96]	; 0x60
			if(time_hours%log_perioda == 0){
 8002fd6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fdc:	fb93 f1f2 	sdiv	r1, r3, r2
 8002fe0:	fb02 f201 	mul.w	r2, r2, r1
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d12b      	bne.n	8003042 <main+0xae6>
				readData(&handle, &temperature, &humidity, &watter_cup, &watter_rez, &soil1, &soil2);
 8002fea:	f107 0433 	add.w	r4, r7, #51	; 0x33
 8002fee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ff2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002ff6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ffe:	9302      	str	r3, [sp, #8]
 8003000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	4623      	mov	r3, r4
 800300e:	f7fe fc2f 	bl	8001870 <readData>
				writeToFile(temperature, humidity, watter_cup, watter_rez, soil1, soil2);
 8003012:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003016:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800301a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800301e:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8003022:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003026:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800302a:	eef0 1a46 	vmov.f32	s3, s12
 800302e:	eeb0 1a66 	vmov.f32	s2, s13
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	eef0 0a47 	vmov.f32	s1, s14
 800303a:	eeb0 0a67 	vmov.f32	s0, s15
 800303e:	f7fe ff61 	bl	8001f04 <writeToFile>
			}
		}
		//myprintf("test\n\r");
    	//myprintf("Date: %02d.%02d.%02d\t",bcdToDec(sDate.Date),bcdToDec(sDate.Month),bcdToDec(sDate.Year));
		//myprintf("Time: %02d:%02d:%02d\r\n\r",bcdToDec(sTime.Hours),bcdToDec(sTime.Minutes),bcdToDec(sTime.Seconds));
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8003042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003046:	4804      	ldr	r0, [pc, #16]	; (8003058 <main+0xafc>)
 8003048:	f002 fc82 	bl	8005950 <HAL_GPIO_TogglePin>
    	//HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);//!!!!! POZOR .. čas se zasekne, pokud hned potom nevolám getDate!!!!!!!!!§
    	//HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
		HAL_Delay(100);
 800304c:	2064      	movs	r0, #100	; 0x64
 800304e:	f001 f87b 	bl	8004148 <HAL_Delay>
    	uart_buffering();
 8003052:	f7ff bafa 	b.w	800264a <main+0xee>
 8003056:	bf00      	nop
 8003058:	48001000 	.word	0x48001000
 800305c:	48001400 	.word	0x48001400
 8003060:	08012ad8 	.word	0x08012ad8
 8003064:	08012ae8 	.word	0x08012ae8
 8003068:	20000460 	.word	0x20000460
 800306c:	200005d4 	.word	0x200005d4
 8003070:	200005c8 	.word	0x200005c8

08003074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b09e      	sub	sp, #120	; 0x78
 8003078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800307a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800307e:	2228      	movs	r2, #40	; 0x28
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f00a ff10 	bl	800dea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003088:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003098:	463b      	mov	r3, r7
 800309a:	223c      	movs	r2, #60	; 0x3c
 800309c:	2100      	movs	r1, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	f00a ff02 	bl	800dea8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80030a4:	230b      	movs	r3, #11
 80030a6:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80030a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80030ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030ae:	2300      	movs	r3, #0
 80030b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030b2:	2301      	movs	r3, #1
 80030b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030b6:	2310      	movs	r3, #16
 80030b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80030ba:	2301      	movs	r3, #1
 80030bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030be:	2302      	movs	r3, #2
 80030c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80030c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030cc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 fba4 	bl	8006820 <HAL_RCC_OscConfig>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80030de:	f000 fb33 	bl	8003748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030e2:	230f      	movs	r3, #15
 80030e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030e6:	2302      	movs	r3, #2
 80030e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030ea:	2300      	movs	r3, #0
 80030ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030f4:	2300      	movs	r3, #0
 80030f6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80030f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030fc:	2101      	movs	r1, #1
 80030fe:	4618      	mov	r0, r3
 8003100:	f004 fa96 	bl	8007630 <HAL_RCC_ClockConfig>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800310a:	f000 fb1d 	bl	8003748 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <SystemClock_Config+0xcc>)
 8003110:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800311a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800311e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8003120:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003124:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003126:	463b      	mov	r3, r7
 8003128:	4618      	mov	r0, r3
 800312a:	f004 fcb7 	bl	8007a9c <HAL_RCCEx_PeriphCLKConfig>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003134:	f000 fb08 	bl	8003748 <Error_Handler>
  }
}
 8003138:	bf00      	nop
 800313a:	3778      	adds	r7, #120	; 0x78
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	00030021 	.word	0x00030021

08003144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	; 0x28
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800314a:	f107 031c 	add.w	r3, r7, #28
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
 8003164:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <MX_ADC1_Init+0xdc>)
 8003168:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800316c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800316e:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <MX_ADC1_Init+0xdc>)
 8003170:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003174:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003176:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <MX_ADC1_Init+0xdc>)
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800317c:	4b28      	ldr	r3, [pc, #160]	; (8003220 <MX_ADC1_Init+0xdc>)
 800317e:	2200      	movs	r2, #0
 8003180:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003182:	4b27      	ldr	r3, [pc, #156]	; (8003220 <MX_ADC1_Init+0xdc>)
 8003184:	2200      	movs	r2, #0
 8003186:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <MX_ADC1_Init+0xdc>)
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003190:	4b23      	ldr	r3, [pc, #140]	; (8003220 <MX_ADC1_Init+0xdc>)
 8003192:	2200      	movs	r2, #0
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003196:	4b22      	ldr	r3, [pc, #136]	; (8003220 <MX_ADC1_Init+0xdc>)
 8003198:	2201      	movs	r2, #1
 800319a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <MX_ADC1_Init+0xdc>)
 800319e:	2200      	movs	r2, #0
 80031a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80031a2:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <MX_ADC1_Init+0xdc>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <MX_ADC1_Init+0xdc>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031b0:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <MX_ADC1_Init+0xdc>)
 80031b2:	2204      	movs	r2, #4
 80031b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80031b6:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <MX_ADC1_Init+0xdc>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80031bc:	4b18      	ldr	r3, [pc, #96]	; (8003220 <MX_ADC1_Init+0xdc>)
 80031be:	2200      	movs	r2, #0
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031c2:	4817      	ldr	r0, [pc, #92]	; (8003220 <MX_ADC1_Init+0xdc>)
 80031c4:	f000 ffe4 	bl	8004190 <HAL_ADC_Init>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80031ce:	f000 fabb 	bl	8003748 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80031d6:	f107 031c 	add.w	r3, r7, #28
 80031da:	4619      	mov	r1, r3
 80031dc:	4810      	ldr	r0, [pc, #64]	; (8003220 <MX_ADC1_Init+0xdc>)
 80031de:	f001 fec9 	bl	8004f74 <HAL_ADCEx_MultiModeConfigChannel>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80031e8:	f000 faae 	bl	8003748 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80031ec:	2302      	movs	r3, #2
 80031ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031f0:	2301      	movs	r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003204:	1d3b      	adds	r3, r7, #4
 8003206:	4619      	mov	r1, r3
 8003208:	4805      	ldr	r0, [pc, #20]	; (8003220 <MX_ADC1_Init+0xdc>)
 800320a:	f001 fbc7 	bl	800499c <HAL_ADC_ConfigChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8003214:	f000 fa98 	bl	8003748 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003218:	bf00      	nop
 800321a:	3728      	adds	r7, #40	; 0x28
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20000474 	.word	0x20000474

08003224 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800322a:	463b      	mov	r3, r7
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]
 8003238:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800323a:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <MX_ADC2_Init+0xb4>)
 800323c:	4a27      	ldr	r2, [pc, #156]	; (80032dc <MX_ADC2_Init+0xb8>)
 800323e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003240:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <MX_ADC2_Init+0xb4>)
 8003242:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003246:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <MX_ADC2_Init+0xb4>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800324e:	4b22      	ldr	r3, [pc, #136]	; (80032d8 <MX_ADC2_Init+0xb4>)
 8003250:	2200      	movs	r2, #0
 8003252:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <MX_ADC2_Init+0xb4>)
 8003256:	2200      	movs	r2, #0
 8003258:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800325a:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <MX_ADC2_Init+0xb4>)
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <MX_ADC2_Init+0xb4>)
 8003264:	2200      	movs	r2, #0
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <MX_ADC2_Init+0xb4>)
 800326a:	2201      	movs	r2, #1
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <MX_ADC2_Init+0xb4>)
 8003270:	2200      	movs	r2, #0
 8003272:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003274:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <MX_ADC2_Init+0xb4>)
 8003276:	2201      	movs	r2, #1
 8003278:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <MX_ADC2_Init+0xb4>)
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <MX_ADC2_Init+0xb4>)
 8003284:	2204      	movs	r2, #4
 8003286:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003288:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <MX_ADC2_Init+0xb4>)
 800328a:	2200      	movs	r2, #0
 800328c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <MX_ADC2_Init+0xb4>)
 8003290:	2200      	movs	r2, #0
 8003292:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003294:	4810      	ldr	r0, [pc, #64]	; (80032d8 <MX_ADC2_Init+0xb4>)
 8003296:	f000 ff7b 	bl	8004190 <HAL_ADC_Init>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80032a0:	f000 fa52 	bl	8003748 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80032a4:	2301      	movs	r3, #1
 80032a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032a8:	2301      	movs	r3, #1
 80032aa:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032bc:	463b      	mov	r3, r7
 80032be:	4619      	mov	r1, r3
 80032c0:	4805      	ldr	r0, [pc, #20]	; (80032d8 <MX_ADC2_Init+0xb4>)
 80032c2:	f001 fb6b 	bl	800499c <HAL_ADC_ConfigChannel>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80032cc:	f000 fa3c 	bl	8003748 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80032d0:	bf00      	nop
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	200003c4 	.word	0x200003c4
 80032dc:	50000100 	.word	0x50000100

080032e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <MX_I2C1_Init+0x74>)
 80032e6:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <MX_I2C1_Init+0x78>)
 80032e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80032ea:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <MX_I2C1_Init+0x74>)
 80032ec:	4a1b      	ldr	r2, [pc, #108]	; (800335c <MX_I2C1_Init+0x7c>)
 80032ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032f0:	4b18      	ldr	r3, [pc, #96]	; (8003354 <MX_I2C1_Init+0x74>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032f6:	4b17      	ldr	r3, [pc, #92]	; (8003354 <MX_I2C1_Init+0x74>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032fc:	4b15      	ldr	r3, [pc, #84]	; (8003354 <MX_I2C1_Init+0x74>)
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <MX_I2C1_Init+0x74>)
 8003304:	2200      	movs	r2, #0
 8003306:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <MX_I2C1_Init+0x74>)
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <MX_I2C1_Init+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <MX_I2C1_Init+0x74>)
 8003316:	2200      	movs	r2, #0
 8003318:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800331a:	480e      	ldr	r0, [pc, #56]	; (8003354 <MX_I2C1_Init+0x74>)
 800331c:	f002 fb32 	bl	8005984 <HAL_I2C_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003326:	f000 fa0f 	bl	8003748 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800332a:	2100      	movs	r1, #0
 800332c:	4809      	ldr	r0, [pc, #36]	; (8003354 <MX_I2C1_Init+0x74>)
 800332e:	f003 f901 	bl	8006534 <HAL_I2CEx_ConfigAnalogFilter>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003338:	f000 fa06 	bl	8003748 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800333c:	2100      	movs	r1, #0
 800333e:	4805      	ldr	r0, [pc, #20]	; (8003354 <MX_I2C1_Init+0x74>)
 8003340:	f003 f943 	bl	80065ca <HAL_I2CEx_ConfigDigitalFilter>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800334a:	f000 f9fd 	bl	8003748 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000414 	.word	0x20000414
 8003358:	40005400 	.word	0x40005400
 800335c:	2000090e 	.word	0x2000090e

08003360 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003374:	2300      	movs	r3, #0
 8003376:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <MX_RTC_Init+0xac>)
 800337a:	4a25      	ldr	r2, [pc, #148]	; (8003410 <MX_RTC_Init+0xb0>)
 800337c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800337e:	4b23      	ldr	r3, [pc, #140]	; (800340c <MX_RTC_Init+0xac>)
 8003380:	2200      	movs	r2, #0
 8003382:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003384:	4b21      	ldr	r3, [pc, #132]	; (800340c <MX_RTC_Init+0xac>)
 8003386:	227f      	movs	r2, #127	; 0x7f
 8003388:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <MX_RTC_Init+0xac>)
 800338c:	22ff      	movs	r2, #255	; 0xff
 800338e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003390:	4b1e      	ldr	r3, [pc, #120]	; (800340c <MX_RTC_Init+0xac>)
 8003392:	2200      	movs	r2, #0
 8003394:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003396:	4b1d      	ldr	r3, [pc, #116]	; (800340c <MX_RTC_Init+0xac>)
 8003398:	2200      	movs	r2, #0
 800339a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <MX_RTC_Init+0xac>)
 800339e:	2200      	movs	r2, #0
 80033a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80033a2:	481a      	ldr	r0, [pc, #104]	; (800340c <MX_RTC_Init+0xac>)
 80033a4:	f004 fd2a 	bl	8007dfc <HAL_RTC_Init>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80033ae:	f000 f9cb 	bl	8003748 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	2201      	movs	r2, #1
 80033ca:	4619      	mov	r1, r3
 80033cc:	480f      	ldr	r0, [pc, #60]	; (800340c <MX_RTC_Init+0xac>)
 80033ce:	f004 fda6 	bl	8007f1e <HAL_RTC_SetTime>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80033d8:	f000 f9b6 	bl	8003748 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80033dc:	2301      	movs	r3, #1
 80033de:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80033e0:	2301      	movs	r3, #1
 80033e2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80033e4:	2301      	movs	r3, #1
 80033e6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80033ec:	463b      	mov	r3, r7
 80033ee:	2201      	movs	r2, #1
 80033f0:	4619      	mov	r1, r3
 80033f2:	4806      	ldr	r0, [pc, #24]	; (800340c <MX_RTC_Init+0xac>)
 80033f4:	f004 feae 	bl	8008154 <HAL_RTC_SetDate>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80033fe:	f000 f9a3 	bl	8003748 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003402:	bf00      	nop
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200005d4 	.word	0x200005d4
 8003410:	40002800 	.word	0x40002800

08003414 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <MX_SPI1_Init+0x74>)
 800341a:	4a1c      	ldr	r2, [pc, #112]	; (800348c <MX_SPI1_Init+0x78>)
 800341c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <MX_SPI1_Init+0x74>)
 8003420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <MX_SPI1_Init+0x74>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <MX_SPI1_Init+0x74>)
 800342e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003432:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003434:	4b14      	ldr	r3, [pc, #80]	; (8003488 <MX_SPI1_Init+0x74>)
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <MX_SPI1_Init+0x74>)
 800343c:	2200      	movs	r2, #0
 800343e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <MX_SPI1_Init+0x74>)
 8003442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003446:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <MX_SPI1_Init+0x74>)
 800344a:	2230      	movs	r2, #48	; 0x30
 800344c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <MX_SPI1_Init+0x74>)
 8003450:	2200      	movs	r2, #0
 8003452:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <MX_SPI1_Init+0x74>)
 8003456:	2200      	movs	r2, #0
 8003458:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <MX_SPI1_Init+0x74>)
 800345c:	2200      	movs	r2, #0
 800345e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003460:	4b09      	ldr	r3, [pc, #36]	; (8003488 <MX_SPI1_Init+0x74>)
 8003462:	2207      	movs	r2, #7
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <MX_SPI1_Init+0x74>)
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <MX_SPI1_Init+0x74>)
 800346e:	2208      	movs	r2, #8
 8003470:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003472:	4805      	ldr	r0, [pc, #20]	; (8003488 <MX_SPI1_Init+0x74>)
 8003474:	f004 fff4 	bl	8008460 <HAL_SPI_Init>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800347e:	f000 f963 	bl	8003748 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200006f4 	.word	0x200006f4
 800348c:	40013000 	.word	0x40013000

08003490 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <MX_SPI2_Init+0x74>)
 8003496:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <MX_SPI2_Init+0x78>)
 8003498:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <MX_SPI2_Init+0x74>)
 800349c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034a2:	4b18      	ldr	r3, [pc, #96]	; (8003504 <MX_SPI2_Init+0x74>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80034a8:	4b16      	ldr	r3, [pc, #88]	; (8003504 <MX_SPI2_Init+0x74>)
 80034aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <MX_SPI2_Init+0x74>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034b6:	4b13      	ldr	r3, [pc, #76]	; (8003504 <MX_SPI2_Init+0x74>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <MX_SPI2_Init+0x74>)
 80034be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <MX_SPI2_Init+0x74>)
 80034c6:	2238      	movs	r2, #56	; 0x38
 80034c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <MX_SPI2_Init+0x74>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <MX_SPI2_Init+0x74>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <MX_SPI2_Init+0x74>)
 80034d8:	2200      	movs	r2, #0
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <MX_SPI2_Init+0x74>)
 80034de:	2207      	movs	r2, #7
 80034e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <MX_SPI2_Init+0x74>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <MX_SPI2_Init+0x74>)
 80034ea:	2208      	movs	r2, #8
 80034ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80034ee:	4805      	ldr	r0, [pc, #20]	; (8003504 <MX_SPI2_Init+0x74>)
 80034f0:	f004 ffb6 	bl	8008460 <HAL_SPI_Init>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80034fa:	f000 f925 	bl	8003748 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000360 	.word	0x20000360
 8003508:	40003800 	.word	0x40003800

0800350c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003510:	4b14      	ldr	r3, [pc, #80]	; (8003564 <MX_USART1_UART_Init+0x58>)
 8003512:	4a15      	ldr	r2, [pc, #84]	; (8003568 <MX_USART1_UART_Init+0x5c>)
 8003514:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <MX_USART1_UART_Init+0x58>)
 8003518:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800351c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <MX_USART1_UART_Init+0x58>)
 8003520:	2200      	movs	r2, #0
 8003522:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <MX_USART1_UART_Init+0x58>)
 8003526:	2200      	movs	r2, #0
 8003528:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800352a:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <MX_USART1_UART_Init+0x58>)
 800352c:	2200      	movs	r2, #0
 800352e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <MX_USART1_UART_Init+0x58>)
 8003532:	220c      	movs	r2, #12
 8003534:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <MX_USART1_UART_Init+0x58>)
 8003538:	2200      	movs	r2, #0
 800353a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <MX_USART1_UART_Init+0x58>)
 800353e:	2200      	movs	r2, #0
 8003540:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <MX_USART1_UART_Init+0x58>)
 8003544:	2200      	movs	r2, #0
 8003546:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <MX_USART1_UART_Init+0x58>)
 800354a:	2200      	movs	r2, #0
 800354c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800354e:	4805      	ldr	r0, [pc, #20]	; (8003564 <MX_USART1_UART_Init+0x58>)
 8003550:	f005 fba8 	bl	8008ca4 <HAL_UART_Init>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800355a:	f000 f8f5 	bl	8003748 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */
  //HAL_NVIC_SetPriority(USART1_IRQn,0,0);
  //HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE END USART1_Init 2 */

}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200004c4 	.word	0x200004c4
 8003568:	40013800 	.word	0x40013800

0800356c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003570:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <MX_USB_PCD_Init+0x3c>)
 8003572:	4a0e      	ldr	r2, [pc, #56]	; (80035ac <MX_USB_PCD_Init+0x40>)
 8003574:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <MX_USB_PCD_Init+0x3c>)
 8003578:	2208      	movs	r2, #8
 800357a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <MX_USB_PCD_Init+0x3c>)
 800357e:	2202      	movs	r2, #2
 8003580:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <MX_USB_PCD_Init+0x3c>)
 8003584:	2202      	movs	r2, #2
 8003586:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <MX_USB_PCD_Init+0x3c>)
 800358a:	2200      	movs	r2, #0
 800358c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <MX_USB_PCD_Init+0x3c>)
 8003590:	2200      	movs	r2, #0
 8003592:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003594:	4804      	ldr	r0, [pc, #16]	; (80035a8 <MX_USB_PCD_Init+0x3c>)
 8003596:	f003 f864 	bl	8006662 <HAL_PCD_Init>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80035a0:	f000 f8d2 	bl	8003748 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80035a4:	bf00      	nop
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000758 	.word	0x20000758
 80035ac:	40005c00 	.word	0x40005c00

080035b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b6:	f107 0314 	add.w	r3, r7, #20
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	605a      	str	r2, [r3, #4]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035c6:	4b5b      	ldr	r3, [pc, #364]	; (8003734 <MX_GPIO_Init+0x184>)
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4a5a      	ldr	r2, [pc, #360]	; (8003734 <MX_GPIO_Init+0x184>)
 80035cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035d0:	6153      	str	r3, [r2, #20]
 80035d2:	4b58      	ldr	r3, [pc, #352]	; (8003734 <MX_GPIO_Init+0x184>)
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035de:	4b55      	ldr	r3, [pc, #340]	; (8003734 <MX_GPIO_Init+0x184>)
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4a54      	ldr	r2, [pc, #336]	; (8003734 <MX_GPIO_Init+0x184>)
 80035e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035e8:	6153      	str	r3, [r2, #20]
 80035ea:	4b52      	ldr	r3, [pc, #328]	; (8003734 <MX_GPIO_Init+0x184>)
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035f6:	4b4f      	ldr	r3, [pc, #316]	; (8003734 <MX_GPIO_Init+0x184>)
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	4a4e      	ldr	r2, [pc, #312]	; (8003734 <MX_GPIO_Init+0x184>)
 80035fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003600:	6153      	str	r3, [r2, #20]
 8003602:	4b4c      	ldr	r3, [pc, #304]	; (8003734 <MX_GPIO_Init+0x184>)
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800360e:	4b49      	ldr	r3, [pc, #292]	; (8003734 <MX_GPIO_Init+0x184>)
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	4a48      	ldr	r2, [pc, #288]	; (8003734 <MX_GPIO_Init+0x184>)
 8003614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003618:	6153      	str	r3, [r2, #20]
 800361a:	4b46      	ldr	r3, [pc, #280]	; (8003734 <MX_GPIO_Init+0x184>)
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	607b      	str	r3, [r7, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003626:	4b43      	ldr	r3, [pc, #268]	; (8003734 <MX_GPIO_Init+0x184>)
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	4a42      	ldr	r2, [pc, #264]	; (8003734 <MX_GPIO_Init+0x184>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003630:	6153      	str	r3, [r2, #20]
 8003632:	4b40      	ldr	r3, [pc, #256]	; (8003734 <MX_GPIO_Init+0x184>)
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800363e:	2200      	movs	r2, #0
 8003640:	f64f 7108 	movw	r1, #65288	; 0xff08
 8003644:	483c      	ldr	r0, [pc, #240]	; (8003738 <MX_GPIO_Init+0x188>)
 8003646:	f002 f96b 	bl	8005920 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, pwr_Pin|lamp_Pin, GPIO_PIN_RESET);
 800364a:	2200      	movs	r2, #0
 800364c:	2114      	movs	r1, #20
 800364e:	483b      	ldr	r0, [pc, #236]	; (800373c <MX_GPIO_Init+0x18c>)
 8003650:	f002 f966 	bl	8005920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor_GPIO_Port, motor_Pin, GPIO_PIN_RESET);
 8003654:	2200      	movs	r2, #0
 8003656:	2108      	movs	r1, #8
 8003658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800365c:	f002 f960 	bl	8005920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003660:	2200      	movs	r2, #0
 8003662:	2102      	movs	r1, #2
 8003664:	4836      	ldr	r0, [pc, #216]	; (8003740 <MX_GPIO_Init+0x190>)
 8003666:	f002 f95b 	bl	8005920 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800366a:	2337      	movs	r3, #55	; 0x37
 800366c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800366e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003678:	f107 0314 	add.w	r3, r7, #20
 800367c:	4619      	mov	r1, r3
 800367e:	482e      	ldr	r0, [pc, #184]	; (8003738 <MX_GPIO_Init+0x188>)
 8003680:	f001 ffbc 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8003684:	f64f 7308 	movw	r3, #65288	; 0xff08
 8003688:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800368a:	2301      	movs	r3, #1
 800368c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003696:	f107 0314 	add.w	r3, r7, #20
 800369a:	4619      	mov	r1, r3
 800369c:	4826      	ldr	r0, [pc, #152]	; (8003738 <MX_GPIO_Init+0x188>)
 800369e:	f001 ffad 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : cup_med_Pin cup_high_Pin rez_med_Pin rez_high_Pin */
  GPIO_InitStruct.Pin = cup_med_Pin|cup_high_Pin|rez_med_Pin|rez_high_Pin;
 80036a2:	230f      	movs	r3, #15
 80036a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036aa:	2301      	movs	r3, #1
 80036ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ae:	f107 0314 	add.w	r3, r7, #20
 80036b2:	4619      	mov	r1, r3
 80036b4:	4823      	ldr	r0, [pc, #140]	; (8003744 <MX_GPIO_Init+0x194>)
 80036b6:	f001 ffa1 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : pwr_Pin lamp_Pin */
  GPIO_InitStruct.Pin = pwr_Pin|lamp_Pin;
 80036ba:	2314      	movs	r3, #20
 80036bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036be:	2301      	movs	r3, #1
 80036c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	4619      	mov	r1, r3
 80036d0:	481a      	ldr	r0, [pc, #104]	; (800373c <MX_GPIO_Init+0x18c>)
 80036d2:	f001 ff93 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80036d6:	2301      	movs	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	4619      	mov	r1, r3
 80036e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ec:	f001 ff86 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : motor_Pin */
  GPIO_InitStruct.Pin = motor_Pin;
 80036f0:	2308      	movs	r3, #8
 80036f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f4:	2301      	movs	r3, #1
 80036f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fc:	2300      	movs	r3, #0
 80036fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(motor_GPIO_Port, &GPIO_InitStruct);
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	4619      	mov	r1, r3
 8003706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800370a:	f001 ff77 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800370e:	2302      	movs	r3, #2
 8003710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003712:	2301      	movs	r3, #1
 8003714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371a:	2300      	movs	r3, #0
 800371c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	4619      	mov	r1, r3
 8003724:	4806      	ldr	r0, [pc, #24]	; (8003740 <MX_GPIO_Init+0x190>)
 8003726:	f001 ff69 	bl	80055fc <HAL_GPIO_Init>

}
 800372a:	bf00      	nop
 800372c:	3728      	adds	r7, #40	; 0x28
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	48001000 	.word	0x48001000
 800373c:	48001400 	.word	0x48001400
 8003740:	48000400 	.word	0x48000400
 8003744:	48000800 	.word	0x48000800

08003748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800374c:	b672      	cpsid	i
}
 800374e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003750:	e7fe      	b.n	8003750 <Error_Handler+0x8>

08003752 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8003752:	b480      	push	{r7}
 8003754:	b087      	sub	sp, #28
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 800375c:	23ff      	movs	r3, #255	; 0xff
 800375e:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	e020      	b.n	80037a8 <calculate_crc+0x56>
		crc ^= data[i];
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4413      	add	r3, r2
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	4053      	eors	r3, r2
 8003772:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e010      	b.n	800379c <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 800377a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800377e:	2b00      	cmp	r3, #0
 8003780:	da06      	bge.n	8003790 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800378c:	75fb      	strb	r3, [r7, #23]
 800378e:	e002      	b.n	8003796 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3301      	adds	r3, #1
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b07      	cmp	r3, #7
 80037a0:	d9eb      	bls.n	800377a <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	3301      	adds	r3, #1
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d3da      	bcc.n	8003766 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b086      	sub	sp, #24
 80037c2:	af02      	add	r7, sp, #8
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	733b      	strb	r3, [r7, #12]
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	889b      	ldrh	r3, [r3, #4]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	b299      	uxth	r1, r3
 80037e6:	f107 020c 	add.w	r2, r7, #12
 80037ea:	231e      	movs	r3, #30
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	2302      	movs	r3, #2
 80037f0:	f002 f958 	bl	8005aa4 <HAL_I2C_Master_Transmit>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <sht3x_send_command+0x42>
	}

	return true;
 80037fe:	2301      	movs	r3, #1
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	460a      	mov	r2, r1
 8003812:	71fb      	strb	r3, [r7, #7]
 8003814:	4613      	mov	r3, r2
 8003816:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	b29b      	uxth	r3, r3
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	b29a      	uxth	r2, r3
 8003820:	79bb      	ldrb	r3, [r7, #6]
 8003822:	b29b      	uxth	r3, r3
 8003824:	4313      	orrs	r3, r2
 8003826:	b29b      	uxth	r3, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af04      	add	r7, sp, #16
 800383a:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <sht3x_init+0x1e>
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <sht3x_init+0x74>)
 8003848:	4a18      	ldr	r2, [pc, #96]	; (80038ac <sht3x_init+0x78>)
 800384a:	213f      	movs	r1, #63	; 0x3f
 800384c:	4818      	ldr	r0, [pc, #96]	; (80038b0 <sht3x_init+0x7c>)
 800384e:	f00a fab3 	bl	800ddb8 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	889b      	ldrh	r3, [r3, #4]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	b299      	uxth	r1, r3
 800385e:	231e      	movs	r3, #30
 8003860:	9302      	str	r3, [sp, #8]
 8003862:	2303      	movs	r3, #3
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	f107 030c 	add.w	r3, r7, #12
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	2302      	movs	r3, #2
 800386e:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8003872:	f002 fb01 	bl	8005e78 <HAL_I2C_Mem_Read>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 800387c:	2300      	movs	r3, #0
 800387e:	e00e      	b.n	800389e <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8003880:	f107 030c 	add.w	r3, r7, #12
 8003884:	2102      	movs	r1, #2
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ff63 	bl	8003752 <calculate_crc>
 800388c:	4603      	mov	r3, r0
 800388e:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8003890:	7bbb      	ldrb	r3, [r7, #14]
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <sht3x_init+0x68>
		return false;
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <sht3x_init+0x6a>
	}

	return true;
 800389c:	2301      	movs	r3, #1
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	08012af8 	.word	0x08012af8
 80038ac:	08012b90 	.word	0x08012b90
 80038b0:	08012b38 	.word	0x08012b38

080038b4 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	; 0x28
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 80038c0:	f642 4106 	movw	r1, #11270	; 0x2c06
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff ff7a 	bl	80037be <sht3x_send_command>

	HAL_Delay(1);
 80038ca:	2001      	movs	r0, #1
 80038cc:	f000 fc3c 	bl	8004148 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	889b      	ldrh	r3, [r3, #4]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	b299      	uxth	r1, r3
 80038dc:	f107 0214 	add.w	r2, r7, #20
 80038e0:	231e      	movs	r3, #30
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2306      	movs	r3, #6
 80038e6:	f002 f9d1 	bl	8005c8c <HAL_I2C_Master_Receive>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e050      	b.n	8003996 <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	2102      	movs	r1, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff ff29 	bl	8003752 <calculate_crc>
 8003900:	4603      	mov	r3, r0
 8003902:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	3303      	adds	r3, #3
 800390a:	2102      	movs	r1, #2
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff20 	bl	8003752 <calculate_crc>
 8003912:	4603      	mov	r3, r0
 8003914:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8003916:	7dbb      	ldrb	r3, [r7, #22]
 8003918:	7ffa      	ldrb	r2, [r7, #31]
 800391a:	429a      	cmp	r2, r3
 800391c:	d103      	bne.n	8003926 <sht3x_read_temperature_and_humidity+0x72>
 800391e:	7e7b      	ldrb	r3, [r7, #25]
 8003920:	7fba      	ldrb	r2, [r7, #30]
 8003922:	429a      	cmp	r2, r3
 8003924:	d001      	beq.n	800392a <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8003926:	2300      	movs	r3, #0
 8003928:	e035      	b.n	8003996 <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 800392a:	7d3b      	ldrb	r3, [r7, #20]
 800392c:	7d7a      	ldrb	r2, [r7, #21]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff69 	bl	8003808 <uint8_to_uint16>
 8003936:	4603      	mov	r3, r0
 8003938:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 800393a:	7dfb      	ldrb	r3, [r7, #23]
 800393c:	7e3a      	ldrb	r2, [r7, #24]
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff61 	bl	8003808 <uint8_to_uint16>
 8003946:	4603      	mov	r3, r0
 8003948:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 800394a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003956:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80039a0 <sht3x_read_temperature_and_humidity+0xec>
 800395a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800395e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80039a4 <sht3x_read_temperature_and_humidity+0xf0>
 8003962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003966:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80039a8 <sht3x_read_temperature_and_humidity+0xf4>
 800396a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8003974:	8b7b      	ldrh	r3, [r7, #26]
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80039ac <sht3x_read_temperature_and_humidity+0xf8>
 8003982:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003986:	eddf 6a07 	vldr	s13, [pc, #28]	; 80039a4 <sht3x_read_temperature_and_humidity+0xf0>
 800398a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8003994:	2301      	movs	r3, #1
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	432f0000 	.word	0x432f0000
 80039a4:	477fff00 	.word	0x477fff00
 80039a8:	42340000 	.word	0x42340000
 80039ac:	42c80000 	.word	0x42c80000

080039b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b6:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <HAL_MspInit+0x44>)
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	4a0e      	ldr	r2, [pc, #56]	; (80039f4 <HAL_MspInit+0x44>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6193      	str	r3, [r2, #24]
 80039c2:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <HAL_MspInit+0x44>)
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_MspInit+0x44>)
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <HAL_MspInit+0x44>)
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	61d3      	str	r3, [r2, #28]
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_MspInit+0x44>)
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80039e6:	2007      	movs	r0, #7
 80039e8:	f001 fd50 	bl	800548c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000

080039f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	; 0x30
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a00:	f107 031c 	add.w	r3, r7, #28
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
 8003a0c:	60da      	str	r2, [r3, #12]
 8003a0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a18:	d12e      	bne.n	8003a78 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a1a:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <HAL_ADC_MspInit+0xf0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	4a31      	ldr	r2, [pc, #196]	; (8003ae8 <HAL_ADC_MspInit+0xf0>)
 8003a22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <HAL_ADC_MspInit+0xf0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d10b      	bne.n	8003a44 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003a2c:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <HAL_ADC_MspInit+0xf4>)
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	4a2e      	ldr	r2, [pc, #184]	; (8003aec <HAL_ADC_MspInit+0xf4>)
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a36:	6153      	str	r3, [r2, #20]
 8003a38:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <HAL_ADC_MspInit+0xf4>)
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a44:	4b29      	ldr	r3, [pc, #164]	; (8003aec <HAL_ADC_MspInit+0xf4>)
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	4a28      	ldr	r2, [pc, #160]	; (8003aec <HAL_ADC_MspInit+0xf4>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4e:	6153      	str	r3, [r2, #20]
 8003a50:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_ADC_MspInit+0xf4>)
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a60:	2303      	movs	r3, #3
 8003a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	f107 031c 	add.w	r3, r7, #28
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a72:	f001 fdc3 	bl	80055fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003a76:	e032      	b.n	8003ade <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1c      	ldr	r2, [pc, #112]	; (8003af0 <HAL_ADC_MspInit+0xf8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d12d      	bne.n	8003ade <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_ADC_MspInit+0xf0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <HAL_ADC_MspInit+0xf0>)
 8003a8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003a8c:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <HAL_ADC_MspInit+0xf0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d10b      	bne.n	8003aac <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003a94:	4b15      	ldr	r3, [pc, #84]	; (8003aec <HAL_ADC_MspInit+0xf4>)
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	4a14      	ldr	r2, [pc, #80]	; (8003aec <HAL_ADC_MspInit+0xf4>)
 8003a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	6153      	str	r3, [r2, #20]
 8003aa0:	4b12      	ldr	r3, [pc, #72]	; (8003aec <HAL_ADC_MspInit+0xf4>)
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aac:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <HAL_ADC_MspInit+0xf4>)
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	4a0e      	ldr	r2, [pc, #56]	; (8003aec <HAL_ADC_MspInit+0xf4>)
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab6:	6153      	str	r3, [r2, #20]
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_ADC_MspInit+0xf4>)
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad0:	f107 031c 	add.w	r3, r7, #28
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ada:	f001 fd8f 	bl	80055fc <HAL_GPIO_Init>
}
 8003ade:	bf00      	nop
 8003ae0:	3730      	adds	r7, #48	; 0x30
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000320 	.word	0x20000320
 8003aec:	40021000 	.word	0x40021000
 8003af0:	50000100 	.word	0x50000100

08003af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	; 0x28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <HAL_I2C_MspInit+0x7c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d127      	bne.n	8003b66 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b16:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <HAL_I2C_MspInit+0x80>)
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	4a16      	ldr	r2, [pc, #88]	; (8003b74 <HAL_I2C_MspInit+0x80>)
 8003b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b20:	6153      	str	r3, [r2, #20]
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <HAL_I2C_MspInit+0x80>)
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8003b2e:	23c0      	movs	r3, #192	; 0xc0
 8003b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b32:	2312      	movs	r3, #18
 8003b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b36:	2301      	movs	r3, #1
 8003b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b3e:	2304      	movs	r3, #4
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	4619      	mov	r1, r3
 8003b48:	480b      	ldr	r0, [pc, #44]	; (8003b78 <HAL_I2C_MspInit+0x84>)
 8003b4a:	f001 fd57 	bl	80055fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_I2C_MspInit+0x80>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <HAL_I2C_MspInit+0x80>)
 8003b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b58:	61d3      	str	r3, [r2, #28]
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_I2C_MspInit+0x80>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b66:	bf00      	nop
 8003b68:	3728      	adds	r7, #40	; 0x28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40005400 	.word	0x40005400
 8003b74:	40021000 	.word	0x40021000
 8003b78:	48000400 	.word	0x48000400

08003b7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a0d      	ldr	r2, [pc, #52]	; (8003bc0 <HAL_RTC_MspInit+0x44>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d111      	bne.n	8003bb2 <HAL_RTC_MspInit+0x36>
 8003b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b92:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	fa93 f3a3 	rbit	r3, r3
 8003b9a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <HAL_RTC_MspInit+0x48>)
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	461a      	mov	r2, r3
 8003bae:	2301      	movs	r3, #1
 8003bb0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40002800 	.word	0x40002800
 8003bc4:	10908100 	.word	0x10908100

08003bc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	; 0x30
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd0:	f107 031c 	add.w	r3, r7, #28
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3d      	ldr	r2, [pc, #244]	; (8003cdc <HAL_SPI_MspInit+0x114>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d129      	bne.n	8003c3e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bea:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	4a3c      	ldr	r2, [pc, #240]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003bf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bf4:	6193      	str	r3, [r2, #24]
 8003bf6:	4b3a      	ldr	r3, [pc, #232]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c02:	4b37      	ldr	r3, [pc, #220]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	4a36      	ldr	r2, [pc, #216]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0c:	6153      	str	r3, [r2, #20]
 8003c0e:	4b34      	ldr	r3, [pc, #208]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8003c1a:	23e0      	movs	r3, #224	; 0xe0
 8003c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c26:	2303      	movs	r3, #3
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c2a:	2305      	movs	r3, #5
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2e:	f107 031c 	add.w	r3, r7, #28
 8003c32:	4619      	mov	r1, r3
 8003c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c38:	f001 fce0 	bl	80055fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c3c:	e04a      	b.n	8003cd4 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI2)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <HAL_SPI_MspInit+0x11c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d145      	bne.n	8003cd4 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c48:	4b25      	ldr	r3, [pc, #148]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c52:	61d3      	str	r3, [r2, #28]
 8003c54:	4b22      	ldr	r3, [pc, #136]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c60:	4b1f      	ldr	r3, [pc, #124]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003c66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c6a:	6153      	str	r3, [r2, #20]
 8003c6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c78:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c82:	6153      	str	r3, [r2, #20]
 8003c84:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <HAL_SPI_MspInit+0x118>)
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c96:	2302      	movs	r3, #2
 8003c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ca2:	2305      	movs	r3, #5
 8003ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ca6:	f107 031c 	add.w	r3, r7, #28
 8003caa:	4619      	mov	r1, r3
 8003cac:	480e      	ldr	r0, [pc, #56]	; (8003ce8 <HAL_SPI_MspInit+0x120>)
 8003cae:	f001 fca5 	bl	80055fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003cb2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003cc4:	2305      	movs	r3, #5
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc8:	f107 031c 	add.w	r3, r7, #28
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4807      	ldr	r0, [pc, #28]	; (8003cec <HAL_SPI_MspInit+0x124>)
 8003cd0:	f001 fc94 	bl	80055fc <HAL_GPIO_Init>
}
 8003cd4:	bf00      	nop
 8003cd6:	3730      	adds	r7, #48	; 0x30
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40013000 	.word	0x40013000
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40003800 	.word	0x40003800
 8003ce8:	48001400 	.word	0x48001400
 8003cec:	48000400 	.word	0x48000400

08003cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	; 0x28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <HAL_UART_MspInit+0x8c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d12f      	bne.n	8003d72 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d12:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_UART_MspInit+0x90>)
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <HAL_UART_MspInit+0x90>)
 8003d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d1c:	6193      	str	r3, [r2, #24]
 8003d1e:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <HAL_UART_MspInit+0x90>)
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <HAL_UART_MspInit+0x90>)
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <HAL_UART_MspInit+0x90>)
 8003d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d34:	6153      	str	r3, [r2, #20]
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_UART_MspInit+0x90>)
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003d42:	2330      	movs	r3, #48	; 0x30
 8003d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d46:	2302      	movs	r3, #2
 8003d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d52:	2307      	movs	r3, #7
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d56:	f107 0314 	add.w	r3, r7, #20
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4809      	ldr	r0, [pc, #36]	; (8003d84 <HAL_UART_MspInit+0x94>)
 8003d5e:	f001 fc4d 	bl	80055fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d62:	2200      	movs	r2, #0
 8003d64:	2100      	movs	r1, #0
 8003d66:	2025      	movs	r0, #37	; 0x25
 8003d68:	f001 fb9b 	bl	80054a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d6c:	2025      	movs	r0, #37	; 0x25
 8003d6e:	f001 fbb4 	bl	80054da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003d72:	bf00      	nop
 8003d74:	3728      	adds	r7, #40	; 0x28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40013800 	.word	0x40013800
 8003d80:	40021000 	.word	0x40021000
 8003d84:	48000800 	.word	0x48000800

08003d88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d90:	f107 0314 	add.w	r3, r7, #20
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	60da      	str	r2, [r3, #12]
 8003d9e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <HAL_PCD_MspInit+0x80>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d129      	bne.n	8003dfe <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003daa:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <HAL_PCD_MspInit+0x84>)
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <HAL_PCD_MspInit+0x84>)
 8003db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db4:	6153      	str	r3, [r2, #20]
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <HAL_PCD_MspInit+0x84>)
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8003dc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8003dd4:	230e      	movs	r3, #14
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003de2:	f001 fc0b 	bl	80055fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003de6:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <HAL_PCD_MspInit+0x84>)
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <HAL_PCD_MspInit+0x84>)
 8003dec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003df0:	61d3      	str	r3, [r2, #28]
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_PCD_MspInit+0x84>)
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003dfe:	bf00      	nop
 8003e00:	3728      	adds	r7, #40	; 0x28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40005c00 	.word	0x40005c00
 8003e0c:	40021000 	.word	0x40021000

08003e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e14:	e7fe      	b.n	8003e14 <NMI_Handler+0x4>

08003e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e1a:	e7fe      	b.n	8003e1a <HardFault_Handler+0x4>

08003e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e20:	e7fe      	b.n	8003e20 <MemManage_Handler+0x4>

08003e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e22:	b480      	push	{r7}
 8003e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e26:	e7fe      	b.n	8003e26 <BusFault_Handler+0x4>

08003e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e2c:	e7fe      	b.n	8003e2c <UsageFault_Handler+0x4>

08003e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e5c:	f000 f954 	bl	8004108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e60:	bf00      	nop
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e68:	4802      	ldr	r0, [pc, #8]	; (8003e74 <USART1_IRQHandler+0x10>)
 8003e6a:	f005 f84b 	bl	8008f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	200004c4 	.word	0x200004c4

08003e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
	return 1;
 8003e7c:	2301      	movs	r3, #1
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <_kill>:

int _kill(int pid, int sig)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e92:	f009 ffb7 	bl	800de04 <__errno>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2216      	movs	r2, #22
 8003e9a:	601a      	str	r2, [r3, #0]
	return -1;
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_exit>:

void _exit (int status)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003eb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ffe7 	bl	8003e88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003eba:	e7fe      	b.n	8003eba <_exit+0x12>

08003ebc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e00a      	b.n	8003ee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ece:	f3af 8000 	nop.w
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	60ba      	str	r2, [r7, #8]
 8003eda:	b2ca      	uxtb	r2, r1
 8003edc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	dbf0      	blt.n	8003ece <_read+0x12>
	}

return len;
 8003eec:	687b      	ldr	r3, [r7, #4]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e009      	b.n	8003f1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	60ba      	str	r2, [r7, #8]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	dbf1      	blt.n	8003f08 <_write+0x12>
	}
	return len;
 8003f24:	687b      	ldr	r3, [r7, #4]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <_close>:

int _close(int file)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
	return -1;
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f56:	605a      	str	r2, [r3, #4]
	return 0;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <_isatty>:

int _isatty(int file)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
	return 1;
 8003f6e:	2301      	movs	r3, #1
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
	return 0;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fa0:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <_sbrk+0x5c>)
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <_sbrk+0x60>)
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <_sbrk+0x64>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <_sbrk+0x64>)
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <_sbrk+0x68>)
 8003fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <_sbrk+0x64>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d207      	bcs.n	8003fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fc8:	f009 ff1c 	bl	800de04 <__errno>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	220c      	movs	r2, #12
 8003fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fd6:	e009      	b.n	8003fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <_sbrk+0x64>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <_sbrk+0x64>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4a05      	ldr	r2, [pc, #20]	; (8003ffc <_sbrk+0x64>)
 8003fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	2000a000 	.word	0x2000a000
 8003ff8:	00000400 	.word	0x00000400
 8003ffc:	20000324 	.word	0x20000324
 8004000:	20000ec8 	.word	0x20000ec8

08004004 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <SystemInit+0x20>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	4a05      	ldr	r2, [pc, #20]	; (8004024 <SystemInit+0x20>)
 8004010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004060 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800402c:	480d      	ldr	r0, [pc, #52]	; (8004064 <LoopForever+0x6>)
  ldr r1, =_edata
 800402e:	490e      	ldr	r1, [pc, #56]	; (8004068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004030:	4a0e      	ldr	r2, [pc, #56]	; (800406c <LoopForever+0xe>)
  movs r3, #0
 8004032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004034:	e002      	b.n	800403c <LoopCopyDataInit>

08004036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800403a:	3304      	adds	r3, #4

0800403c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800403c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800403e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004040:	d3f9      	bcc.n	8004036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004042:	4a0b      	ldr	r2, [pc, #44]	; (8004070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004044:	4c0b      	ldr	r4, [pc, #44]	; (8004074 <LoopForever+0x16>)
  movs r3, #0
 8004046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004048:	e001      	b.n	800404e <LoopFillZerobss>

0800404a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800404a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800404c:	3204      	adds	r2, #4

0800404e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800404e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004050:	d3fb      	bcc.n	800404a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004052:	f7ff ffd7 	bl	8004004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004056:	f009 feed 	bl	800de34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800405a:	f7fe fa7f 	bl	800255c <main>

0800405e <LoopForever>:

LoopForever:
    b LoopForever
 800405e:	e7fe      	b.n	800405e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004060:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004068:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800406c:	0801310c 	.word	0x0801310c
  ldr r2, =_sbss
 8004070:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8004074:	20000ec4 	.word	0x20000ec4

08004078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004078:	e7fe      	b.n	8004078 <ADC1_2_IRQHandler>
	...

0800407c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004080:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <HAL_Init+0x28>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <HAL_Init+0x28>)
 8004086:	f043 0310 	orr.w	r3, r3, #16
 800408a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800408c:	2003      	movs	r0, #3
 800408e:	f001 f9fd 	bl	800548c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004092:	2000      	movs	r0, #0
 8004094:	f000 f808 	bl	80040a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004098:	f7ff fc8a 	bl	80039b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40022000 	.word	0x40022000

080040a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <HAL_InitTick+0x54>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <HAL_InitTick+0x58>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040be:	fbb3 f3f1 	udiv	r3, r3, r1
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 fa15 	bl	80054f6 <HAL_SYSTICK_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e00e      	b.n	80040f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b0f      	cmp	r3, #15
 80040da:	d80a      	bhi.n	80040f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040dc:	2200      	movs	r2, #0
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e4:	f001 f9dd 	bl	80054a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040e8:	4a06      	ldr	r2, [pc, #24]	; (8004104 <HAL_InitTick+0x5c>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e000      	b.n	80040f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000004 	.word	0x20000004
 8004100:	2000000c 	.word	0x2000000c
 8004104:	20000008 	.word	0x20000008

08004108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_IncTick+0x20>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_IncTick+0x24>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4413      	add	r3, r2
 8004118:	4a04      	ldr	r2, [pc, #16]	; (800412c <HAL_IncTick+0x24>)
 800411a:	6013      	str	r3, [r2, #0]
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	2000000c 	.word	0x2000000c
 800412c:	20000a44 	.word	0x20000a44

08004130 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return uwTick;  
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_GetTick+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000a44 	.word	0x20000a44

08004148 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004150:	f7ff ffee 	bl	8004130 <HAL_GetTick>
 8004154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004160:	d005      	beq.n	800416e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <HAL_Delay+0x44>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800416e:	bf00      	nop
 8004170:	f7ff ffde 	bl	8004130 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	429a      	cmp	r2, r3
 800417e:	d8f7      	bhi.n	8004170 <HAL_Delay+0x28>
  {
  }
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	2000000c 	.word	0x2000000c

08004190 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b09a      	sub	sp, #104	; 0x68
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e1c9      	b.n	8004544 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d176      	bne.n	80042b0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d152      	bne.n	8004270 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fc07 	bl	80039f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d13b      	bne.n	8004270 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f001 f811 	bl	8005220 <ADC_Disable>
 80041fe:	4603      	mov	r3, r0
 8004200:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b00      	cmp	r3, #0
 800420e:	d12f      	bne.n	8004270 <HAL_ADC_Init+0xe0>
 8004210:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004214:	2b00      	cmp	r3, #0
 8004216:	d12b      	bne.n	8004270 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004220:	f023 0302 	bic.w	r3, r3, #2
 8004224:	f043 0202 	orr.w	r2, r3, #2
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800423a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800424a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800424c:	4b86      	ldr	r3, [pc, #536]	; (8004468 <HAL_ADC_Init+0x2d8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a86      	ldr	r2, [pc, #536]	; (800446c <HAL_ADC_Init+0x2dc>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	0c9a      	lsrs	r2, r3, #18
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004262:	e002      	b.n	800426a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	3b01      	subs	r3, #1
 8004268:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f9      	bne.n	8004264 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800428c:	d110      	bne.n	80042b0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f023 0312 	bic.w	r3, r3, #18
 8004296:	f043 0210 	orr.w	r2, r3, #16
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f043 0201 	orr.w	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f040 8136 	bne.w	800452a <HAL_ADC_Init+0x39a>
 80042be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 8131 	bne.w	800452a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f040 8129 	bne.w	800452a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80042e0:	f043 0202 	orr.w	r2, r3, #2
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042f0:	d004      	beq.n	80042fc <HAL_ADC_Init+0x16c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a5e      	ldr	r2, [pc, #376]	; (8004470 <HAL_ADC_Init+0x2e0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d101      	bne.n	8004300 <HAL_ADC_Init+0x170>
 80042fc:	4b5d      	ldr	r3, [pc, #372]	; (8004474 <HAL_ADC_Init+0x2e4>)
 80042fe:	e000      	b.n	8004302 <HAL_ADC_Init+0x172>
 8004300:	4b5d      	ldr	r3, [pc, #372]	; (8004478 <HAL_ADC_Init+0x2e8>)
 8004302:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800430c:	d102      	bne.n	8004314 <HAL_ADC_Init+0x184>
 800430e:	4b58      	ldr	r3, [pc, #352]	; (8004470 <HAL_ADC_Init+0x2e0>)
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e01a      	b.n	800434a <HAL_ADC_Init+0x1ba>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a55      	ldr	r2, [pc, #340]	; (8004470 <HAL_ADC_Init+0x2e0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d103      	bne.n	8004326 <HAL_ADC_Init+0x196>
 800431e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e011      	b.n	800434a <HAL_ADC_Init+0x1ba>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a54      	ldr	r2, [pc, #336]	; (800447c <HAL_ADC_Init+0x2ec>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d102      	bne.n	8004336 <HAL_ADC_Init+0x1a6>
 8004330:	4b53      	ldr	r3, [pc, #332]	; (8004480 <HAL_ADC_Init+0x2f0>)
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e009      	b.n	800434a <HAL_ADC_Init+0x1ba>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a51      	ldr	r2, [pc, #324]	; (8004480 <HAL_ADC_Init+0x2f0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d102      	bne.n	8004346 <HAL_ADC_Init+0x1b6>
 8004340:	4b4e      	ldr	r3, [pc, #312]	; (800447c <HAL_ADC_Init+0x2ec>)
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e001      	b.n	800434a <HAL_ADC_Init+0x1ba>
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d108      	bne.n	800436a <HAL_ADC_Init+0x1da>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_ADC_Init+0x1da>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <HAL_ADC_Init+0x1dc>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d11c      	bne.n	80043aa <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004370:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004372:	2b00      	cmp	r3, #0
 8004374:	d010      	beq.n	8004398 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d107      	bne.n	8004392 <HAL_ADC_Init+0x202>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_ADC_Init+0x202>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <HAL_ADC_Init+0x204>
 8004392:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004394:	2b00      	cmp	r3, #0
 8004396:	d108      	bne.n	80043aa <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	431a      	orrs	r2, r3
 80043a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7e5b      	ldrb	r3, [r3, #25]
 80043ae:	035b      	lsls	r3, r3, #13
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043b4:	2a01      	cmp	r2, #1
 80043b6:	d002      	beq.n	80043be <HAL_ADC_Init+0x22e>
 80043b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043bc:	e000      	b.n	80043c0 <HAL_ADC_Init+0x230>
 80043be:	2200      	movs	r2, #0
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043d0:	4313      	orrs	r3, r2
 80043d2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d11b      	bne.n	8004416 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	7e5b      	ldrb	r3, [r3, #25]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d109      	bne.n	80043fa <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	3b01      	subs	r3, #1
 80043ec:	045a      	lsls	r2, r3, #17
 80043ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f6:	663b      	str	r3, [r7, #96]	; 0x60
 80043f8:	e00d      	b.n	8004416 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004402:	f043 0220 	orr.w	r2, r3, #32
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f043 0201 	orr.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	2b01      	cmp	r3, #1
 800441c:	d03a      	beq.n	8004494 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a16      	ldr	r2, [pc, #88]	; (800447c <HAL_ADC_Init+0x2ec>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_ADC_Init+0x2a2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a14      	ldr	r2, [pc, #80]	; (8004480 <HAL_ADC_Init+0x2f0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d128      	bne.n	8004484 <HAL_ADC_Init+0x2f4>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800443a:	d012      	beq.n	8004462 <HAL_ADC_Init+0x2d2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004444:	d00a      	beq.n	800445c <HAL_ADC_Init+0x2cc>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800444e:	d002      	beq.n	8004456 <HAL_ADC_Init+0x2c6>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	e018      	b.n	8004488 <HAL_ADC_Init+0x2f8>
 8004456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800445a:	e015      	b.n	8004488 <HAL_ADC_Init+0x2f8>
 800445c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004460:	e012      	b.n	8004488 <HAL_ADC_Init+0x2f8>
 8004462:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004466:	e00f      	b.n	8004488 <HAL_ADC_Init+0x2f8>
 8004468:	20000004 	.word	0x20000004
 800446c:	431bde83 	.word	0x431bde83
 8004470:	50000100 	.word	0x50000100
 8004474:	50000300 	.word	0x50000300
 8004478:	50000700 	.word	0x50000700
 800447c:	50000400 	.word	0x50000400
 8004480:	50000500 	.word	0x50000500
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800448c:	4313      	orrs	r3, r2
 800448e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004490:	4313      	orrs	r3, r2
 8004492:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d114      	bne.n	80044cc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044b0:	f023 0302 	bic.w	r3, r3, #2
 80044b4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7e1b      	ldrb	r3, [r3, #24]
 80044ba:	039a      	lsls	r2, r3, #14
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044c8:	4313      	orrs	r3, r2
 80044ca:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	4b1e      	ldr	r3, [pc, #120]	; (800454c <HAL_ADC_Init+0x3bc>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80044dc:	430b      	orrs	r3, r1
 80044de:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d10c      	bne.n	8004502 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	f023 010f 	bic.w	r1, r3, #15
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	1e5a      	subs	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004500:	e007      	b.n	8004512 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 020f 	bic.w	r2, r2, #15
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f023 0303 	bic.w	r3, r3, #3
 8004520:	f043 0201 	orr.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	641a      	str	r2, [r3, #64]	; 0x40
 8004528:	e00a      	b.n	8004540 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f023 0312 	bic.w	r3, r3, #18
 8004532:	f043 0210 	orr.w	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800453a:	2301      	movs	r3, #1
 800453c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004540:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004544:	4618      	mov	r0, r3
 8004546:	3768      	adds	r7, #104	; 0x68
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	fff0c007 	.word	0xfff0c007

08004550 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	f040 80f9 	bne.w	800475e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_ADC_Start+0x2a>
 8004576:	2302      	movs	r3, #2
 8004578:	e0f4      	b.n	8004764 <HAL_ADC_Start+0x214>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fde8 	bl	8005158 <ADC_Enable>
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 80e0 	bne.w	8004754 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045b0:	d004      	beq.n	80045bc <HAL_ADC_Start+0x6c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6d      	ldr	r2, [pc, #436]	; (800476c <HAL_ADC_Start+0x21c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d106      	bne.n	80045ca <HAL_ADC_Start+0x7a>
 80045bc:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <HAL_ADC_Start+0x220>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <HAL_ADC_Start+0x9a>
 80045c8:	e005      	b.n	80045d6 <HAL_ADC_Start+0x86>
 80045ca:	4b6a      	ldr	r3, [pc, #424]	; (8004774 <HAL_ADC_Start+0x224>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_ADC_Start+0x9a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045de:	d004      	beq.n	80045ea <HAL_ADC_Start+0x9a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a64      	ldr	r2, [pc, #400]	; (8004778 <HAL_ADC_Start+0x228>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d115      	bne.n	8004616 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d036      	beq.n	8004672 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800460c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004614:	e02d      	b.n	8004672 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800462a:	d004      	beq.n	8004636 <HAL_ADC_Start+0xe6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a4e      	ldr	r2, [pc, #312]	; (800476c <HAL_ADC_Start+0x21c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10a      	bne.n	800464c <HAL_ADC_Start+0xfc>
 8004636:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e008      	b.n	800465e <HAL_ADC_Start+0x10e>
 800464c:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <HAL_ADC_Start+0x228>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf14      	ite	ne
 8004658:	2301      	movne	r3, #1
 800465a:	2300      	moveq	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800466a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	d106      	bne.n	800468e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004684:	f023 0206 	bic.w	r2, r3, #6
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	645a      	str	r2, [r3, #68]	; 0x44
 800468c:	e002      	b.n	8004694 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	221c      	movs	r2, #28
 80046a2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046ac:	d004      	beq.n	80046b8 <HAL_ADC_Start+0x168>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a2e      	ldr	r2, [pc, #184]	; (800476c <HAL_ADC_Start+0x21c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d106      	bne.n	80046c6 <HAL_ADC_Start+0x176>
 80046b8:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <HAL_ADC_Start+0x220>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d03e      	beq.n	8004742 <HAL_ADC_Start+0x1f2>
 80046c4:	e005      	b.n	80046d2 <HAL_ADC_Start+0x182>
 80046c6:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <HAL_ADC_Start+0x224>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d037      	beq.n	8004742 <HAL_ADC_Start+0x1f2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046da:	d004      	beq.n	80046e6 <HAL_ADC_Start+0x196>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a22      	ldr	r2, [pc, #136]	; (800476c <HAL_ADC_Start+0x21c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d106      	bne.n	80046f4 <HAL_ADC_Start+0x1a4>
 80046e6:	4b22      	ldr	r3, [pc, #136]	; (8004770 <HAL_ADC_Start+0x220>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d027      	beq.n	8004742 <HAL_ADC_Start+0x1f2>
 80046f2:	e005      	b.n	8004700 <HAL_ADC_Start+0x1b0>
 80046f4:	4b1f      	ldr	r3, [pc, #124]	; (8004774 <HAL_ADC_Start+0x224>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	2b05      	cmp	r3, #5
 80046fe:	d020      	beq.n	8004742 <HAL_ADC_Start+0x1f2>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004708:	d004      	beq.n	8004714 <HAL_ADC_Start+0x1c4>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a17      	ldr	r2, [pc, #92]	; (800476c <HAL_ADC_Start+0x21c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d106      	bne.n	8004722 <HAL_ADC_Start+0x1d2>
 8004714:	4b16      	ldr	r3, [pc, #88]	; (8004770 <HAL_ADC_Start+0x220>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	2b09      	cmp	r3, #9
 800471e:	d010      	beq.n	8004742 <HAL_ADC_Start+0x1f2>
 8004720:	e005      	b.n	800472e <HAL_ADC_Start+0x1de>
 8004722:	4b14      	ldr	r3, [pc, #80]	; (8004774 <HAL_ADC_Start+0x224>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2b09      	cmp	r3, #9
 800472c:	d009      	beq.n	8004742 <HAL_ADC_Start+0x1f2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004736:	d004      	beq.n	8004742 <HAL_ADC_Start+0x1f2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <HAL_ADC_Start+0x228>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d10f      	bne.n	8004762 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0204 	orr.w	r2, r2, #4
 8004750:	609a      	str	r2, [r3, #8]
 8004752:	e006      	b.n	8004762 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800475c:	e001      	b.n	8004762 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800475e:	2302      	movs	r3, #2
 8004760:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	50000100 	.word	0x50000100
 8004770:	50000300 	.word	0x50000300
 8004774:	50000700 	.word	0x50000700
 8004778:	50000400 	.word	0x50000400

0800477c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8004786:	2300      	movs	r3, #0
 8004788:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	2b08      	cmp	r3, #8
 8004790:	d102      	bne.n	8004798 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004792:	2308      	movs	r3, #8
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e03a      	b.n	800480e <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047a0:	d004      	beq.n	80047ac <HAL_ADC_PollForConversion+0x30>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a72      	ldr	r2, [pc, #456]	; (8004970 <HAL_ADC_PollForConversion+0x1f4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d101      	bne.n	80047b0 <HAL_ADC_PollForConversion+0x34>
 80047ac:	4b71      	ldr	r3, [pc, #452]	; (8004974 <HAL_ADC_PollForConversion+0x1f8>)
 80047ae:	e000      	b.n	80047b2 <HAL_ADC_PollForConversion+0x36>
 80047b0:	4b71      	ldr	r3, [pc, #452]	; (8004978 <HAL_ADC_PollForConversion+0x1fc>)
 80047b2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d112      	bne.n	80047e6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d11d      	bne.n	800480a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e0bf      	b.n	8004966 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e0ad      	b.n	8004966 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800480a:	230c      	movs	r3, #12
 800480c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004816:	d004      	beq.n	8004822 <HAL_ADC_PollForConversion+0xa6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a54      	ldr	r2, [pc, #336]	; (8004970 <HAL_ADC_PollForConversion+0x1f4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d106      	bne.n	8004830 <HAL_ADC_PollForConversion+0xb4>
 8004822:	4b54      	ldr	r3, [pc, #336]	; (8004974 <HAL_ADC_PollForConversion+0x1f8>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	2b00      	cmp	r3, #0
 800482c:	d010      	beq.n	8004850 <HAL_ADC_PollForConversion+0xd4>
 800482e:	e005      	b.n	800483c <HAL_ADC_PollForConversion+0xc0>
 8004830:	4b51      	ldr	r3, [pc, #324]	; (8004978 <HAL_ADC_PollForConversion+0x1fc>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	2b00      	cmp	r3, #0
 800483a:	d009      	beq.n	8004850 <HAL_ADC_PollForConversion+0xd4>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004844:	d004      	beq.n	8004850 <HAL_ADC_PollForConversion+0xd4>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a4c      	ldr	r2, [pc, #304]	; (800497c <HAL_ADC_PollForConversion+0x200>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d104      	bne.n	800485a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	e00f      	b.n	800487a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004862:	d004      	beq.n	800486e <HAL_ADC_PollForConversion+0xf2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a41      	ldr	r2, [pc, #260]	; (8004970 <HAL_ADC_PollForConversion+0x1f4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d102      	bne.n	8004874 <HAL_ADC_PollForConversion+0xf8>
 800486e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004872:	e000      	b.n	8004876 <HAL_ADC_PollForConversion+0xfa>
 8004874:	4b41      	ldr	r3, [pc, #260]	; (800497c <HAL_ADC_PollForConversion+0x200>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800487a:	f7ff fc59 	bl	8004130 <HAL_GetTick>
 800487e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004880:	e021      	b.n	80048c6 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004888:	d01d      	beq.n	80048c6 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <HAL_ADC_PollForConversion+0x124>
 8004890:	f7ff fc4e 	bl	8004130 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d212      	bcs.n	80048c6 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	4013      	ands	r3, r2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10b      	bne.n	80048c6 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f043 0204 	orr.w	r2, r3, #4
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e04f      	b.n	8004966 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0d6      	beq.n	8004882 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d131      	bne.n	8004952 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d12c      	bne.n	8004952 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	d125      	bne.n	8004952 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d112      	bne.n	800493a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d112      	bne.n	8004952 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	f043 0201 	orr.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	641a      	str	r2, [r3, #64]	; 0x40
 8004938:	e00b      	b.n	8004952 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0220 	orr.w	r2, r3, #32
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f043 0201 	orr.w	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d103      	bne.n	8004964 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	50000100 	.word	0x50000100
 8004974:	50000300 	.word	0x50000300
 8004978:	50000700 	.word	0x50000700
 800497c:	50000400 	.word	0x50000400

08004980 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800499c:	b480      	push	{r7}
 800499e:	b09b      	sub	sp, #108	; 0x6c
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_ADC_ConfigChannel+0x22>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e2cb      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x5ba>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f040 82af 	bne.w	8004f34 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d81c      	bhi.n	8004a18 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	4613      	mov	r3, r2
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	4413      	add	r3, r2
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	461a      	mov	r2, r3
 80049f2:	231f      	movs	r3, #31
 80049f4:	4093      	lsls	r3, r2
 80049f6:	43db      	mvns	r3, r3
 80049f8:	4019      	ands	r1, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	631a      	str	r2, [r3, #48]	; 0x30
 8004a16:	e063      	b.n	8004ae0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b09      	cmp	r3, #9
 8004a1e:	d81e      	bhi.n	8004a5e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4413      	add	r3, r2
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	3b1e      	subs	r3, #30
 8004a34:	221f      	movs	r2, #31
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	4019      	ands	r1, r3
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	4413      	add	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	3b1e      	subs	r3, #30
 8004a50:	fa00 f203 	lsl.w	r2, r0, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	635a      	str	r2, [r3, #52]	; 0x34
 8004a5c:	e040      	b.n	8004ae0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b0e      	cmp	r3, #14
 8004a64:	d81e      	bhi.n	8004aa4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	4613      	mov	r3, r2
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	4413      	add	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	3b3c      	subs	r3, #60	; 0x3c
 8004a7a:	221f      	movs	r2, #31
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	4019      	ands	r1, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	4413      	add	r3, r2
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	3b3c      	subs	r3, #60	; 0x3c
 8004a96:	fa00 f203 	lsl.w	r2, r0, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
 8004aa2:	e01d      	b.n	8004ae0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	4413      	add	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	3b5a      	subs	r3, #90	; 0x5a
 8004ab8:	221f      	movs	r2, #31
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	4019      	ands	r1, r3
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	4413      	add	r3, r2
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	3b5a      	subs	r3, #90	; 0x5a
 8004ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 030c 	and.w	r3, r3, #12
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 80e5 	bne.w	8004cba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b09      	cmp	r3, #9
 8004af6:	d91c      	bls.n	8004b32 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	3b1e      	subs	r3, #30
 8004b0a:	2207      	movs	r2, #7
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	4019      	ands	r1, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	6898      	ldr	r0, [r3, #8]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	3b1e      	subs	r3, #30
 8004b24:	fa00 f203 	lsl.w	r2, r0, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	619a      	str	r2, [r3, #24]
 8004b30:	e019      	b.n	8004b66 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6959      	ldr	r1, [r3, #20]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	4413      	add	r3, r2
 8004b42:	2207      	movs	r2, #7
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	4019      	ands	r1, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	6898      	ldr	r0, [r3, #8]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	08db      	lsrs	r3, r3, #3
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d84f      	bhi.n	8004c28 <HAL_ADC_ConfigChannel+0x28c>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <HAL_ADC_ConfigChannel+0x1f4>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004bc3 	.word	0x08004bc3
 8004b98:	08004be5 	.word	0x08004be5
 8004b9c:	08004c07 	.word	0x08004c07
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ba6:	4b9f      	ldr	r3, [pc, #636]	; (8004e24 <HAL_ADC_ConfigChannel+0x488>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	0691      	lsls	r1, r2, #26
 8004bb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004bbe:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004bc0:	e07e      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bc8:	4b96      	ldr	r3, [pc, #600]	; (8004e24 <HAL_ADC_ConfigChannel+0x488>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	6812      	ldr	r2, [r2, #0]
 8004bd0:	0691      	lsls	r1, r2, #26
 8004bd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004be0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004be2:	e06d      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004bea:	4b8e      	ldr	r3, [pc, #568]	; (8004e24 <HAL_ADC_ConfigChannel+0x488>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	0691      	lsls	r1, r2, #26
 8004bf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c02:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004c04:	e05c      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c0c:	4b85      	ldr	r3, [pc, #532]	; (8004e24 <HAL_ADC_ConfigChannel+0x488>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	0691      	lsls	r1, r2, #26
 8004c16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c24:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004c26:	e04b      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	069b      	lsls	r3, r3, #26
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d107      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c4a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	069b      	lsls	r3, r3, #26
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d107      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c6e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	069b      	lsls	r3, r3, #26
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d107      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c92:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	069b      	lsls	r3, r3, #26
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d10a      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cb6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004cb8:	e001      	b.n	8004cbe <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004cba:	bf00      	nop
 8004cbc:	e000      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004cbe:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d108      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x344>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x344>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <HAL_ADC_ConfigChannel+0x346>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f040 8131 	bne.w	8004f4a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d00f      	beq.n	8004d10 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43da      	mvns	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	400a      	ands	r2, r1
 8004d0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004d0e:	e049      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b09      	cmp	r3, #9
 8004d30:	d91c      	bls.n	8004d6c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6999      	ldr	r1, [r3, #24]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	4413      	add	r3, r2
 8004d42:	3b1b      	subs	r3, #27
 8004d44:	2207      	movs	r2, #7
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	4019      	ands	r1, r3
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6898      	ldr	r0, [r3, #8]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3b1b      	subs	r3, #27
 8004d5e:	fa00 f203 	lsl.w	r2, r0, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	619a      	str	r2, [r3, #24]
 8004d6a:	e01b      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6959      	ldr	r1, [r3, #20]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	4613      	mov	r3, r2
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	4413      	add	r3, r2
 8004d7e:	2207      	movs	r2, #7
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	4019      	ands	r1, r3
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	6898      	ldr	r0, [r3, #8]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	4613      	mov	r3, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	4413      	add	r3, r2
 8004d98:	fa00 f203 	lsl.w	r2, r0, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dac:	d004      	beq.n	8004db8 <HAL_ADC_ConfigChannel+0x41c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <HAL_ADC_ConfigChannel+0x48c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x420>
 8004db8:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <HAL_ADC_ConfigChannel+0x490>)
 8004dba:	e000      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x422>
 8004dbc:	4b1c      	ldr	r3, [pc, #112]	; (8004e30 <HAL_ADC_ConfigChannel+0x494>)
 8004dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d105      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d015      	beq.n	8004e00 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004dd8:	2b11      	cmp	r3, #17
 8004dda:	d105      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00b      	beq.n	8004e00 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004dec:	2b12      	cmp	r3, #18
 8004dee:	f040 80ac 	bne.w	8004f4a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f040 80a5 	bne.w	8004f4a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e08:	d102      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x474>
 8004e0a:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <HAL_ADC_ConfigChannel+0x48c>)
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	e023      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x4bc>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <HAL_ADC_ConfigChannel+0x48c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d10c      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x498>
 8004e1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e01a      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x4bc>
 8004e22:	bf00      	nop
 8004e24:	83fff000 	.word	0x83fff000
 8004e28:	50000100 	.word	0x50000100
 8004e2c:	50000300 	.word	0x50000300
 8004e30:	50000700 	.word	0x50000700
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a4a      	ldr	r2, [pc, #296]	; (8004f64 <HAL_ADC_ConfigChannel+0x5c8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d102      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x4a8>
 8004e3e:	4b4a      	ldr	r3, [pc, #296]	; (8004f68 <HAL_ADC_ConfigChannel+0x5cc>)
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e009      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x4bc>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a47      	ldr	r2, [pc, #284]	; (8004f68 <HAL_ADC_ConfigChannel+0x5cc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d102      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x4b8>
 8004e4e:	4b45      	ldr	r3, [pc, #276]	; (8004f64 <HAL_ADC_ConfigChannel+0x5c8>)
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	e001      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x4bc>
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d108      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x4dc>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x4dc>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <HAL_ADC_ConfigChannel+0x4de>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d150      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004e7e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d010      	beq.n	8004ea6 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d107      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x504>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x504>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <HAL_ADC_ConfigChannel+0x506>
 8004ea0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d13c      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	d11d      	bne.n	8004eea <HAL_ADC_ConfigChannel+0x54e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eb6:	d118      	bne.n	8004eea <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ec4:	4b29      	ldr	r3, [pc, #164]	; (8004f6c <HAL_ADC_ConfigChannel+0x5d0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <HAL_ADC_ConfigChannel+0x5d4>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	0c9a      	lsrs	r2, r3, #18
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004eda:	e002      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f9      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004ee8:	e02e      	b.n	8004f48 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b11      	cmp	r3, #17
 8004ef0:	d10b      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x56e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004efa:	d106      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f06:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004f08:	e01e      	b.n	8004f48 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b12      	cmp	r3, #18
 8004f10:	d11a      	bne.n	8004f48 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f1c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004f1e:	e013      	b.n	8004f48 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	f043 0220 	orr.w	r2, r3, #32
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004f32:	e00a      	b.n	8004f4a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	f043 0220 	orr.w	r2, r3, #32
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004f46:	e000      	b.n	8004f4a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004f48:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004f52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	376c      	adds	r7, #108	; 0x6c
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	50000400 	.word	0x50000400
 8004f68:	50000500 	.word	0x50000500
 8004f6c:	20000004 	.word	0x20000004
 8004f70:	431bde83 	.word	0x431bde83

08004f74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b099      	sub	sp, #100	; 0x64
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f8c:	d102      	bne.n	8004f94 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004f8e:	4b6d      	ldr	r3, [pc, #436]	; (8005144 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	e01a      	b.n	8004fca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a6a      	ldr	r2, [pc, #424]	; (8005144 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d103      	bne.n	8004fa6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	e011      	b.n	8004fca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a67      	ldr	r2, [pc, #412]	; (8005148 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d102      	bne.n	8004fb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004fb0:	4b66      	ldr	r3, [pc, #408]	; (800514c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	e009      	b.n	8004fca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a64      	ldr	r2, [pc, #400]	; (800514c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d102      	bne.n	8004fc6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004fc0:	4b61      	ldr	r3, [pc, #388]	; (8005148 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004fc2:	60bb      	str	r3, [r7, #8]
 8004fc4:	e001      	b.n	8004fca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0b0      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e0a9      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f040 808d 	bne.w	8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 8086 	bne.w	8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005010:	d004      	beq.n	800501c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a4b      	ldr	r2, [pc, #300]	; (8005144 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d101      	bne.n	8005020 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800501c:	4b4c      	ldr	r3, [pc, #304]	; (8005150 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800501e:	e000      	b.n	8005022 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005020:	4b4c      	ldr	r3, [pc, #304]	; (8005154 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005022:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d040      	beq.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800502c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6859      	ldr	r1, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800503e:	035b      	lsls	r3, r3, #13
 8005040:	430b      	orrs	r3, r1
 8005042:	431a      	orrs	r2, r3
 8005044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005046:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b01      	cmp	r3, #1
 8005054:	d108      	bne.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005068:	2300      	movs	r3, #0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d15c      	bne.n	8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b01      	cmp	r3, #1
 8005078:	d107      	bne.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800508a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800508c:	2b00      	cmp	r3, #0
 800508e:	d14b      	bne.n	8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005098:	f023 030f 	bic.w	r3, r3, #15
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	6811      	ldr	r1, [r2, #0]
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	6892      	ldr	r2, [r2, #8]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	431a      	orrs	r2, r3
 80050a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050aa:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80050ac:	e03c      	b.n	8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80050ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050b8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d108      	bne.n	80050da <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80050da:	2300      	movs	r3, #0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d123      	bne.n	8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80050fc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d112      	bne.n	8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800510a:	f023 030f 	bic.w	r3, r3, #15
 800510e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005110:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005112:	e009      	b.n	8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005126:	e000      	b.n	800512a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005128:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005132:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005136:	4618      	mov	r0, r3
 8005138:	3764      	adds	r7, #100	; 0x64
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	50000100 	.word	0x50000100
 8005148:	50000400 	.word	0x50000400
 800514c:	50000500 	.word	0x50000500
 8005150:	50000300 	.word	0x50000300
 8005154:	50000700 	.word	0x50000700

08005158 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b01      	cmp	r3, #1
 8005170:	d108      	bne.n	8005184 <ADC_Enable+0x2c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <ADC_Enable+0x2c>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <ADC_Enable+0x2e>
 8005184:	2300      	movs	r3, #0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d143      	bne.n	8005212 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	4b22      	ldr	r3, [pc, #136]	; (800521c <ADC_Enable+0xc4>)
 8005192:	4013      	ands	r3, r2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00d      	beq.n	80051b4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	f043 0210 	orr.w	r2, r3, #16
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a8:	f043 0201 	orr.w	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e02f      	b.n	8005214 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80051c4:	f7fe ffb4 	bl	8004130 <HAL_GetTick>
 80051c8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80051ca:	e01b      	b.n	8005204 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051cc:	f7fe ffb0 	bl	8004130 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d914      	bls.n	8005204 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d00d      	beq.n	8005204 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	f043 0210 	orr.w	r2, r3, #16
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f8:	f043 0201 	orr.w	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e007      	b.n	8005214 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	d1dc      	bne.n	80051cc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	8000003f 	.word	0x8000003f

08005220 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	2b01      	cmp	r3, #1
 8005238:	d108      	bne.n	800524c <ADC_Disable+0x2c>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <ADC_Disable+0x2c>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <ADC_Disable+0x2e>
 800524c:	2300      	movs	r3, #0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d047      	beq.n	80052e2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 030d 	and.w	r3, r3, #13
 800525c:	2b01      	cmp	r3, #1
 800525e:	d10f      	bne.n	8005280 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0202 	orr.w	r2, r2, #2
 800526e:	609a      	str	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2203      	movs	r2, #3
 8005276:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005278:	f7fe ff5a 	bl	8004130 <HAL_GetTick>
 800527c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800527e:	e029      	b.n	80052d4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	f043 0210 	orr.w	r2, r3, #16
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005290:	f043 0201 	orr.w	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e023      	b.n	80052e4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800529c:	f7fe ff48 	bl	8004130 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d914      	bls.n	80052d4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d10d      	bne.n	80052d4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	f043 0210 	orr.w	r2, r3, #16
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c8:	f043 0201 	orr.w	r2, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e007      	b.n	80052e4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d0dc      	beq.n	800529c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052fc:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <__NVIC_SetPriorityGrouping+0x44>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005308:	4013      	ands	r3, r2
 800530a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800531c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800531e:	4a04      	ldr	r2, [pc, #16]	; (8005330 <__NVIC_SetPriorityGrouping+0x44>)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	60d3      	str	r3, [r2, #12]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	e000ed00 	.word	0xe000ed00

08005334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005338:	4b04      	ldr	r3, [pc, #16]	; (800534c <__NVIC_GetPriorityGrouping+0x18>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	0a1b      	lsrs	r3, r3, #8
 800533e:	f003 0307 	and.w	r3, r3, #7
}
 8005342:	4618      	mov	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	e000ed00 	.word	0xe000ed00

08005350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800535a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535e:	2b00      	cmp	r3, #0
 8005360:	db0b      	blt.n	800537a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	f003 021f 	and.w	r2, r3, #31
 8005368:	4907      	ldr	r1, [pc, #28]	; (8005388 <__NVIC_EnableIRQ+0x38>)
 800536a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	2001      	movs	r0, #1
 8005372:	fa00 f202 	lsl.w	r2, r0, r2
 8005376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	e000e100 	.word	0xe000e100

0800538c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	6039      	str	r1, [r7, #0]
 8005396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539c:	2b00      	cmp	r3, #0
 800539e:	db0a      	blt.n	80053b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	490c      	ldr	r1, [pc, #48]	; (80053d8 <__NVIC_SetPriority+0x4c>)
 80053a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053aa:	0112      	lsls	r2, r2, #4
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	440b      	add	r3, r1
 80053b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053b4:	e00a      	b.n	80053cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	4908      	ldr	r1, [pc, #32]	; (80053dc <__NVIC_SetPriority+0x50>)
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	3b04      	subs	r3, #4
 80053c4:	0112      	lsls	r2, r2, #4
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	440b      	add	r3, r1
 80053ca:	761a      	strb	r2, [r3, #24]
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000e100 	.word	0xe000e100
 80053dc:	e000ed00 	.word	0xe000ed00

080053e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b089      	sub	sp, #36	; 0x24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	f1c3 0307 	rsb	r3, r3, #7
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	bf28      	it	cs
 80053fe:	2304      	movcs	r3, #4
 8005400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3304      	adds	r3, #4
 8005406:	2b06      	cmp	r3, #6
 8005408:	d902      	bls.n	8005410 <NVIC_EncodePriority+0x30>
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	3b03      	subs	r3, #3
 800540e:	e000      	b.n	8005412 <NVIC_EncodePriority+0x32>
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	43da      	mvns	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	401a      	ands	r2, r3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	fa01 f303 	lsl.w	r3, r1, r3
 8005432:	43d9      	mvns	r1, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005438:	4313      	orrs	r3, r2
         );
}
 800543a:	4618      	mov	r0, r3
 800543c:	3724      	adds	r7, #36	; 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3b01      	subs	r3, #1
 8005454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005458:	d301      	bcc.n	800545e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800545a:	2301      	movs	r3, #1
 800545c:	e00f      	b.n	800547e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800545e:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <SysTick_Config+0x40>)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3b01      	subs	r3, #1
 8005464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005466:	210f      	movs	r1, #15
 8005468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800546c:	f7ff ff8e 	bl	800538c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <SysTick_Config+0x40>)
 8005472:	2200      	movs	r2, #0
 8005474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005476:	4b04      	ldr	r3, [pc, #16]	; (8005488 <SysTick_Config+0x40>)
 8005478:	2207      	movs	r2, #7
 800547a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	e000e010 	.word	0xe000e010

0800548c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff ff29 	bl	80052ec <__NVIC_SetPriorityGrouping>
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	4603      	mov	r3, r0
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054b4:	f7ff ff3e 	bl	8005334 <__NVIC_GetPriorityGrouping>
 80054b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	6978      	ldr	r0, [r7, #20]
 80054c0:	f7ff ff8e 	bl	80053e0 <NVIC_EncodePriority>
 80054c4:	4602      	mov	r2, r0
 80054c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff ff5d 	bl	800538c <__NVIC_SetPriority>
}
 80054d2:	bf00      	nop
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	4603      	mov	r3, r0
 80054e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff ff31 	bl	8005350 <__NVIC_EnableIRQ>
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff ffa2 	bl	8005448 <SysTick_Config>
 8005504:	4603      	mov	r3, r0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800551c:	2b02      	cmp	r3, #2
 800551e:	d008      	beq.n	8005532 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2204      	movs	r2, #4
 8005524:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e020      	b.n	8005574 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 020e 	bic.w	r2, r2, #14
 8005540:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0201 	bic.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	2101      	movs	r1, #1
 800555c:	fa01 f202 	lsl.w	r2, r1, r2
 8005560:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005592:	2b02      	cmp	r3, #2
 8005594:	d005      	beq.n	80055a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2204      	movs	r2, #4
 800559a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
 80055a0:	e027      	b.n	80055f2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 020e 	bic.w	r2, r2, #14
 80055b0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	2101      	movs	r1, #1
 80055cc:	fa01 f202 	lsl.w	r2, r1, r2
 80055d0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
    } 
  }
  return status;
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800560a:	e154      	b.n	80058b6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	2101      	movs	r1, #1
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	fa01 f303 	lsl.w	r3, r1, r3
 8005618:	4013      	ands	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 8146 	beq.w	80058b0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d005      	beq.n	800563c <HAL_GPIO_Init+0x40>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d130      	bne.n	800569e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	2203      	movs	r2, #3
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4013      	ands	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005672:	2201      	movs	r2, #1
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	43db      	mvns	r3, r3
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4013      	ands	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	f003 0201 	and.w	r2, r3, #1
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d017      	beq.n	80056da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	2203      	movs	r2, #3
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	43db      	mvns	r3, r3
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4013      	ands	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d123      	bne.n	800572e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	08da      	lsrs	r2, r3, #3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3208      	adds	r2, #8
 80056ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	220f      	movs	r2, #15
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	43db      	mvns	r3, r3
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4013      	ands	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	08da      	lsrs	r2, r3, #3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3208      	adds	r2, #8
 8005728:	6939      	ldr	r1, [r7, #16]
 800572a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	2203      	movs	r2, #3
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43db      	mvns	r3, r3
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4013      	ands	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f003 0203 	and.w	r2, r3, #3
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80a0 	beq.w	80058b0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005770:	4b58      	ldr	r3, [pc, #352]	; (80058d4 <HAL_GPIO_Init+0x2d8>)
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	4a57      	ldr	r2, [pc, #348]	; (80058d4 <HAL_GPIO_Init+0x2d8>)
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	6193      	str	r3, [r2, #24]
 800577c:	4b55      	ldr	r3, [pc, #340]	; (80058d4 <HAL_GPIO_Init+0x2d8>)
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005788:	4a53      	ldr	r2, [pc, #332]	; (80058d8 <HAL_GPIO_Init+0x2dc>)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	089b      	lsrs	r3, r3, #2
 800578e:	3302      	adds	r3, #2
 8005790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005794:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f003 0303 	and.w	r3, r3, #3
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	220f      	movs	r2, #15
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	43db      	mvns	r3, r3
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4013      	ands	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80057b2:	d019      	beq.n	80057e8 <HAL_GPIO_Init+0x1ec>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a49      	ldr	r2, [pc, #292]	; (80058dc <HAL_GPIO_Init+0x2e0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d013      	beq.n	80057e4 <HAL_GPIO_Init+0x1e8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a48      	ldr	r2, [pc, #288]	; (80058e0 <HAL_GPIO_Init+0x2e4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00d      	beq.n	80057e0 <HAL_GPIO_Init+0x1e4>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a47      	ldr	r2, [pc, #284]	; (80058e4 <HAL_GPIO_Init+0x2e8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <HAL_GPIO_Init+0x1e0>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a46      	ldr	r2, [pc, #280]	; (80058e8 <HAL_GPIO_Init+0x2ec>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d101      	bne.n	80057d8 <HAL_GPIO_Init+0x1dc>
 80057d4:	2304      	movs	r3, #4
 80057d6:	e008      	b.n	80057ea <HAL_GPIO_Init+0x1ee>
 80057d8:	2305      	movs	r3, #5
 80057da:	e006      	b.n	80057ea <HAL_GPIO_Init+0x1ee>
 80057dc:	2303      	movs	r3, #3
 80057de:	e004      	b.n	80057ea <HAL_GPIO_Init+0x1ee>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e002      	b.n	80057ea <HAL_GPIO_Init+0x1ee>
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <HAL_GPIO_Init+0x1ee>
 80057e8:	2300      	movs	r3, #0
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	f002 0203 	and.w	r2, r2, #3
 80057f0:	0092      	lsls	r2, r2, #2
 80057f2:	4093      	lsls	r3, r2
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80057fa:	4937      	ldr	r1, [pc, #220]	; (80058d8 <HAL_GPIO_Init+0x2dc>)
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	089b      	lsrs	r3, r3, #2
 8005800:	3302      	adds	r3, #2
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005808:	4b38      	ldr	r3, [pc, #224]	; (80058ec <HAL_GPIO_Init+0x2f0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	43db      	mvns	r3, r3
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4013      	ands	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800582c:	4a2f      	ldr	r2, [pc, #188]	; (80058ec <HAL_GPIO_Init+0x2f0>)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005832:	4b2e      	ldr	r3, [pc, #184]	; (80058ec <HAL_GPIO_Init+0x2f0>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	43db      	mvns	r3, r3
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4013      	ands	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005856:	4a25      	ldr	r2, [pc, #148]	; (80058ec <HAL_GPIO_Init+0x2f0>)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800585c:	4b23      	ldr	r3, [pc, #140]	; (80058ec <HAL_GPIO_Init+0x2f0>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	43db      	mvns	r3, r3
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4013      	ands	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005880:	4a1a      	ldr	r2, [pc, #104]	; (80058ec <HAL_GPIO_Init+0x2f0>)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005886:	4b19      	ldr	r3, [pc, #100]	; (80058ec <HAL_GPIO_Init+0x2f0>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	43db      	mvns	r3, r3
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4013      	ands	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80058aa:	4a10      	ldr	r2, [pc, #64]	; (80058ec <HAL_GPIO_Init+0x2f0>)
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	3301      	adds	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	fa22 f303 	lsr.w	r3, r2, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f47f aea3 	bne.w	800560c <HAL_GPIO_Init+0x10>
  }
}
 80058c6:	bf00      	nop
 80058c8:	bf00      	nop
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	40021000 	.word	0x40021000
 80058d8:	40010000 	.word	0x40010000
 80058dc:	48000400 	.word	0x48000400
 80058e0:	48000800 	.word	0x48000800
 80058e4:	48000c00 	.word	0x48000c00
 80058e8:	48001000 	.word	0x48001000
 80058ec:	40010400 	.word	0x40010400

080058f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	887b      	ldrh	r3, [r7, #2]
 8005902:	4013      	ands	r3, r2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
 800590c:	e001      	b.n	8005912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005912:	7bfb      	ldrb	r3, [r7, #15]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	807b      	strh	r3, [r7, #2]
 800592c:	4613      	mov	r3, r2
 800592e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005930:	787b      	ldrb	r3, [r7, #1]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005936:	887a      	ldrh	r2, [r7, #2]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800593c:	e002      	b.n	8005944 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800593e:	887a      	ldrh	r2, [r7, #2]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005962:	887a      	ldrh	r2, [r7, #2]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4013      	ands	r3, r2
 8005968:	041a      	lsls	r2, r3, #16
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	43d9      	mvns	r1, r3
 800596e:	887b      	ldrh	r3, [r7, #2]
 8005970:	400b      	ands	r3, r1
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	619a      	str	r2, [r3, #24]
}
 8005978:	bf00      	nop
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e081      	b.n	8005a9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fe f8a2 	bl	8003af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2224      	movs	r2, #36	; 0x24
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0201 	bic.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d107      	bne.n	80059fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059fa:	609a      	str	r2, [r3, #8]
 80059fc:	e006      	b.n	8005a0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005a0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d104      	bne.n	8005a1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69d9      	ldr	r1, [r3, #28]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1a      	ldr	r2, [r3, #32]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	817b      	strh	r3, [r7, #10]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	f040 80da 	bne.w	8005c7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_I2C_Master_Transmit+0x30>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e0d3      	b.n	8005c7c <HAL_I2C_Master_Transmit+0x1d8>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005adc:	f7fe fb28 	bl	8004130 <HAL_GetTick>
 8005ae0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	2319      	movs	r3, #25
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fb54 	bl	800619c <I2C_WaitOnFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e0be      	b.n	8005c7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2221      	movs	r2, #33	; 0x21
 8005b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2210      	movs	r2, #16
 8005b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	893a      	ldrh	r2, [r7, #8]
 8005b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2bff      	cmp	r3, #255	; 0xff
 8005b2e:	d90e      	bls.n	8005b4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	22ff      	movs	r2, #255	; 0xff
 8005b34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	8979      	ldrh	r1, [r7, #10]
 8005b3e:	4b51      	ldr	r3, [pc, #324]	; (8005c84 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fcc6 	bl	80064d8 <I2C_TransferConfig>
 8005b4c:	e06c      	b.n	8005c28 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	8979      	ldrh	r1, [r7, #10]
 8005b60:	4b48      	ldr	r3, [pc, #288]	; (8005c84 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 fcb5 	bl	80064d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b6e:	e05b      	b.n	8005c28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	6a39      	ldr	r1, [r7, #32]
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fb51 	bl	800621c <I2C_WaitOnTXISFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e07b      	b.n	8005c7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	781a      	ldrb	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d034      	beq.n	8005c28 <HAL_I2C_Master_Transmit+0x184>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d130      	bne.n	8005c28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2180      	movs	r1, #128	; 0x80
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fae3 	bl	800619c <I2C_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e04d      	b.n	8005c7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2bff      	cmp	r3, #255	; 0xff
 8005be8:	d90e      	bls.n	8005c08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	22ff      	movs	r2, #255	; 0xff
 8005bee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	8979      	ldrh	r1, [r7, #10]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fc69 	bl	80064d8 <I2C_TransferConfig>
 8005c06:	e00f      	b.n	8005c28 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	8979      	ldrh	r1, [r7, #10]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 fc58 	bl	80064d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d19e      	bne.n	8005b70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	6a39      	ldr	r1, [r7, #32]
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fb30 	bl	800629c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e01a      	b.n	8005c7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6859      	ldr	r1, [r3, #4]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <HAL_I2C_Master_Transmit+0x1e4>)
 8005c5a:	400b      	ands	r3, r1
 8005c5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e000      	b.n	8005c7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005c7a:	2302      	movs	r3, #2
  }
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	80002000 	.word	0x80002000
 8005c88:	fe00e800 	.word	0xfe00e800

08005c8c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	607a      	str	r2, [r7, #4]
 8005c96:	461a      	mov	r2, r3
 8005c98:	460b      	mov	r3, r1
 8005c9a:	817b      	strh	r3, [r7, #10]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	f040 80db 	bne.w	8005e64 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_I2C_Master_Receive+0x30>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e0d4      	b.n	8005e66 <HAL_I2C_Master_Receive+0x1da>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cc4:	f7fe fa34 	bl	8004130 <HAL_GetTick>
 8005cc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	2319      	movs	r3, #25
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fa60 	bl	800619c <I2C_WaitOnFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0bf      	b.n	8005e66 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2222      	movs	r2, #34	; 0x22
 8005cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2210      	movs	r2, #16
 8005cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	893a      	ldrh	r2, [r7, #8]
 8005d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2bff      	cmp	r3, #255	; 0xff
 8005d16:	d90e      	bls.n	8005d36 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	22ff      	movs	r2, #255	; 0xff
 8005d1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	8979      	ldrh	r1, [r7, #10]
 8005d26:	4b52      	ldr	r3, [pc, #328]	; (8005e70 <HAL_I2C_Master_Receive+0x1e4>)
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 fbd2 	bl	80064d8 <I2C_TransferConfig>
 8005d34:	e06d      	b.n	8005e12 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	8979      	ldrh	r1, [r7, #10]
 8005d48:	4b49      	ldr	r3, [pc, #292]	; (8005e70 <HAL_I2C_Master_Receive+0x1e4>)
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fbc1 	bl	80064d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005d56:	e05c      	b.n	8005e12 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	6a39      	ldr	r1, [r7, #32]
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fad9 	bl	8006314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e07c      	b.n	8005e66 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d034      	beq.n	8005e12 <HAL_I2C_Master_Receive+0x186>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d130      	bne.n	8005e12 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	2200      	movs	r2, #0
 8005db8:	2180      	movs	r1, #128	; 0x80
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f9ee 	bl	800619c <I2C_WaitOnFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e04d      	b.n	8005e66 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2bff      	cmp	r3, #255	; 0xff
 8005dd2:	d90e      	bls.n	8005df2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	22ff      	movs	r2, #255	; 0xff
 8005dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	8979      	ldrh	r1, [r7, #10]
 8005de2:	2300      	movs	r3, #0
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fb74 	bl	80064d8 <I2C_TransferConfig>
 8005df0:	e00f      	b.n	8005e12 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	8979      	ldrh	r1, [r7, #10]
 8005e04:	2300      	movs	r3, #0
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 fb63 	bl	80064d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d19d      	bne.n	8005d58 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	6a39      	ldr	r1, [r7, #32]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 fa3b 	bl	800629c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e01a      	b.n	8005e66 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2220      	movs	r2, #32
 8005e36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6859      	ldr	r1, [r3, #4]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <HAL_I2C_Master_Receive+0x1e8>)
 8005e44:	400b      	ands	r3, r1
 8005e46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e000      	b.n	8005e66 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
  }
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	80002400 	.word	0x80002400
 8005e74:	fe00e800 	.word	0xfe00e800

08005e78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	4608      	mov	r0, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	461a      	mov	r2, r3
 8005e86:	4603      	mov	r3, r0
 8005e88:	817b      	strh	r3, [r7, #10]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	813b      	strh	r3, [r7, #8]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	f040 80fd 	bne.w	800609a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_I2C_Mem_Read+0x34>
 8005ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d105      	bne.n	8005eb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e0f1      	b.n	800609c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_I2C_Mem_Read+0x4e>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e0ea      	b.n	800609c <HAL_I2C_Mem_Read+0x224>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ece:	f7fe f92f 	bl	8004130 <HAL_GetTick>
 8005ed2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	2319      	movs	r3, #25
 8005eda:	2201      	movs	r2, #1
 8005edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f95b 	bl	800619c <I2C_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0d5      	b.n	800609c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2222      	movs	r2, #34	; 0x22
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2240      	movs	r2, #64	; 0x40
 8005efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a3a      	ldr	r2, [r7, #32]
 8005f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f18:	88f8      	ldrh	r0, [r7, #6]
 8005f1a:	893a      	ldrh	r2, [r7, #8]
 8005f1c:	8979      	ldrh	r1, [r7, #10]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	4603      	mov	r3, r0
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 f8bf 	bl	80060ac <I2C_RequestMemoryRead>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e0ad      	b.n	800609c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2bff      	cmp	r3, #255	; 0xff
 8005f48:	d90e      	bls.n	8005f68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	22ff      	movs	r2, #255	; 0xff
 8005f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	8979      	ldrh	r1, [r7, #10]
 8005f58:	4b52      	ldr	r3, [pc, #328]	; (80060a4 <HAL_I2C_Mem_Read+0x22c>)
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 fab9 	bl	80064d8 <I2C_TransferConfig>
 8005f66:	e00f      	b.n	8005f88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	8979      	ldrh	r1, [r7, #10]
 8005f7a:	4b4a      	ldr	r3, [pc, #296]	; (80060a4 <HAL_I2C_Mem_Read+0x22c>)
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 faa8 	bl	80064d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2104      	movs	r1, #4
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 f902 	bl	800619c <I2C_WaitOnFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e07c      	b.n	800609c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d034      	beq.n	8006048 <HAL_I2C_Mem_Read+0x1d0>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d130      	bne.n	8006048 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	2200      	movs	r2, #0
 8005fee:	2180      	movs	r1, #128	; 0x80
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f8d3 	bl	800619c <I2C_WaitOnFlagUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e04d      	b.n	800609c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	2bff      	cmp	r3, #255	; 0xff
 8006008:	d90e      	bls.n	8006028 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	22ff      	movs	r2, #255	; 0xff
 800600e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006014:	b2da      	uxtb	r2, r3
 8006016:	8979      	ldrh	r1, [r7, #10]
 8006018:	2300      	movs	r3, #0
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fa59 	bl	80064d8 <I2C_TransferConfig>
 8006026:	e00f      	b.n	8006048 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006036:	b2da      	uxtb	r2, r3
 8006038:	8979      	ldrh	r1, [r7, #10]
 800603a:	2300      	movs	r3, #0
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 fa48 	bl	80064d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d19a      	bne.n	8005f88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 f920 	bl	800629c <I2C_WaitOnSTOPFlagUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e01a      	b.n	800609c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2220      	movs	r2, #32
 800606c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6859      	ldr	r1, [r3, #4]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_I2C_Mem_Read+0x230>)
 800607a:	400b      	ands	r3, r1
 800607c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e000      	b.n	800609c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800609a:	2302      	movs	r3, #2
  }
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	80002400 	.word	0x80002400
 80060a8:	fe00e800 	.word	0xfe00e800

080060ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	4608      	mov	r0, r1
 80060b6:	4611      	mov	r1, r2
 80060b8:	461a      	mov	r2, r3
 80060ba:	4603      	mov	r3, r0
 80060bc:	817b      	strh	r3, [r7, #10]
 80060be:	460b      	mov	r3, r1
 80060c0:	813b      	strh	r3, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	8979      	ldrh	r1, [r7, #10]
 80060cc:	4b20      	ldr	r3, [pc, #128]	; (8006150 <I2C_RequestMemoryRead+0xa4>)
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	2300      	movs	r3, #0
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fa00 	bl	80064d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	69b9      	ldr	r1, [r7, #24]
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f89d 	bl	800621c <I2C_WaitOnTXISFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e02c      	b.n	8006146 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d105      	bne.n	80060fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060f2:	893b      	ldrh	r3, [r7, #8]
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	629a      	str	r2, [r3, #40]	; 0x28
 80060fc:	e015      	b.n	800612a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80060fe:	893b      	ldrh	r3, [r7, #8]
 8006100:	0a1b      	lsrs	r3, r3, #8
 8006102:	b29b      	uxth	r3, r3
 8006104:	b2da      	uxtb	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	69b9      	ldr	r1, [r7, #24]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f883 	bl	800621c <I2C_WaitOnTXISFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e012      	b.n	8006146 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006120:	893b      	ldrh	r3, [r7, #8]
 8006122:	b2da      	uxtb	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	2200      	movs	r2, #0
 8006132:	2140      	movs	r1, #64	; 0x40
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f831 	bl	800619c <I2C_WaitOnFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	80002000 	.word	0x80002000

08006154 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b02      	cmp	r3, #2
 8006168:	d103      	bne.n	8006172 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2200      	movs	r2, #0
 8006170:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b01      	cmp	r3, #1
 800617e:	d007      	beq.n	8006190 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	619a      	str	r2, [r3, #24]
  }
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	4613      	mov	r3, r2
 80061aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ac:	e022      	b.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b4:	d01e      	beq.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b6:	f7fd ffbb 	bl	8004130 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d302      	bcc.n	80061cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d113      	bne.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d0:	f043 0220 	orr.w	r2, r3, #32
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e00f      	b.n	8006214 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	4013      	ands	r3, r2
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	429a      	cmp	r2, r3
 8006202:	bf0c      	ite	eq
 8006204:	2301      	moveq	r3, #1
 8006206:	2300      	movne	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	429a      	cmp	r2, r3
 8006210:	d0cd      	beq.n	80061ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006228:	e02c      	b.n	8006284 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f8dc 	bl	80063ec <I2C_IsAcknowledgeFailed>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e02a      	b.n	8006294 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006244:	d01e      	beq.n	8006284 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006246:	f7fd ff73 	bl	8004130 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	d302      	bcc.n	800625c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d113      	bne.n	8006284 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006260:	f043 0220 	orr.w	r2, r3, #32
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e007      	b.n	8006294 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b02      	cmp	r3, #2
 8006290:	d1cb      	bne.n	800622a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062a8:	e028      	b.n	80062fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f89c 	bl	80063ec <I2C_IsAcknowledgeFailed>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e026      	b.n	800630c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062be:	f7fd ff37 	bl	8004130 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d302      	bcc.n	80062d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d113      	bne.n	80062fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d8:	f043 0220 	orr.w	r2, r3, #32
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e007      	b.n	800630c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b20      	cmp	r3, #32
 8006308:	d1cf      	bne.n	80062aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006320:	e055      	b.n	80063ce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 f860 	bl	80063ec <I2C_IsAcknowledgeFailed>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e053      	b.n	80063de <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b20      	cmp	r3, #32
 8006342:	d129      	bne.n	8006398 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f003 0304 	and.w	r3, r3, #4
 800634e:	2b04      	cmp	r3, #4
 8006350:	d105      	bne.n	800635e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	e03f      	b.n	80063de <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2220      	movs	r2, #32
 8006364:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6859      	ldr	r1, [r3, #4]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	4b1d      	ldr	r3, [pc, #116]	; (80063e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8006372:	400b      	ands	r3, r1
 8006374:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e022      	b.n	80063de <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006398:	f7fd feca 	bl	8004130 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d302      	bcc.n	80063ae <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10f      	bne.n	80063ce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	f043 0220 	orr.w	r2, r3, #32
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e007      	b.n	80063de <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d1a2      	bne.n	8006322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	fe00e800 	.word	0xfe00e800

080063ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b10      	cmp	r3, #16
 8006404:	d161      	bne.n	80064ca <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006414:	d02b      	beq.n	800646e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006424:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006426:	e022      	b.n	800646e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800642e:	d01e      	beq.n	800646e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006430:	f7fd fe7e 	bl	8004130 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	429a      	cmp	r2, r3
 800643e:	d302      	bcc.n	8006446 <I2C_IsAcknowledgeFailed+0x5a>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d113      	bne.n	800646e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	f043 0220 	orr.w	r2, r3, #32
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e02e      	b.n	80064cc <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b20      	cmp	r3, #32
 800647a:	d1d5      	bne.n	8006428 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2210      	movs	r2, #16
 8006482:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2220      	movs	r2, #32
 800648a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff fe61 	bl	8006154 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6859      	ldr	r1, [r3, #4]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <I2C_IsAcknowledgeFailed+0xe8>)
 800649e:	400b      	ands	r3, r1
 80064a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a6:	f043 0204 	orr.w	r2, r3, #4
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	fe00e800 	.word	0xfe00e800

080064d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	607b      	str	r3, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	817b      	strh	r3, [r7, #10]
 80064e6:	4613      	mov	r3, r2
 80064e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	0d5b      	lsrs	r3, r3, #21
 80064f4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80064f8:	4b0d      	ldr	r3, [pc, #52]	; (8006530 <I2C_TransferConfig+0x58>)
 80064fa:	430b      	orrs	r3, r1
 80064fc:	43db      	mvns	r3, r3
 80064fe:	ea02 0103 	and.w	r1, r2, r3
 8006502:	897b      	ldrh	r3, [r7, #10]
 8006504:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006508:	7a7b      	ldrb	r3, [r7, #9]
 800650a:	041b      	lsls	r3, r3, #16
 800650c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	431a      	orrs	r2, r3
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	431a      	orrs	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8006522:	bf00      	nop
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	03ff63ff 	.word	0x03ff63ff

08006534 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b20      	cmp	r3, #32
 8006548:	d138      	bne.n	80065bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006554:	2302      	movs	r3, #2
 8006556:	e032      	b.n	80065be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2224      	movs	r2, #36	; 0x24
 8006564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0201 	bic.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006586:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6819      	ldr	r1, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0201 	orr.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e000      	b.n	80065be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065bc:	2302      	movs	r3, #2
  }
}
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d139      	bne.n	8006654 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e033      	b.n	8006656 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2224      	movs	r2, #36	; 0x24
 80065fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0201 	bic.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800661c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	021b      	lsls	r3, r3, #8
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	e000      	b.n	8006656 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006654:	2302      	movs	r3, #2
  }
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006664:	b08b      	sub	sp, #44	; 0x2c
 8006666:	af06      	add	r7, sp, #24
 8006668:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0d0      	b.n	8006816 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d106      	bne.n	800668e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7fd fb7d 	bl	8003d88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2203      	movs	r2, #3
 8006692:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f003 fd55 	bl	800a14a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]
 80066a4:	e04c      	b.n	8006740 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	440b      	add	r3, r1
 80066b6:	3301      	adds	r3, #1
 80066b8:	2201      	movs	r2, #1
 80066ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	440b      	add	r3, r1
 80066cc:	7bfa      	ldrb	r2, [r7, #15]
 80066ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80066d0:	7bfa      	ldrb	r2, [r7, #15]
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	b298      	uxth	r0, r3
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	4613      	mov	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	440b      	add	r3, r1
 80066e2:	3336      	adds	r3, #54	; 0x36
 80066e4:	4602      	mov	r2, r0
 80066e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	440b      	add	r3, r1
 80066f8:	3303      	adds	r3, #3
 80066fa:	2200      	movs	r2, #0
 80066fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80066fe:	7bfa      	ldrb	r2, [r7, #15]
 8006700:	6879      	ldr	r1, [r7, #4]
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	440b      	add	r3, r1
 800670c:	3338      	adds	r3, #56	; 0x38
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006712:	7bfa      	ldrb	r2, [r7, #15]
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	440b      	add	r3, r1
 8006720:	333c      	adds	r3, #60	; 0x3c
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006726:	7bfa      	ldrb	r2, [r7, #15]
 8006728:	6879      	ldr	r1, [r7, #4]
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	440b      	add	r3, r1
 8006734:	3340      	adds	r3, #64	; 0x40
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	3301      	adds	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
 8006740:	7bfa      	ldrb	r2, [r7, #15]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	429a      	cmp	r2, r3
 8006748:	d3ad      	bcc.n	80066a6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]
 800674e:	e044      	b.n	80067da <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006750:	7bfa      	ldrb	r2, [r7, #15]
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	440b      	add	r3, r1
 800675e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006762:	2200      	movs	r2, #0
 8006764:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006766:	7bfa      	ldrb	r2, [r7, #15]
 8006768:	6879      	ldr	r1, [r7, #4]
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	440b      	add	r3, r1
 8006774:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006778:	7bfa      	ldrb	r2, [r7, #15]
 800677a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800677c:	7bfa      	ldrb	r2, [r7, #15]
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	440b      	add	r3, r1
 800678a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800678e:	2200      	movs	r2, #0
 8006790:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006792:	7bfa      	ldrb	r2, [r7, #15]
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	440b      	add	r3, r1
 80067a0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80067a8:	7bfa      	ldrb	r2, [r7, #15]
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	4613      	mov	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	440b      	add	r3, r1
 80067b6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80067be:	7bfa      	ldrb	r2, [r7, #15]
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	440b      	add	r3, r1
 80067cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	3301      	adds	r3, #1
 80067d8:	73fb      	strb	r3, [r7, #15]
 80067da:	7bfa      	ldrb	r2, [r7, #15]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d3b5      	bcc.n	8006750 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	603b      	str	r3, [r7, #0]
 80067ea:	687e      	ldr	r6, [r7, #4]
 80067ec:	466d      	mov	r5, sp
 80067ee:	f106 0410 	add.w	r4, r6, #16
 80067f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	602b      	str	r3, [r5, #0]
 80067fa:	1d33      	adds	r3, r6, #4
 80067fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067fe:	6838      	ldr	r0, [r7, #0]
 8006800:	f003 fcbe 	bl	800a180 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006826:	af00      	add	r7, sp, #0
 8006828:	1d3b      	adds	r3, r7, #4
 800682a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800682c:	1d3b      	adds	r3, r7, #4
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	f000 bef4 	b.w	8007622 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800683a:	1d3b      	adds	r3, r7, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 816a 	beq.w	8006b1e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800684a:	4bb3      	ldr	r3, [pc, #716]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f003 030c 	and.w	r3, r3, #12
 8006852:	2b04      	cmp	r3, #4
 8006854:	d00c      	beq.n	8006870 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006856:	4bb0      	ldr	r3, [pc, #704]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f003 030c 	and.w	r3, r3, #12
 800685e:	2b08      	cmp	r3, #8
 8006860:	d159      	bne.n	8006916 <HAL_RCC_OscConfig+0xf6>
 8006862:	4bad      	ldr	r3, [pc, #692]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800686a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800686e:	d152      	bne.n	8006916 <HAL_RCC_OscConfig+0xf6>
 8006870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006874:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006878:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800687c:	fa93 f3a3 	rbit	r3, r3
 8006880:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8006884:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006888:	fab3 f383 	clz	r3, r3
 800688c:	b2db      	uxtb	r3, r3
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f043 0301 	orr.w	r3, r3, #1
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b01      	cmp	r3, #1
 800689a:	d102      	bne.n	80068a2 <HAL_RCC_OscConfig+0x82>
 800689c:	4b9e      	ldr	r3, [pc, #632]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	e015      	b.n	80068ce <HAL_RCC_OscConfig+0xae>
 80068a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068a6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068aa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80068ae:	fa93 f3a3 	rbit	r3, r3
 80068b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80068b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068ba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80068be:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80068c2:	fa93 f3a3 	rbit	r3, r3
 80068c6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80068ca:	4b93      	ldr	r3, [pc, #588]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80068d2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80068d6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80068da:	fa92 f2a2 	rbit	r2, r2
 80068de:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80068e2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80068e6:	fab2 f282 	clz	r2, r2
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	f042 0220 	orr.w	r2, r2, #32
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	f002 021f 	and.w	r2, r2, #31
 80068f6:	2101      	movs	r1, #1
 80068f8:	fa01 f202 	lsl.w	r2, r1, r2
 80068fc:	4013      	ands	r3, r2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 810c 	beq.w	8006b1c <HAL_RCC_OscConfig+0x2fc>
 8006904:	1d3b      	adds	r3, r7, #4
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f040 8106 	bne.w	8006b1c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f000 be86 	b.w	8007622 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006916:	1d3b      	adds	r3, r7, #4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006920:	d106      	bne.n	8006930 <HAL_RCC_OscConfig+0x110>
 8006922:	4b7d      	ldr	r3, [pc, #500]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a7c      	ldr	r2, [pc, #496]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	e030      	b.n	8006992 <HAL_RCC_OscConfig+0x172>
 8006930:	1d3b      	adds	r3, r7, #4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10c      	bne.n	8006954 <HAL_RCC_OscConfig+0x134>
 800693a:	4b77      	ldr	r3, [pc, #476]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a76      	ldr	r2, [pc, #472]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	4b74      	ldr	r3, [pc, #464]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a73      	ldr	r2, [pc, #460]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 800694c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	e01e      	b.n	8006992 <HAL_RCC_OscConfig+0x172>
 8006954:	1d3b      	adds	r3, r7, #4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800695e:	d10c      	bne.n	800697a <HAL_RCC_OscConfig+0x15a>
 8006960:	4b6d      	ldr	r3, [pc, #436]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a6c      	ldr	r2, [pc, #432]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006966:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	4b6a      	ldr	r3, [pc, #424]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a69      	ldr	r2, [pc, #420]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	e00b      	b.n	8006992 <HAL_RCC_OscConfig+0x172>
 800697a:	4b67      	ldr	r3, [pc, #412]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a66      	ldr	r2, [pc, #408]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	4b64      	ldr	r3, [pc, #400]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a63      	ldr	r2, [pc, #396]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 800698c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006990:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006992:	4b61      	ldr	r3, [pc, #388]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	f023 020f 	bic.w	r2, r3, #15
 800699a:	1d3b      	adds	r3, r7, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	495d      	ldr	r1, [pc, #372]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069a6:	1d3b      	adds	r3, r7, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d059      	beq.n	8006a64 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b0:	f7fd fbbe 	bl	8004130 <HAL_GetTick>
 80069b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b8:	e00a      	b.n	80069d0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069ba:	f7fd fbb9 	bl	8004130 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b64      	cmp	r3, #100	; 0x64
 80069c8:	d902      	bls.n	80069d0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	f000 be29 	b.w	8007622 <HAL_RCC_OscConfig+0xe02>
 80069d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80069dc:	fa93 f3a3 	rbit	r3, r3
 80069e0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80069e4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069e8:	fab3 f383 	clz	r3, r3
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d102      	bne.n	8006a02 <HAL_RCC_OscConfig+0x1e2>
 80069fc:	4b46      	ldr	r3, [pc, #280]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	e015      	b.n	8006a2e <HAL_RCC_OscConfig+0x20e>
 8006a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a06:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a0a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006a0e:	fa93 f3a3 	rbit	r3, r3
 8006a12:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006a16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a1a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006a1e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006a22:	fa93 f3a3 	rbit	r3, r3
 8006a26:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006a2a:	4b3b      	ldr	r3, [pc, #236]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a32:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006a36:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006a3a:	fa92 f2a2 	rbit	r2, r2
 8006a3e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006a42:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006a46:	fab2 f282 	clz	r2, r2
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	f042 0220 	orr.w	r2, r2, #32
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	f002 021f 	and.w	r2, r2, #31
 8006a56:	2101      	movs	r1, #1
 8006a58:	fa01 f202 	lsl.w	r2, r1, r2
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0ab      	beq.n	80069ba <HAL_RCC_OscConfig+0x19a>
 8006a62:	e05c      	b.n	8006b1e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a64:	f7fd fb64 	bl	8004130 <HAL_GetTick>
 8006a68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a6c:	e00a      	b.n	8006a84 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a6e:	f7fd fb5f 	bl	8004130 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b64      	cmp	r3, #100	; 0x64
 8006a7c:	d902      	bls.n	8006a84 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	f000 bdcf 	b.w	8007622 <HAL_RCC_OscConfig+0xe02>
 8006a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a88:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a8c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006a90:	fa93 f3a3 	rbit	r3, r3
 8006a94:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006a98:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a9c:	fab3 f383 	clz	r3, r3
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	095b      	lsrs	r3, r3, #5
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d102      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x296>
 8006ab0:	4b19      	ldr	r3, [pc, #100]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	e015      	b.n	8006ae2 <HAL_RCC_OscConfig+0x2c2>
 8006ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006aba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006abe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006ac2:	fa93 f3a3 	rbit	r3, r3
 8006ac6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ace:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006ad2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006ad6:	fa93 f3a3 	rbit	r3, r3
 8006ada:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006ade:	4b0e      	ldr	r3, [pc, #56]	; (8006b18 <HAL_RCC_OscConfig+0x2f8>)
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ae6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006aea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006aee:	fa92 f2a2 	rbit	r2, r2
 8006af2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006af6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006afa:	fab2 f282 	clz	r2, r2
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	f042 0220 	orr.w	r2, r2, #32
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	f002 021f 	and.w	r2, r2, #31
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1ab      	bne.n	8006a6e <HAL_RCC_OscConfig+0x24e>
 8006b16:	e002      	b.n	8006b1e <HAL_RCC_OscConfig+0x2fe>
 8006b18:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b1e:	1d3b      	adds	r3, r7, #4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 816f 	beq.w	8006e0c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006b2e:	4bd0      	ldr	r3, [pc, #832]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f003 030c 	and.w	r3, r3, #12
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006b3a:	4bcd      	ldr	r3, [pc, #820]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f003 030c 	and.w	r3, r3, #12
 8006b42:	2b08      	cmp	r3, #8
 8006b44:	d16c      	bne.n	8006c20 <HAL_RCC_OscConfig+0x400>
 8006b46:	4bca      	ldr	r3, [pc, #808]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d166      	bne.n	8006c20 <HAL_RCC_OscConfig+0x400>
 8006b52:	2302      	movs	r3, #2
 8006b54:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b58:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006b5c:	fa93 f3a3 	rbit	r3, r3
 8006b60:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006b64:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b68:	fab3 f383 	clz	r3, r3
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	095b      	lsrs	r3, r3, #5
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f043 0301 	orr.w	r3, r3, #1
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d102      	bne.n	8006b82 <HAL_RCC_OscConfig+0x362>
 8006b7c:	4bbc      	ldr	r3, [pc, #752]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	e013      	b.n	8006baa <HAL_RCC_OscConfig+0x38a>
 8006b82:	2302      	movs	r3, #2
 8006b84:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b88:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006b8c:	fa93 f3a3 	rbit	r3, r3
 8006b90:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006b94:	2302      	movs	r3, #2
 8006b96:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006b9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006b9e:	fa93 f3a3 	rbit	r3, r3
 8006ba2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006ba6:	4bb2      	ldr	r3, [pc, #712]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	2202      	movs	r2, #2
 8006bac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006bb0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006bb4:	fa92 f2a2 	rbit	r2, r2
 8006bb8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006bbc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006bc0:	fab2 f282 	clz	r2, r2
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	f042 0220 	orr.w	r2, r2, #32
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	f002 021f 	and.w	r2, r2, #31
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d007      	beq.n	8006bec <HAL_RCC_OscConfig+0x3cc>
 8006bdc:	1d3b      	adds	r3, r7, #4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d002      	beq.n	8006bec <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	f000 bd1b 	b.w	8007622 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bec:	4ba0      	ldr	r3, [pc, #640]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf4:	1d3b      	adds	r3, r7, #4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	21f8      	movs	r1, #248	; 0xf8
 8006bfc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c00:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006c04:	fa91 f1a1 	rbit	r1, r1
 8006c08:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006c0c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006c10:	fab1 f181 	clz	r1, r1
 8006c14:	b2c9      	uxtb	r1, r1
 8006c16:	408b      	lsls	r3, r1
 8006c18:	4995      	ldr	r1, [pc, #596]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c1e:	e0f5      	b.n	8006e0c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c20:	1d3b      	adds	r3, r7, #4
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 8085 	beq.w	8006d36 <HAL_RCC_OscConfig+0x516>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c32:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006c36:	fa93 f3a3 	rbit	r3, r3
 8006c3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006c3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c42:	fab3 f383 	clz	r3, r3
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	461a      	mov	r2, r3
 8006c54:	2301      	movs	r3, #1
 8006c56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c58:	f7fd fa6a 	bl	8004130 <HAL_GetTick>
 8006c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c60:	e00a      	b.n	8006c78 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c62:	f7fd fa65 	bl	8004130 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d902      	bls.n	8006c78 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	f000 bcd5 	b.w	8007622 <HAL_RCC_OscConfig+0xe02>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006c82:	fa93 f3a3 	rbit	r3, r3
 8006c86:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006c8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c8e:	fab3 f383 	clz	r3, r3
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d102      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x488>
 8006ca2:	4b73      	ldr	r3, [pc, #460]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	e013      	b.n	8006cd0 <HAL_RCC_OscConfig+0x4b0>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006cb2:	fa93 f3a3 	rbit	r3, r3
 8006cb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006cba:	2302      	movs	r3, #2
 8006cbc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006cc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006cc4:	fa93 f3a3 	rbit	r3, r3
 8006cc8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006ccc:	4b68      	ldr	r3, [pc, #416]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006cd6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006cda:	fa92 f2a2 	rbit	r2, r2
 8006cde:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006ce2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006ce6:	fab2 f282 	clz	r2, r2
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	f042 0220 	orr.w	r2, r2, #32
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	f002 021f 	and.w	r2, r2, #31
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0af      	beq.n	8006c62 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d02:	4b5b      	ldr	r3, [pc, #364]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d0a:	1d3b      	adds	r3, r7, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	21f8      	movs	r1, #248	; 0xf8
 8006d12:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d16:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006d1a:	fa91 f1a1 	rbit	r1, r1
 8006d1e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006d22:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006d26:	fab1 f181 	clz	r1, r1
 8006d2a:	b2c9      	uxtb	r1, r1
 8006d2c:	408b      	lsls	r3, r1
 8006d2e:	4950      	ldr	r1, [pc, #320]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	600b      	str	r3, [r1, #0]
 8006d34:	e06a      	b.n	8006e0c <HAL_RCC_OscConfig+0x5ec>
 8006d36:	2301      	movs	r3, #1
 8006d38:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d40:	fa93 f3a3 	rbit	r3, r3
 8006d44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006d48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d4c:	fab3 f383 	clz	r3, r3
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d62:	f7fd f9e5 	bl	8004130 <HAL_GetTick>
 8006d66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d6a:	e00a      	b.n	8006d82 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d6c:	f7fd f9e0 	bl	8004130 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d902      	bls.n	8006d82 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	f000 bc50 	b.w	8007622 <HAL_RCC_OscConfig+0xe02>
 8006d82:	2302      	movs	r3, #2
 8006d84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d8c:	fa93 f3a3 	rbit	r3, r3
 8006d90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d98:	fab3 f383 	clz	r3, r3
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d102      	bne.n	8006db2 <HAL_RCC_OscConfig+0x592>
 8006dac:	4b30      	ldr	r3, [pc, #192]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	e013      	b.n	8006dda <HAL_RCC_OscConfig+0x5ba>
 8006db2:	2302      	movs	r3, #2
 8006db4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dbc:	fa93 f3a3 	rbit	r3, r3
 8006dc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006dca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dce:	fa93 f3a3 	rbit	r3, r3
 8006dd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006dd6:	4b26      	ldr	r3, [pc, #152]	; (8006e70 <HAL_RCC_OscConfig+0x650>)
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006de0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006de4:	fa92 f2a2 	rbit	r2, r2
 8006de8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006dec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006df0:	fab2 f282 	clz	r2, r2
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	f042 0220 	orr.w	r2, r2, #32
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	f002 021f 	and.w	r2, r2, #31
 8006e00:	2101      	movs	r1, #1
 8006e02:	fa01 f202 	lsl.w	r2, r1, r2
 8006e06:	4013      	ands	r3, r2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1af      	bne.n	8006d6c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e0c:	1d3b      	adds	r3, r7, #4
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0308 	and.w	r3, r3, #8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80da 	beq.w	8006fd0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e1c:	1d3b      	adds	r3, r7, #4
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d069      	beq.n	8006efa <HAL_RCC_OscConfig+0x6da>
 8006e26:	2301      	movs	r3, #1
 8006e28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e30:	fa93 f3a3 	rbit	r3, r3
 8006e34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e3c:	fab3 f383 	clz	r3, r3
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <HAL_RCC_OscConfig+0x654>)
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e50:	f7fd f96e 	bl	8004130 <HAL_GetTick>
 8006e54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e58:	e00e      	b.n	8006e78 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e5a:	f7fd f969 	bl	8004130 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d906      	bls.n	8006e78 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e3d9      	b.n	8007622 <HAL_RCC_OscConfig+0xe02>
 8006e6e:	bf00      	nop
 8006e70:	40021000 	.word	0x40021000
 8006e74:	10908120 	.word	0x10908120
 8006e78:	2302      	movs	r3, #2
 8006e7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e82:	fa93 f3a3 	rbit	r3, r3
 8006e86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e8a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006e8e:	2202      	movs	r2, #2
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	fa93 f2a3 	rbit	r2, r3
 8006e9c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	fa93 f2a3 	rbit	r2, r3
 8006eb4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006eb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eba:	4ba5      	ldr	r3, [pc, #660]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 8006ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ebe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006ec2:	2102      	movs	r1, #2
 8006ec4:	6019      	str	r1, [r3, #0]
 8006ec6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	fa93 f1a3 	rbit	r1, r3
 8006ed0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006ed4:	6019      	str	r1, [r3, #0]
  return result;
 8006ed6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	fab3 f383 	clz	r3, r3
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f003 031f 	and.w	r3, r3, #31
 8006eec:	2101      	movs	r1, #1
 8006eee:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0b0      	beq.n	8006e5a <HAL_RCC_OscConfig+0x63a>
 8006ef8:	e06a      	b.n	8006fd0 <HAL_RCC_OscConfig+0x7b0>
 8006efa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006efe:	2201      	movs	r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	fa93 f2a3 	rbit	r2, r3
 8006f0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006f10:	601a      	str	r2, [r3, #0]
  return result;
 8006f12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006f16:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f18:	fab3 f383 	clz	r3, r3
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4b8c      	ldr	r3, [pc, #560]	; (8007154 <HAL_RCC_OscConfig+0x934>)
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	461a      	mov	r2, r3
 8006f28:	2300      	movs	r3, #0
 8006f2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f2c:	f7fd f900 	bl	8004130 <HAL_GetTick>
 8006f30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f34:	e009      	b.n	8006f4a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f36:	f7fd f8fb 	bl	8004130 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e36b      	b.n	8007622 <HAL_RCC_OscConfig+0xe02>
 8006f4a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006f4e:	2202      	movs	r2, #2
 8006f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	fa93 f2a3 	rbit	r2, r3
 8006f5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006f66:	2202      	movs	r2, #2
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	fa93 f2a3 	rbit	r2, r3
 8006f74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006f7e:	2202      	movs	r2, #2
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	fa93 f2a3 	rbit	r2, r3
 8006f8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f92:	4b6f      	ldr	r3, [pc, #444]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 8006f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006f9a:	2102      	movs	r1, #2
 8006f9c:	6019      	str	r1, [r3, #0]
 8006f9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	fa93 f1a3 	rbit	r1, r3
 8006fa8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006fac:	6019      	str	r1, [r3, #0]
  return result;
 8006fae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	fab3 f383 	clz	r3, r3
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1b2      	bne.n	8006f36 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fd0:	1d3b      	adds	r3, r7, #4
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0304 	and.w	r3, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8158 	beq.w	8007290 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fe6:	4b5a      	ldr	r3, [pc, #360]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d112      	bne.n	8007018 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ff2:	4b57      	ldr	r3, [pc, #348]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	4a56      	ldr	r2, [pc, #344]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 8006ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ffc:	61d3      	str	r3, [r2, #28]
 8006ffe:	4b54      	ldr	r3, [pc, #336]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007006:	f107 0308 	add.w	r3, r7, #8
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	f107 0308 	add.w	r3, r7, #8
 8007010:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007012:	2301      	movs	r3, #1
 8007014:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007018:	4b4f      	ldr	r3, [pc, #316]	; (8007158 <HAL_RCC_OscConfig+0x938>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007020:	2b00      	cmp	r3, #0
 8007022:	d11a      	bne.n	800705a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007024:	4b4c      	ldr	r3, [pc, #304]	; (8007158 <HAL_RCC_OscConfig+0x938>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a4b      	ldr	r2, [pc, #300]	; (8007158 <HAL_RCC_OscConfig+0x938>)
 800702a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800702e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007030:	f7fd f87e 	bl	8004130 <HAL_GetTick>
 8007034:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007038:	e009      	b.n	800704e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800703a:	f7fd f879 	bl	8004130 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b64      	cmp	r3, #100	; 0x64
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e2e9      	b.n	8007622 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800704e:	4b42      	ldr	r3, [pc, #264]	; (8007158 <HAL_RCC_OscConfig+0x938>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0ef      	beq.n	800703a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800705a:	1d3b      	adds	r3, r7, #4
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d106      	bne.n	8007072 <HAL_RCC_OscConfig+0x852>
 8007064:	4b3a      	ldr	r3, [pc, #232]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	4a39      	ldr	r2, [pc, #228]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	6213      	str	r3, [r2, #32]
 8007070:	e02f      	b.n	80070d2 <HAL_RCC_OscConfig+0x8b2>
 8007072:	1d3b      	adds	r3, r7, #4
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10c      	bne.n	8007096 <HAL_RCC_OscConfig+0x876>
 800707c:	4b34      	ldr	r3, [pc, #208]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	4a33      	ldr	r2, [pc, #204]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 8007082:	f023 0301 	bic.w	r3, r3, #1
 8007086:	6213      	str	r3, [r2, #32]
 8007088:	4b31      	ldr	r3, [pc, #196]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	4a30      	ldr	r2, [pc, #192]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 800708e:	f023 0304 	bic.w	r3, r3, #4
 8007092:	6213      	str	r3, [r2, #32]
 8007094:	e01d      	b.n	80070d2 <HAL_RCC_OscConfig+0x8b2>
 8007096:	1d3b      	adds	r3, r7, #4
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2b05      	cmp	r3, #5
 800709e:	d10c      	bne.n	80070ba <HAL_RCC_OscConfig+0x89a>
 80070a0:	4b2b      	ldr	r3, [pc, #172]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	4a2a      	ldr	r2, [pc, #168]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 80070a6:	f043 0304 	orr.w	r3, r3, #4
 80070aa:	6213      	str	r3, [r2, #32]
 80070ac:	4b28      	ldr	r3, [pc, #160]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	4a27      	ldr	r2, [pc, #156]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 80070b2:	f043 0301 	orr.w	r3, r3, #1
 80070b6:	6213      	str	r3, [r2, #32]
 80070b8:	e00b      	b.n	80070d2 <HAL_RCC_OscConfig+0x8b2>
 80070ba:	4b25      	ldr	r3, [pc, #148]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	4a24      	ldr	r2, [pc, #144]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 80070c0:	f023 0301 	bic.w	r3, r3, #1
 80070c4:	6213      	str	r3, [r2, #32]
 80070c6:	4b22      	ldr	r3, [pc, #136]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	4a21      	ldr	r2, [pc, #132]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 80070cc:	f023 0304 	bic.w	r3, r3, #4
 80070d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070d2:	1d3b      	adds	r3, r7, #4
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d06b      	beq.n	80071b4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070dc:	f7fd f828 	bl	8004130 <HAL_GetTick>
 80070e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070e4:	e00b      	b.n	80070fe <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070e6:	f7fd f823 	bl	8004130 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e291      	b.n	8007622 <HAL_RCC_OscConfig+0xe02>
 80070fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007102:	2202      	movs	r2, #2
 8007104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007106:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	fa93 f2a3 	rbit	r2, r3
 8007110:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800711a:	2202      	movs	r2, #2
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	fa93 f2a3 	rbit	r2, r3
 8007128:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800712c:	601a      	str	r2, [r3, #0]
  return result;
 800712e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007132:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007134:	fab3 f383 	clz	r3, r3
 8007138:	b2db      	uxtb	r3, r3
 800713a:	095b      	lsrs	r3, r3, #5
 800713c:	b2db      	uxtb	r3, r3
 800713e:	f043 0302 	orr.w	r3, r3, #2
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d109      	bne.n	800715c <HAL_RCC_OscConfig+0x93c>
 8007148:	4b01      	ldr	r3, [pc, #4]	; (8007150 <HAL_RCC_OscConfig+0x930>)
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	e014      	b.n	8007178 <HAL_RCC_OscConfig+0x958>
 800714e:	bf00      	nop
 8007150:	40021000 	.word	0x40021000
 8007154:	10908120 	.word	0x10908120
 8007158:	40007000 	.word	0x40007000
 800715c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007160:	2202      	movs	r2, #2
 8007162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007164:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	fa93 f2a3 	rbit	r2, r3
 800716e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	4bbb      	ldr	r3, [pc, #748]	; (8007464 <HAL_RCC_OscConfig+0xc44>)
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800717c:	2102      	movs	r1, #2
 800717e:	6011      	str	r1, [r2, #0]
 8007180:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	fa92 f1a2 	rbit	r1, r2
 800718a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800718e:	6011      	str	r1, [r2, #0]
  return result;
 8007190:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007194:	6812      	ldr	r2, [r2, #0]
 8007196:	fab2 f282 	clz	r2, r2
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071a0:	b2d2      	uxtb	r2, r2
 80071a2:	f002 021f 	and.w	r2, r2, #31
 80071a6:	2101      	movs	r1, #1
 80071a8:	fa01 f202 	lsl.w	r2, r1, r2
 80071ac:	4013      	ands	r3, r2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d099      	beq.n	80070e6 <HAL_RCC_OscConfig+0x8c6>
 80071b2:	e063      	b.n	800727c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071b4:	f7fc ffbc 	bl	8004130 <HAL_GetTick>
 80071b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071bc:	e00b      	b.n	80071d6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071be:	f7fc ffb7 	bl	8004130 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e225      	b.n	8007622 <HAL_RCC_OscConfig+0xe02>
 80071d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80071da:	2202      	movs	r2, #2
 80071dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	fa93 f2a3 	rbit	r2, r3
 80071e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80071f2:	2202      	movs	r2, #2
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	fa93 f2a3 	rbit	r2, r3
 8007200:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007204:	601a      	str	r2, [r3, #0]
  return result;
 8007206:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800720a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800720c:	fab3 f383 	clz	r3, r3
 8007210:	b2db      	uxtb	r3, r3
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f043 0302 	orr.w	r3, r3, #2
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d102      	bne.n	8007226 <HAL_RCC_OscConfig+0xa06>
 8007220:	4b90      	ldr	r3, [pc, #576]	; (8007464 <HAL_RCC_OscConfig+0xc44>)
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	e00d      	b.n	8007242 <HAL_RCC_OscConfig+0xa22>
 8007226:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800722a:	2202      	movs	r2, #2
 800722c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800722e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	fa93 f2a3 	rbit	r2, r3
 8007238:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	4b89      	ldr	r3, [pc, #548]	; (8007464 <HAL_RCC_OscConfig+0xc44>)
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007246:	2102      	movs	r1, #2
 8007248:	6011      	str	r1, [r2, #0]
 800724a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800724e:	6812      	ldr	r2, [r2, #0]
 8007250:	fa92 f1a2 	rbit	r1, r2
 8007254:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007258:	6011      	str	r1, [r2, #0]
  return result;
 800725a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800725e:	6812      	ldr	r2, [r2, #0]
 8007260:	fab2 f282 	clz	r2, r2
 8007264:	b2d2      	uxtb	r2, r2
 8007266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	f002 021f 	and.w	r2, r2, #31
 8007270:	2101      	movs	r1, #1
 8007272:	fa01 f202 	lsl.w	r2, r1, r2
 8007276:	4013      	ands	r3, r2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1a0      	bne.n	80071be <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800727c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007280:	2b01      	cmp	r3, #1
 8007282:	d105      	bne.n	8007290 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007284:	4b77      	ldr	r3, [pc, #476]	; (8007464 <HAL_RCC_OscConfig+0xc44>)
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	4a76      	ldr	r2, [pc, #472]	; (8007464 <HAL_RCC_OscConfig+0xc44>)
 800728a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800728e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007290:	1d3b      	adds	r3, r7, #4
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 81c2 	beq.w	8007620 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800729c:	4b71      	ldr	r3, [pc, #452]	; (8007464 <HAL_RCC_OscConfig+0xc44>)
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f003 030c 	and.w	r3, r3, #12
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	f000 819c 	beq.w	80075e2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072aa:	1d3b      	adds	r3, r7, #4
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	f040 8114 	bne.w	80074de <HAL_RCC_OscConfig+0xcbe>
 80072b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80072ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	fa93 f2a3 	rbit	r2, r3
 80072ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80072ce:	601a      	str	r2, [r3, #0]
  return result;
 80072d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80072d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072d6:	fab3 f383 	clz	r3, r3
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80072e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	461a      	mov	r2, r3
 80072e8:	2300      	movs	r3, #0
 80072ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ec:	f7fc ff20 	bl	8004130 <HAL_GetTick>
 80072f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072f4:	e009      	b.n	800730a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072f6:	f7fc ff1b 	bl	8004130 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b02      	cmp	r3, #2
 8007304:	d901      	bls.n	800730a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e18b      	b.n	8007622 <HAL_RCC_OscConfig+0xe02>
 800730a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800730e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007314:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	fa93 f2a3 	rbit	r2, r3
 800731e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007322:	601a      	str	r2, [r3, #0]
  return result;
 8007324:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007328:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800732a:	fab3 f383 	clz	r3, r3
 800732e:	b2db      	uxtb	r3, r3
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f043 0301 	orr.w	r3, r3, #1
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b01      	cmp	r3, #1
 800733c:	d102      	bne.n	8007344 <HAL_RCC_OscConfig+0xb24>
 800733e:	4b49      	ldr	r3, [pc, #292]	; (8007464 <HAL_RCC_OscConfig+0xc44>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	e01b      	b.n	800737c <HAL_RCC_OscConfig+0xb5c>
 8007344:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007348:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800734c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800734e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	fa93 f2a3 	rbit	r2, r3
 8007358:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007362:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	fa93 f2a3 	rbit	r2, r3
 8007372:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	4b3a      	ldr	r3, [pc, #232]	; (8007464 <HAL_RCC_OscConfig+0xc44>)
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007380:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007384:	6011      	str	r1, [r2, #0]
 8007386:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	fa92 f1a2 	rbit	r1, r2
 8007390:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007394:	6011      	str	r1, [r2, #0]
  return result;
 8007396:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800739a:	6812      	ldr	r2, [r2, #0]
 800739c:	fab2 f282 	clz	r2, r2
 80073a0:	b2d2      	uxtb	r2, r2
 80073a2:	f042 0220 	orr.w	r2, r2, #32
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	f002 021f 	and.w	r2, r2, #31
 80073ac:	2101      	movs	r1, #1
 80073ae:	fa01 f202 	lsl.w	r2, r1, r2
 80073b2:	4013      	ands	r3, r2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d19e      	bne.n	80072f6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073b8:	4b2a      	ldr	r3, [pc, #168]	; (8007464 <HAL_RCC_OscConfig+0xc44>)
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80073c0:	1d3b      	adds	r3, r7, #4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80073c6:	1d3b      	adds	r3, r7, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	430b      	orrs	r3, r1
 80073ce:	4925      	ldr	r1, [pc, #148]	; (8007464 <HAL_RCC_OscConfig+0xc44>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	604b      	str	r3, [r1, #4]
 80073d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80073d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	fa93 f2a3 	rbit	r2, r3
 80073e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80073ec:	601a      	str	r2, [r3, #0]
  return result;
 80073ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80073f2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073f4:	fab3 f383 	clz	r3, r3
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80073fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	461a      	mov	r2, r3
 8007406:	2301      	movs	r3, #1
 8007408:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800740a:	f7fc fe91 	bl	8004130 <HAL_GetTick>
 800740e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007412:	e009      	b.n	8007428 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007414:	f7fc fe8c 	bl	8004130 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d901      	bls.n	8007428 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e0fc      	b.n	8007622 <HAL_RCC_OscConfig+0xe02>
 8007428:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800742c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007432:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	fa93 f2a3 	rbit	r2, r3
 800743c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007440:	601a      	str	r2, [r3, #0]
  return result;
 8007442:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007446:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007448:	fab3 f383 	clz	r3, r3
 800744c:	b2db      	uxtb	r3, r3
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	b2db      	uxtb	r3, r3
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b01      	cmp	r3, #1
 800745a:	d105      	bne.n	8007468 <HAL_RCC_OscConfig+0xc48>
 800745c:	4b01      	ldr	r3, [pc, #4]	; (8007464 <HAL_RCC_OscConfig+0xc44>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	e01e      	b.n	80074a0 <HAL_RCC_OscConfig+0xc80>
 8007462:	bf00      	nop
 8007464:	40021000 	.word	0x40021000
 8007468:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800746c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007472:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	fa93 f2a3 	rbit	r2, r3
 800747c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007486:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	fa93 f2a3 	rbit	r2, r3
 8007496:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	4b63      	ldr	r3, [pc, #396]	; (800762c <HAL_RCC_OscConfig+0xe0c>)
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80074a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80074a8:	6011      	str	r1, [r2, #0]
 80074aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	fa92 f1a2 	rbit	r1, r2
 80074b4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80074b8:	6011      	str	r1, [r2, #0]
  return result;
 80074ba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	fab2 f282 	clz	r2, r2
 80074c4:	b2d2      	uxtb	r2, r2
 80074c6:	f042 0220 	orr.w	r2, r2, #32
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	f002 021f 	and.w	r2, r2, #31
 80074d0:	2101      	movs	r1, #1
 80074d2:	fa01 f202 	lsl.w	r2, r1, r2
 80074d6:	4013      	ands	r3, r2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d09b      	beq.n	8007414 <HAL_RCC_OscConfig+0xbf4>
 80074dc:	e0a0      	b.n	8007620 <HAL_RCC_OscConfig+0xe00>
 80074de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	fa93 f2a3 	rbit	r2, r3
 80074f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80074f6:	601a      	str	r2, [r3, #0]
  return result;
 80074f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80074fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074fe:	fab3 f383 	clz	r3, r3
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007508:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	461a      	mov	r2, r3
 8007510:	2300      	movs	r3, #0
 8007512:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007514:	f7fc fe0c 	bl	8004130 <HAL_GetTick>
 8007518:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800751c:	e009      	b.n	8007532 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800751e:	f7fc fe07 	bl	8004130 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e077      	b.n	8007622 <HAL_RCC_OscConfig+0xe02>
 8007532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007536:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800753a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800753c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	fa93 f2a3 	rbit	r2, r3
 8007546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800754a:	601a      	str	r2, [r3, #0]
  return result;
 800754c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007550:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007552:	fab3 f383 	clz	r3, r3
 8007556:	b2db      	uxtb	r3, r3
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	b2db      	uxtb	r3, r3
 800755c:	f043 0301 	orr.w	r3, r3, #1
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b01      	cmp	r3, #1
 8007564:	d102      	bne.n	800756c <HAL_RCC_OscConfig+0xd4c>
 8007566:	4b31      	ldr	r3, [pc, #196]	; (800762c <HAL_RCC_OscConfig+0xe0c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	e01b      	b.n	80075a4 <HAL_RCC_OscConfig+0xd84>
 800756c:	f107 0320 	add.w	r3, r7, #32
 8007570:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007576:	f107 0320 	add.w	r3, r7, #32
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	fa93 f2a3 	rbit	r2, r3
 8007580:	f107 031c 	add.w	r3, r7, #28
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	f107 0318 	add.w	r3, r7, #24
 800758a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	f107 0318 	add.w	r3, r7, #24
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	fa93 f2a3 	rbit	r2, r3
 800759a:	f107 0314 	add.w	r3, r7, #20
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	4b22      	ldr	r3, [pc, #136]	; (800762c <HAL_RCC_OscConfig+0xe0c>)
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	f107 0210 	add.w	r2, r7, #16
 80075a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80075ac:	6011      	str	r1, [r2, #0]
 80075ae:	f107 0210 	add.w	r2, r7, #16
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	fa92 f1a2 	rbit	r1, r2
 80075b8:	f107 020c 	add.w	r2, r7, #12
 80075bc:	6011      	str	r1, [r2, #0]
  return result;
 80075be:	f107 020c 	add.w	r2, r7, #12
 80075c2:	6812      	ldr	r2, [r2, #0]
 80075c4:	fab2 f282 	clz	r2, r2
 80075c8:	b2d2      	uxtb	r2, r2
 80075ca:	f042 0220 	orr.w	r2, r2, #32
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	f002 021f 	and.w	r2, r2, #31
 80075d4:	2101      	movs	r1, #1
 80075d6:	fa01 f202 	lsl.w	r2, r1, r2
 80075da:	4013      	ands	r3, r2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d19e      	bne.n	800751e <HAL_RCC_OscConfig+0xcfe>
 80075e0:	e01e      	b.n	8007620 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075e2:	1d3b      	adds	r3, r7, #4
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e018      	b.n	8007622 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80075f0:	4b0e      	ldr	r3, [pc, #56]	; (800762c <HAL_RCC_OscConfig+0xe0c>)
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80075f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80075fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007600:	1d3b      	adds	r3, r7, #4
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	429a      	cmp	r2, r3
 8007608:	d108      	bne.n	800761c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800760a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800760e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007612:	1d3b      	adds	r3, r7, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007618:	429a      	cmp	r2, r3
 800761a:	d001      	beq.n	8007620 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e000      	b.n	8007622 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40021000 	.word	0x40021000

08007630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b09e      	sub	sp, #120	; 0x78
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e162      	b.n	800790e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007648:	4b90      	ldr	r3, [pc, #576]	; (800788c <HAL_RCC_ClockConfig+0x25c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d910      	bls.n	8007678 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007656:	4b8d      	ldr	r3, [pc, #564]	; (800788c <HAL_RCC_ClockConfig+0x25c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f023 0207 	bic.w	r2, r3, #7
 800765e:	498b      	ldr	r1, [pc, #556]	; (800788c <HAL_RCC_ClockConfig+0x25c>)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	4313      	orrs	r3, r2
 8007664:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007666:	4b89      	ldr	r3, [pc, #548]	; (800788c <HAL_RCC_ClockConfig+0x25c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d001      	beq.n	8007678 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e14a      	b.n	800790e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007684:	4b82      	ldr	r3, [pc, #520]	; (8007890 <HAL_RCC_ClockConfig+0x260>)
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	497f      	ldr	r1, [pc, #508]	; (8007890 <HAL_RCC_ClockConfig+0x260>)
 8007692:	4313      	orrs	r3, r2
 8007694:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 80dc 	beq.w	800785c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d13c      	bne.n	8007726 <HAL_RCC_ClockConfig+0xf6>
 80076ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076b4:	fa93 f3a3 	rbit	r3, r3
 80076b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80076ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076bc:	fab3 f383 	clz	r3, r3
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	095b      	lsrs	r3, r3, #5
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d102      	bne.n	80076d6 <HAL_RCC_ClockConfig+0xa6>
 80076d0:	4b6f      	ldr	r3, [pc, #444]	; (8007890 <HAL_RCC_ClockConfig+0x260>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	e00f      	b.n	80076f6 <HAL_RCC_ClockConfig+0xc6>
 80076d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076de:	fa93 f3a3 	rbit	r3, r3
 80076e2:	667b      	str	r3, [r7, #100]	; 0x64
 80076e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076e8:	663b      	str	r3, [r7, #96]	; 0x60
 80076ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ec:	fa93 f3a3 	rbit	r3, r3
 80076f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076f2:	4b67      	ldr	r3, [pc, #412]	; (8007890 <HAL_RCC_ClockConfig+0x260>)
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80076fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80076fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076fe:	fa92 f2a2 	rbit	r2, r2
 8007702:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007704:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007706:	fab2 f282 	clz	r2, r2
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	f042 0220 	orr.w	r2, r2, #32
 8007710:	b2d2      	uxtb	r2, r2
 8007712:	f002 021f 	and.w	r2, r2, #31
 8007716:	2101      	movs	r1, #1
 8007718:	fa01 f202 	lsl.w	r2, r1, r2
 800771c:	4013      	ands	r3, r2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d17b      	bne.n	800781a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e0f3      	b.n	800790e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2b02      	cmp	r3, #2
 800772c:	d13c      	bne.n	80077a8 <HAL_RCC_ClockConfig+0x178>
 800772e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007732:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007736:	fa93 f3a3 	rbit	r3, r3
 800773a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800773c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800773e:	fab3 f383 	clz	r3, r3
 8007742:	b2db      	uxtb	r3, r3
 8007744:	095b      	lsrs	r3, r3, #5
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f043 0301 	orr.w	r3, r3, #1
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b01      	cmp	r3, #1
 8007750:	d102      	bne.n	8007758 <HAL_RCC_ClockConfig+0x128>
 8007752:	4b4f      	ldr	r3, [pc, #316]	; (8007890 <HAL_RCC_ClockConfig+0x260>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	e00f      	b.n	8007778 <HAL_RCC_ClockConfig+0x148>
 8007758:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800775c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800775e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007760:	fa93 f3a3 	rbit	r3, r3
 8007764:	647b      	str	r3, [r7, #68]	; 0x44
 8007766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800776a:	643b      	str	r3, [r7, #64]	; 0x40
 800776c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776e:	fa93 f3a3 	rbit	r3, r3
 8007772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007774:	4b46      	ldr	r3, [pc, #280]	; (8007890 <HAL_RCC_ClockConfig+0x260>)
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800777c:	63ba      	str	r2, [r7, #56]	; 0x38
 800777e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007780:	fa92 f2a2 	rbit	r2, r2
 8007784:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007788:	fab2 f282 	clz	r2, r2
 800778c:	b2d2      	uxtb	r2, r2
 800778e:	f042 0220 	orr.w	r2, r2, #32
 8007792:	b2d2      	uxtb	r2, r2
 8007794:	f002 021f 	and.w	r2, r2, #31
 8007798:	2101      	movs	r1, #1
 800779a:	fa01 f202 	lsl.w	r2, r1, r2
 800779e:	4013      	ands	r3, r2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d13a      	bne.n	800781a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e0b2      	b.n	800790e <HAL_RCC_ClockConfig+0x2de>
 80077a8:	2302      	movs	r3, #2
 80077aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	fa93 f3a3 	rbit	r3, r3
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077b6:	fab3 f383 	clz	r3, r3
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f043 0301 	orr.w	r3, r3, #1
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d102      	bne.n	80077d0 <HAL_RCC_ClockConfig+0x1a0>
 80077ca:	4b31      	ldr	r3, [pc, #196]	; (8007890 <HAL_RCC_ClockConfig+0x260>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	e00d      	b.n	80077ec <HAL_RCC_ClockConfig+0x1bc>
 80077d0:	2302      	movs	r3, #2
 80077d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	fa93 f3a3 	rbit	r3, r3
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
 80077dc:	2302      	movs	r3, #2
 80077de:	623b      	str	r3, [r7, #32]
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	fa93 f3a3 	rbit	r3, r3
 80077e6:	61fb      	str	r3, [r7, #28]
 80077e8:	4b29      	ldr	r3, [pc, #164]	; (8007890 <HAL_RCC_ClockConfig+0x260>)
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	2202      	movs	r2, #2
 80077ee:	61ba      	str	r2, [r7, #24]
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	fa92 f2a2 	rbit	r2, r2
 80077f6:	617a      	str	r2, [r7, #20]
  return result;
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	fab2 f282 	clz	r2, r2
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	f042 0220 	orr.w	r2, r2, #32
 8007804:	b2d2      	uxtb	r2, r2
 8007806:	f002 021f 	and.w	r2, r2, #31
 800780a:	2101      	movs	r1, #1
 800780c:	fa01 f202 	lsl.w	r2, r1, r2
 8007810:	4013      	ands	r3, r2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e079      	b.n	800790e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800781a:	4b1d      	ldr	r3, [pc, #116]	; (8007890 <HAL_RCC_ClockConfig+0x260>)
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f023 0203 	bic.w	r2, r3, #3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	491a      	ldr	r1, [pc, #104]	; (8007890 <HAL_RCC_ClockConfig+0x260>)
 8007828:	4313      	orrs	r3, r2
 800782a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800782c:	f7fc fc80 	bl	8004130 <HAL_GetTick>
 8007830:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007832:	e00a      	b.n	800784a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007834:	f7fc fc7c 	bl	8004130 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007842:	4293      	cmp	r3, r2
 8007844:	d901      	bls.n	800784a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e061      	b.n	800790e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800784a:	4b11      	ldr	r3, [pc, #68]	; (8007890 <HAL_RCC_ClockConfig+0x260>)
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f003 020c 	and.w	r2, r3, #12
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	429a      	cmp	r2, r3
 800785a:	d1eb      	bne.n	8007834 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800785c:	4b0b      	ldr	r3, [pc, #44]	; (800788c <HAL_RCC_ClockConfig+0x25c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0307 	and.w	r3, r3, #7
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	429a      	cmp	r2, r3
 8007868:	d214      	bcs.n	8007894 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800786a:	4b08      	ldr	r3, [pc, #32]	; (800788c <HAL_RCC_ClockConfig+0x25c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f023 0207 	bic.w	r2, r3, #7
 8007872:	4906      	ldr	r1, [pc, #24]	; (800788c <HAL_RCC_ClockConfig+0x25c>)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	4313      	orrs	r3, r2
 8007878:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800787a:	4b04      	ldr	r3, [pc, #16]	; (800788c <HAL_RCC_ClockConfig+0x25c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d005      	beq.n	8007894 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e040      	b.n	800790e <HAL_RCC_ClockConfig+0x2de>
 800788c:	40022000 	.word	0x40022000
 8007890:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b00      	cmp	r3, #0
 800789e:	d008      	beq.n	80078b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078a0:	4b1d      	ldr	r3, [pc, #116]	; (8007918 <HAL_RCC_ClockConfig+0x2e8>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	491a      	ldr	r1, [pc, #104]	; (8007918 <HAL_RCC_ClockConfig+0x2e8>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0308 	and.w	r3, r3, #8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d009      	beq.n	80078d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078be:	4b16      	ldr	r3, [pc, #88]	; (8007918 <HAL_RCC_ClockConfig+0x2e8>)
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	00db      	lsls	r3, r3, #3
 80078cc:	4912      	ldr	r1, [pc, #72]	; (8007918 <HAL_RCC_ClockConfig+0x2e8>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80078d2:	f000 f829 	bl	8007928 <HAL_RCC_GetSysClockFreq>
 80078d6:	4601      	mov	r1, r0
 80078d8:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <HAL_RCC_ClockConfig+0x2e8>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078e0:	22f0      	movs	r2, #240	; 0xf0
 80078e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	fa92 f2a2 	rbit	r2, r2
 80078ea:	60fa      	str	r2, [r7, #12]
  return result;
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	fab2 f282 	clz	r2, r2
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	40d3      	lsrs	r3, r2
 80078f6:	4a09      	ldr	r2, [pc, #36]	; (800791c <HAL_RCC_ClockConfig+0x2ec>)
 80078f8:	5cd3      	ldrb	r3, [r2, r3]
 80078fa:	fa21 f303 	lsr.w	r3, r1, r3
 80078fe:	4a08      	ldr	r2, [pc, #32]	; (8007920 <HAL_RCC_ClockConfig+0x2f0>)
 8007900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007902:	4b08      	ldr	r3, [pc, #32]	; (8007924 <HAL_RCC_ClockConfig+0x2f4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f7fc fbce 	bl	80040a8 <HAL_InitTick>
  
  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3778      	adds	r7, #120	; 0x78
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40021000 	.word	0x40021000
 800791c:	08012b9c 	.word	0x08012b9c
 8007920:	20000004 	.word	0x20000004
 8007924:	20000008 	.word	0x20000008

08007928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007928:	b480      	push	{r7}
 800792a:	b08b      	sub	sp, #44	; 0x2c
 800792c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	61fb      	str	r3, [r7, #28]
 8007932:	2300      	movs	r3, #0
 8007934:	61bb      	str	r3, [r7, #24]
 8007936:	2300      	movs	r3, #0
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
 800793a:	2300      	movs	r3, #0
 800793c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007942:	4b29      	ldr	r3, [pc, #164]	; (80079e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f003 030c 	and.w	r3, r3, #12
 800794e:	2b04      	cmp	r3, #4
 8007950:	d002      	beq.n	8007958 <HAL_RCC_GetSysClockFreq+0x30>
 8007952:	2b08      	cmp	r3, #8
 8007954:	d003      	beq.n	800795e <HAL_RCC_GetSysClockFreq+0x36>
 8007956:	e03c      	b.n	80079d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007958:	4b24      	ldr	r3, [pc, #144]	; (80079ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800795a:	623b      	str	r3, [r7, #32]
      break;
 800795c:	e03c      	b.n	80079d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007964:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007968:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	fa92 f2a2 	rbit	r2, r2
 8007970:	607a      	str	r2, [r7, #4]
  return result;
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	fab2 f282 	clz	r2, r2
 8007978:	b2d2      	uxtb	r2, r2
 800797a:	40d3      	lsrs	r3, r2
 800797c:	4a1c      	ldr	r2, [pc, #112]	; (80079f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800797e:	5cd3      	ldrb	r3, [r2, r3]
 8007980:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007982:	4b19      	ldr	r3, [pc, #100]	; (80079e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	220f      	movs	r2, #15
 800798c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	fa92 f2a2 	rbit	r2, r2
 8007994:	60fa      	str	r2, [r7, #12]
  return result;
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	fab2 f282 	clz	r2, r2
 800799c:	b2d2      	uxtb	r2, r2
 800799e:	40d3      	lsrs	r3, r2
 80079a0:	4a14      	ldr	r2, [pc, #80]	; (80079f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80079a2:	5cd3      	ldrb	r3, [r2, r3]
 80079a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d008      	beq.n	80079c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80079b0:	4a0e      	ldr	r2, [pc, #56]	; (80079ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	fb02 f303 	mul.w	r3, r2, r3
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
 80079c0:	e004      	b.n	80079cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	4a0c      	ldr	r2, [pc, #48]	; (80079f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80079c6:	fb02 f303 	mul.w	r3, r2, r3
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	623b      	str	r3, [r7, #32]
      break;
 80079d0:	e002      	b.n	80079d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80079d2:	4b06      	ldr	r3, [pc, #24]	; (80079ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80079d4:	623b      	str	r3, [r7, #32]
      break;
 80079d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079d8:	6a3b      	ldr	r3, [r7, #32]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	372c      	adds	r7, #44	; 0x2c
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40021000 	.word	0x40021000
 80079ec:	007a1200 	.word	0x007a1200
 80079f0:	08012bb4 	.word	0x08012bb4
 80079f4:	08012bc4 	.word	0x08012bc4
 80079f8:	003d0900 	.word	0x003d0900

080079fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a00:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a02:	681b      	ldr	r3, [r3, #0]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20000004 	.word	0x20000004

08007a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007a1a:	f7ff ffef 	bl	80079fc <HAL_RCC_GetHCLKFreq>
 8007a1e:	4601      	mov	r1, r0
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007a2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	fa92 f2a2 	rbit	r2, r2
 8007a34:	603a      	str	r2, [r7, #0]
  return result;
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	fab2 f282 	clz	r2, r2
 8007a3c:	b2d2      	uxtb	r2, r2
 8007a3e:	40d3      	lsrs	r3, r2
 8007a40:	4a04      	ldr	r2, [pc, #16]	; (8007a54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007a42:	5cd3      	ldrb	r3, [r2, r3]
 8007a44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	40021000 	.word	0x40021000
 8007a54:	08012bac 	.word	0x08012bac

08007a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007a5e:	f7ff ffcd 	bl	80079fc <HAL_RCC_GetHCLKFreq>
 8007a62:	4601      	mov	r1, r0
 8007a64:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007a6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007a70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	fa92 f2a2 	rbit	r2, r2
 8007a78:	603a      	str	r2, [r7, #0]
  return result;
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	fab2 f282 	clz	r2, r2
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	40d3      	lsrs	r3, r2
 8007a84:	4a04      	ldr	r2, [pc, #16]	; (8007a98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007a86:	5cd3      	ldrb	r3, [r2, r3]
 8007a88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	40021000 	.word	0x40021000
 8007a98:	08012bac 	.word	0x08012bac

08007a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b092      	sub	sp, #72	; 0x48
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007aac:	2300      	movs	r3, #0
 8007aae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 80d4 	beq.w	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ac0:	4b4e      	ldr	r3, [pc, #312]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10e      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007acc:	4b4b      	ldr	r3, [pc, #300]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	4a4a      	ldr	r2, [pc, #296]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ad6:	61d3      	str	r3, [r2, #28]
 8007ad8:	4b48      	ldr	r3, [pc, #288]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae0:	60bb      	str	r3, [r7, #8]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aea:	4b45      	ldr	r3, [pc, #276]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d118      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007af6:	4b42      	ldr	r3, [pc, #264]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a41      	ldr	r2, [pc, #260]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b02:	f7fc fb15 	bl	8004130 <HAL_GetTick>
 8007b06:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b08:	e008      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b0a:	f7fc fb11 	bl	8004130 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b64      	cmp	r3, #100	; 0x64
 8007b16:	d901      	bls.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e169      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b1c:	4b38      	ldr	r3, [pc, #224]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0f0      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b28:	4b34      	ldr	r3, [pc, #208]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b30:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 8084 	beq.w	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d07c      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b48:	4b2c      	ldr	r3, [pc, #176]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	fa93 f3a3 	rbit	r3, r3
 8007b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b62:	fab3 f383 	clz	r3, r3
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4b26      	ldr	r3, [pc, #152]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	461a      	mov	r2, r3
 8007b72:	2301      	movs	r3, #1
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7e:	fa93 f3a3 	rbit	r3, r3
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b86:	fab3 f383 	clz	r3, r3
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	4b1d      	ldr	r3, [pc, #116]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	461a      	mov	r2, r3
 8007b96:	2300      	movs	r3, #0
 8007b98:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007b9a:	4a18      	ldr	r2, [pc, #96]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b9e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d04b      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007baa:	f7fc fac1 	bl	8004130 <HAL_GetTick>
 8007bae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bb0:	e00a      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bb2:	f7fc fabd 	bl	8004130 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e113      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	fa93 f3a3 	rbit	r3, r3
 8007bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	623b      	str	r3, [r7, #32]
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	fa93 f3a3 	rbit	r3, r3
 8007bde:	61fb      	str	r3, [r7, #28]
  return result;
 8007be0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007be2:	fab3 f383 	clz	r3, r3
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	095b      	lsrs	r3, r3, #5
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	f043 0302 	orr.w	r3, r3, #2
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d108      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007bf6:	4b01      	ldr	r3, [pc, #4]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	e00d      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007bfc:	40021000 	.word	0x40021000
 8007c00:	40007000 	.word	0x40007000
 8007c04:	10908100 	.word	0x10908100
 8007c08:	2302      	movs	r3, #2
 8007c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	fa93 f3a3 	rbit	r3, r3
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	4b78      	ldr	r3, [pc, #480]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	2202      	movs	r2, #2
 8007c1a:	613a      	str	r2, [r7, #16]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	fa92 f2a2 	rbit	r2, r2
 8007c22:	60fa      	str	r2, [r7, #12]
  return result;
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	fab2 f282 	clz	r2, r2
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c30:	b2d2      	uxtb	r2, r2
 8007c32:	f002 021f 	and.w	r2, r2, #31
 8007c36:	2101      	movs	r1, #1
 8007c38:	fa01 f202 	lsl.w	r2, r1, r2
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0b7      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007c42:	4b6d      	ldr	r3, [pc, #436]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	496a      	ldr	r1, [pc, #424]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007c54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d105      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c5c:	4b66      	ldr	r3, [pc, #408]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	4a65      	ldr	r2, [pc, #404]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d008      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c74:	4b60      	ldr	r3, [pc, #384]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c78:	f023 0203 	bic.w	r2, r3, #3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	495d      	ldr	r1, [pc, #372]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d008      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c92:	4b59      	ldr	r3, [pc, #356]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	4956      	ldr	r1, [pc, #344]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d008      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cb0:	4b51      	ldr	r3, [pc, #324]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	494e      	ldr	r1, [pc, #312]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d008      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cce:	4b4a      	ldr	r3, [pc, #296]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd2:	f023 0210 	bic.w	r2, r3, #16
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	4947      	ldr	r1, [pc, #284]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007cec:	4b42      	ldr	r3, [pc, #264]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	493f      	ldr	r1, [pc, #252]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d008      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d0a:	4b3b      	ldr	r3, [pc, #236]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0e:	f023 0220 	bic.w	r2, r3, #32
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	4938      	ldr	r1, [pc, #224]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d008      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d28:	4b33      	ldr	r3, [pc, #204]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	4930      	ldr	r1, [pc, #192]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0310 	and.w	r3, r3, #16
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d46:	4b2c      	ldr	r3, [pc, #176]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	4929      	ldr	r1, [pc, #164]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d008      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007d64:	4b24      	ldr	r3, [pc, #144]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	4921      	ldr	r1, [pc, #132]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007d82:	4b1d      	ldr	r3, [pc, #116]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d86:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	491a      	ldr	r1, [pc, #104]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007da0:	4b15      	ldr	r3, [pc, #84]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	4912      	ldr	r1, [pc, #72]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d008      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007dbe:	4b0e      	ldr	r3, [pc, #56]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	490b      	ldr	r1, [pc, #44]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d008      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007ddc:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de8:	4903      	ldr	r1, [pc, #12]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3748      	adds	r7, #72	; 0x48
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	40021000 	.word	0x40021000

08007dfc <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e083      	b.n	8007f16 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	7f5b      	ldrb	r3, [r3, #29]
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d105      	bne.n	8007e24 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7fb feac 	bl	8003b7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	22ca      	movs	r2, #202	; 0xca
 8007e30:	625a      	str	r2, [r3, #36]	; 0x24
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2253      	movs	r2, #83	; 0x53
 8007e38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 faa8 	bl	8008390 <RTC_EnterInitMode>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d008      	beq.n	8007e58 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	22ff      	movs	r2, #255	; 0xff
 8007e4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2204      	movs	r2, #4
 8007e52:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e05e      	b.n	8007f16 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6812      	ldr	r2, [r2, #0]
 8007e62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e6a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6899      	ldr	r1, [r3, #8]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	68d2      	ldr	r2, [r2, #12]
 8007e92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6919      	ldr	r1, [r3, #16]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	041a      	lsls	r2, r3, #16
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007eb6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10e      	bne.n	8007ee4 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fa3a 	bl	8008340 <HAL_RTC_WaitForSynchro>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d008      	beq.n	8007ee4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	22ff      	movs	r2, #255	; 0xff
 8007ed8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2204      	movs	r2, #4
 8007ede:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e018      	b.n	8007f16 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ef2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	699a      	ldr	r2, [r3, #24]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	22ff      	movs	r2, #255	; 0xff
 8007f0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007f14:	2300      	movs	r3, #0
  }
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f1e:	b590      	push	{r4, r7, lr}
 8007f20:	b087      	sub	sp, #28
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	7f1b      	ldrb	r3, [r3, #28]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d101      	bne.n	8007f3a <HAL_RTC_SetTime+0x1c>
 8007f36:	2302      	movs	r3, #2
 8007f38:	e0aa      	b.n	8008090 <HAL_RTC_SetTime+0x172>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2202      	movs	r2, #2
 8007f44:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d126      	bne.n	8007f9a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d102      	bne.n	8007f60 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fa3f 	bl	80083e8 <RTC_ByteToBcd2>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	785b      	ldrb	r3, [r3, #1]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fa38 	bl	80083e8 <RTC_ByteToBcd2>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007f7c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	789b      	ldrb	r3, [r3, #2]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 fa30 	bl	80083e8 <RTC_ByteToBcd2>
 8007f88:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007f8a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	78db      	ldrb	r3, [r3, #3]
 8007f92:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]
 8007f98:	e018      	b.n	8007fcc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d102      	bne.n	8007fae <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2200      	movs	r2, #0
 8007fac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	785b      	ldrb	r3, [r3, #1]
 8007fb8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007fba:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007fc0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	78db      	ldrb	r3, [r3, #3]
 8007fc6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	22ca      	movs	r2, #202	; 0xca
 8007fd2:	625a      	str	r2, [r3, #36]	; 0x24
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2253      	movs	r2, #83	; 0x53
 8007fda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f9d7 	bl	8008390 <RTC_EnterInitMode>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	22ff      	movs	r2, #255	; 0xff
 8007fee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e047      	b.n	8008090 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800800a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800800e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689a      	ldr	r2, [r3, #8]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800801e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6899      	ldr	r1, [r3, #8]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	431a      	orrs	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008046:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d111      	bne.n	800807a <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 f972 	bl	8008340 <HAL_RTC_WaitForSynchro>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00b      	beq.n	800807a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	22ff      	movs	r2, #255	; 0xff
 8008068:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2204      	movs	r2, #4
 800806e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e00a      	b.n	8008090 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	22ff      	movs	r2, #255	; 0xff
 8008080:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800808e:	2300      	movs	r3, #0
  }
}
 8008090:	4618      	mov	r0, r3
 8008092:	371c      	adds	r7, #28
 8008094:	46bd      	mov	sp, r7
 8008096:	bd90      	pop	{r4, r7, pc}

08008098 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80080ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80080ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	0c1b      	lsrs	r3, r3, #16
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	0a1b      	lsrs	r3, r3, #8
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	0c1b      	lsrs	r3, r3, #16
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008108:	b2da      	uxtb	r2, r3
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d11a      	bne.n	800814a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	4618      	mov	r0, r3
 800811a:	f000 f983 	bl	8008424 <RTC_Bcd2ToByte>
 800811e:	4603      	mov	r3, r0
 8008120:	461a      	mov	r2, r3
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	785b      	ldrb	r3, [r3, #1]
 800812a:	4618      	mov	r0, r3
 800812c:	f000 f97a 	bl	8008424 <RTC_Bcd2ToByte>
 8008130:	4603      	mov	r3, r0
 8008132:	461a      	mov	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	789b      	ldrb	r3, [r3, #2]
 800813c:	4618      	mov	r0, r3
 800813e:	f000 f971 	bl	8008424 <RTC_Bcd2ToByte>
 8008142:	4603      	mov	r3, r0
 8008144:	461a      	mov	r2, r3
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008154:	b590      	push	{r4, r7, lr}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	7f1b      	ldrb	r3, [r3, #28]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_RTC_SetDate+0x1c>
 800816c:	2302      	movs	r3, #2
 800816e:	e094      	b.n	800829a <HAL_RTC_SetDate+0x146>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2201      	movs	r2, #1
 8008174:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2202      	movs	r2, #2
 800817a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10e      	bne.n	80081a0 <HAL_RTC_SetDate+0x4c>
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	f003 0310 	and.w	r3, r3, #16
 800818a:	2b00      	cmp	r3, #0
 800818c:	d008      	beq.n	80081a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	f023 0310 	bic.w	r3, r3, #16
 8008196:	b2db      	uxtb	r3, r3
 8008198:	330a      	adds	r3, #10
 800819a:	b2da      	uxtb	r2, r3
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d11c      	bne.n	80081e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	78db      	ldrb	r3, [r3, #3]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 f91c 	bl	80083e8 <RTC_ByteToBcd2>
 80081b0:	4603      	mov	r3, r0
 80081b2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 f915 	bl	80083e8 <RTC_ByteToBcd2>
 80081be:	4603      	mov	r3, r0
 80081c0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80081c2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	789b      	ldrb	r3, [r3, #2]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 f90d 	bl	80083e8 <RTC_ByteToBcd2>
 80081ce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80081d0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80081da:	4313      	orrs	r3, r2
 80081dc:	617b      	str	r3, [r7, #20]
 80081de:	e00e      	b.n	80081fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	78db      	ldrb	r3, [r3, #3]
 80081e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	785b      	ldrb	r3, [r3, #1]
 80081ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80081ec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80081f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	22ca      	movs	r2, #202	; 0xca
 8008204:	625a      	str	r2, [r3, #36]	; 0x24
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2253      	movs	r2, #83	; 0x53
 800820c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 f8be 	bl	8008390 <RTC_EnterInitMode>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00b      	beq.n	8008232 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	22ff      	movs	r2, #255	; 0xff
 8008220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2204      	movs	r2, #4
 8008226:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e033      	b.n	800829a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800823c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008240:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68da      	ldr	r2, [r3, #12]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008250:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b00      	cmp	r3, #0
 800825e:	d111      	bne.n	8008284 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f000 f86d 	bl	8008340 <HAL_RTC_WaitForSynchro>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00b      	beq.n	8008284 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	22ff      	movs	r2, #255	; 0xff
 8008272:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2204      	movs	r2, #4
 8008278:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e00a      	b.n	800829a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	22ff      	movs	r2, #255	; 0xff
 800828a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2201      	movs	r2, #1
 8008290:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008298:	2300      	movs	r3, #0
  }
}
 800829a:	4618      	mov	r0, r3
 800829c:	371c      	adds	r7, #28
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd90      	pop	{r4, r7, pc}

080082a2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b086      	sub	sp, #24
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80082bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80082c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	0c1b      	lsrs	r3, r3, #16
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	0a1b      	lsrs	r3, r3, #8
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	f003 031f 	and.w	r3, r3, #31
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	0b5b      	lsrs	r3, r3, #13
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	f003 0307 	and.w	r3, r3, #7
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d11a      	bne.n	8008336 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	78db      	ldrb	r3, [r3, #3]
 8008304:	4618      	mov	r0, r3
 8008306:	f000 f88d 	bl	8008424 <RTC_Bcd2ToByte>
 800830a:	4603      	mov	r3, r0
 800830c:	461a      	mov	r2, r3
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	785b      	ldrb	r3, [r3, #1]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 f884 	bl	8008424 <RTC_Bcd2ToByte>
 800831c:	4603      	mov	r3, r0
 800831e:	461a      	mov	r2, r3
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	789b      	ldrb	r3, [r3, #2]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f87b 	bl	8008424 <RTC_Bcd2ToByte>
 800832e:	4603      	mov	r3, r0
 8008330:	461a      	mov	r2, r3
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800835a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800835c:	f7fb fee8 	bl	8004130 <HAL_GetTick>
 8008360:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008362:	e009      	b.n	8008378 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008364:	f7fb fee4 	bl	8004130 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008372:	d901      	bls.n	8008378 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e007      	b.n	8008388 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0ee      	beq.n	8008364 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d119      	bne.n	80083de <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083b2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80083b4:	f7fb febc 	bl	8004130 <HAL_GetTick>
 80083b8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80083ba:	e009      	b.n	80083d0 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083bc:	f7fb feb8 	bl	8004130 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083ca:	d901      	bls.n	80083d0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e007      	b.n	80083e0 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0ee      	beq.n	80083bc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80083f6:	e005      	b.n	8008404 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3301      	adds	r3, #1
 80083fc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	3b0a      	subs	r3, #10
 8008402:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8008404:	79fb      	ldrb	r3, [r7, #7]
 8008406:	2b09      	cmp	r3, #9
 8008408:	d8f6      	bhi.n	80083f8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	b2db      	uxtb	r3, r3
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	b2da      	uxtb	r2, r3
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	4313      	orrs	r3, r2
 8008416:	b2db      	uxtb	r3, r3
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	091b      	lsrs	r3, r3, #4
 8008436:	b2db      	uxtb	r3, r3
 8008438:	461a      	mov	r2, r3
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	005b      	lsls	r3, r3, #1
 8008442:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	f003 030f 	and.w	r3, r3, #15
 800844a:	b2da      	uxtb	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	4413      	add	r3, r2
 8008452:	b2db      	uxtb	r3, r3
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e09d      	b.n	80085ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	2b00      	cmp	r3, #0
 8008478:	d108      	bne.n	800848c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008482:	d009      	beq.n	8008498 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	61da      	str	r2, [r3, #28]
 800848a:	e005      	b.n	8008498 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7fb fb88 	bl	8003bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084d8:	d902      	bls.n	80084e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
 80084de:	e002      	b.n	80084e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80084e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80084ee:	d007      	beq.n	8008500 <HAL_SPI_Init+0xa0>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084f8:	d002      	beq.n	8008500 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008510:	431a      	orrs	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	431a      	orrs	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008538:	431a      	orrs	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008542:	ea42 0103 	orr.w	r1, r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	0c1b      	lsrs	r3, r3, #16
 800855c:	f003 0204 	and.w	r2, r3, #4
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	f003 0310 	and.w	r3, r3, #16
 8008568:	431a      	orrs	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856e:	f003 0308 	and.w	r3, r3, #8
 8008572:	431a      	orrs	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800857c:	ea42 0103 	orr.w	r1, r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	69da      	ldr	r2, [r3, #28]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800859c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b08a      	sub	sp, #40	; 0x28
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	607a      	str	r2, [r7, #4]
 80085c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80085c4:	2301      	movs	r3, #1
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_SPI_TransmitReceive+0x26>
 80085d8:	2302      	movs	r3, #2
 80085da:	e1fb      	b.n	80089d4 <HAL_SPI_TransmitReceive+0x41e>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085e4:	f7fb fda4 	bl	8004130 <HAL_GetTick>
 80085e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80085f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80085f8:	887b      	ldrh	r3, [r7, #2]
 80085fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80085fc:	887b      	ldrh	r3, [r7, #2]
 80085fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008600:	7efb      	ldrb	r3, [r7, #27]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d00e      	beq.n	8008624 <HAL_SPI_TransmitReceive+0x6e>
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800860c:	d106      	bne.n	800861c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d102      	bne.n	800861c <HAL_SPI_TransmitReceive+0x66>
 8008616:	7efb      	ldrb	r3, [r7, #27]
 8008618:	2b04      	cmp	r3, #4
 800861a:	d003      	beq.n	8008624 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800861c:	2302      	movs	r3, #2
 800861e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008622:	e1cd      	b.n	80089c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d005      	beq.n	8008636 <HAL_SPI_TransmitReceive+0x80>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <HAL_SPI_TransmitReceive+0x80>
 8008630:	887b      	ldrh	r3, [r7, #2]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d103      	bne.n	800863e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800863c:	e1c0      	b.n	80089c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b04      	cmp	r3, #4
 8008648:	d003      	beq.n	8008652 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2205      	movs	r2, #5
 800864e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	887a      	ldrh	r2, [r7, #2]
 8008662:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	887a      	ldrh	r2, [r7, #2]
 800866a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	887a      	ldrh	r2, [r7, #2]
 8008678:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	887a      	ldrh	r2, [r7, #2]
 800867e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008694:	d802      	bhi.n	800869c <HAL_SPI_TransmitReceive+0xe6>
 8008696:	8a3b      	ldrh	r3, [r7, #16]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d908      	bls.n	80086ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685a      	ldr	r2, [r3, #4]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086aa:	605a      	str	r2, [r3, #4]
 80086ac:	e007      	b.n	80086be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	d007      	beq.n	80086dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086e4:	d97c      	bls.n	80087e0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <HAL_SPI_TransmitReceive+0x13e>
 80086ee:	8a7b      	ldrh	r3, [r7, #18]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d169      	bne.n	80087c8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f8:	881a      	ldrh	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	1c9a      	adds	r2, r3, #2
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800870e:	b29b      	uxth	r3, r3
 8008710:	3b01      	subs	r3, #1
 8008712:	b29a      	uxth	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008718:	e056      	b.n	80087c8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b02      	cmp	r3, #2
 8008726:	d11b      	bne.n	8008760 <HAL_SPI_TransmitReceive+0x1aa>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800872c:	b29b      	uxth	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d016      	beq.n	8008760 <HAL_SPI_TransmitReceive+0x1aa>
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	2b01      	cmp	r3, #1
 8008736:	d113      	bne.n	8008760 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873c:	881a      	ldrh	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	1c9a      	adds	r2, r3, #2
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008752:	b29b      	uxth	r3, r3
 8008754:	3b01      	subs	r3, #1
 8008756:	b29a      	uxth	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b01      	cmp	r3, #1
 800876c:	d11c      	bne.n	80087a8 <HAL_SPI_TransmitReceive+0x1f2>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008774:	b29b      	uxth	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d016      	beq.n	80087a8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008784:	b292      	uxth	r2, r2
 8008786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878c:	1c9a      	adds	r2, r3, #2
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008798:	b29b      	uxth	r3, r3
 800879a:	3b01      	subs	r3, #1
 800879c:	b29a      	uxth	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087a4:	2301      	movs	r3, #1
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80087a8:	f7fb fcc2 	bl	8004130 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d807      	bhi.n	80087c8 <HAL_SPI_TransmitReceive+0x212>
 80087b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087be:	d003      	beq.n	80087c8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80087c6:	e0fb      	b.n	80089c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1a3      	bne.n	800871a <HAL_SPI_TransmitReceive+0x164>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087d8:	b29b      	uxth	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d19d      	bne.n	800871a <HAL_SPI_TransmitReceive+0x164>
 80087de:	e0df      	b.n	80089a0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <HAL_SPI_TransmitReceive+0x23a>
 80087e8:	8a7b      	ldrh	r3, [r7, #18]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	f040 80cb 	bne.w	8008986 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d912      	bls.n	8008820 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fe:	881a      	ldrh	r2, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	1c9a      	adds	r2, r3, #2
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008814:	b29b      	uxth	r3, r3
 8008816:	3b02      	subs	r3, #2
 8008818:	b29a      	uxth	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800881e:	e0b2      	b.n	8008986 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	330c      	adds	r3, #12
 800882a:	7812      	ldrb	r2, [r2, #0]
 800882c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008832:	1c5a      	adds	r2, r3, #1
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800883c:	b29b      	uxth	r3, r3
 800883e:	3b01      	subs	r3, #1
 8008840:	b29a      	uxth	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008846:	e09e      	b.n	8008986 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b02      	cmp	r3, #2
 8008854:	d134      	bne.n	80088c0 <HAL_SPI_TransmitReceive+0x30a>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800885a:	b29b      	uxth	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d02f      	beq.n	80088c0 <HAL_SPI_TransmitReceive+0x30a>
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	2b01      	cmp	r3, #1
 8008864:	d12c      	bne.n	80088c0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800886a:	b29b      	uxth	r3, r3
 800886c:	2b01      	cmp	r3, #1
 800886e:	d912      	bls.n	8008896 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008874:	881a      	ldrh	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008880:	1c9a      	adds	r2, r3, #2
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800888a:	b29b      	uxth	r3, r3
 800888c:	3b02      	subs	r3, #2
 800888e:	b29a      	uxth	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008894:	e012      	b.n	80088bc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	330c      	adds	r3, #12
 80088a0:	7812      	ldrb	r2, [r2, #0]
 80088a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	3b01      	subs	r3, #1
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d148      	bne.n	8008960 <HAL_SPI_TransmitReceive+0x3aa>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d042      	beq.n	8008960 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d923      	bls.n	800892e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f0:	b292      	uxth	r2, r2
 80088f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f8:	1c9a      	adds	r2, r3, #2
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008904:	b29b      	uxth	r3, r3
 8008906:	3b02      	subs	r3, #2
 8008908:	b29a      	uxth	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008916:	b29b      	uxth	r3, r3
 8008918:	2b01      	cmp	r3, #1
 800891a:	d81f      	bhi.n	800895c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800892a:	605a      	str	r2, [r3, #4]
 800892c:	e016      	b.n	800895c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f103 020c 	add.w	r2, r3, #12
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	7812      	ldrb	r2, [r2, #0]
 800893c:	b2d2      	uxtb	r2, r2
 800893e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008950:	b29b      	uxth	r3, r3
 8008952:	3b01      	subs	r3, #1
 8008954:	b29a      	uxth	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800895c:	2301      	movs	r3, #1
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008960:	f7fb fbe6 	bl	8004130 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800896c:	429a      	cmp	r2, r3
 800896e:	d803      	bhi.n	8008978 <HAL_SPI_TransmitReceive+0x3c2>
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008976:	d102      	bne.n	800897e <HAL_SPI_TransmitReceive+0x3c8>
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	2b00      	cmp	r3, #0
 800897c:	d103      	bne.n	8008986 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008984:	e01c      	b.n	80089c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800898a:	b29b      	uxth	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	f47f af5b 	bne.w	8008848 <HAL_SPI_TransmitReceive+0x292>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008998:	b29b      	uxth	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	f47f af54 	bne.w	8008848 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089a0:	69fa      	ldr	r2, [r7, #28]
 80089a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 f937 	bl	8008c18 <SPI_EndRxTxTransaction>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2220      	movs	r2, #32
 80089ba:	661a      	str	r2, [r3, #96]	; 0x60
 80089bc:	e000      	b.n	80089c0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80089be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80089d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3728      	adds	r7, #40	; 0x28
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	4613      	mov	r3, r2
 80089ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80089ec:	f7fb fba0 	bl	8004130 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	1a9b      	subs	r3, r3, r2
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	4413      	add	r3, r2
 80089fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80089fc:	f7fb fb98 	bl	8004130 <HAL_GetTick>
 8008a00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a02:	4b39      	ldr	r3, [pc, #228]	; (8008ae8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	015b      	lsls	r3, r3, #5
 8008a08:	0d1b      	lsrs	r3, r3, #20
 8008a0a:	69fa      	ldr	r2, [r7, #28]
 8008a0c:	fb02 f303 	mul.w	r3, r2, r3
 8008a10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a12:	e054      	b.n	8008abe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a1a:	d050      	beq.n	8008abe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a1c:	f7fb fb88 	bl	8004130 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	69fa      	ldr	r2, [r7, #28]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d902      	bls.n	8008a32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d13d      	bne.n	8008aae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a4a:	d111      	bne.n	8008a70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a54:	d004      	beq.n	8008a60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a5e:	d107      	bne.n	8008a70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a78:	d10f      	bne.n	8008a9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e017      	b.n	8008ade <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	bf0c      	ite	eq
 8008ace:	2301      	moveq	r3, #1
 8008ad0:	2300      	movne	r3, #0
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d19b      	bne.n	8008a14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3720      	adds	r7, #32
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20000004 	.word	0x20000004

08008aec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08a      	sub	sp, #40	; 0x28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008afe:	f7fb fb17 	bl	8004130 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	1a9b      	subs	r3, r3, r2
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008b0e:	f7fb fb0f 	bl	8004130 <HAL_GetTick>
 8008b12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008b1c:	4b3d      	ldr	r3, [pc, #244]	; (8008c14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	00da      	lsls	r2, r3, #3
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	0d1b      	lsrs	r3, r3, #20
 8008b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008b34:	e060      	b.n	8008bf8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008b3c:	d107      	bne.n	8008b4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d104      	bne.n	8008b4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008b4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b54:	d050      	beq.n	8008bf8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b56:	f7fb faeb 	bl	8004130 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d902      	bls.n	8008b6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d13d      	bne.n	8008be8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b84:	d111      	bne.n	8008baa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b8e:	d004      	beq.n	8008b9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b98:	d107      	bne.n	8008baa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ba8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bb2:	d10f      	bne.n	8008bd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e010      	b.n	8008c0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689a      	ldr	r2, [r3, #8]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	4013      	ands	r3, r2
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d196      	bne.n	8008b36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3728      	adds	r7, #40	; 0x28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20000004 	.word	0x20000004

08008c18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af02      	add	r7, sp, #8
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f7ff ff5b 	bl	8008aec <SPI_WaitFifoStateUntilTimeout>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d007      	beq.n	8008c4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c40:	f043 0220 	orr.w	r2, r3, #32
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e027      	b.n	8008c9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2200      	movs	r2, #0
 8008c54:	2180      	movs	r1, #128	; 0x80
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f7ff fec0 	bl	80089dc <SPI_WaitFlagStateUntilTimeout>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d007      	beq.n	8008c72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c66:	f043 0220 	orr.w	r2, r3, #32
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e014      	b.n	8008c9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f7ff ff34 	bl	8008aec <SPI_WaitFifoStateUntilTimeout>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d007      	beq.n	8008c9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c8e:	f043 0220 	orr.w	r2, r3, #32
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e000      	b.n	8008c9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e040      	b.n	8008d38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7fb f812 	bl	8003cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2224      	movs	r2, #36	; 0x24
 8008cd0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0201 	bic.w	r2, r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fc0c 	bl	8009500 <UART_SetConfig>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d101      	bne.n	8008cf2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e022      	b.n	8008d38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d002      	beq.n	8008d00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fdd4 	bl	80098a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689a      	ldr	r2, [r3, #8]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f042 0201 	orr.w	r2, r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fe5b 	bl	80099ec <UART_CheckIdleState>
 8008d36:	4603      	mov	r3, r0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b08a      	sub	sp, #40	; 0x28
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	603b      	str	r3, [r7, #0]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	f040 8082 	bne.w	8008e5e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <HAL_UART_Transmit+0x26>
 8008d60:	88fb      	ldrh	r3, [r7, #6]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e07a      	b.n	8008e60 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d101      	bne.n	8008d78 <HAL_UART_Transmit+0x38>
 8008d74:	2302      	movs	r3, #2
 8008d76:	e073      	b.n	8008e60 <HAL_UART_Transmit+0x120>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2221      	movs	r2, #33	; 0x21
 8008d8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d8e:	f7fb f9cf 	bl	8004130 <HAL_GetTick>
 8008d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	88fa      	ldrh	r2, [r7, #6]
 8008d98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	88fa      	ldrh	r2, [r7, #6]
 8008da0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dac:	d108      	bne.n	8008dc0 <HAL_UART_Transmit+0x80>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d104      	bne.n	8008dc0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	61bb      	str	r3, [r7, #24]
 8008dbe:	e003      	b.n	8008dc8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008dd0:	e02d      	b.n	8008e2e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2180      	movs	r1, #128	; 0x80
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 fe4e 	bl	8009a7e <UART_WaitOnFlagUntilTimeout>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e039      	b.n	8008e60 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10b      	bne.n	8008e0a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	881a      	ldrh	r2, [r3, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008dfe:	b292      	uxth	r2, r2
 8008e00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	3302      	adds	r3, #2
 8008e06:	61bb      	str	r3, [r7, #24]
 8008e08:	e008      	b.n	8008e1c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	781a      	ldrb	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	b292      	uxth	r2, r2
 8008e14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	3b01      	subs	r3, #1
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1cb      	bne.n	8008dd2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2200      	movs	r2, #0
 8008e42:	2140      	movs	r1, #64	; 0x40
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 fe1a 	bl	8009a7e <UART_WaitOnFlagUntilTimeout>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e005      	b.n	8008e60 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2220      	movs	r2, #32
 8008e58:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e000      	b.n	8008e60 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008e5e:	2302      	movs	r3, #2
  }
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3720      	adds	r7, #32
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08a      	sub	sp, #40	; 0x28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	4613      	mov	r3, r2
 8008e74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e7a:	2b20      	cmp	r3, #32
 8008e7c:	d13d      	bne.n	8008efa <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <HAL_UART_Receive_IT+0x22>
 8008e84:	88fb      	ldrh	r3, [r7, #6]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e036      	b.n	8008efc <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d101      	bne.n	8008e9c <HAL_UART_Receive_IT+0x34>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	e02f      	b.n	8008efc <HAL_UART_Receive_IT+0x94>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d018      	beq.n	8008eea <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	623b      	str	r3, [r7, #32]
 8008ed8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	69f9      	ldr	r1, [r7, #28]
 8008edc:	6a3a      	ldr	r2, [r7, #32]
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e6      	bne.n	8008eb8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008eea:	88fb      	ldrh	r3, [r7, #6]
 8008eec:	461a      	mov	r2, r3
 8008eee:	68b9      	ldr	r1, [r7, #8]
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 fe89 	bl	8009c08 <UART_Start_Receive_IT>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	e000      	b.n	8008efc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008efa:	2302      	movs	r3, #2
  }
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3728      	adds	r7, #40	; 0x28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b0ba      	sub	sp, #232	; 0xe8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008f2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008f32:	4013      	ands	r3, r2
 8008f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d115      	bne.n	8008f6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f44:	f003 0320 	and.w	r3, r3, #32
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00f      	beq.n	8008f6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f50:	f003 0320 	and.w	r3, r3, #32
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d009      	beq.n	8008f6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 82a3 	beq.w	80094a8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	4798      	blx	r3
      }
      return;
 8008f6a:	e29d      	b.n	80094a8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 8117 	beq.w	80091a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d106      	bne.n	8008f90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008f82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008f86:	4b85      	ldr	r3, [pc, #532]	; (800919c <HAL_UART_IRQHandler+0x298>)
 8008f88:	4013      	ands	r3, r2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 810a 	beq.w	80091a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d011      	beq.n	8008fc0 <HAL_UART_IRQHandler+0xbc>
 8008f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2201      	movs	r2, #1
 8008fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fb6:	f043 0201 	orr.w	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d011      	beq.n	8008ff0 <HAL_UART_IRQHandler+0xec>
 8008fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00b      	beq.n	8008ff0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2202      	movs	r2, #2
 8008fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fe6:	f043 0204 	orr.w	r2, r3, #4
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff4:	f003 0304 	and.w	r3, r3, #4
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d011      	beq.n	8009020 <HAL_UART_IRQHandler+0x11c>
 8008ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00b      	beq.n	8009020 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2204      	movs	r2, #4
 800900e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009016:	f043 0202 	orr.w	r2, r3, #2
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009024:	f003 0308 	and.w	r3, r3, #8
 8009028:	2b00      	cmp	r3, #0
 800902a:	d017      	beq.n	800905c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800902c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009030:	f003 0320 	and.w	r3, r3, #32
 8009034:	2b00      	cmp	r3, #0
 8009036:	d105      	bne.n	8009044 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800903c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2208      	movs	r2, #8
 800904a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009052:	f043 0208 	orr.w	r2, r3, #8
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800905c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009064:	2b00      	cmp	r3, #0
 8009066:	d012      	beq.n	800908e <HAL_UART_IRQHandler+0x18a>
 8009068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800906c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00c      	beq.n	800908e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800907c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009084:	f043 0220 	orr.w	r2, r3, #32
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 8209 	beq.w	80094ac <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800909a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909e:	f003 0320 	and.w	r3, r3, #32
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00d      	beq.n	80090c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80090a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d007      	beq.n	80090c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d6:	2b40      	cmp	r3, #64	; 0x40
 80090d8:	d005      	beq.n	80090e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d04f      	beq.n	8009186 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fe26 	bl	8009d38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f6:	2b40      	cmp	r3, #64	; 0x40
 80090f8:	d141      	bne.n	800917e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3308      	adds	r3, #8
 8009100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3308      	adds	r3, #8
 8009122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009126:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800912a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800913e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1d9      	bne.n	80090fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914a:	2b00      	cmp	r3, #0
 800914c:	d013      	beq.n	8009176 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009152:	4a13      	ldr	r2, [pc, #76]	; (80091a0 <HAL_UART_IRQHandler+0x29c>)
 8009154:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915a:	4618      	mov	r0, r3
 800915c:	f7fc fa10 	bl	8005580 <HAL_DMA_Abort_IT>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d017      	beq.n	8009196 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009170:	4610      	mov	r0, r2
 8009172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009174:	e00f      	b.n	8009196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f9ac 	bl	80094d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800917c:	e00b      	b.n	8009196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f9a8 	bl	80094d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009184:	e007      	b.n	8009196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f9a4 	bl	80094d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009194:	e18a      	b.n	80094ac <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009196:	bf00      	nop
    return;
 8009198:	e188      	b.n	80094ac <HAL_UART_IRQHandler+0x5a8>
 800919a:	bf00      	nop
 800919c:	04000120 	.word	0x04000120
 80091a0:	08009dff 	.word	0x08009dff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	f040 8143 	bne.w	8009434 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b2:	f003 0310 	and.w	r3, r3, #16
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 813c 	beq.w	8009434 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 8135 	beq.w	8009434 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2210      	movs	r2, #16
 80091d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091dc:	2b40      	cmp	r3, #64	; 0x40
 80091de:	f040 80b1 	bne.w	8009344 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 815c 	beq.w	80094b0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80091fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009202:	429a      	cmp	r2, r3
 8009204:	f080 8154 	bcs.w	80094b0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800920e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	2b20      	cmp	r3, #32
 800921a:	f000 8085 	beq.w	8009328 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009232:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800923a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800924c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009250:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009254:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1da      	bne.n	800921e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3308      	adds	r3, #8
 800926e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009278:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800927a:	f023 0301 	bic.w	r3, r3, #1
 800927e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3308      	adds	r3, #8
 8009288:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800928c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009290:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009294:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800929e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e1      	bne.n	8009268 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3308      	adds	r3, #8
 80092aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80092b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3308      	adds	r3, #8
 80092c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80092c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80092ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80092ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80092d0:	e841 2300 	strex	r3, r2, [r1]
 80092d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80092d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1e3      	bne.n	80092a4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2220      	movs	r2, #32
 80092e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092f8:	f023 0310 	bic.w	r3, r3, #16
 80092fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800930a:	65bb      	str	r3, [r7, #88]	; 0x58
 800930c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009310:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009312:	e841 2300 	strex	r3, r2, [r1]
 8009316:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e4      	bne.n	80092e8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009322:	4618      	mov	r0, r3
 8009324:	f7fc f8f3 	bl	800550e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009334:	b29b      	uxth	r3, r3
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	b29b      	uxth	r3, r3
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f8d3 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009342:	e0b5      	b.n	80094b0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009350:	b29b      	uxth	r3, r3
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800935e:	b29b      	uxth	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80a7 	beq.w	80094b4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009366:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 80a2 	beq.w	80094b4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800937e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009380:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009384:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	461a      	mov	r2, r3
 800938e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009392:	647b      	str	r3, [r7, #68]	; 0x44
 8009394:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009396:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1e4      	bne.n	8009370 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3308      	adds	r3, #8
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	623b      	str	r3, [r7, #32]
   return(result);
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	f023 0301 	bic.w	r3, r3, #1
 80093bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3308      	adds	r3, #8
 80093c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80093ca:	633a      	str	r2, [r7, #48]	; 0x30
 80093cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e3      	bne.n	80093a6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2220      	movs	r2, #32
 80093e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	e853 3f00 	ldrex	r3, [r3]
 80093fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f023 0310 	bic.w	r3, r3, #16
 8009404:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009412:	61fb      	str	r3, [r7, #28]
 8009414:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009416:	69b9      	ldr	r1, [r7, #24]
 8009418:	69fa      	ldr	r2, [r7, #28]
 800941a:	e841 2300 	strex	r3, r2, [r1]
 800941e:	617b      	str	r3, [r7, #20]
   return(result);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1e4      	bne.n	80093f0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f85b 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009432:	e03f      	b.n	80094b4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00e      	beq.n	800945e <HAL_UART_IRQHandler+0x55a>
 8009440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d008      	beq.n	800945e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009454:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fe6d 	bl	800a136 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800945c:	e02d      	b.n	80094ba <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800945e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00e      	beq.n	8009488 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800946a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800946e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009472:	2b00      	cmp	r3, #0
 8009474:	d008      	beq.n	8009488 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800947a:	2b00      	cmp	r3, #0
 800947c:	d01c      	beq.n	80094b8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	4798      	blx	r3
    }
    return;
 8009486:	e017      	b.n	80094b8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d012      	beq.n	80094ba <HAL_UART_IRQHandler+0x5b6>
 8009494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00c      	beq.n	80094ba <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fcc2 	bl	8009e2a <UART_EndTransmit_IT>
    return;
 80094a6:	e008      	b.n	80094ba <HAL_UART_IRQHandler+0x5b6>
      return;
 80094a8:	bf00      	nop
 80094aa:	e006      	b.n	80094ba <HAL_UART_IRQHandler+0x5b6>
    return;
 80094ac:	bf00      	nop
 80094ae:	e004      	b.n	80094ba <HAL_UART_IRQHandler+0x5b6>
      return;
 80094b0:	bf00      	nop
 80094b2:	e002      	b.n	80094ba <HAL_UART_IRQHandler+0x5b6>
      return;
 80094b4:	bf00      	nop
 80094b6:	e000      	b.n	80094ba <HAL_UART_IRQHandler+0x5b6>
    return;
 80094b8:	bf00      	nop
  }

}
 80094ba:	37e8      	adds	r7, #232	; 0xe8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689a      	ldr	r2, [r3, #8]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	431a      	orrs	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	431a      	orrs	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	69db      	ldr	r3, [r3, #28]
 8009520:	4313      	orrs	r3, r2
 8009522:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800952e:	f023 030c 	bic.w	r3, r3, #12
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	6812      	ldr	r2, [r2, #0]
 8009536:	6979      	ldr	r1, [r7, #20]
 8009538:	430b      	orrs	r3, r1
 800953a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	4313      	orrs	r3, r2
 8009560:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	430a      	orrs	r2, r1
 8009574:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4aae      	ldr	r2, [pc, #696]	; (8009834 <UART_SetConfig+0x334>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d120      	bne.n	80095c2 <UART_SetConfig+0xc2>
 8009580:	4bad      	ldr	r3, [pc, #692]	; (8009838 <UART_SetConfig+0x338>)
 8009582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009584:	f003 0303 	and.w	r3, r3, #3
 8009588:	2b03      	cmp	r3, #3
 800958a:	d817      	bhi.n	80095bc <UART_SetConfig+0xbc>
 800958c:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <UART_SetConfig+0x94>)
 800958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009592:	bf00      	nop
 8009594:	080095a5 	.word	0x080095a5
 8009598:	080095b1 	.word	0x080095b1
 800959c:	080095b7 	.word	0x080095b7
 80095a0:	080095ab 	.word	0x080095ab
 80095a4:	2301      	movs	r3, #1
 80095a6:	77fb      	strb	r3, [r7, #31]
 80095a8:	e0b5      	b.n	8009716 <UART_SetConfig+0x216>
 80095aa:	2302      	movs	r3, #2
 80095ac:	77fb      	strb	r3, [r7, #31]
 80095ae:	e0b2      	b.n	8009716 <UART_SetConfig+0x216>
 80095b0:	2304      	movs	r3, #4
 80095b2:	77fb      	strb	r3, [r7, #31]
 80095b4:	e0af      	b.n	8009716 <UART_SetConfig+0x216>
 80095b6:	2308      	movs	r3, #8
 80095b8:	77fb      	strb	r3, [r7, #31]
 80095ba:	e0ac      	b.n	8009716 <UART_SetConfig+0x216>
 80095bc:	2310      	movs	r3, #16
 80095be:	77fb      	strb	r3, [r7, #31]
 80095c0:	e0a9      	b.n	8009716 <UART_SetConfig+0x216>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a9d      	ldr	r2, [pc, #628]	; (800983c <UART_SetConfig+0x33c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d124      	bne.n	8009616 <UART_SetConfig+0x116>
 80095cc:	4b9a      	ldr	r3, [pc, #616]	; (8009838 <UART_SetConfig+0x338>)
 80095ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80095d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095d8:	d011      	beq.n	80095fe <UART_SetConfig+0xfe>
 80095da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095de:	d817      	bhi.n	8009610 <UART_SetConfig+0x110>
 80095e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095e4:	d011      	beq.n	800960a <UART_SetConfig+0x10a>
 80095e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095ea:	d811      	bhi.n	8009610 <UART_SetConfig+0x110>
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d003      	beq.n	80095f8 <UART_SetConfig+0xf8>
 80095f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095f4:	d006      	beq.n	8009604 <UART_SetConfig+0x104>
 80095f6:	e00b      	b.n	8009610 <UART_SetConfig+0x110>
 80095f8:	2300      	movs	r3, #0
 80095fa:	77fb      	strb	r3, [r7, #31]
 80095fc:	e08b      	b.n	8009716 <UART_SetConfig+0x216>
 80095fe:	2302      	movs	r3, #2
 8009600:	77fb      	strb	r3, [r7, #31]
 8009602:	e088      	b.n	8009716 <UART_SetConfig+0x216>
 8009604:	2304      	movs	r3, #4
 8009606:	77fb      	strb	r3, [r7, #31]
 8009608:	e085      	b.n	8009716 <UART_SetConfig+0x216>
 800960a:	2308      	movs	r3, #8
 800960c:	77fb      	strb	r3, [r7, #31]
 800960e:	e082      	b.n	8009716 <UART_SetConfig+0x216>
 8009610:	2310      	movs	r3, #16
 8009612:	77fb      	strb	r3, [r7, #31]
 8009614:	e07f      	b.n	8009716 <UART_SetConfig+0x216>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a89      	ldr	r2, [pc, #548]	; (8009840 <UART_SetConfig+0x340>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d124      	bne.n	800966a <UART_SetConfig+0x16a>
 8009620:	4b85      	ldr	r3, [pc, #532]	; (8009838 <UART_SetConfig+0x338>)
 8009622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009624:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009628:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800962c:	d011      	beq.n	8009652 <UART_SetConfig+0x152>
 800962e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009632:	d817      	bhi.n	8009664 <UART_SetConfig+0x164>
 8009634:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009638:	d011      	beq.n	800965e <UART_SetConfig+0x15e>
 800963a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800963e:	d811      	bhi.n	8009664 <UART_SetConfig+0x164>
 8009640:	2b00      	cmp	r3, #0
 8009642:	d003      	beq.n	800964c <UART_SetConfig+0x14c>
 8009644:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009648:	d006      	beq.n	8009658 <UART_SetConfig+0x158>
 800964a:	e00b      	b.n	8009664 <UART_SetConfig+0x164>
 800964c:	2300      	movs	r3, #0
 800964e:	77fb      	strb	r3, [r7, #31]
 8009650:	e061      	b.n	8009716 <UART_SetConfig+0x216>
 8009652:	2302      	movs	r3, #2
 8009654:	77fb      	strb	r3, [r7, #31]
 8009656:	e05e      	b.n	8009716 <UART_SetConfig+0x216>
 8009658:	2304      	movs	r3, #4
 800965a:	77fb      	strb	r3, [r7, #31]
 800965c:	e05b      	b.n	8009716 <UART_SetConfig+0x216>
 800965e:	2308      	movs	r3, #8
 8009660:	77fb      	strb	r3, [r7, #31]
 8009662:	e058      	b.n	8009716 <UART_SetConfig+0x216>
 8009664:	2310      	movs	r3, #16
 8009666:	77fb      	strb	r3, [r7, #31]
 8009668:	e055      	b.n	8009716 <UART_SetConfig+0x216>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a75      	ldr	r2, [pc, #468]	; (8009844 <UART_SetConfig+0x344>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d124      	bne.n	80096be <UART_SetConfig+0x1be>
 8009674:	4b70      	ldr	r3, [pc, #448]	; (8009838 <UART_SetConfig+0x338>)
 8009676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009678:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800967c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009680:	d011      	beq.n	80096a6 <UART_SetConfig+0x1a6>
 8009682:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009686:	d817      	bhi.n	80096b8 <UART_SetConfig+0x1b8>
 8009688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800968c:	d011      	beq.n	80096b2 <UART_SetConfig+0x1b2>
 800968e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009692:	d811      	bhi.n	80096b8 <UART_SetConfig+0x1b8>
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <UART_SetConfig+0x1a0>
 8009698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800969c:	d006      	beq.n	80096ac <UART_SetConfig+0x1ac>
 800969e:	e00b      	b.n	80096b8 <UART_SetConfig+0x1b8>
 80096a0:	2300      	movs	r3, #0
 80096a2:	77fb      	strb	r3, [r7, #31]
 80096a4:	e037      	b.n	8009716 <UART_SetConfig+0x216>
 80096a6:	2302      	movs	r3, #2
 80096a8:	77fb      	strb	r3, [r7, #31]
 80096aa:	e034      	b.n	8009716 <UART_SetConfig+0x216>
 80096ac:	2304      	movs	r3, #4
 80096ae:	77fb      	strb	r3, [r7, #31]
 80096b0:	e031      	b.n	8009716 <UART_SetConfig+0x216>
 80096b2:	2308      	movs	r3, #8
 80096b4:	77fb      	strb	r3, [r7, #31]
 80096b6:	e02e      	b.n	8009716 <UART_SetConfig+0x216>
 80096b8:	2310      	movs	r3, #16
 80096ba:	77fb      	strb	r3, [r7, #31]
 80096bc:	e02b      	b.n	8009716 <UART_SetConfig+0x216>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a61      	ldr	r2, [pc, #388]	; (8009848 <UART_SetConfig+0x348>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d124      	bne.n	8009712 <UART_SetConfig+0x212>
 80096c8:	4b5b      	ldr	r3, [pc, #364]	; (8009838 <UART_SetConfig+0x338>)
 80096ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096cc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80096d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80096d4:	d011      	beq.n	80096fa <UART_SetConfig+0x1fa>
 80096d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80096da:	d817      	bhi.n	800970c <UART_SetConfig+0x20c>
 80096dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096e0:	d011      	beq.n	8009706 <UART_SetConfig+0x206>
 80096e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096e6:	d811      	bhi.n	800970c <UART_SetConfig+0x20c>
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <UART_SetConfig+0x1f4>
 80096ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096f0:	d006      	beq.n	8009700 <UART_SetConfig+0x200>
 80096f2:	e00b      	b.n	800970c <UART_SetConfig+0x20c>
 80096f4:	2300      	movs	r3, #0
 80096f6:	77fb      	strb	r3, [r7, #31]
 80096f8:	e00d      	b.n	8009716 <UART_SetConfig+0x216>
 80096fa:	2302      	movs	r3, #2
 80096fc:	77fb      	strb	r3, [r7, #31]
 80096fe:	e00a      	b.n	8009716 <UART_SetConfig+0x216>
 8009700:	2304      	movs	r3, #4
 8009702:	77fb      	strb	r3, [r7, #31]
 8009704:	e007      	b.n	8009716 <UART_SetConfig+0x216>
 8009706:	2308      	movs	r3, #8
 8009708:	77fb      	strb	r3, [r7, #31]
 800970a:	e004      	b.n	8009716 <UART_SetConfig+0x216>
 800970c:	2310      	movs	r3, #16
 800970e:	77fb      	strb	r3, [r7, #31]
 8009710:	e001      	b.n	8009716 <UART_SetConfig+0x216>
 8009712:	2310      	movs	r3, #16
 8009714:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800971e:	d15c      	bne.n	80097da <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8009720:	7ffb      	ldrb	r3, [r7, #31]
 8009722:	2b08      	cmp	r3, #8
 8009724:	d827      	bhi.n	8009776 <UART_SetConfig+0x276>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <UART_SetConfig+0x22c>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	08009751 	.word	0x08009751
 8009730:	08009759 	.word	0x08009759
 8009734:	08009761 	.word	0x08009761
 8009738:	08009777 	.word	0x08009777
 800973c:	08009767 	.word	0x08009767
 8009740:	08009777 	.word	0x08009777
 8009744:	08009777 	.word	0x08009777
 8009748:	08009777 	.word	0x08009777
 800974c:	0800976f 	.word	0x0800976f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009750:	f7fe f960 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 8009754:	61b8      	str	r0, [r7, #24]
        break;
 8009756:	e013      	b.n	8009780 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009758:	f7fe f97e 	bl	8007a58 <HAL_RCC_GetPCLK2Freq>
 800975c:	61b8      	str	r0, [r7, #24]
        break;
 800975e:	e00f      	b.n	8009780 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009760:	4b3a      	ldr	r3, [pc, #232]	; (800984c <UART_SetConfig+0x34c>)
 8009762:	61bb      	str	r3, [r7, #24]
        break;
 8009764:	e00c      	b.n	8009780 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009766:	f7fe f8df 	bl	8007928 <HAL_RCC_GetSysClockFreq>
 800976a:	61b8      	str	r0, [r7, #24]
        break;
 800976c:	e008      	b.n	8009780 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800976e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009772:	61bb      	str	r3, [r7, #24]
        break;
 8009774:	e004      	b.n	8009780 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8009776:	2300      	movs	r3, #0
 8009778:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	77bb      	strb	r3, [r7, #30]
        break;
 800977e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 8085 	beq.w	8009892 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	005a      	lsls	r2, r3, #1
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	085b      	lsrs	r3, r3, #1
 8009792:	441a      	add	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	fbb2 f3f3 	udiv	r3, r2, r3
 800979c:	b29b      	uxth	r3, r3
 800979e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	2b0f      	cmp	r3, #15
 80097a4:	d916      	bls.n	80097d4 <UART_SetConfig+0x2d4>
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ac:	d212      	bcs.n	80097d4 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	f023 030f 	bic.w	r3, r3, #15
 80097b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	085b      	lsrs	r3, r3, #1
 80097bc:	b29b      	uxth	r3, r3
 80097be:	f003 0307 	and.w	r3, r3, #7
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	89fb      	ldrh	r3, [r7, #14]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	89fa      	ldrh	r2, [r7, #14]
 80097d0:	60da      	str	r2, [r3, #12]
 80097d2:	e05e      	b.n	8009892 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	77bb      	strb	r3, [r7, #30]
 80097d8:	e05b      	b.n	8009892 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097da:	7ffb      	ldrb	r3, [r7, #31]
 80097dc:	2b08      	cmp	r3, #8
 80097de:	d837      	bhi.n	8009850 <UART_SetConfig+0x350>
 80097e0:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <UART_SetConfig+0x2e8>)
 80097e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e6:	bf00      	nop
 80097e8:	0800980d 	.word	0x0800980d
 80097ec:	08009815 	.word	0x08009815
 80097f0:	0800981d 	.word	0x0800981d
 80097f4:	08009851 	.word	0x08009851
 80097f8:	08009823 	.word	0x08009823
 80097fc:	08009851 	.word	0x08009851
 8009800:	08009851 	.word	0x08009851
 8009804:	08009851 	.word	0x08009851
 8009808:	0800982b 	.word	0x0800982b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800980c:	f7fe f902 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 8009810:	61b8      	str	r0, [r7, #24]
        break;
 8009812:	e022      	b.n	800985a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009814:	f7fe f920 	bl	8007a58 <HAL_RCC_GetPCLK2Freq>
 8009818:	61b8      	str	r0, [r7, #24]
        break;
 800981a:	e01e      	b.n	800985a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800981c:	4b0b      	ldr	r3, [pc, #44]	; (800984c <UART_SetConfig+0x34c>)
 800981e:	61bb      	str	r3, [r7, #24]
        break;
 8009820:	e01b      	b.n	800985a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009822:	f7fe f881 	bl	8007928 <HAL_RCC_GetSysClockFreq>
 8009826:	61b8      	str	r0, [r7, #24]
        break;
 8009828:	e017      	b.n	800985a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800982a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800982e:	61bb      	str	r3, [r7, #24]
        break;
 8009830:	e013      	b.n	800985a <UART_SetConfig+0x35a>
 8009832:	bf00      	nop
 8009834:	40013800 	.word	0x40013800
 8009838:	40021000 	.word	0x40021000
 800983c:	40004400 	.word	0x40004400
 8009840:	40004800 	.word	0x40004800
 8009844:	40004c00 	.word	0x40004c00
 8009848:	40005000 	.word	0x40005000
 800984c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	77bb      	strb	r3, [r7, #30]
        break;
 8009858:	bf00      	nop
    }

    if (pclk != 0U)
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d018      	beq.n	8009892 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	085a      	lsrs	r2, r3, #1
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	441a      	add	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009872:	b29b      	uxth	r3, r3
 8009874:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	2b0f      	cmp	r3, #15
 800987a:	d908      	bls.n	800988e <UART_SetConfig+0x38e>
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009882:	d204      	bcs.n	800988e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	60da      	str	r2, [r3, #12]
 800988c:	e001      	b.n	8009892 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800989e:	7fbb      	ldrb	r3, [r7, #30]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3720      	adds	r7, #32
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00a      	beq.n	80098d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	f003 0302 	and.w	r3, r3, #2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	430a      	orrs	r2, r1
 80098f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00a      	beq.n	8009916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991a:	f003 0308 	and.w	r3, r3, #8
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00a      	beq.n	8009938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	430a      	orrs	r2, r1
 8009936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	f003 0310 	and.w	r3, r3, #16
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00a      	beq.n	800995a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	430a      	orrs	r2, r1
 8009958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	f003 0320 	and.w	r3, r3, #32
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	430a      	orrs	r2, r1
 800997a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009984:	2b00      	cmp	r3, #0
 8009986:	d01a      	beq.n	80099be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	430a      	orrs	r2, r1
 800999c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099a6:	d10a      	bne.n	80099be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	430a      	orrs	r2, r1
 80099bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	430a      	orrs	r2, r1
 80099de:	605a      	str	r2, [r3, #4]
  }
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af02      	add	r7, sp, #8
 80099f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099fc:	f7fa fb98 	bl	8004130 <HAL_GetTick>
 8009a00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b08      	cmp	r3, #8
 8009a0e:	d10e      	bne.n	8009a2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f82d 	bl	8009a7e <UART_WaitOnFlagUntilTimeout>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e023      	b.n	8009a76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b04      	cmp	r3, #4
 8009a3a:	d10e      	bne.n	8009a5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f817 	bl	8009a7e <UART_WaitOnFlagUntilTimeout>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a56:	2303      	movs	r3, #3
 8009a58:	e00d      	b.n	8009a76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2220      	movs	r2, #32
 8009a64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b09c      	sub	sp, #112	; 0x70
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	603b      	str	r3, [r7, #0]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a8e:	e0a5      	b.n	8009bdc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a96:	f000 80a1 	beq.w	8009bdc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a9a:	f7fa fb49 	bl	8004130 <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d302      	bcc.n	8009ab0 <UART_WaitOnFlagUntilTimeout+0x32>
 8009aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d13e      	bne.n	8009b2e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ab8:	e853 3f00 	ldrex	r3, [r3]
 8009abc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ac4:	667b      	str	r3, [r7, #100]	; 0x64
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ad0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ad4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ad6:	e841 2300 	strex	r3, r2, [r1]
 8009ada:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1e6      	bne.n	8009ab0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af4:	f023 0301 	bic.w	r3, r3, #1
 8009af8:	663b      	str	r3, [r7, #96]	; 0x60
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3308      	adds	r3, #8
 8009b00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b02:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b0a:	e841 2300 	strex	r3, r2, [r1]
 8009b0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1e5      	bne.n	8009ae2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e067      	b.n	8009bfe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d04f      	beq.n	8009bdc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b4a:	d147      	bne.n	8009bdc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5e:	e853 3f00 	ldrex	r3, [r3]
 8009b62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	461a      	mov	r2, r3
 8009b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b74:	637b      	str	r3, [r7, #52]	; 0x34
 8009b76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b7c:	e841 2300 	strex	r3, r2, [r1]
 8009b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1e6      	bne.n	8009b56 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	e853 3f00 	ldrex	r3, [r3]
 8009b96:	613b      	str	r3, [r7, #16]
   return(result);
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f023 0301 	bic.w	r3, r3, #1
 8009b9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3308      	adds	r3, #8
 8009ba6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ba8:	623a      	str	r2, [r7, #32]
 8009baa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bac:	69f9      	ldr	r1, [r7, #28]
 8009bae:	6a3a      	ldr	r2, [r7, #32]
 8009bb0:	e841 2300 	strex	r3, r2, [r1]
 8009bb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1e5      	bne.n	8009b88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2220      	movs	r2, #32
 8009bc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2220      	movs	r2, #32
 8009bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e010      	b.n	8009bfe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	69da      	ldr	r2, [r3, #28]
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	4013      	ands	r3, r2
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	bf0c      	ite	eq
 8009bec:	2301      	moveq	r3, #1
 8009bee:	2300      	movne	r3, #0
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	79fb      	ldrb	r3, [r7, #7]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	f43f af4a 	beq.w	8009a90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3770      	adds	r7, #112	; 0x70
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
	...

08009c08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b091      	sub	sp, #68	; 0x44
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	4613      	mov	r3, r2
 8009c14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	88fa      	ldrh	r2, [r7, #6]
 8009c20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	88fa      	ldrh	r2, [r7, #6]
 8009c28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c3a:	d10e      	bne.n	8009c5a <UART_Start_Receive_IT+0x52>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <UART_Start_Receive_IT+0x48>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009c4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c4e:	e01a      	b.n	8009c86 <UART_Start_Receive_IT+0x7e>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	22ff      	movs	r2, #255	; 0xff
 8009c54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c58:	e015      	b.n	8009c86 <UART_Start_Receive_IT+0x7e>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10d      	bne.n	8009c7e <UART_Start_Receive_IT+0x76>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d104      	bne.n	8009c74 <UART_Start_Receive_IT+0x6c>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	22ff      	movs	r2, #255	; 0xff
 8009c6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c72:	e008      	b.n	8009c86 <UART_Start_Receive_IT+0x7e>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	227f      	movs	r2, #127	; 0x7f
 8009c78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c7c:	e003      	b.n	8009c86 <UART_Start_Receive_IT+0x7e>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2222      	movs	r2, #34	; 0x22
 8009c92:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3308      	adds	r3, #8
 8009c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	e853 3f00 	ldrex	r3, [r3]
 8009ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	f043 0301 	orr.w	r3, r3, #1
 8009caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009cb4:	637a      	str	r2, [r7, #52]	; 0x34
 8009cb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cbc:	e841 2300 	strex	r3, r2, [r1]
 8009cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1e5      	bne.n	8009c94 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cd0:	d107      	bne.n	8009ce2 <UART_Start_Receive_IT+0xda>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d103      	bne.n	8009ce2 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4a14      	ldr	r2, [pc, #80]	; (8009d30 <UART_Start_Receive_IT+0x128>)
 8009cde:	665a      	str	r2, [r3, #100]	; 0x64
 8009ce0:	e002      	b.n	8009ce8 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	4a13      	ldr	r2, [pc, #76]	; (8009d34 <UART_Start_Receive_IT+0x12c>)
 8009ce6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	e853 3f00 	ldrex	r3, [r3]
 8009cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009d04:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	623b      	str	r3, [r7, #32]
 8009d10:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d12:	69f9      	ldr	r1, [r7, #28]
 8009d14:	6a3a      	ldr	r2, [r7, #32]
 8009d16:	e841 2300 	strex	r3, r2, [r1]
 8009d1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1e6      	bne.n	8009cf0 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3744      	adds	r7, #68	; 0x44
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	08009fdb 	.word	0x08009fdb
 8009d34:	08009e7f 	.word	0x08009e7f

08009d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b095      	sub	sp, #84	; 0x54
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d48:	e853 3f00 	ldrex	r3, [r3]
 8009d4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d5e:	643b      	str	r3, [r7, #64]	; 0x40
 8009d60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e6      	bne.n	8009d40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	3308      	adds	r3, #8
 8009d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	e853 3f00 	ldrex	r3, [r3]
 8009d80:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	f023 0301 	bic.w	r3, r3, #1
 8009d88:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3308      	adds	r3, #8
 8009d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d9a:	e841 2300 	strex	r3, r2, [r1]
 8009d9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1e5      	bne.n	8009d72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d118      	bne.n	8009de0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	e853 3f00 	ldrex	r3, [r3]
 8009dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f023 0310 	bic.w	r3, r3, #16
 8009dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dcc:	61bb      	str	r3, [r7, #24]
 8009dce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd0:	6979      	ldr	r1, [r7, #20]
 8009dd2:	69ba      	ldr	r2, [r7, #24]
 8009dd4:	e841 2300 	strex	r3, r2, [r1]
 8009dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1e6      	bne.n	8009dae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2220      	movs	r2, #32
 8009de4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009df2:	bf00      	nop
 8009df4:	3754      	adds	r7, #84	; 0x54
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b084      	sub	sp, #16
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f7ff fb59 	bl	80094d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e22:	bf00      	nop
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b088      	sub	sp, #32
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e46:	61fb      	str	r3, [r7, #28]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	61bb      	str	r3, [r7, #24]
 8009e52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	6979      	ldr	r1, [r7, #20]
 8009e56:	69ba      	ldr	r2, [r7, #24]
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e6      	bne.n	8009e32 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7ff fb25 	bl	80094c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e76:	bf00      	nop
 8009e78:	3720      	adds	r7, #32
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b096      	sub	sp, #88	; 0x58
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e94:	2b22      	cmp	r3, #34	; 0x22
 8009e96:	f040 8094 	bne.w	8009fc2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ea0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ea4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009ea8:	b2d9      	uxtb	r1, r3
 8009eaa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eb4:	400a      	ands	r2, r1
 8009eb6:	b2d2      	uxtb	r2, r2
 8009eb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d177      	bne.n	8009fd2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eea:	e853 3f00 	ldrex	r3, [r3]
 8009eee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ef6:	653b      	str	r3, [r7, #80]	; 0x50
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	461a      	mov	r2, r3
 8009efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f00:	647b      	str	r3, [r7, #68]	; 0x44
 8009f02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f08:	e841 2300 	strex	r3, r2, [r1]
 8009f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e6      	bne.n	8009ee2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3308      	adds	r3, #8
 8009f1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	e853 3f00 	ldrex	r3, [r3]
 8009f22:	623b      	str	r3, [r7, #32]
   return(result);
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	f023 0301 	bic.w	r3, r3, #1
 8009f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3308      	adds	r3, #8
 8009f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f34:	633a      	str	r2, [r7, #48]	; 0x30
 8009f36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f3c:	e841 2300 	strex	r3, r2, [r1]
 8009f40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1e5      	bne.n	8009f14 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2220      	movs	r2, #32
 8009f4c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d12e      	bne.n	8009fba <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	e853 3f00 	ldrex	r3, [r3]
 8009f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 0310 	bic.w	r3, r3, #16
 8009f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f80:	61fb      	str	r3, [r7, #28]
 8009f82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f84:	69b9      	ldr	r1, [r7, #24]
 8009f86:	69fa      	ldr	r2, [r7, #28]
 8009f88:	e841 2300 	strex	r3, r2, [r1]
 8009f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1e6      	bne.n	8009f62 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	f003 0310 	and.w	r3, r3, #16
 8009f9e:	2b10      	cmp	r3, #16
 8009fa0:	d103      	bne.n	8009faa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2210      	movs	r2, #16
 8009fa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff fa98 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009fb8:	e00b      	b.n	8009fd2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7f7 fb98 	bl	80016f0 <HAL_UART_RxCpltCallback>
}
 8009fc0:	e007      	b.n	8009fd2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	699a      	ldr	r2, [r3, #24]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f042 0208 	orr.w	r2, r2, #8
 8009fd0:	619a      	str	r2, [r3, #24]
}
 8009fd2:	bf00      	nop
 8009fd4:	3758      	adds	r7, #88	; 0x58
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b096      	sub	sp, #88	; 0x58
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009fe8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ff0:	2b22      	cmp	r3, #34	; 0x22
 8009ff2:	f040 8094 	bne.w	800a11e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ffc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a004:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a006:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a00a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a00e:	4013      	ands	r3, r2
 800a010:	b29a      	uxth	r2, r3
 800a012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a014:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a01a:	1c9a      	adds	r2, r3, #2
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a026:	b29b      	uxth	r3, r3
 800a028:	3b01      	subs	r3, #1
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a038:	b29b      	uxth	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d177      	bne.n	800a12e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a052:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	461a      	mov	r2, r3
 800a05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a05c:	643b      	str	r3, [r7, #64]	; 0x40
 800a05e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e6      	bne.n	800a03e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3308      	adds	r3, #8
 800a076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	f023 0301 	bic.w	r3, r3, #1
 800a086:	64bb      	str	r3, [r7, #72]	; 0x48
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	3308      	adds	r3, #8
 800a08e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a090:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e5      	bne.n	800a070 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d12e      	bne.n	800a116 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	e853 3f00 	ldrex	r3, [r3]
 800a0ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	f023 0310 	bic.w	r3, r3, #16
 800a0d2:	647b      	str	r3, [r7, #68]	; 0x44
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0dc:	61bb      	str	r3, [r7, #24]
 800a0de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e0:	6979      	ldr	r1, [r7, #20]
 800a0e2:	69ba      	ldr	r2, [r7, #24]
 800a0e4:	e841 2300 	strex	r3, r2, [r1]
 800a0e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1e6      	bne.n	800a0be <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	f003 0310 	and.w	r3, r3, #16
 800a0fa:	2b10      	cmp	r3, #16
 800a0fc:	d103      	bne.n	800a106 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2210      	movs	r2, #16
 800a104:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7ff f9ea 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a114:	e00b      	b.n	800a12e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7f7 faea 	bl	80016f0 <HAL_UART_RxCpltCallback>
}
 800a11c:	e007      	b.n	800a12e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	699a      	ldr	r2, [r3, #24]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0208 	orr.w	r2, r2, #8
 800a12c:	619a      	str	r2, [r3, #24]
}
 800a12e:	bf00      	nop
 800a130:	3758      	adds	r7, #88	; 0x58
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a136:	b480      	push	{r7}
 800a138:	b083      	sub	sp, #12
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a13e:	bf00      	nop
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b085      	sub	sp, #20
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a152:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a156:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a15e:	b29a      	uxth	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	b29b      	uxth	r3, r3
 800a164:	43db      	mvns	r3, r3
 800a166:	b29b      	uxth	r3, r3
 800a168:	4013      	ands	r3, r2
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3714      	adds	r7, #20
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a180:	b084      	sub	sp, #16
 800a182:	b480      	push	{r7}
 800a184:	b083      	sub	sp, #12
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	f107 0014 	add.w	r0, r7, #20
 800a18e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	b004      	add	sp, #16
 800a1c0:	4770      	bx	lr
	...

0800a1c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a1c8:	4904      	ldr	r1, [pc, #16]	; (800a1dc <MX_FATFS_Init+0x18>)
 800a1ca:	4805      	ldr	r0, [pc, #20]	; (800a1e0 <MX_FATFS_Init+0x1c>)
 800a1cc:	f003 fde4 	bl	800dd98 <FATFS_LinkDriver>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	4b03      	ldr	r3, [pc, #12]	; (800a1e4 <MX_FATFS_Init+0x20>)
 800a1d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a1d8:	bf00      	nop
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20000a48 	.word	0x20000a48
 800a1e0:	20000010 	.word	0x20000010
 800a1e4:	20000a4c 	.word	0x20000a4c

0800a1e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a1ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    /*Stat = STA_NOINIT;
    return Stat;
    */
	return USER_SPI_initialize(pdrv);
 800a202:	79fb      	ldrb	r3, [r7, #7]
 800a204:	4618      	mov	r0, r3
 800a206:	f000 f9d9 	bl	800a5bc <USER_SPI_initialize>
 800a20a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4603      	mov	r3, r0
 800a21c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	/*
    Stat = STA_NOINIT;
    return Stat;
    */
	return USER_SPI_status(pdrv);
 800a21e:	79fb      	ldrb	r3, [r7, #7]
 800a220:	4618      	mov	r0, r3
 800a222:	f000 fab7 	bl	800a794 <USER_SPI_status>
 800a226:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	60b9      	str	r1, [r7, #8]
 800a238:	607a      	str	r2, [r7, #4]
 800a23a:	603b      	str	r3, [r7, #0]
 800a23c:	4603      	mov	r3, r0
 800a23e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 800a240:	7bf8      	ldrb	r0, [r7, #15]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	68b9      	ldr	r1, [r7, #8]
 800a248:	f000 faba 	bl	800a7c0 <USER_SPI_read>
 800a24c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b084      	sub	sp, #16
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	603b      	str	r3, [r7, #0]
 800a262:	4603      	mov	r3, r0
 800a264:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 800a266:	7bf8      	ldrb	r0, [r7, #15]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	68b9      	ldr	r1, [r7, #8]
 800a26e:	f000 fb0d 	bl	800a88c <USER_SPI_write>
 800a272:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	4603      	mov	r3, r0
 800a284:	603a      	str	r2, [r7, #0]
 800a286:	71fb      	strb	r3, [r7, #7]
 800a288:	460b      	mov	r3, r1
 800a28a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	/*
    DRESULT res = RES_ERROR;
    return res;
	*/
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800a28c:	79b9      	ldrb	r1, [r7, #6]
 800a28e:	79fb      	ldrb	r3, [r7, #7]
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 fb76 	bl	800a984 <USER_SPI_ioctl>
 800a298:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
	...

0800a2a4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800a2ac:	f7f9 ff40 	bl	8004130 <HAL_GetTick>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	4a04      	ldr	r2, [pc, #16]	; (800a2c4 <SPI_Timer_On+0x20>)
 800a2b4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800a2b6:	4a04      	ldr	r2, [pc, #16]	; (800a2c8 <SPI_Timer_On+0x24>)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6013      	str	r3, [r2, #0]
}
 800a2bc:	bf00      	nop
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	20000eac 	.word	0x20000eac
 800a2c8:	20000eb0 	.word	0x20000eb0

0800a2cc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a2d0:	f7f9 ff2e 	bl	8004130 <HAL_GetTick>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	4b06      	ldr	r3, [pc, #24]	; (800a2f0 <SPI_Timer_Status+0x24>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	1ad2      	subs	r2, r2, r3
 800a2dc:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <SPI_Timer_Status+0x28>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	bf34      	ite	cc
 800a2e4:	2301      	movcc	r3, #1
 800a2e6:	2300      	movcs	r3, #0
 800a2e8:	b2db      	uxtb	r3, r3
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000eac 	.word	0x20000eac
 800a2f4:	20000eb0 	.word	0x20000eb0

0800a2f8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	4603      	mov	r3, r0
 800a300:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a302:	f107 020f 	add.w	r2, r7, #15
 800a306:	1df9      	adds	r1, r7, #7
 800a308:	2332      	movs	r3, #50	; 0x32
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	2301      	movs	r3, #1
 800a30e:	4804      	ldr	r0, [pc, #16]	; (800a320 <xchg_spi+0x28>)
 800a310:	f7fe f951 	bl	80085b6 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a314:	7bfb      	ldrb	r3, [r7, #15]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20000360 	.word	0x20000360

0800a324 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800a324:	b590      	push	{r4, r7, lr}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800a32e:	2300      	movs	r3, #0
 800a330:	60fb      	str	r3, [r7, #12]
 800a332:	e00a      	b.n	800a34a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	18d4      	adds	r4, r2, r3
 800a33a:	20ff      	movs	r0, #255	; 0xff
 800a33c:	f7ff ffdc 	bl	800a2f8 <xchg_spi>
 800a340:	4603      	mov	r3, r0
 800a342:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3301      	adds	r3, #1
 800a348:	60fb      	str	r3, [r7, #12]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d3f0      	bcc.n	800a334 <rcvr_spi_multi+0x10>
	}
}
 800a352:	bf00      	nop
 800a354:	bf00      	nop
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd90      	pop	{r4, r7, pc}

0800a35c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800a366:	2300      	movs	r3, #0
 800a368:	60fb      	str	r3, [r7, #12]
 800a36a:	e009      	b.n	800a380 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	4413      	add	r3, r2
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	4618      	mov	r0, r3
 800a376:	f7ff ffbf 	bl	800a2f8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3301      	adds	r3, #1
 800a37e:	60fb      	str	r3, [r7, #12]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d3f1      	bcc.n	800a36c <xmit_spi_multi+0x10>
	}
}
 800a388:	bf00      	nop
 800a38a:	bf00      	nop
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b086      	sub	sp, #24
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800a39a:	f7f9 fec9 	bl	8004130 <HAL_GetTick>
 800a39e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800a3a4:	20ff      	movs	r0, #255	; 0xff
 800a3a6:	f7ff ffa7 	bl	800a2f8 <xchg_spi>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	2bff      	cmp	r3, #255	; 0xff
 800a3b2:	d007      	beq.n	800a3c4 <wait_ready+0x32>
 800a3b4:	f7f9 febc 	bl	8004130 <HAL_GetTick>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d8ef      	bhi.n	800a3a4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
 800a3c6:	2bff      	cmp	r3, #255	; 0xff
 800a3c8:	bf0c      	ite	eq
 800a3ca:	2301      	moveq	r3, #1
 800a3cc:	2300      	movne	r3, #0
 800a3ce:	b2db      	uxtb	r3, r3
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3718      	adds	r7, #24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800a3dc:	2201      	movs	r2, #1
 800a3de:	2102      	movs	r1, #2
 800a3e0:	4803      	ldr	r0, [pc, #12]	; (800a3f0 <despiselect+0x18>)
 800a3e2:	f7fb fa9d 	bl	8005920 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a3e6:	20ff      	movs	r0, #255	; 0xff
 800a3e8:	f7ff ff86 	bl	800a2f8 <xchg_spi>

}
 800a3ec:	bf00      	nop
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	48000400 	.word	0x48000400

0800a3f4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2102      	movs	r1, #2
 800a3fc:	4809      	ldr	r0, [pc, #36]	; (800a424 <spiselect+0x30>)
 800a3fe:	f7fb fa8f 	bl	8005920 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800a402:	20ff      	movs	r0, #255	; 0xff
 800a404:	f7ff ff78 	bl	800a2f8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800a408:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a40c:	f7ff ffc1 	bl	800a392 <wait_ready>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <spiselect+0x26>
 800a416:	2301      	movs	r3, #1
 800a418:	e002      	b.n	800a420 <spiselect+0x2c>

	despiselect();
 800a41a:	f7ff ffdd 	bl	800a3d8 <despiselect>
	return 0;	/* Timeout */
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	bd80      	pop	{r7, pc}
 800a424:	48000400 	.word	0x48000400

0800a428 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800a432:	20c8      	movs	r0, #200	; 0xc8
 800a434:	f7ff ff36 	bl	800a2a4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800a438:	20ff      	movs	r0, #255	; 0xff
 800a43a:	f7ff ff5d 	bl	800a2f8 <xchg_spi>
 800a43e:	4603      	mov	r3, r0
 800a440:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	2bff      	cmp	r3, #255	; 0xff
 800a446:	d104      	bne.n	800a452 <rcvr_datablock+0x2a>
 800a448:	f7ff ff40 	bl	800a2cc <SPI_Timer_Status>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1f2      	bne.n	800a438 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800a452:	7bfb      	ldrb	r3, [r7, #15]
 800a454:	2bfe      	cmp	r3, #254	; 0xfe
 800a456:	d001      	beq.n	800a45c <rcvr_datablock+0x34>
 800a458:	2300      	movs	r3, #0
 800a45a:	e00a      	b.n	800a472 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800a45c:	6839      	ldr	r1, [r7, #0]
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff ff60 	bl	800a324 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800a464:	20ff      	movs	r0, #255	; 0xff
 800a466:	f7ff ff47 	bl	800a2f8 <xchg_spi>
 800a46a:	20ff      	movs	r0, #255	; 0xff
 800a46c:	f7ff ff44 	bl	800a2f8 <xchg_spi>

	return 1;						/* Function succeeded */
 800a470:	2301      	movs	r3, #1
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	460b      	mov	r3, r1
 800a484:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800a486:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a48a:	f7ff ff82 	bl	800a392 <wait_ready>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <xmit_datablock+0x1e>
 800a494:	2300      	movs	r3, #0
 800a496:	e01e      	b.n	800a4d6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff ff2c 	bl	800a2f8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a4a0:	78fb      	ldrb	r3, [r7, #3]
 800a4a2:	2bfd      	cmp	r3, #253	; 0xfd
 800a4a4:	d016      	beq.n	800a4d4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800a4a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff ff56 	bl	800a35c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a4b0:	20ff      	movs	r0, #255	; 0xff
 800a4b2:	f7ff ff21 	bl	800a2f8 <xchg_spi>
 800a4b6:	20ff      	movs	r0, #255	; 0xff
 800a4b8:	f7ff ff1e 	bl	800a2f8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800a4bc:	20ff      	movs	r0, #255	; 0xff
 800a4be:	f7ff ff1b 	bl	800a2f8 <xchg_spi>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	f003 031f 	and.w	r3, r3, #31
 800a4cc:	2b05      	cmp	r3, #5
 800a4ce:	d001      	beq.n	800a4d4 <xmit_datablock+0x5a>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	e000      	b.n	800a4d6 <xmit_datablock+0x5c>
	}
	return 1;
 800a4d4:	2301      	movs	r3, #1
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	6039      	str	r1, [r7, #0]
 800a4e8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800a4ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	da0e      	bge.n	800a510 <send_cmd+0x32>
		cmd &= 0x7F;
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4f8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	2037      	movs	r0, #55	; 0x37
 800a4fe:	f7ff ffee 	bl	800a4de <send_cmd>
 800a502:	4603      	mov	r3, r0
 800a504:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800a506:	7bbb      	ldrb	r3, [r7, #14]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d901      	bls.n	800a510 <send_cmd+0x32>
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
 800a50e:	e051      	b.n	800a5b4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800a510:	79fb      	ldrb	r3, [r7, #7]
 800a512:	2b0c      	cmp	r3, #12
 800a514:	d008      	beq.n	800a528 <send_cmd+0x4a>
		despiselect();
 800a516:	f7ff ff5f 	bl	800a3d8 <despiselect>
		if (!spiselect()) return 0xFF;
 800a51a:	f7ff ff6b 	bl	800a3f4 <spiselect>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d101      	bne.n	800a528 <send_cmd+0x4a>
 800a524:	23ff      	movs	r3, #255	; 0xff
 800a526:	e045      	b.n	800a5b4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800a528:	79fb      	ldrb	r3, [r7, #7]
 800a52a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	4618      	mov	r0, r3
 800a532:	f7ff fee1 	bl	800a2f8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	0e1b      	lsrs	r3, r3, #24
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7ff fedb 	bl	800a2f8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	0c1b      	lsrs	r3, r3, #16
 800a546:	b2db      	uxtb	r3, r3
 800a548:	4618      	mov	r0, r3
 800a54a:	f7ff fed5 	bl	800a2f8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	0a1b      	lsrs	r3, r3, #8
 800a552:	b2db      	uxtb	r3, r3
 800a554:	4618      	mov	r0, r3
 800a556:	f7ff fecf 	bl	800a2f8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff feca 	bl	800a2f8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800a564:	2301      	movs	r3, #1
 800a566:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <send_cmd+0x94>
 800a56e:	2395      	movs	r3, #149	; 0x95
 800a570:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800a572:	79fb      	ldrb	r3, [r7, #7]
 800a574:	2b08      	cmp	r3, #8
 800a576:	d101      	bne.n	800a57c <send_cmd+0x9e>
 800a578:	2387      	movs	r3, #135	; 0x87
 800a57a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff feba 	bl	800a2f8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800a584:	79fb      	ldrb	r3, [r7, #7]
 800a586:	2b0c      	cmp	r3, #12
 800a588:	d102      	bne.n	800a590 <send_cmd+0xb2>
 800a58a:	20ff      	movs	r0, #255	; 0xff
 800a58c:	f7ff feb4 	bl	800a2f8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800a590:	230a      	movs	r3, #10
 800a592:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800a594:	20ff      	movs	r0, #255	; 0xff
 800a596:	f7ff feaf 	bl	800a2f8 <xchg_spi>
 800a59a:	4603      	mov	r3, r0
 800a59c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800a59e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	da05      	bge.n	800a5b2 <send_cmd+0xd4>
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	73fb      	strb	r3, [r7, #15]
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1f0      	bne.n	800a594 <send_cmd+0xb6>

	return res;							/* Return received response */
 800a5b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a5bc:	b590      	push	{r4, r7, lr}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a5c6:	79fb      	ldrb	r3, [r7, #7]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <USER_SPI_initialize+0x14>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e0d6      	b.n	800a77e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a5d0:	4b6d      	ldr	r3, [pc, #436]	; (800a788 <USER_SPI_initialize+0x1cc>)
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	f003 0302 	and.w	r3, r3, #2
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <USER_SPI_initialize+0x2a>
 800a5de:	4b6a      	ldr	r3, [pc, #424]	; (800a788 <USER_SPI_initialize+0x1cc>)
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	e0cb      	b.n	800a77e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800a5e6:	4b69      	ldr	r3, [pc, #420]	; (800a78c <USER_SPI_initialize+0x1d0>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a5f0:	4b66      	ldr	r3, [pc, #408]	; (800a78c <USER_SPI_initialize+0x1d0>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800a5f8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a5fa:	230a      	movs	r3, #10
 800a5fc:	73fb      	strb	r3, [r7, #15]
 800a5fe:	e005      	b.n	800a60c <USER_SPI_initialize+0x50>
 800a600:	20ff      	movs	r0, #255	; 0xff
 800a602:	f7ff fe79 	bl	800a2f8 <xchg_spi>
 800a606:	7bfb      	ldrb	r3, [r7, #15]
 800a608:	3b01      	subs	r3, #1
 800a60a:	73fb      	strb	r3, [r7, #15]
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1f6      	bne.n	800a600 <USER_SPI_initialize+0x44>

	ty = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a616:	2100      	movs	r1, #0
 800a618:	2000      	movs	r0, #0
 800a61a:	f7ff ff60 	bl	800a4de <send_cmd>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b01      	cmp	r3, #1
 800a622:	f040 808b 	bne.w	800a73c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a62a:	f7ff fe3b 	bl	800a2a4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a62e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a632:	2008      	movs	r0, #8
 800a634:	f7ff ff53 	bl	800a4de <send_cmd>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d151      	bne.n	800a6e2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]
 800a642:	e00d      	b.n	800a660 <USER_SPI_initialize+0xa4>
 800a644:	7bfc      	ldrb	r4, [r7, #15]
 800a646:	20ff      	movs	r0, #255	; 0xff
 800a648:	f7ff fe56 	bl	800a2f8 <xchg_spi>
 800a64c:	4603      	mov	r3, r0
 800a64e:	461a      	mov	r2, r3
 800a650:	f107 0310 	add.w	r3, r7, #16
 800a654:	4423      	add	r3, r4
 800a656:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a65a:	7bfb      	ldrb	r3, [r7, #15]
 800a65c:	3301      	adds	r3, #1
 800a65e:	73fb      	strb	r3, [r7, #15]
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	2b03      	cmp	r3, #3
 800a664:	d9ee      	bls.n	800a644 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a666:	7abb      	ldrb	r3, [r7, #10]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d167      	bne.n	800a73c <USER_SPI_initialize+0x180>
 800a66c:	7afb      	ldrb	r3, [r7, #11]
 800a66e:	2baa      	cmp	r3, #170	; 0xaa
 800a670:	d164      	bne.n	800a73c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a672:	bf00      	nop
 800a674:	f7ff fe2a 	bl	800a2cc <SPI_Timer_Status>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d007      	beq.n	800a68e <USER_SPI_initialize+0xd2>
 800a67e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a682:	20a9      	movs	r0, #169	; 0xa9
 800a684:	f7ff ff2b 	bl	800a4de <send_cmd>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1f2      	bne.n	800a674 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a68e:	f7ff fe1d 	bl	800a2cc <SPI_Timer_Status>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d051      	beq.n	800a73c <USER_SPI_initialize+0x180>
 800a698:	2100      	movs	r1, #0
 800a69a:	203a      	movs	r0, #58	; 0x3a
 800a69c:	f7ff ff1f 	bl	800a4de <send_cmd>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d14a      	bne.n	800a73c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	73fb      	strb	r3, [r7, #15]
 800a6aa:	e00d      	b.n	800a6c8 <USER_SPI_initialize+0x10c>
 800a6ac:	7bfc      	ldrb	r4, [r7, #15]
 800a6ae:	20ff      	movs	r0, #255	; 0xff
 800a6b0:	f7ff fe22 	bl	800a2f8 <xchg_spi>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f107 0310 	add.w	r3, r7, #16
 800a6bc:	4423      	add	r3, r4
 800a6be:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	73fb      	strb	r3, [r7, #15]
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ca:	2b03      	cmp	r3, #3
 800a6cc:	d9ee      	bls.n	800a6ac <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a6ce:	7a3b      	ldrb	r3, [r7, #8]
 800a6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <USER_SPI_initialize+0x120>
 800a6d8:	230c      	movs	r3, #12
 800a6da:	e000      	b.n	800a6de <USER_SPI_initialize+0x122>
 800a6dc:	2304      	movs	r3, #4
 800a6de:	737b      	strb	r3, [r7, #13]
 800a6e0:	e02c      	b.n	800a73c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	20a9      	movs	r0, #169	; 0xa9
 800a6e6:	f7ff fefa 	bl	800a4de <send_cmd>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d804      	bhi.n	800a6fa <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	737b      	strb	r3, [r7, #13]
 800a6f4:	23a9      	movs	r3, #169	; 0xa9
 800a6f6:	73bb      	strb	r3, [r7, #14]
 800a6f8:	e003      	b.n	800a702 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	737b      	strb	r3, [r7, #13]
 800a6fe:	2301      	movs	r3, #1
 800a700:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a702:	bf00      	nop
 800a704:	f7ff fde2 	bl	800a2cc <SPI_Timer_Status>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d007      	beq.n	800a71e <USER_SPI_initialize+0x162>
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
 800a710:	2100      	movs	r1, #0
 800a712:	4618      	mov	r0, r3
 800a714:	f7ff fee3 	bl	800a4de <send_cmd>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1f2      	bne.n	800a704 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a71e:	f7ff fdd5 	bl	800a2cc <SPI_Timer_Status>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d007      	beq.n	800a738 <USER_SPI_initialize+0x17c>
 800a728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a72c:	2010      	movs	r0, #16
 800a72e:	f7ff fed6 	bl	800a4de <send_cmd>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <USER_SPI_initialize+0x180>
				ty = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a73c:	4a14      	ldr	r2, [pc, #80]	; (800a790 <USER_SPI_initialize+0x1d4>)
 800a73e:	7b7b      	ldrb	r3, [r7, #13]
 800a740:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a742:	f7ff fe49 	bl	800a3d8 <despiselect>

	if (ty) {			/* OK */
 800a746:	7b7b      	ldrb	r3, [r7, #13]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d012      	beq.n	800a772 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800a74c:	4b0f      	ldr	r3, [pc, #60]	; (800a78c <USER_SPI_initialize+0x1d0>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a756:	4b0d      	ldr	r3, [pc, #52]	; (800a78c <USER_SPI_initialize+0x1d0>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f042 0210 	orr.w	r2, r2, #16
 800a75e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a760:	4b09      	ldr	r3, [pc, #36]	; (800a788 <USER_SPI_initialize+0x1cc>)
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	b2db      	uxtb	r3, r3
 800a766:	f023 0301 	bic.w	r3, r3, #1
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	4b06      	ldr	r3, [pc, #24]	; (800a788 <USER_SPI_initialize+0x1cc>)
 800a76e:	701a      	strb	r2, [r3, #0]
 800a770:	e002      	b.n	800a778 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a772:	4b05      	ldr	r3, [pc, #20]	; (800a788 <USER_SPI_initialize+0x1cc>)
 800a774:	2201      	movs	r2, #1
 800a776:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a778:	4b03      	ldr	r3, [pc, #12]	; (800a788 <USER_SPI_initialize+0x1cc>)
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	b2db      	uxtb	r3, r3
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	bd90      	pop	{r4, r7, pc}
 800a786:	bf00      	nop
 800a788:	20000024 	.word	0x20000024
 800a78c:	20000360 	.word	0x20000360
 800a790:	20000328 	.word	0x20000328

0800a794 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	4603      	mov	r3, r0
 800a79c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d001      	beq.n	800a7a8 <USER_SPI_status+0x14>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e002      	b.n	800a7ae <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a7a8:	4b04      	ldr	r3, [pc, #16]	; (800a7bc <USER_SPI_status+0x28>)
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	b2db      	uxtb	r3, r3
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	370c      	adds	r7, #12
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	20000024 	.word	0x20000024

0800a7c0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60b9      	str	r1, [r7, #8]
 800a7c8:	607a      	str	r2, [r7, #4]
 800a7ca:	603b      	str	r3, [r7, #0]
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d102      	bne.n	800a7dc <USER_SPI_read+0x1c>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <USER_SPI_read+0x20>
 800a7dc:	2304      	movs	r3, #4
 800a7de:	e04d      	b.n	800a87c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a7e0:	4b28      	ldr	r3, [pc, #160]	; (800a884 <USER_SPI_read+0xc4>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d001      	beq.n	800a7f2 <USER_SPI_read+0x32>
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e044      	b.n	800a87c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a7f2:	4b25      	ldr	r3, [pc, #148]	; (800a888 <USER_SPI_read+0xc8>)
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	f003 0308 	and.w	r3, r3, #8
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d102      	bne.n	800a804 <USER_SPI_read+0x44>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	025b      	lsls	r3, r3, #9
 800a802:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d111      	bne.n	800a82e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a80a:	6879      	ldr	r1, [r7, #4]
 800a80c:	2011      	movs	r0, #17
 800a80e:	f7ff fe66 	bl	800a4de <send_cmd>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d129      	bne.n	800a86c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a81c:	68b8      	ldr	r0, [r7, #8]
 800a81e:	f7ff fe03 	bl	800a428 <rcvr_datablock>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d021      	beq.n	800a86c <USER_SPI_read+0xac>
			count = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	603b      	str	r3, [r7, #0]
 800a82c:	e01e      	b.n	800a86c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a82e:	6879      	ldr	r1, [r7, #4]
 800a830:	2012      	movs	r0, #18
 800a832:	f7ff fe54 	bl	800a4de <send_cmd>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d117      	bne.n	800a86c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a83c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a840:	68b8      	ldr	r0, [r7, #8]
 800a842:	f7ff fdf1 	bl	800a428 <rcvr_datablock>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00a      	beq.n	800a862 <USER_SPI_read+0xa2>
				buff += 512;
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a852:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	3b01      	subs	r3, #1
 800a858:	603b      	str	r3, [r7, #0]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1ed      	bne.n	800a83c <USER_SPI_read+0x7c>
 800a860:	e000      	b.n	800a864 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800a862:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a864:	2100      	movs	r1, #0
 800a866:	200c      	movs	r0, #12
 800a868:	f7ff fe39 	bl	800a4de <send_cmd>
		}
	}
	despiselect();
 800a86c:	f7ff fdb4 	bl	800a3d8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	bf14      	ite	ne
 800a876:	2301      	movne	r3, #1
 800a878:	2300      	moveq	r3, #0
 800a87a:	b2db      	uxtb	r3, r3
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	20000024 	.word	0x20000024
 800a888:	20000328 	.word	0x20000328

0800a88c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	60b9      	str	r1, [r7, #8]
 800a894:	607a      	str	r2, [r7, #4]
 800a896:	603b      	str	r3, [r7, #0]
 800a898:	4603      	mov	r3, r0
 800a89a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d102      	bne.n	800a8a8 <USER_SPI_write+0x1c>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d101      	bne.n	800a8ac <USER_SPI_write+0x20>
 800a8a8:	2304      	movs	r3, #4
 800a8aa:	e063      	b.n	800a974 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a8ac:	4b33      	ldr	r3, [pc, #204]	; (800a97c <USER_SPI_write+0xf0>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <USER_SPI_write+0x32>
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e05a      	b.n	800a974 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a8be:	4b2f      	ldr	r3, [pc, #188]	; (800a97c <USER_SPI_write+0xf0>)
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	f003 0304 	and.w	r3, r3, #4
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <USER_SPI_write+0x44>
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	e051      	b.n	800a974 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a8d0:	4b2b      	ldr	r3, [pc, #172]	; (800a980 <USER_SPI_write+0xf4>)
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	f003 0308 	and.w	r3, r3, #8
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d102      	bne.n	800a8e2 <USER_SPI_write+0x56>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	025b      	lsls	r3, r3, #9
 800a8e0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d110      	bne.n	800a90a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a8e8:	6879      	ldr	r1, [r7, #4]
 800a8ea:	2018      	movs	r0, #24
 800a8ec:	f7ff fdf7 	bl	800a4de <send_cmd>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d136      	bne.n	800a964 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800a8f6:	21fe      	movs	r1, #254	; 0xfe
 800a8f8:	68b8      	ldr	r0, [r7, #8]
 800a8fa:	f7ff fdbe 	bl	800a47a <xmit_datablock>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d02f      	beq.n	800a964 <USER_SPI_write+0xd8>
			count = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	603b      	str	r3, [r7, #0]
 800a908:	e02c      	b.n	800a964 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a90a:	4b1d      	ldr	r3, [pc, #116]	; (800a980 <USER_SPI_write+0xf4>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	f003 0306 	and.w	r3, r3, #6
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <USER_SPI_write+0x92>
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	2097      	movs	r0, #151	; 0x97
 800a91a:	f7ff fde0 	bl	800a4de <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	2019      	movs	r0, #25
 800a922:	f7ff fddc 	bl	800a4de <send_cmd>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d11b      	bne.n	800a964 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a92c:	21fc      	movs	r1, #252	; 0xfc
 800a92e:	68b8      	ldr	r0, [r7, #8]
 800a930:	f7ff fda3 	bl	800a47a <xmit_datablock>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00a      	beq.n	800a950 <USER_SPI_write+0xc4>
				buff += 512;
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a940:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	3b01      	subs	r3, #1
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1ee      	bne.n	800a92c <USER_SPI_write+0xa0>
 800a94e:	e000      	b.n	800a952 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800a950:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a952:	21fd      	movs	r1, #253	; 0xfd
 800a954:	2000      	movs	r0, #0
 800a956:	f7ff fd90 	bl	800a47a <xmit_datablock>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d101      	bne.n	800a964 <USER_SPI_write+0xd8>
 800a960:	2301      	movs	r3, #1
 800a962:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800a964:	f7ff fd38 	bl	800a3d8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	bf14      	ite	ne
 800a96e:	2301      	movne	r3, #1
 800a970:	2300      	moveq	r3, #0
 800a972:	b2db      	uxtb	r3, r3
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	20000024 	.word	0x20000024
 800a980:	20000328 	.word	0x20000328

0800a984 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b08c      	sub	sp, #48	; 0x30
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	603a      	str	r2, [r7, #0]
 800a98e:	71fb      	strb	r3, [r7, #7]
 800a990:	460b      	mov	r3, r1
 800a992:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a994:	79fb      	ldrb	r3, [r7, #7]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d001      	beq.n	800a99e <USER_SPI_ioctl+0x1a>
 800a99a:	2304      	movs	r3, #4
 800a99c:	e15a      	b.n	800ac54 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a99e:	4baf      	ldr	r3, [pc, #700]	; (800ac5c <USER_SPI_ioctl+0x2d8>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f003 0301 	and.w	r3, r3, #1
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <USER_SPI_ioctl+0x2c>
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e151      	b.n	800ac54 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800a9b6:	79bb      	ldrb	r3, [r7, #6]
 800a9b8:	2b04      	cmp	r3, #4
 800a9ba:	f200 8136 	bhi.w	800ac2a <USER_SPI_ioctl+0x2a6>
 800a9be:	a201      	add	r2, pc, #4	; (adr r2, 800a9c4 <USER_SPI_ioctl+0x40>)
 800a9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c4:	0800a9d9 	.word	0x0800a9d9
 800a9c8:	0800a9ed 	.word	0x0800a9ed
 800a9cc:	0800ac2b 	.word	0x0800ac2b
 800a9d0:	0800aa99 	.word	0x0800aa99
 800a9d4:	0800ab8f 	.word	0x0800ab8f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a9d8:	f7ff fd0c 	bl	800a3f4 <spiselect>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f000 8127 	beq.w	800ac32 <USER_SPI_ioctl+0x2ae>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a9ea:	e122      	b.n	800ac32 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	2009      	movs	r0, #9
 800a9f0:	f7ff fd75 	bl	800a4de <send_cmd>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f040 811d 	bne.w	800ac36 <USER_SPI_ioctl+0x2b2>
 800a9fc:	f107 030c 	add.w	r3, r7, #12
 800aa00:	2110      	movs	r1, #16
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7ff fd10 	bl	800a428 <rcvr_datablock>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 8113 	beq.w	800ac36 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800aa10:	7b3b      	ldrb	r3, [r7, #12]
 800aa12:	099b      	lsrs	r3, r3, #6
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d111      	bne.n	800aa3e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800aa1a:	7d7b      	ldrb	r3, [r7, #21]
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	7d3b      	ldrb	r3, [r7, #20]
 800aa20:	021b      	lsls	r3, r3, #8
 800aa22:	4413      	add	r3, r2
 800aa24:	461a      	mov	r2, r3
 800aa26:	7cfb      	ldrb	r3, [r7, #19]
 800aa28:	041b      	lsls	r3, r3, #16
 800aa2a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800aa2e:	4413      	add	r3, r2
 800aa30:	3301      	adds	r3, #1
 800aa32:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	029a      	lsls	r2, r3, #10
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	e028      	b.n	800aa90 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800aa3e:	7c7b      	ldrb	r3, [r7, #17]
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	7dbb      	ldrb	r3, [r7, #22]
 800aa48:	09db      	lsrs	r3, r3, #7
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	4413      	add	r3, r2
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	7d7b      	ldrb	r3, [r7, #21]
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	f003 0306 	and.w	r3, r3, #6
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	4413      	add	r3, r2
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	3302      	adds	r3, #2
 800aa62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800aa66:	7d3b      	ldrb	r3, [r7, #20]
 800aa68:	099b      	lsrs	r3, r3, #6
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	7cfb      	ldrb	r3, [r7, #19]
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	441a      	add	r2, r3
 800aa74:	7cbb      	ldrb	r3, [r7, #18]
 800aa76:	029b      	lsls	r3, r3, #10
 800aa78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa7c:	4413      	add	r3, r2
 800aa7e:	3301      	adds	r3, #1
 800aa80:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800aa82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aa86:	3b09      	subs	r3, #9
 800aa88:	69fa      	ldr	r2, [r7, #28]
 800aa8a:	409a      	lsls	r2, r3
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800aa96:	e0ce      	b.n	800ac36 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800aa98:	4b71      	ldr	r3, [pc, #452]	; (800ac60 <USER_SPI_ioctl+0x2dc>)
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d031      	beq.n	800ab08 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	208d      	movs	r0, #141	; 0x8d
 800aaa8:	f7ff fd19 	bl	800a4de <send_cmd>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f040 80c3 	bne.w	800ac3a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800aab4:	20ff      	movs	r0, #255	; 0xff
 800aab6:	f7ff fc1f 	bl	800a2f8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800aaba:	f107 030c 	add.w	r3, r7, #12
 800aabe:	2110      	movs	r1, #16
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff fcb1 	bl	800a428 <rcvr_datablock>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 80b6 	beq.w	800ac3a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800aace:	2330      	movs	r3, #48	; 0x30
 800aad0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800aad4:	e007      	b.n	800aae6 <USER_SPI_ioctl+0x162>
 800aad6:	20ff      	movs	r0, #255	; 0xff
 800aad8:	f7ff fc0e 	bl	800a2f8 <xchg_spi>
 800aadc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aae0:	3b01      	subs	r3, #1
 800aae2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800aae6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1f3      	bne.n	800aad6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800aaee:	7dbb      	ldrb	r3, [r7, #22]
 800aaf0:	091b      	lsrs	r3, r3, #4
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	2310      	movs	r3, #16
 800aaf8:	fa03 f202 	lsl.w	r2, r3, r2
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800ab06:	e098      	b.n	800ac3a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800ab08:	2100      	movs	r1, #0
 800ab0a:	2009      	movs	r0, #9
 800ab0c:	f7ff fce7 	bl	800a4de <send_cmd>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f040 8091 	bne.w	800ac3a <USER_SPI_ioctl+0x2b6>
 800ab18:	f107 030c 	add.w	r3, r7, #12
 800ab1c:	2110      	movs	r1, #16
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7ff fc82 	bl	800a428 <rcvr_datablock>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f000 8087 	beq.w	800ac3a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800ab2c:	4b4c      	ldr	r3, [pc, #304]	; (800ac60 <USER_SPI_ioctl+0x2dc>)
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	f003 0302 	and.w	r3, r3, #2
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d012      	beq.n	800ab5e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800ab38:	7dbb      	ldrb	r3, [r7, #22]
 800ab3a:	005b      	lsls	r3, r3, #1
 800ab3c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800ab40:	7dfa      	ldrb	r2, [r7, #23]
 800ab42:	09d2      	lsrs	r2, r2, #7
 800ab44:	b2d2      	uxtb	r2, r2
 800ab46:	4413      	add	r3, r2
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	7e7b      	ldrb	r3, [r7, #25]
 800ab4c:	099b      	lsrs	r3, r3, #6
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	3b01      	subs	r3, #1
 800ab52:	fa02 f303 	lsl.w	r3, r2, r3
 800ab56:	461a      	mov	r2, r3
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	e013      	b.n	800ab86 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800ab5e:	7dbb      	ldrb	r3, [r7, #22]
 800ab60:	109b      	asrs	r3, r3, #2
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	f003 031f 	and.w	r3, r3, #31
 800ab68:	3301      	adds	r3, #1
 800ab6a:	7dfa      	ldrb	r2, [r7, #23]
 800ab6c:	00d2      	lsls	r2, r2, #3
 800ab6e:	f002 0218 	and.w	r2, r2, #24
 800ab72:	7df9      	ldrb	r1, [r7, #23]
 800ab74:	0949      	lsrs	r1, r1, #5
 800ab76:	b2c9      	uxtb	r1, r1
 800ab78:	440a      	add	r2, r1
 800ab7a:	3201      	adds	r2, #1
 800ab7c:	fb02 f303 	mul.w	r3, r2, r3
 800ab80:	461a      	mov	r2, r3
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800ab8c:	e055      	b.n	800ac3a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ab8e:	4b34      	ldr	r3, [pc, #208]	; (800ac60 <USER_SPI_ioctl+0x2dc>)
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	f003 0306 	and.w	r3, r3, #6
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d051      	beq.n	800ac3e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ab9a:	f107 020c 	add.w	r2, r7, #12
 800ab9e:	79fb      	ldrb	r3, [r7, #7]
 800aba0:	210b      	movs	r1, #11
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff feee 	bl	800a984 <USER_SPI_ioctl>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d149      	bne.n	800ac42 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800abae:	7b3b      	ldrb	r3, [r7, #12]
 800abb0:	099b      	lsrs	r3, r3, #6
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d104      	bne.n	800abc2 <USER_SPI_ioctl+0x23e>
 800abb8:	7dbb      	ldrb	r3, [r7, #22]
 800abba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d041      	beq.n	800ac46 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	623b      	str	r3, [r7, #32]
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	62bb      	str	r3, [r7, #40]	; 0x28
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800abd2:	4b23      	ldr	r3, [pc, #140]	; (800ac60 <USER_SPI_ioctl+0x2dc>)
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	f003 0308 	and.w	r3, r3, #8
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d105      	bne.n	800abea <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800abde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe0:	025b      	lsls	r3, r3, #9
 800abe2:	62bb      	str	r3, [r7, #40]	; 0x28
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	025b      	lsls	r3, r3, #9
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800abea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abec:	2020      	movs	r0, #32
 800abee:	f7ff fc76 	bl	800a4de <send_cmd>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d128      	bne.n	800ac4a <USER_SPI_ioctl+0x2c6>
 800abf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abfa:	2021      	movs	r0, #33	; 0x21
 800abfc:	f7ff fc6f 	bl	800a4de <send_cmd>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d121      	bne.n	800ac4a <USER_SPI_ioctl+0x2c6>
 800ac06:	2100      	movs	r1, #0
 800ac08:	2026      	movs	r0, #38	; 0x26
 800ac0a:	f7ff fc68 	bl	800a4de <send_cmd>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d11a      	bne.n	800ac4a <USER_SPI_ioctl+0x2c6>
 800ac14:	f247 5030 	movw	r0, #30000	; 0x7530
 800ac18:	f7ff fbbb 	bl	800a392 <wait_ready>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d013      	beq.n	800ac4a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800ac22:	2300      	movs	r3, #0
 800ac24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800ac28:	e00f      	b.n	800ac4a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800ac2a:	2304      	movs	r3, #4
 800ac2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac30:	e00c      	b.n	800ac4c <USER_SPI_ioctl+0x2c8>
		break;
 800ac32:	bf00      	nop
 800ac34:	e00a      	b.n	800ac4c <USER_SPI_ioctl+0x2c8>
		break;
 800ac36:	bf00      	nop
 800ac38:	e008      	b.n	800ac4c <USER_SPI_ioctl+0x2c8>
		break;
 800ac3a:	bf00      	nop
 800ac3c:	e006      	b.n	800ac4c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ac3e:	bf00      	nop
 800ac40:	e004      	b.n	800ac4c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ac42:	bf00      	nop
 800ac44:	e002      	b.n	800ac4c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ac46:	bf00      	nop
 800ac48:	e000      	b.n	800ac4c <USER_SPI_ioctl+0x2c8>
		break;
 800ac4a:	bf00      	nop
	}

	despiselect();
 800ac4c:	f7ff fbc4 	bl	800a3d8 <despiselect>

	return res;
 800ac50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3730      	adds	r7, #48	; 0x30
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	20000024 	.word	0x20000024
 800ac60:	20000328 	.word	0x20000328

0800ac64 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ac6e:	79fb      	ldrb	r3, [r7, #7]
 800ac70:	4a08      	ldr	r2, [pc, #32]	; (800ac94 <disk_status+0x30>)
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	79fa      	ldrb	r2, [r7, #7]
 800ac7c:	4905      	ldr	r1, [pc, #20]	; (800ac94 <disk_status+0x30>)
 800ac7e:	440a      	add	r2, r1
 800ac80:	7a12      	ldrb	r2, [r2, #8]
 800ac82:	4610      	mov	r0, r2
 800ac84:	4798      	blx	r3
 800ac86:	4603      	mov	r3, r0
 800ac88:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	2000034c 	.word	0x2000034c

0800ac98 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800aca6:	79fb      	ldrb	r3, [r7, #7]
 800aca8:	4a0d      	ldr	r2, [pc, #52]	; (800ace0 <disk_initialize+0x48>)
 800acaa:	5cd3      	ldrb	r3, [r2, r3]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d111      	bne.n	800acd4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800acb0:	79fb      	ldrb	r3, [r7, #7]
 800acb2:	4a0b      	ldr	r2, [pc, #44]	; (800ace0 <disk_initialize+0x48>)
 800acb4:	2101      	movs	r1, #1
 800acb6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800acb8:	79fb      	ldrb	r3, [r7, #7]
 800acba:	4a09      	ldr	r2, [pc, #36]	; (800ace0 <disk_initialize+0x48>)
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	79fa      	ldrb	r2, [r7, #7]
 800acc6:	4906      	ldr	r1, [pc, #24]	; (800ace0 <disk_initialize+0x48>)
 800acc8:	440a      	add	r2, r1
 800acca:	7a12      	ldrb	r2, [r2, #8]
 800accc:	4610      	mov	r0, r2
 800acce:	4798      	blx	r3
 800acd0:	4603      	mov	r3, r0
 800acd2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	2000034c 	.word	0x2000034c

0800ace4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ace4:	b590      	push	{r4, r7, lr}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60b9      	str	r1, [r7, #8]
 800acec:	607a      	str	r2, [r7, #4]
 800acee:	603b      	str	r3, [r7, #0]
 800acf0:	4603      	mov	r3, r0
 800acf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	4a0a      	ldr	r2, [pc, #40]	; (800ad20 <disk_read+0x3c>)
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	689c      	ldr	r4, [r3, #8]
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
 800ad02:	4a07      	ldr	r2, [pc, #28]	; (800ad20 <disk_read+0x3c>)
 800ad04:	4413      	add	r3, r2
 800ad06:	7a18      	ldrb	r0, [r3, #8]
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	68b9      	ldr	r1, [r7, #8]
 800ad0e:	47a0      	blx	r4
 800ad10:	4603      	mov	r3, r0
 800ad12:	75fb      	strb	r3, [r7, #23]
  return res;
 800ad14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	371c      	adds	r7, #28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd90      	pop	{r4, r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	2000034c 	.word	0x2000034c

0800ad24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ad24:	b590      	push	{r4, r7, lr}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60b9      	str	r1, [r7, #8]
 800ad2c:	607a      	str	r2, [r7, #4]
 800ad2e:	603b      	str	r3, [r7, #0]
 800ad30:	4603      	mov	r3, r0
 800ad32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	4a0a      	ldr	r2, [pc, #40]	; (800ad60 <disk_write+0x3c>)
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4413      	add	r3, r2
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	68dc      	ldr	r4, [r3, #12]
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
 800ad42:	4a07      	ldr	r2, [pc, #28]	; (800ad60 <disk_write+0x3c>)
 800ad44:	4413      	add	r3, r2
 800ad46:	7a18      	ldrb	r0, [r3, #8]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	68b9      	ldr	r1, [r7, #8]
 800ad4e:	47a0      	blx	r4
 800ad50:	4603      	mov	r3, r0
 800ad52:	75fb      	strb	r3, [r7, #23]
  return res;
 800ad54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	371c      	adds	r7, #28
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd90      	pop	{r4, r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	2000034c 	.word	0x2000034c

0800ad64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	603a      	str	r2, [r7, #0]
 800ad6e:	71fb      	strb	r3, [r7, #7]
 800ad70:	460b      	mov	r3, r1
 800ad72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ad74:	79fb      	ldrb	r3, [r7, #7]
 800ad76:	4a09      	ldr	r2, [pc, #36]	; (800ad9c <disk_ioctl+0x38>)
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	79fa      	ldrb	r2, [r7, #7]
 800ad82:	4906      	ldr	r1, [pc, #24]	; (800ad9c <disk_ioctl+0x38>)
 800ad84:	440a      	add	r2, r1
 800ad86:	7a10      	ldrb	r0, [r2, #8]
 800ad88:	79b9      	ldrb	r1, [r7, #6]
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	4798      	blx	r3
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73fb      	strb	r3, [r7, #15]
  return res;
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	2000034c 	.word	0x2000034c

0800ada0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ada0:	b480      	push	{r7}
 800ada2:	b087      	sub	sp, #28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800adb4:	e007      	b.n	800adc6 <mem_cpy+0x26>
		*d++ = *s++;
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	1c53      	adds	r3, r2, #1
 800adba:	613b      	str	r3, [r7, #16]
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	1c59      	adds	r1, r3, #1
 800adc0:	6179      	str	r1, [r7, #20]
 800adc2:	7812      	ldrb	r2, [r2, #0]
 800adc4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	1e5a      	subs	r2, r3, #1
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1f2      	bne.n	800adb6 <mem_cpy+0x16>
}
 800add0:	bf00      	nop
 800add2:	bf00      	nop
 800add4:	371c      	adds	r7, #28
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800adde:	b480      	push	{r7}
 800ade0:	b087      	sub	sp, #28
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	60f8      	str	r0, [r7, #12]
 800ade6:	60b9      	str	r1, [r7, #8]
 800ade8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800adee:	e005      	b.n	800adfc <mem_set+0x1e>
		*d++ = (BYTE)val;
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	617a      	str	r2, [r7, #20]
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	b2d2      	uxtb	r2, r2
 800adfa:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	1e5a      	subs	r2, r3, #1
 800ae00:	607a      	str	r2, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1f4      	bne.n	800adf0 <mem_set+0x12>
}
 800ae06:	bf00      	nop
 800ae08:	bf00      	nop
 800ae0a:	371c      	adds	r7, #28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800ae14:	b480      	push	{r7}
 800ae16:	b089      	sub	sp, #36	; 0x24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	61fb      	str	r3, [r7, #28]
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800ae2c:	bf00      	nop
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	1e5a      	subs	r2, r3, #1
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00d      	beq.n	800ae54 <mem_cmp+0x40>
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	61fa      	str	r2, [r7, #28]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	4619      	mov	r1, r3
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	61ba      	str	r2, [r7, #24]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	1acb      	subs	r3, r1, r3
 800ae4c:	617b      	str	r3, [r7, #20]
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d0ec      	beq.n	800ae2e <mem_cmp+0x1a>
	return r;
 800ae54:	697b      	ldr	r3, [r7, #20]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3724      	adds	r7, #36	; 0x24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ae6c:	e002      	b.n	800ae74 <chk_chr+0x12>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3301      	adds	r3, #1
 800ae72:	607b      	str	r3, [r7, #4]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d005      	beq.n	800ae88 <chk_chr+0x26>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	461a      	mov	r2, r3
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d1f2      	bne.n	800ae6e <chk_chr+0xc>
	return *str;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	781b      	ldrb	r3, [r3, #0]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aea2:	2300      	movs	r3, #0
 800aea4:	60bb      	str	r3, [r7, #8]
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	e038      	b.n	800af1e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800aeac:	4930      	ldr	r1, [pc, #192]	; (800af70 <chk_lock+0xd8>)
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	005b      	lsls	r3, r3, #1
 800aeb4:	4413      	add	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	440b      	add	r3, r1
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d029      	beq.n	800af14 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800aec0:	492b      	ldr	r1, [pc, #172]	; (800af70 <chk_lock+0xd8>)
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	4613      	mov	r3, r2
 800aec6:	005b      	lsls	r3, r3, #1
 800aec8:	4413      	add	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	440b      	add	r3, r1
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d11e      	bne.n	800af18 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800aeda:	4925      	ldr	r1, [pc, #148]	; (800af70 <chk_lock+0xd8>)
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	4613      	mov	r3, r2
 800aee0:	005b      	lsls	r3, r3, #1
 800aee2:	4413      	add	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	440b      	add	r3, r1
 800aee8:	3304      	adds	r3, #4
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d110      	bne.n	800af18 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800aef6:	491e      	ldr	r1, [pc, #120]	; (800af70 <chk_lock+0xd8>)
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	4613      	mov	r3, r2
 800aefc:	005b      	lsls	r3, r3, #1
 800aefe:	4413      	add	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	440b      	add	r3, r1
 800af04:	3308      	adds	r3, #8
 800af06:	881a      	ldrh	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800af0e:	429a      	cmp	r2, r3
 800af10:	d102      	bne.n	800af18 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800af12:	e007      	b.n	800af24 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800af14:	2301      	movs	r3, #1
 800af16:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3301      	adds	r3, #1
 800af1c:	60fb      	str	r3, [r7, #12]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d9c3      	bls.n	800aeac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2b02      	cmp	r3, #2
 800af28:	d109      	bne.n	800af3e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d102      	bne.n	800af36 <chk_lock+0x9e>
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b02      	cmp	r3, #2
 800af34:	d101      	bne.n	800af3a <chk_lock+0xa2>
 800af36:	2300      	movs	r3, #0
 800af38:	e013      	b.n	800af62 <chk_lock+0xca>
 800af3a:	2312      	movs	r3, #18
 800af3c:	e011      	b.n	800af62 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10b      	bne.n	800af5c <chk_lock+0xc4>
 800af44:	490a      	ldr	r1, [pc, #40]	; (800af70 <chk_lock+0xd8>)
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	4613      	mov	r3, r2
 800af4a:	005b      	lsls	r3, r3, #1
 800af4c:	4413      	add	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	440b      	add	r3, r1
 800af52:	330a      	adds	r3, #10
 800af54:	881b      	ldrh	r3, [r3, #0]
 800af56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af5a:	d101      	bne.n	800af60 <chk_lock+0xc8>
 800af5c:	2310      	movs	r3, #16
 800af5e:	e000      	b.n	800af62 <chk_lock+0xca>
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3714      	adds	r7, #20
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	20000334 	.word	0x20000334

0800af74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af7a:	2300      	movs	r3, #0
 800af7c:	607b      	str	r3, [r7, #4]
 800af7e:	e002      	b.n	800af86 <enq_lock+0x12>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	3301      	adds	r3, #1
 800af84:	607b      	str	r3, [r7, #4]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d809      	bhi.n	800afa0 <enq_lock+0x2c>
 800af8c:	490a      	ldr	r1, [pc, #40]	; (800afb8 <enq_lock+0x44>)
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	4613      	mov	r3, r2
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	4413      	add	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	440b      	add	r3, r1
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1ef      	bne.n	800af80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	bf14      	ite	ne
 800afa6:	2301      	movne	r3, #1
 800afa8:	2300      	moveq	r3, #0
 800afaa:	b2db      	uxtb	r3, r3
}
 800afac:	4618      	mov	r0, r3
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	20000334 	.word	0x20000334

0800afbc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afc6:	2300      	movs	r3, #0
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	e02b      	b.n	800b024 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800afcc:	4956      	ldr	r1, [pc, #344]	; (800b128 <inc_lock+0x16c>)
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	4613      	mov	r3, r2
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	4413      	add	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	440b      	add	r3, r1
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d11b      	bne.n	800b01e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800afe6:	4950      	ldr	r1, [pc, #320]	; (800b128 <inc_lock+0x16c>)
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	4613      	mov	r3, r2
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	4413      	add	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	440b      	add	r3, r1
 800aff4:	3304      	adds	r3, #4
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800affe:	429a      	cmp	r2, r3
 800b000:	d10d      	bne.n	800b01e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800b002:	4949      	ldr	r1, [pc, #292]	; (800b128 <inc_lock+0x16c>)
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	4613      	mov	r3, r2
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	4413      	add	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	440b      	add	r3, r1
 800b010:	3308      	adds	r3, #8
 800b012:	881a      	ldrh	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d006      	beq.n	800b02c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	3301      	adds	r3, #1
 800b022:	60fb      	str	r3, [r7, #12]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d9d0      	bls.n	800afcc <inc_lock+0x10>
 800b02a:	e000      	b.n	800b02e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800b02c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b02      	cmp	r3, #2
 800b032:	d145      	bne.n	800b0c0 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b034:	2300      	movs	r3, #0
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	e002      	b.n	800b040 <inc_lock+0x84>
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	3301      	adds	r3, #1
 800b03e:	60fb      	str	r3, [r7, #12]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d809      	bhi.n	800b05a <inc_lock+0x9e>
 800b046:	4938      	ldr	r1, [pc, #224]	; (800b128 <inc_lock+0x16c>)
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	4613      	mov	r3, r2
 800b04c:	005b      	lsls	r3, r3, #1
 800b04e:	4413      	add	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	440b      	add	r3, r1
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1ef      	bne.n	800b03a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d101      	bne.n	800b064 <inc_lock+0xa8>
 800b060:	2300      	movs	r3, #0
 800b062:	e05a      	b.n	800b11a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800b06a:	482f      	ldr	r0, [pc, #188]	; (800b128 <inc_lock+0x16c>)
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	4613      	mov	r3, r2
 800b070:	005b      	lsls	r3, r3, #1
 800b072:	4413      	add	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4403      	add	r3, r0
 800b078:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800b080:	4829      	ldr	r0, [pc, #164]	; (800b128 <inc_lock+0x16c>)
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	4613      	mov	r3, r2
 800b086:	005b      	lsls	r3, r3, #1
 800b088:	4413      	add	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	4403      	add	r3, r0
 800b08e:	3304      	adds	r3, #4
 800b090:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800b098:	4923      	ldr	r1, [pc, #140]	; (800b128 <inc_lock+0x16c>)
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4613      	mov	r3, r2
 800b09e:	005b      	lsls	r3, r3, #1
 800b0a0:	4413      	add	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	440b      	add	r3, r1
 800b0a6:	3308      	adds	r3, #8
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800b0ac:	491e      	ldr	r1, [pc, #120]	; (800b128 <inc_lock+0x16c>)
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	4413      	add	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	440b      	add	r3, r1
 800b0ba:	330a      	adds	r3, #10
 800b0bc:	2200      	movs	r2, #0
 800b0be:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00c      	beq.n	800b0e0 <inc_lock+0x124>
 800b0c6:	4918      	ldr	r1, [pc, #96]	; (800b128 <inc_lock+0x16c>)
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	4413      	add	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	440b      	add	r3, r1
 800b0d4:	330a      	adds	r3, #10
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <inc_lock+0x124>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	e01c      	b.n	800b11a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d10b      	bne.n	800b0fe <inc_lock+0x142>
 800b0e6:	4910      	ldr	r1, [pc, #64]	; (800b128 <inc_lock+0x16c>)
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	005b      	lsls	r3, r3, #1
 800b0ee:	4413      	add	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	440b      	add	r3, r1
 800b0f4:	330a      	adds	r3, #10
 800b0f6:	881b      	ldrh	r3, [r3, #0]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	b299      	uxth	r1, r3
 800b0fc:	e001      	b.n	800b102 <inc_lock+0x146>
 800b0fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b102:	4809      	ldr	r0, [pc, #36]	; (800b128 <inc_lock+0x16c>)
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4613      	mov	r3, r2
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	4413      	add	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4403      	add	r3, r0
 800b110:	330a      	adds	r3, #10
 800b112:	460a      	mov	r2, r1
 800b114:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3301      	adds	r3, #1
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	20000334 	.word	0x20000334

0800b12c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3b01      	subs	r3, #1
 800b138:	607b      	str	r3, [r7, #4]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d82e      	bhi.n	800b19e <dec_lock+0x72>
		n = Files[i].ctr;
 800b140:	491b      	ldr	r1, [pc, #108]	; (800b1b0 <dec_lock+0x84>)
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	4613      	mov	r3, r2
 800b146:	005b      	lsls	r3, r3, #1
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	330a      	adds	r3, #10
 800b150:	881b      	ldrh	r3, [r3, #0]
 800b152:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b154:	89fb      	ldrh	r3, [r7, #14]
 800b156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b15a:	d101      	bne.n	800b160 <dec_lock+0x34>
 800b15c:	2300      	movs	r3, #0
 800b15e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800b160:	89fb      	ldrh	r3, [r7, #14]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <dec_lock+0x40>
 800b166:	89fb      	ldrh	r3, [r7, #14]
 800b168:	3b01      	subs	r3, #1
 800b16a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b16c:	4910      	ldr	r1, [pc, #64]	; (800b1b0 <dec_lock+0x84>)
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	4613      	mov	r3, r2
 800b172:	005b      	lsls	r3, r3, #1
 800b174:	4413      	add	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	440b      	add	r3, r1
 800b17a:	330a      	adds	r3, #10
 800b17c:	89fa      	ldrh	r2, [r7, #14]
 800b17e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b180:	89fb      	ldrh	r3, [r7, #14]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d108      	bne.n	800b198 <dec_lock+0x6c>
 800b186:	490a      	ldr	r1, [pc, #40]	; (800b1b0 <dec_lock+0x84>)
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	4613      	mov	r3, r2
 800b18c:	005b      	lsls	r3, r3, #1
 800b18e:	4413      	add	r3, r2
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	440b      	add	r3, r1
 800b194:	2200      	movs	r2, #0
 800b196:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b198:	2300      	movs	r3, #0
 800b19a:	737b      	strb	r3, [r7, #13]
 800b19c:	e001      	b.n	800b1a2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b19e:	2302      	movs	r3, #2
 800b1a0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b1a2:	7b7b      	ldrb	r3, [r7, #13]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	20000334 	.word	0x20000334

0800b1b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60fb      	str	r3, [r7, #12]
 800b1c0:	e016      	b.n	800b1f0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b1c2:	4910      	ldr	r1, [pc, #64]	; (800b204 <clear_lock+0x50>)
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	005b      	lsls	r3, r3, #1
 800b1ca:	4413      	add	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	440b      	add	r3, r1
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d108      	bne.n	800b1ea <clear_lock+0x36>
 800b1d8:	490a      	ldr	r1, [pc, #40]	; (800b204 <clear_lock+0x50>)
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	005b      	lsls	r3, r3, #1
 800b1e0:	4413      	add	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	440b      	add	r3, r1
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d9e5      	bls.n	800b1c2 <clear_lock+0xe>
	}
}
 800b1f6:	bf00      	nop
 800b1f8:	bf00      	nop
 800b1fa:	3714      	adds	r7, #20
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	20000334 	.word	0x20000334

0800b208 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d038      	beq.n	800b290 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800b224:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b22c:	6879      	ldr	r1, [r7, #4]
 800b22e:	2301      	movs	r3, #1
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	f7ff fd77 	bl	800ad24 <disk_write>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	73fb      	strb	r3, [r7, #15]
 800b240:	e026      	b.n	800b290 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	1ad2      	subs	r2, r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d218      	bcs.n	800b290 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b264:	613b      	str	r3, [r7, #16]
 800b266:	e010      	b.n	800b28a <sync_window+0x82>
					wsect += fs->fsize;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	4413      	add	r3, r2
 800b272:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b27a:	6879      	ldr	r1, [r7, #4]
 800b27c:	2301      	movs	r3, #1
 800b27e:	697a      	ldr	r2, [r7, #20]
 800b280:	f7ff fd50 	bl	800ad24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	3b01      	subs	r3, #1
 800b288:	613b      	str	r3, [r7, #16]
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d8eb      	bhi.n	800b268 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800b290:	7bfb      	ldrb	r3, [r7, #15]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d01b      	beq.n	800b2ec <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f7ff ffa7 	bl	800b208 <sync_window>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b2be:	7bfb      	ldrb	r3, [r7, #15]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d113      	bne.n	800b2ec <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b2ca:	6879      	ldr	r1, [r7, #4]
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	f7ff fd08 	bl	800ace4 <disk_read>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d004      	beq.n	800b2e4 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b2da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2de:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7ff ff82 	bl	800b208 <sync_window>
 800b304:	4603      	mov	r3, r0
 800b306:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b308:	7bfb      	ldrb	r3, [r7, #15]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f040 809b 	bne.w	800b446 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b316:	2b03      	cmp	r3, #3
 800b318:	f040 8088 	bne.w	800b42c <sync_fs+0x136>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800b322:	2b01      	cmp	r3, #1
 800b324:	f040 8082 	bne.w	800b42c <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b32e:	2100      	movs	r1, #0
 800b330:	4618      	mov	r0, r3
 800b332:	f7ff fd54 	bl	800adde <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2255      	movs	r2, #85	; 0x55
 800b33a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	22aa      	movs	r2, #170	; 0xaa
 800b342:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2252      	movs	r2, #82	; 0x52
 800b34a:	701a      	strb	r2, [r3, #0]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2252      	movs	r2, #82	; 0x52
 800b350:	705a      	strb	r2, [r3, #1]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2261      	movs	r2, #97	; 0x61
 800b356:	709a      	strb	r2, [r3, #2]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2241      	movs	r2, #65	; 0x41
 800b35c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2272      	movs	r2, #114	; 0x72
 800b362:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2272      	movs	r2, #114	; 0x72
 800b36a:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2241      	movs	r2, #65	; 0x41
 800b372:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2261      	movs	r2, #97	; 0x61
 800b37a:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b384:	b2da      	uxtb	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b392:	b29b      	uxth	r3, r3
 800b394:	0a1b      	lsrs	r3, r3, #8
 800b396:	b29b      	uxth	r3, r3
 800b398:	b2da      	uxtb	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b3a6:	0c1b      	lsrs	r3, r3, #16
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b3b6:	0e1b      	lsrs	r3, r3, #24
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b3c6:	b2da      	uxtb	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	0a1b      	lsrs	r3, r3, #8
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b3e8:	0c1b      	lsrs	r3, r3, #16
 800b3ea:	b2da      	uxtb	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b3f8:	0e1b      	lsrs	r3, r3, #24
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b408:	1c5a      	adds	r2, r3, #1
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b416:	6879      	ldr	r1, [r7, #4]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800b41e:	2301      	movs	r3, #1
 800b420:	f7ff fc80 	bl	800ad24 <disk_write>
			fs->fsi_flag = 0;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b432:	2200      	movs	r2, #0
 800b434:	2100      	movs	r1, #0
 800b436:	4618      	mov	r0, r3
 800b438:	f7ff fc94 	bl	800ad64 <disk_ioctl>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800b442:	2301      	movs	r3, #1
 800b444:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b446:	7bfb      	ldrb	r3, [r7, #15]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	3b02      	subs	r3, #2
 800b45e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b466:	3b02      	subs	r3, #2
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d301      	bcc.n	800b472 <clust2sect+0x22>
 800b46e:	2300      	movs	r3, #0
 800b470:	e00a      	b.n	800b488 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b478:	461a      	mov	r2, r3
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	fb03 f202 	mul.w	r2, r3, r2
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800b486:	4413      	add	r3, r2
}
 800b488:	4618      	mov	r0, r3
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d905      	bls.n	800b4b0 <get_fat+0x1c>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d302      	bcc.n	800b4b6 <get_fat+0x22>
		val = 1;	/* Internal error */
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	617b      	str	r3, [r7, #20]
 800b4b4:	e0a3      	b.n	800b5fe <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b4b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4ba:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b4c2:	2b03      	cmp	r3, #3
 800b4c4:	d068      	beq.n	800b598 <get_fat+0x104>
 800b4c6:	2b03      	cmp	r3, #3
 800b4c8:	f300 808f 	bgt.w	800b5ea <get_fat+0x156>
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d002      	beq.n	800b4d6 <get_fat+0x42>
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d040      	beq.n	800b556 <get_fat+0xc2>
 800b4d4:	e089      	b.n	800b5ea <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	60fb      	str	r3, [r7, #12]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	085b      	lsrs	r3, r3, #1
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	0a5b      	lsrs	r3, r3, #9
 800b4ee:	4413      	add	r3, r2
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7ff fed1 	bl	800b29a <move_window>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d178      	bne.n	800b5f0 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	1c5a      	adds	r2, r3, #1
 800b502:	60fa      	str	r2, [r7, #12]
 800b504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	5cd3      	ldrb	r3, [r2, r3]
 800b50c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	0a5b      	lsrs	r3, r3, #9
 800b518:	4413      	add	r3, r2
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff febc 	bl	800b29a <move_window>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d165      	bne.n	800b5f4 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	5cd3      	ldrb	r3, [r2, r3]
 800b532:	021b      	lsls	r3, r3, #8
 800b534:	461a      	mov	r2, r3
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	4313      	orrs	r3, r2
 800b53a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	f003 0301 	and.w	r3, r3, #1
 800b542:	2b00      	cmp	r3, #0
 800b544:	d002      	beq.n	800b54c <get_fat+0xb8>
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	091b      	lsrs	r3, r3, #4
 800b54a:	e002      	b.n	800b552 <get_fat+0xbe>
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b552:	617b      	str	r3, [r7, #20]
			break;
 800b554:	e053      	b.n	800b5fe <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	0a1b      	lsrs	r3, r3, #8
 800b560:	4413      	add	r3, r2
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7ff fe98 	bl	800b29a <move_window>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d143      	bne.n	800b5f8 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	005b      	lsls	r3, r3, #1
 800b574:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	4413      	add	r3, r2
 800b57c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	3301      	adds	r3, #1
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	021b      	lsls	r3, r3, #8
 800b586:	b21a      	sxth	r2, r3
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	b21b      	sxth	r3, r3
 800b58e:	4313      	orrs	r3, r2
 800b590:	b21b      	sxth	r3, r3
 800b592:	b29b      	uxth	r3, r3
 800b594:	617b      	str	r3, [r7, #20]
			break;
 800b596:	e032      	b.n	800b5fe <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	09db      	lsrs	r3, r3, #7
 800b5a2:	4413      	add	r3, r2
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7ff fe77 	bl	800b29a <move_window>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d124      	bne.n	800b5fc <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	4413      	add	r3, r2
 800b5be:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	3303      	adds	r3, #3
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	061a      	lsls	r2, r3, #24
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	3302      	adds	r3, #2
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	041b      	lsls	r3, r3, #16
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	693a      	ldr	r2, [r7, #16]
 800b5d4:	3201      	adds	r2, #1
 800b5d6:	7812      	ldrb	r2, [r2, #0]
 800b5d8:	0212      	lsls	r2, r2, #8
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	693a      	ldr	r2, [r7, #16]
 800b5de:	7812      	ldrb	r2, [r2, #0]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b5e6:	617b      	str	r3, [r7, #20]
			break;
 800b5e8:	e009      	b.n	800b5fe <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	617b      	str	r3, [r7, #20]
 800b5ee:	e006      	b.n	800b5fe <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5f0:	bf00      	nop
 800b5f2:	e004      	b.n	800b5fe <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5f4:	bf00      	nop
 800b5f6:	e002      	b.n	800b5fe <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b5f8:	bf00      	nop
 800b5fa:	e000      	b.n	800b5fe <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b5fc:	bf00      	nop
		}
	}

	return val;
 800b5fe:	697b      	ldr	r3, [r7, #20]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3718      	adds	r7, #24
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b088      	sub	sp, #32
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	2b01      	cmp	r3, #1
 800b618:	d905      	bls.n	800b626 <put_fat+0x1e>
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	429a      	cmp	r2, r3
 800b624:	d302      	bcc.n	800b62c <put_fat+0x24>
		res = FR_INT_ERR;
 800b626:	2302      	movs	r3, #2
 800b628:	77fb      	strb	r3, [r7, #31]
 800b62a:	e0f6      	b.n	800b81a <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b632:	2b03      	cmp	r3, #3
 800b634:	f000 809e 	beq.w	800b774 <put_fat+0x16c>
 800b638:	2b03      	cmp	r3, #3
 800b63a:	f300 80e4 	bgt.w	800b806 <put_fat+0x1fe>
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d002      	beq.n	800b648 <put_fat+0x40>
 800b642:	2b02      	cmp	r3, #2
 800b644:	d06f      	beq.n	800b726 <put_fat+0x11e>
 800b646:	e0de      	b.n	800b806 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	617b      	str	r3, [r7, #20]
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	085b      	lsrs	r3, r3, #1
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	4413      	add	r3, r2
 800b654:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	0a5b      	lsrs	r3, r3, #9
 800b660:	4413      	add	r3, r2
 800b662:	4619      	mov	r1, r3
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f7ff fe18 	bl	800b29a <move_window>
 800b66a:	4603      	mov	r3, r0
 800b66c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b66e:	7ffb      	ldrb	r3, [r7, #31]
 800b670:	2b00      	cmp	r3, #0
 800b672:	f040 80cb 	bne.w	800b80c <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	1c5a      	adds	r2, r3, #1
 800b67a:	617a      	str	r2, [r7, #20]
 800b67c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	4413      	add	r3, r2
 800b684:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00d      	beq.n	800b6ac <put_fat+0xa4>
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	b25b      	sxtb	r3, r3
 800b696:	f003 030f 	and.w	r3, r3, #15
 800b69a:	b25a      	sxtb	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	011b      	lsls	r3, r3, #4
 800b6a2:	b25b      	sxtb	r3, r3
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	b25b      	sxtb	r3, r3
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	e001      	b.n	800b6b0 <put_fat+0xa8>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	69ba      	ldr	r2, [r7, #24]
 800b6b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	0a5b      	lsrs	r3, r3, #9
 800b6c6:	4413      	add	r3, r2
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f7ff fde5 	bl	800b29a <move_window>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6d4:	7ffb      	ldrb	r3, [r7, #31]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f040 809a 	bne.w	800b810 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	f003 0301 	and.w	r3, r3, #1
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <put_fat+0xf2>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	091b      	lsrs	r3, r3, #4
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	e00e      	b.n	800b718 <put_fat+0x110>
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	b25b      	sxtb	r3, r3
 800b700:	f023 030f 	bic.w	r3, r3, #15
 800b704:	b25a      	sxtb	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	0a1b      	lsrs	r3, r3, #8
 800b70a:	b25b      	sxtb	r3, r3
 800b70c:	f003 030f 	and.w	r3, r3, #15
 800b710:	b25b      	sxtb	r3, r3
 800b712:	4313      	orrs	r3, r2
 800b714:	b25b      	sxtb	r3, r3
 800b716:	b2db      	uxtb	r3, r3
 800b718:	69ba      	ldr	r2, [r7, #24]
 800b71a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800b724:	e079      	b.n	800b81a <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	0a1b      	lsrs	r3, r3, #8
 800b730:	4413      	add	r3, r2
 800b732:	4619      	mov	r1, r3
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f7ff fdb0 	bl	800b29a <move_window>
 800b73a:	4603      	mov	r3, r0
 800b73c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b73e:	7ffb      	ldrb	r3, [r7, #31]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d167      	bne.n	800b814 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	005b      	lsls	r3, r3, #1
 800b748:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	4413      	add	r3, r2
 800b750:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	b2da      	uxtb	r2, r3
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	701a      	strb	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	0a1b      	lsrs	r3, r3, #8
 800b760:	b29a      	uxth	r2, r3
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	3301      	adds	r3, #1
 800b766:	b2d2      	uxtb	r2, r2
 800b768:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2201      	movs	r2, #1
 800b76e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800b772:	e052      	b.n	800b81a <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	09db      	lsrs	r3, r3, #7
 800b77e:	4413      	add	r3, r2
 800b780:	4619      	mov	r1, r3
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f7ff fd89 	bl	800b29a <move_window>
 800b788:	4603      	mov	r3, r0
 800b78a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b78c:	7ffb      	ldrb	r3, [r7, #31]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d142      	bne.n	800b818 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	4413      	add	r3, r2
 800b79e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	3303      	adds	r3, #3
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	061a      	lsls	r2, r3, #24
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	3302      	adds	r3, #2
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	041b      	lsls	r3, r3, #16
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	69ba      	ldr	r2, [r7, #24]
 800b7b4:	3201      	adds	r2, #1
 800b7b6:	7812      	ldrb	r2, [r2, #0]
 800b7b8:	0212      	lsls	r2, r2, #8
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	7812      	ldrb	r2, [r2, #0]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	701a      	strb	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	0a1b      	lsrs	r3, r3, #8
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	b2d2      	uxtb	r2, r2
 800b7e2:	701a      	strb	r2, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	0c1a      	lsrs	r2, r3, #16
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	3302      	adds	r3, #2
 800b7ec:	b2d2      	uxtb	r2, r2
 800b7ee:	701a      	strb	r2, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	0e1a      	lsrs	r2, r3, #24
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	3303      	adds	r3, #3
 800b7f8:	b2d2      	uxtb	r2, r2
 800b7fa:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800b804:	e009      	b.n	800b81a <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800b806:	2302      	movs	r3, #2
 800b808:	77fb      	strb	r3, [r7, #31]
 800b80a:	e006      	b.n	800b81a <put_fat+0x212>
			if (res != FR_OK) break;
 800b80c:	bf00      	nop
 800b80e:	e004      	b.n	800b81a <put_fat+0x212>
			if (res != FR_OK) break;
 800b810:	bf00      	nop
 800b812:	e002      	b.n	800b81a <put_fat+0x212>
			if (res != FR_OK) break;
 800b814:	bf00      	nop
 800b816:	e000      	b.n	800b81a <put_fat+0x212>
			if (res != FR_OK) break;
 800b818:	bf00      	nop
		}
	}

	return res;
 800b81a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3720      	adds	r7, #32
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d905      	bls.n	800b840 <remove_chain+0x1c>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d302      	bcc.n	800b846 <remove_chain+0x22>
		res = FR_INT_ERR;
 800b840:	2302      	movs	r3, #2
 800b842:	73fb      	strb	r3, [r7, #15]
 800b844:	e043      	b.n	800b8ce <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800b846:	2300      	movs	r3, #0
 800b848:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800b84a:	e036      	b.n	800b8ba <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff fe20 	bl	800b494 <get_fat>
 800b854:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d035      	beq.n	800b8c8 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d102      	bne.n	800b868 <remove_chain+0x44>
 800b862:	2302      	movs	r3, #2
 800b864:	73fb      	strb	r3, [r7, #15]
 800b866:	e032      	b.n	800b8ce <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b86e:	d102      	bne.n	800b876 <remove_chain+0x52>
 800b870:	2301      	movs	r3, #1
 800b872:	73fb      	strb	r3, [r7, #15]
 800b874:	e02b      	b.n	800b8ce <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800b876:	2200      	movs	r2, #0
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7ff fec4 	bl	800b608 <put_fat>
 800b880:	4603      	mov	r3, r0
 800b882:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b884:	7bfb      	ldrb	r3, [r7, #15]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d120      	bne.n	800b8cc <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b894:	d00f      	beq.n	800b8b6 <remove_chain+0x92>
				fs->free_clust++;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b89c:	1c5a      	adds	r2, r3, #1
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800b8aa:	f043 0301 	orr.w	r3, r3, #1
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8c0:	683a      	ldr	r2, [r7, #0]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d3c2      	bcc.n	800b84c <remove_chain+0x28>
 800b8c6:	e002      	b.n	800b8ce <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800b8c8:	bf00      	nop
 800b8ca:	e000      	b.n	800b8ce <remove_chain+0xaa>
			if (res != FR_OK) break;
 800b8cc:	bf00      	nop
		}
	}

	return res;
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10f      	bne.n	800b908 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b8ee:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d005      	beq.n	800b902 <create_chain+0x2a>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8fc:	693a      	ldr	r2, [r7, #16]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d31c      	bcc.n	800b93c <create_chain+0x64>
 800b902:	2301      	movs	r3, #1
 800b904:	613b      	str	r3, [r7, #16]
 800b906:	e019      	b.n	800b93c <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff fdc2 	bl	800b494 <get_fat>
 800b910:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d801      	bhi.n	800b91c <create_chain+0x44>
 800b918:	2301      	movs	r3, #1
 800b91a:	e076      	b.n	800ba0a <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b922:	d101      	bne.n	800b928 <create_chain+0x50>
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	e070      	b.n	800ba0a <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b92e:	68ba      	ldr	r2, [r7, #8]
 800b930:	429a      	cmp	r2, r3
 800b932:	d201      	bcs.n	800b938 <create_chain+0x60>
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	e068      	b.n	800ba0a <create_chain+0x132>
		scl = clst;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	3301      	adds	r3, #1
 800b944:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d307      	bcc.n	800b962 <create_chain+0x8a>
			ncl = 2;
 800b952:	2302      	movs	r3, #2
 800b954:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d901      	bls.n	800b962 <create_chain+0x8a>
 800b95e:	2300      	movs	r3, #0
 800b960:	e053      	b.n	800ba0a <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800b962:	6979      	ldr	r1, [r7, #20]
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7ff fd95 	bl	800b494 <get_fat>
 800b96a:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00e      	beq.n	800b990 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b978:	d002      	beq.n	800b980 <create_chain+0xa8>
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d101      	bne.n	800b984 <create_chain+0xac>
			return cs;
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	e042      	b.n	800ba0a <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800b984:	697a      	ldr	r2, [r7, #20]
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d1d9      	bne.n	800b940 <create_chain+0x68>
 800b98c:	2300      	movs	r3, #0
 800b98e:	e03c      	b.n	800ba0a <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800b990:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800b992:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800b996:	6979      	ldr	r1, [r7, #20]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff fe35 	bl	800b608 <put_fat>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d109      	bne.n	800b9bc <create_chain+0xe4>
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d006      	beq.n	800b9bc <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7ff fe28 	bl	800b608 <put_fat>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d11a      	bne.n	800b9f8 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b9d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9d4:	d018      	beq.n	800ba08 <create_chain+0x130>
			fs->free_clust--;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b9dc:	1e5a      	subs	r2, r3, #1
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800b9ea:	f043 0301 	orr.w	r3, r3, #1
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800b9f6:	e007      	b.n	800ba08 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d102      	bne.n	800ba04 <create_chain+0x12c>
 800b9fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba02:	e000      	b.n	800ba06 <create_chain+0x12e>
 800ba04:	2301      	movs	r3, #1
 800ba06:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800ba08:	697b      	ldr	r3, [r7, #20]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800ba12:	b480      	push	{r7}
 800ba14:	b087      	sub	sp, #28
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
 800ba1a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ba22:	3304      	adds	r3, #4
 800ba24:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	0a5b      	lsrs	r3, r3, #9
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800ba30:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ba34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba38:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	1d1a      	adds	r2, r3, #4
 800ba3e:	613a      	str	r2, [r7, #16]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d101      	bne.n	800ba4e <clmt_clust+0x3c>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e010      	b.n	800ba70 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800ba4e:	697a      	ldr	r2, [r7, #20]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d307      	bcc.n	800ba66 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	617b      	str	r3, [r7, #20]
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	3304      	adds	r3, #4
 800ba62:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ba64:	e7e9      	b.n	800ba3a <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800ba66:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	4413      	add	r3, r2
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	371c      	adds	r7, #28
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ba96:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d007      	beq.n	800baae <dir_sdi+0x32>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800baa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800baa8:	697a      	ldr	r2, [r7, #20]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d301      	bcc.n	800bab2 <dir_sdi+0x36>
		return FR_INT_ERR;
 800baae:	2302      	movs	r3, #2
 800bab0:	e074      	b.n	800bb9c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10c      	bne.n	800bad2 <dir_sdi+0x56>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800babe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bac2:	2b03      	cmp	r3, #3
 800bac4:	d105      	bne.n	800bad2 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bacc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800bad0:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d111      	bne.n	800bafc <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bade:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800bae2:	461a      	mov	r2, r3
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d301      	bcc.n	800baee <dir_sdi+0x72>
			return FR_INT_ERR;
 800baea:	2302      	movs	r3, #2
 800baec:	e056      	b.n	800bb9c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800baf4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800baf8:	613b      	str	r3, [r7, #16]
 800bafa:	e032      	b.n	800bb62 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb02:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bb06:	011b      	lsls	r3, r3, #4
 800bb08:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800bb0a:	e01e      	b.n	800bb4a <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb12:	6979      	ldr	r1, [r7, #20]
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7ff fcbd 	bl	800b494 <get_fat>
 800bb1a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb22:	d101      	bne.n	800bb28 <dir_sdi+0xac>
 800bb24:	2301      	movs	r3, #1
 800bb26:	e039      	b.n	800bb9c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d907      	bls.n	800bb3e <dir_sdi+0xc2>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb38:	697a      	ldr	r2, [r7, #20]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d301      	bcc.n	800bb42 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800bb3e:	2302      	movs	r3, #2
 800bb40:	e02c      	b.n	800bb9c <dir_sdi+0x120>
			idx -= ic;
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d2dc      	bcs.n	800bb0c <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb58:	6979      	ldr	r1, [r7, #20]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7ff fc78 	bl	800b450 <clust2sect>
 800bb60:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	697a      	ldr	r2, [r7, #20]
 800bb66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d101      	bne.n	800bb74 <dir_sdi+0xf8>
 800bb70:	2302      	movs	r3, #2
 800bb72:	e013      	b.n	800bb9c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	091a      	lsrs	r2, r3, #4
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	441a      	add	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb88:	461a      	mov	r2, r3
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	f003 030f 	and.w	r3, r3, #15
 800bb90:	015b      	lsls	r3, r3, #5
 800bb92:	441a      	add	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3718      	adds	r7, #24
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bba4:	b590      	push	{r4, r7, lr}
 800bba6:	b087      	sub	sp, #28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d004      	beq.n	800bbca <dir_next+0x26>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <dir_next+0x2a>
		return FR_NO_FILE;
 800bbca:	2304      	movs	r3, #4
 800bbcc:	e0dd      	b.n	800bd8a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f003 030f 	and.w	r3, r3, #15
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f040 80c6 	bne.w	800bd66 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bbe0:	1c5a      	adds	r2, r3, #1
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10b      	bne.n	800bc0a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbf8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	4293      	cmp	r3, r2
 800bc02:	f0c0 80b0 	bcc.w	800bd66 <dir_next+0x1c2>
				return FR_NO_FILE;
 800bc06:	2304      	movs	r3, #4
 800bc08:	e0bf      	b.n	800bd8a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	091b      	lsrs	r3, r3, #4
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800bc14:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800bc18:	3a01      	subs	r2, #1
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f040 80a2 	bne.w	800bd66 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bc2e:	4619      	mov	r1, r3
 800bc30:	4610      	mov	r0, r2
 800bc32:	f7ff fc2f 	bl	800b494 <get_fat>
 800bc36:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d801      	bhi.n	800bc42 <dir_next+0x9e>
 800bc3e:	2302      	movs	r3, #2
 800bc40:	e0a3      	b.n	800bd8a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc48:	d101      	bne.n	800bc4e <dir_next+0xaa>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e09d      	b.n	800bd8a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d374      	bcc.n	800bd48 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d101      	bne.n	800bc68 <dir_next+0xc4>
 800bc64:	2304      	movs	r3, #4
 800bc66:	e090      	b.n	800bd8a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bc74:	4619      	mov	r1, r3
 800bc76:	4610      	mov	r0, r2
 800bc78:	f7ff fe2e 	bl	800b8d8 <create_chain>
 800bc7c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <dir_next+0xe4>
 800bc84:	2307      	movs	r3, #7
 800bc86:	e080      	b.n	800bd8a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d101      	bne.n	800bc92 <dir_next+0xee>
 800bc8e:	2302      	movs	r3, #2
 800bc90:	e07b      	b.n	800bd8a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc98:	d101      	bne.n	800bc9e <dir_next+0xfa>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e075      	b.n	800bd8a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7ff faaf 	bl	800b208 <sync_window>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <dir_next+0x110>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e06a      	b.n	800bd8a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bcba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7ff f88c 	bl	800adde <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800bcd2:	6979      	ldr	r1, [r7, #20]
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	f7ff fbbb 	bl	800b450 <clust2sect>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800bce0:	2300      	movs	r3, #0
 800bce2:	613b      	str	r3, [r7, #16]
 800bce4:	e01b      	b.n	800bd1e <dir_next+0x17a>
						dp->fs->wflag = 1;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bcec:	2201      	movs	r2, #1
 800bcee:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7ff fa85 	bl	800b208 <sync_window>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <dir_next+0x164>
 800bd04:	2301      	movs	r3, #1
 800bd06:	e040      	b.n	800bd8a <dir_next+0x1e6>
						dp->fs->winsect++;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd0e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800bd12:	3201      	adds	r2, #1
 800bd14:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	613b      	str	r3, [r7, #16]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd24:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bd28:	461a      	mov	r2, r3
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d3da      	bcc.n	800bce6 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd36:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd40:	693a      	ldr	r2, [r7, #16]
 800bd42:	1a8a      	subs	r2, r1, r2
 800bd44:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd56:	6979      	ldr	r1, [r7, #20]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7ff fb79 	bl	800b450 <clust2sect>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd76:	461a      	mov	r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f003 030f 	and.w	r3, r3, #15
 800bd7e:	015b      	lsls	r3, r3, #5
 800bd80:	441a      	add	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	371c      	adds	r7, #28
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd90      	pop	{r4, r7, pc}

0800bd92 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f7ff fe6c 	bl	800ba7c <dir_sdi>
 800bda4:	4603      	mov	r3, r0
 800bda6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bda8:	7bfb      	ldrb	r3, [r7, #15]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d131      	bne.n	800be12 <dir_alloc+0x80>
		n = 0;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	f7ff fa6a 	bl	800b29a <move_window>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800bdca:	7bfb      	ldrb	r3, [r7, #15]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d11f      	bne.n	800be10 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	2be5      	cmp	r3, #229	; 0xe5
 800bdda:	d005      	beq.n	800bde8 <dir_alloc+0x56>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d107      	bne.n	800bdf8 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	3301      	adds	r3, #1
 800bdec:	60bb      	str	r3, [r7, #8]
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d102      	bne.n	800bdfc <dir_alloc+0x6a>
 800bdf6:	e00c      	b.n	800be12 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7ff fed0 	bl	800bba4 <dir_next>
 800be04:	4603      	mov	r3, r0
 800be06:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800be08:	7bfb      	ldrb	r3, [r7, #15]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d0d1      	beq.n	800bdb2 <dir_alloc+0x20>
 800be0e:	e000      	b.n	800be12 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800be10:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800be12:	7bfb      	ldrb	r3, [r7, #15]
 800be14:	2b04      	cmp	r3, #4
 800be16:	d101      	bne.n	800be1c <dir_alloc+0x8a>
 800be18:	2307      	movs	r3, #7
 800be1a:	73fb      	strb	r3, [r7, #15]
	return res;
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800be26:	b480      	push	{r7}
 800be28:	b085      	sub	sp, #20
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
 800be2e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	331b      	adds	r3, #27
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	021b      	lsls	r3, r3, #8
 800be38:	b21a      	sxth	r2, r3
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	331a      	adds	r3, #26
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	b21b      	sxth	r3, r3
 800be42:	4313      	orrs	r3, r2
 800be44:	b21b      	sxth	r3, r3
 800be46:	b29b      	uxth	r3, r3
 800be48:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800be50:	2b03      	cmp	r3, #3
 800be52:	d10f      	bne.n	800be74 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	3315      	adds	r3, #21
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	021b      	lsls	r3, r3, #8
 800be5c:	b21a      	sxth	r2, r3
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	3314      	adds	r3, #20
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	b21b      	sxth	r3, r3
 800be66:	4313      	orrs	r3, r2
 800be68:	b21b      	sxth	r3, r3
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	041b      	lsls	r3, r3, #16
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4313      	orrs	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]

	return cl;
 800be74:	68fb      	ldr	r3, [r7, #12]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800be82:	b480      	push	{r7}
 800be84:	b083      	sub	sp, #12
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	331a      	adds	r3, #26
 800be90:	683a      	ldr	r2, [r7, #0]
 800be92:	b2d2      	uxtb	r2, r2
 800be94:	701a      	strb	r2, [r3, #0]
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	b29b      	uxth	r3, r3
 800be9a:	0a1b      	lsrs	r3, r3, #8
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	331b      	adds	r3, #27
 800bea2:	b2d2      	uxtb	r2, r2
 800bea4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	0c1a      	lsrs	r2, r3, #16
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	3314      	adds	r3, #20
 800beae:	b2d2      	uxtb	r2, r2
 800beb0:	701a      	strb	r2, [r3, #0]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	0c1b      	lsrs	r3, r3, #16
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	0a1b      	lsrs	r3, r3, #8
 800beba:	b29a      	uxth	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	3315      	adds	r3, #21
 800bec0:	b2d2      	uxtb	r2, r2
 800bec2:	701a      	strb	r2, [r3, #0]
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bed8:	2100      	movs	r1, #0
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f7ff fdce 	bl	800ba7c <dir_sdi>
 800bee0:	4603      	mov	r3, r0
 800bee2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <dir_find+0x1e>
 800beea:	7dfb      	ldrb	r3, [r7, #23]
 800beec:	e03b      	b.n	800bf66 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800befa:	4619      	mov	r1, r3
 800befc:	4610      	mov	r0, r2
 800befe:	f7ff f9cc 	bl	800b29a <move_window>
 800bf02:	4603      	mov	r3, r0
 800bf04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d128      	bne.n	800bf5e <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf12:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d102      	bne.n	800bf26 <dir_find+0x56>
 800bf20:	2304      	movs	r3, #4
 800bf22:	75fb      	strb	r3, [r7, #23]
 800bf24:	e01e      	b.n	800bf64 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	330b      	adds	r3, #11
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	f003 0308 	and.w	r3, r3, #8
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10a      	bne.n	800bf4a <dir_find+0x7a>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bf3a:	220b      	movs	r2, #11
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6938      	ldr	r0, [r7, #16]
 800bf40:	f7fe ff68 	bl	800ae14 <mem_cmp>
 800bf44:	4603      	mov	r3, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00b      	beq.n	800bf62 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff fe29 	bl	800bba4 <dir_next>
 800bf52:	4603      	mov	r3, r0
 800bf54:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bf56:	7dfb      	ldrb	r3, [r7, #23]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d0c8      	beq.n	800beee <dir_find+0x1e>
 800bf5c:	e002      	b.n	800bf64 <dir_find+0x94>
		if (res != FR_OK) break;
 800bf5e:	bf00      	nop
 800bf60:	e000      	b.n	800bf64 <dir_find+0x94>
			break;
 800bf62:	bf00      	nop

	return res;
 800bf64:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3718      	adds	r7, #24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b084      	sub	sp, #16
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bf76:	2101      	movs	r1, #1
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7ff ff0a 	bl	800bd92 <dir_alloc>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d126      	bne.n	800bfd6 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bf94:	4619      	mov	r1, r3
 800bf96:	4610      	mov	r0, r2
 800bf98:	f7ff f97f 	bl	800b29a <move_window>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d117      	bne.n	800bfd6 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bfac:	2220      	movs	r2, #32
 800bfae:	2100      	movs	r1, #0
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fe ff14 	bl	800adde <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bfc2:	220b      	movs	r2, #11
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	f7fe feeb 	bl	800ada0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800bfd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3710      	adds	r7, #16
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b088      	sub	sp, #32
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	60fb      	str	r3, [r7, #12]
 800bff0:	e002      	b.n	800bff8 <create_name+0x18>
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	3301      	adds	r3, #1
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	2b2f      	cmp	r3, #47	; 0x2f
 800bffe:	d0f8      	beq.n	800bff2 <create_name+0x12>
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b5c      	cmp	r3, #92	; 0x5c
 800c006:	d0f4      	beq.n	800bff2 <create_name+0x12>
	sfn = dp->fn;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c00e:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c010:	220b      	movs	r2, #11
 800c012:	2120      	movs	r1, #32
 800c014:	68b8      	ldr	r0, [r7, #8]
 800c016:	f7fe fee2 	bl	800adde <mem_set>
	si = i = b = 0; ni = 8;
 800c01a:	2300      	movs	r3, #0
 800c01c:	77fb      	strb	r3, [r7, #31]
 800c01e:	2300      	movs	r3, #0
 800c020:	613b      	str	r3, [r7, #16]
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	617b      	str	r3, [r7, #20]
 800c026:	2308      	movs	r3, #8
 800c028:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	1c5a      	adds	r2, r3, #1
 800c02e:	617a      	str	r2, [r7, #20]
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	4413      	add	r3, r2
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800c038:	7fbb      	ldrb	r3, [r7, #30]
 800c03a:	2b20      	cmp	r3, #32
 800c03c:	d953      	bls.n	800c0e6 <create_name+0x106>
 800c03e:	7fbb      	ldrb	r3, [r7, #30]
 800c040:	2b2f      	cmp	r3, #47	; 0x2f
 800c042:	d050      	beq.n	800c0e6 <create_name+0x106>
 800c044:	7fbb      	ldrb	r3, [r7, #30]
 800c046:	2b5c      	cmp	r3, #92	; 0x5c
 800c048:	d04d      	beq.n	800c0e6 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800c04a:	7fbb      	ldrb	r3, [r7, #30]
 800c04c:	2b2e      	cmp	r3, #46	; 0x2e
 800c04e:	d003      	beq.n	800c058 <create_name+0x78>
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	429a      	cmp	r2, r3
 800c056:	d30f      	bcc.n	800c078 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	2b08      	cmp	r3, #8
 800c05c:	d102      	bne.n	800c064 <create_name+0x84>
 800c05e:	7fbb      	ldrb	r3, [r7, #30]
 800c060:	2b2e      	cmp	r3, #46	; 0x2e
 800c062:	d001      	beq.n	800c068 <create_name+0x88>
 800c064:	2306      	movs	r3, #6
 800c066:	e073      	b.n	800c150 <create_name+0x170>
			i = 8; ni = 11;
 800c068:	2308      	movs	r3, #8
 800c06a:	613b      	str	r3, [r7, #16]
 800c06c:	230b      	movs	r3, #11
 800c06e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800c070:	7ffb      	ldrb	r3, [r7, #31]
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	77fb      	strb	r3, [r7, #31]
 800c076:	e035      	b.n	800c0e4 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c078:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	da08      	bge.n	800c092 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800c080:	7ffb      	ldrb	r3, [r7, #31]
 800c082:	f043 0303 	orr.w	r3, r3, #3
 800c086:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c088:	7fbb      	ldrb	r3, [r7, #30]
 800c08a:	3b80      	subs	r3, #128	; 0x80
 800c08c:	4a32      	ldr	r2, [pc, #200]	; (800c158 <create_name+0x178>)
 800c08e:	5cd3      	ldrb	r3, [r2, r3]
 800c090:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800c092:	7fbb      	ldrb	r3, [r7, #30]
 800c094:	4619      	mov	r1, r3
 800c096:	4831      	ldr	r0, [pc, #196]	; (800c15c <create_name+0x17c>)
 800c098:	f7fe fee3 	bl	800ae62 <chk_chr>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d001      	beq.n	800c0a6 <create_name+0xc6>
				return FR_INVALID_NAME;
 800c0a2:	2306      	movs	r3, #6
 800c0a4:	e054      	b.n	800c150 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800c0a6:	7fbb      	ldrb	r3, [r7, #30]
 800c0a8:	2b40      	cmp	r3, #64	; 0x40
 800c0aa:	d907      	bls.n	800c0bc <create_name+0xdc>
 800c0ac:	7fbb      	ldrb	r3, [r7, #30]
 800c0ae:	2b5a      	cmp	r3, #90	; 0x5a
 800c0b0:	d804      	bhi.n	800c0bc <create_name+0xdc>
				b |= 2;
 800c0b2:	7ffb      	ldrb	r3, [r7, #31]
 800c0b4:	f043 0302 	orr.w	r3, r3, #2
 800c0b8:	77fb      	strb	r3, [r7, #31]
 800c0ba:	e00c      	b.n	800c0d6 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800c0bc:	7fbb      	ldrb	r3, [r7, #30]
 800c0be:	2b60      	cmp	r3, #96	; 0x60
 800c0c0:	d909      	bls.n	800c0d6 <create_name+0xf6>
 800c0c2:	7fbb      	ldrb	r3, [r7, #30]
 800c0c4:	2b7a      	cmp	r3, #122	; 0x7a
 800c0c6:	d806      	bhi.n	800c0d6 <create_name+0xf6>
					b |= 1; c -= 0x20;
 800c0c8:	7ffb      	ldrb	r3, [r7, #31]
 800c0ca:	f043 0301 	orr.w	r3, r3, #1
 800c0ce:	77fb      	strb	r3, [r7, #31]
 800c0d0:	7fbb      	ldrb	r3, [r7, #30]
 800c0d2:	3b20      	subs	r3, #32
 800c0d4:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	613a      	str	r2, [r7, #16]
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	4413      	add	r3, r2
 800c0e0:	7fba      	ldrb	r2, [r7, #30]
 800c0e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c0e4:	e7a1      	b.n	800c02a <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	441a      	add	r2, r3
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800c0f0:	7fbb      	ldrb	r3, [r7, #30]
 800c0f2:	2b20      	cmp	r3, #32
 800c0f4:	d801      	bhi.n	800c0fa <create_name+0x11a>
 800c0f6:	2304      	movs	r3, #4
 800c0f8:	e000      	b.n	800c0fc <create_name+0x11c>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <create_name+0x128>
 800c104:	2306      	movs	r3, #6
 800c106:	e023      	b.n	800c150 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2be5      	cmp	r3, #229	; 0xe5
 800c10e:	d102      	bne.n	800c116 <create_name+0x136>
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	2205      	movs	r2, #5
 800c114:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	2b08      	cmp	r3, #8
 800c11a:	d102      	bne.n	800c122 <create_name+0x142>
 800c11c:	7ffb      	ldrb	r3, [r7, #31]
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800c122:	7ffb      	ldrb	r3, [r7, #31]
 800c124:	f003 0303 	and.w	r3, r3, #3
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d103      	bne.n	800c134 <create_name+0x154>
 800c12c:	7fbb      	ldrb	r3, [r7, #30]
 800c12e:	f043 0310 	orr.w	r3, r3, #16
 800c132:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800c134:	7ffb      	ldrb	r3, [r7, #31]
 800c136:	f003 030c 	and.w	r3, r3, #12
 800c13a:	2b04      	cmp	r3, #4
 800c13c:	d103      	bne.n	800c146 <create_name+0x166>
 800c13e:	7fbb      	ldrb	r3, [r7, #30]
 800c140:	f043 0308 	orr.w	r3, r3, #8
 800c144:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	330b      	adds	r3, #11
 800c14a:	7fba      	ldrb	r2, [r7, #30]
 800c14c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c14e:	2300      	movs	r3, #0
#endif
}
 800c150:	4618      	mov	r0, r3
 800c152:	3720      	adds	r7, #32
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	08012bd4 	.word	0x08012bd4
 800c15c:	08012b4c 	.word	0x08012b4c

0800c160 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	2b2f      	cmp	r3, #47	; 0x2f
 800c170:	d003      	beq.n	800c17a <follow_path+0x1a>
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	2b5c      	cmp	r3, #92	; 0x5c
 800c178:	d102      	bne.n	800c180 <follow_path+0x20>
		path++;
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	3301      	adds	r3, #1
 800c17e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	2b1f      	cmp	r3, #31
 800c18e:	d80a      	bhi.n	800c1a6 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800c190:	2100      	movs	r1, #0
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7ff fc72 	bl	800ba7c <dir_sdi>
 800c198:	4603      	mov	r3, r0
 800c19a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800c1a4:	e045      	b.n	800c232 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c1a6:	463b      	mov	r3, r7
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7ff ff18 	bl	800bfe0 <create_name>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c1b4:	7bfb      	ldrb	r3, [r7, #15]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d136      	bne.n	800c228 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f7ff fe88 	bl	800bed0 <dir_find>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c1ca:	7adb      	ldrb	r3, [r3, #11]
 800c1cc:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00a      	beq.n	800c1ea <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	2b04      	cmp	r3, #4
 800c1d8:	d128      	bne.n	800c22c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c1da:	7bbb      	ldrb	r3, [r7, #14]
 800c1dc:	f003 0304 	and.w	r3, r3, #4
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d123      	bne.n	800c22c <follow_path+0xcc>
 800c1e4:	2305      	movs	r3, #5
 800c1e6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800c1e8:	e020      	b.n	800c22c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	f003 0304 	and.w	r3, r3, #4
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d11d      	bne.n	800c230 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1fa:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	330b      	adds	r3, #11
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	f003 0310 	and.w	r3, r3, #16
 800c206:	2b00      	cmp	r3, #0
 800c208:	d102      	bne.n	800c210 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800c20a:	2305      	movs	r3, #5
 800c20c:	73fb      	strb	r3, [r7, #15]
 800c20e:	e010      	b.n	800c232 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c216:	68b9      	ldr	r1, [r7, #8]
 800c218:	4618      	mov	r0, r3
 800c21a:	f7ff fe04 	bl	800be26 <ld_clust>
 800c21e:	4602      	mov	r2, r0
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c226:	e7be      	b.n	800c1a6 <follow_path+0x46>
			if (res != FR_OK) break;
 800c228:	bf00      	nop
 800c22a:	e002      	b.n	800c232 <follow_path+0xd2>
				break;
 800c22c:	bf00      	nop
 800c22e:	e000      	b.n	800c232 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c230:	bf00      	nop
		}
	}

	return res;
 800c232:	7bfb      	ldrb	r3, [r7, #15]
}
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b087      	sub	sp, #28
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c248:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d031      	beq.n	800c2b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	617b      	str	r3, [r7, #20]
 800c258:	e002      	b.n	800c260 <get_ldnumber+0x24>
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	3301      	adds	r3, #1
 800c25e:	617b      	str	r3, [r7, #20]
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b20      	cmp	r3, #32
 800c266:	d903      	bls.n	800c270 <get_ldnumber+0x34>
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	2b3a      	cmp	r3, #58	; 0x3a
 800c26e:	d1f4      	bne.n	800c25a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	2b3a      	cmp	r3, #58	; 0x3a
 800c276:	d11c      	bne.n	800c2b2 <get_ldnumber+0x76>
			tp = *path;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	1c5a      	adds	r2, r3, #1
 800c282:	60fa      	str	r2, [r7, #12]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	3b30      	subs	r3, #48	; 0x30
 800c288:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	2b09      	cmp	r3, #9
 800c28e:	d80e      	bhi.n	800c2ae <get_ldnumber+0x72>
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	429a      	cmp	r2, r3
 800c296:	d10a      	bne.n	800c2ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d107      	bne.n	800c2ae <get_ldnumber+0x72>
					vol = (int)i;
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	617b      	str	r3, [r7, #20]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	697a      	ldr	r2, [r7, #20]
 800c2ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	e002      	b.n	800c2b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c2b6:	693b      	ldr	r3, [r7, #16]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	371c      	adds	r7, #28
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2dc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7fe ffd9 	bl	800b29a <move_window>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d001      	beq.n	800c2f2 <check_fs+0x2e>
		return 3;
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	e04a      	b.n	800c388 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	021b      	lsls	r3, r3, #8
 800c2fe:	b21a      	sxth	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c306:	b21b      	sxth	r3, r3
 800c308:	4313      	orrs	r3, r2
 800c30a:	b21b      	sxth	r3, r3
 800c30c:	4a20      	ldr	r2, [pc, #128]	; (800c390 <check_fs+0xcc>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d001      	beq.n	800c316 <check_fs+0x52>
		return 2;
 800c312:	2302      	movs	r3, #2
 800c314:	e038      	b.n	800c388 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	3336      	adds	r3, #54	; 0x36
 800c31a:	3303      	adds	r3, #3
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	061a      	lsls	r2, r3, #24
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	3336      	adds	r3, #54	; 0x36
 800c324:	3302      	adds	r3, #2
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	041b      	lsls	r3, r3, #16
 800c32a:	4313      	orrs	r3, r2
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	3236      	adds	r2, #54	; 0x36
 800c330:	3201      	adds	r2, #1
 800c332:	7812      	ldrb	r2, [r2, #0]
 800c334:	0212      	lsls	r2, r2, #8
 800c336:	4313      	orrs	r3, r2
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800c33e:	4313      	orrs	r3, r2
 800c340:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c344:	4a13      	ldr	r2, [pc, #76]	; (800c394 <check_fs+0xd0>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d101      	bne.n	800c34e <check_fs+0x8a>
		return 0;
 800c34a:	2300      	movs	r3, #0
 800c34c:	e01c      	b.n	800c388 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	3352      	adds	r3, #82	; 0x52
 800c352:	3303      	adds	r3, #3
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	061a      	lsls	r2, r3, #24
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	3352      	adds	r3, #82	; 0x52
 800c35c:	3302      	adds	r3, #2
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	041b      	lsls	r3, r3, #16
 800c362:	4313      	orrs	r3, r2
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	3252      	adds	r2, #82	; 0x52
 800c368:	3201      	adds	r2, #1
 800c36a:	7812      	ldrb	r2, [r2, #0]
 800c36c:	0212      	lsls	r2, r2, #8
 800c36e:	4313      	orrs	r3, r2
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800c376:	4313      	orrs	r3, r2
 800c378:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c37c:	4a05      	ldr	r2, [pc, #20]	; (800c394 <check_fs+0xd0>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d101      	bne.n	800c386 <check_fs+0xc2>
		return 0;
 800c382:	2300      	movs	r3, #0
 800c384:	e000      	b.n	800c388 <check_fs+0xc4>

	return 1;
 800c386:	2301      	movs	r3, #1
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	ffffaa55 	.word	0xffffaa55
 800c394:	00544146 	.word	0x00544146

0800c398 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b096      	sub	sp, #88	; 0x58
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c3ac:	68b8      	ldr	r0, [r7, #8]
 800c3ae:	f7ff ff45 	bl	800c23c <get_ldnumber>
 800c3b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	da01      	bge.n	800c3be <find_volume+0x26>
 800c3ba:	230b      	movs	r3, #11
 800c3bc:	e2aa      	b.n	800c914 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c3be:	4a9e      	ldr	r2, [pc, #632]	; (800c638 <find_volume+0x2a0>)
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <find_volume+0x3a>
 800c3ce:	230c      	movs	r3, #12
 800c3d0:	e2a0      	b.n	800c914 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3d6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d01b      	beq.n	800c41a <find_volume+0x82>
		stat = disk_status(fs->drv);
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fe fc3b 	bl	800ac64 <disk_status>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c3f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3f8:	f003 0301 	and.w	r3, r3, #1
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d10c      	bne.n	800c41a <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800c400:	79fb      	ldrb	r3, [r7, #7]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d007      	beq.n	800c416 <find_volume+0x7e>
 800c406:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c40a:	f003 0304 	and.w	r3, r3, #4
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d001      	beq.n	800c416 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800c412:	230a      	movs	r3, #10
 800c414:	e27e      	b.n	800c914 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 800c416:	2300      	movs	r3, #0
 800c418:	e27c      	b.n	800c914 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41c:	2200      	movs	r2, #0
 800c41e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c424:	b2da      	uxtb	r2, r3
 800c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c428:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c432:	4618      	mov	r0, r3
 800c434:	f7fe fc30 	bl	800ac98 <disk_initialize>
 800c438:	4603      	mov	r3, r0
 800c43a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800c43e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c442:	f003 0301 	and.w	r3, r3, #1
 800c446:	2b00      	cmp	r3, #0
 800c448:	d001      	beq.n	800c44e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c44a:	2303      	movs	r3, #3
 800c44c:	e262      	b.n	800c914 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d007      	beq.n	800c464 <find_volume+0xcc>
 800c454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c458:	f003 0304 	and.w	r3, r3, #4
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d001      	beq.n	800c464 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800c460:	230a      	movs	r3, #10
 800c462:	e257      	b.n	800c914 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800c468:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c46a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c46c:	f7ff ff2a 	bl	800c2c4 <check_fs>
 800c470:	4603      	mov	r3, r0
 800c472:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800c476:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d155      	bne.n	800c52a <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c47e:	2300      	movs	r3, #0
 800c480:	643b      	str	r3, [r7, #64]	; 0x40
 800c482:	e029      	b.n	800c4d8 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800c484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c488:	011b      	lsls	r3, r3, #4
 800c48a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c48e:	4413      	add	r3, r2
 800c490:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800c492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c494:	3304      	adds	r3, #4
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d012      	beq.n	800c4c2 <find_volume+0x12a>
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	330b      	adds	r3, #11
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	061a      	lsls	r2, r3, #24
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a6:	330a      	adds	r3, #10
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	041b      	lsls	r3, r3, #16
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4b0:	3209      	adds	r2, #9
 800c4b2:	7812      	ldrb	r2, [r2, #0]
 800c4b4:	0212      	lsls	r2, r2, #8
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ba:	3208      	adds	r2, #8
 800c4bc:	7812      	ldrb	r2, [r2, #0]
 800c4be:	431a      	orrs	r2, r3
 800c4c0:	e000      	b.n	800c4c4 <find_volume+0x12c>
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c4cc:	440b      	add	r3, r1
 800c4ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	643b      	str	r3, [r7, #64]	; 0x40
 800c4d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4da:	2b03      	cmp	r3, #3
 800c4dc:	d9d2      	bls.n	800c484 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800c4de:	2300      	movs	r3, #0
 800c4e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d002      	beq.n	800c4ee <find_volume+0x156>
 800c4e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800c4ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c4f6:	4413      	add	r3, r2
 800c4f8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c4fc:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800c4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c500:	2b00      	cmp	r3, #0
 800c502:	d005      	beq.n	800c510 <find_volume+0x178>
 800c504:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c506:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c508:	f7ff fedc 	bl	800c2c4 <check_fs>
 800c50c:	4603      	mov	r3, r0
 800c50e:	e000      	b.n	800c512 <find_volume+0x17a>
 800c510:	2302      	movs	r3, #2
 800c512:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800c516:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d005      	beq.n	800c52a <find_volume+0x192>
 800c51e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c520:	3301      	adds	r3, #1
 800c522:	643b      	str	r3, [r7, #64]	; 0x40
 800c524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c526:	2b03      	cmp	r3, #3
 800c528:	d9e1      	bls.n	800c4ee <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c52a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c52e:	2b03      	cmp	r3, #3
 800c530:	d101      	bne.n	800c536 <find_volume+0x19e>
 800c532:	2301      	movs	r3, #1
 800c534:	e1ee      	b.n	800c914 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800c536:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <find_volume+0x1aa>
 800c53e:	230d      	movs	r3, #13
 800c540:	e1e8      	b.n	800c914 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c544:	7b1b      	ldrb	r3, [r3, #12]
 800c546:	021b      	lsls	r3, r3, #8
 800c548:	b21a      	sxth	r2, r3
 800c54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54c:	7adb      	ldrb	r3, [r3, #11]
 800c54e:	b21b      	sxth	r3, r3
 800c550:	4313      	orrs	r3, r2
 800c552:	b21b      	sxth	r3, r3
 800c554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c558:	d001      	beq.n	800c55e <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 800c55a:	230d      	movs	r3, #13
 800c55c:	e1da      	b.n	800c914 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c560:	7ddb      	ldrb	r3, [r3, #23]
 800c562:	021b      	lsls	r3, r3, #8
 800c564:	b21a      	sxth	r2, r3
 800c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c568:	7d9b      	ldrb	r3, [r3, #22]
 800c56a:	b21b      	sxth	r3, r3
 800c56c:	4313      	orrs	r3, r2
 800c56e:	b21b      	sxth	r3, r3
 800c570:	b29b      	uxth	r3, r3
 800c572:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800c574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c576:	2b00      	cmp	r3, #0
 800c578:	d112      	bne.n	800c5a0 <find_volume+0x208>
 800c57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c580:	061a      	lsls	r2, r3, #24
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c588:	041b      	lsls	r3, r3, #16
 800c58a:	4313      	orrs	r3, r2
 800c58c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c58e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c592:	0212      	lsls	r2, r2, #8
 800c594:	4313      	orrs	r3, r2
 800c596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c598:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c59c:	4313      	orrs	r3, r2
 800c59e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800c5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5aa:	7c1a      	ldrb	r2, [r3, #16]
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ae:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800c5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d006      	beq.n	800c5ca <find_volume+0x232>
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5be:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d001      	beq.n	800c5ca <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800c5c6:	230d      	movs	r3, #13
 800c5c8:	e1a4      	b.n	800c914 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800c5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5cc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d4:	fb02 f303 	mul.w	r3, r2, r3
 800c5d8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800c5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5dc:	7b5a      	ldrb	r2, [r3, #13]
 800c5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800c5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00a      	beq.n	800c604 <find_volume+0x26c>
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	4013      	ands	r3, r2
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800c604:	230d      	movs	r3, #13
 800c606:	e185      	b.n	800c914 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60a:	7c9b      	ldrb	r3, [r3, #18]
 800c60c:	021b      	lsls	r3, r3, #8
 800c60e:	b21a      	sxth	r2, r3
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	7c5b      	ldrb	r3, [r3, #17]
 800c614:	b21b      	sxth	r3, r3
 800c616:	4313      	orrs	r3, r2
 800c618:	b21b      	sxth	r3, r3
 800c61a:	b29a      	uxth	r2, r3
 800c61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800c622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c624:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c628:	f003 030f 	and.w	r3, r3, #15
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d004      	beq.n	800c63c <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800c632:	230d      	movs	r3, #13
 800c634:	e16e      	b.n	800c914 <find_volume+0x57c>
 800c636:	bf00      	nop
 800c638:	2000032c 	.word	0x2000032c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800c63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63e:	7d1b      	ldrb	r3, [r3, #20]
 800c640:	021b      	lsls	r3, r3, #8
 800c642:	b21a      	sxth	r2, r3
 800c644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c646:	7cdb      	ldrb	r3, [r3, #19]
 800c648:	b21b      	sxth	r3, r3
 800c64a:	4313      	orrs	r3, r2
 800c64c:	b21b      	sxth	r3, r3
 800c64e:	b29b      	uxth	r3, r3
 800c650:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800c652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c654:	2b00      	cmp	r3, #0
 800c656:	d112      	bne.n	800c67e <find_volume+0x2e6>
 800c658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c65e:	061a      	lsls	r2, r3, #24
 800c660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c662:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c666:	041b      	lsls	r3, r3, #16
 800c668:	4313      	orrs	r3, r2
 800c66a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c66c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800c670:	0212      	lsls	r2, r2, #8
 800c672:	4313      	orrs	r3, r2
 800c674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c676:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800c67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c680:	7bdb      	ldrb	r3, [r3, #15]
 800c682:	021b      	lsls	r3, r3, #8
 800c684:	b21a      	sxth	r2, r3
 800c686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c688:	7b9b      	ldrb	r3, [r3, #14]
 800c68a:	b21b      	sxth	r3, r3
 800c68c:	4313      	orrs	r3, r2
 800c68e:	b21b      	sxth	r3, r3
 800c690:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800c692:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c694:	2b00      	cmp	r3, #0
 800c696:	d101      	bne.n	800c69c <find_volume+0x304>
 800c698:	230d      	movs	r3, #13
 800c69a:	e13b      	b.n	800c914 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800c69c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c69e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6a0:	4413      	add	r3, r2
 800c6a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6a4:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800c6a8:	0912      	lsrs	r2, r2, #4
 800c6aa:	b292      	uxth	r2, r2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c6b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d201      	bcs.n	800c6bc <find_volume+0x324>
 800c6b8:	230d      	movs	r3, #13
 800c6ba:	e12b      	b.n	800c914 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800c6bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6c4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800c6c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6cc:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800c6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d101      	bne.n	800c6d8 <find_volume+0x340>
 800c6d4:	230d      	movs	r3, #13
 800c6d6:	e11d      	b.n	800c914 <find_volume+0x57c>
	fmt = FS_FAT12;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800c6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d902      	bls.n	800c6ee <find_volume+0x356>
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d902      	bls.n	800c6fe <find_volume+0x366>
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c700:	1c9a      	adds	r2, r3, #2
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800c708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c70c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800c710:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c714:	441a      	add	r2, r3
 800c716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c718:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800c71c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c720:	441a      	add	r2, r3
 800c722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c724:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800c728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c72c:	2b03      	cmp	r3, #3
 800c72e:	d121      	bne.n	800c774 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c736:	2b00      	cmp	r3, #0
 800c738:	d001      	beq.n	800c73e <find_volume+0x3a6>
 800c73a:	230d      	movs	r3, #13
 800c73c:	e0ea      	b.n	800c914 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800c73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c740:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c744:	061a      	lsls	r2, r3, #24
 800c746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c748:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c74c:	041b      	lsls	r3, r3, #16
 800c74e:	4313      	orrs	r3, r2
 800c750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c752:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c756:	0212      	lsls	r2, r2, #8
 800c758:	4313      	orrs	r3, r2
 800c75a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c75c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c760:	431a      	orrs	r2, r3
 800c762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c764:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800c768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	647b      	str	r3, [r7, #68]	; 0x44
 800c772:	e025      	b.n	800c7c0 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800c774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c776:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d101      	bne.n	800c782 <find_volume+0x3ea>
 800c77e:	230d      	movs	r3, #13
 800c780:	e0c8      	b.n	800c914 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800c782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c784:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800c788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c78a:	441a      	add	r2, r3
 800c78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c792:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c796:	2b02      	cmp	r3, #2
 800c798:	d104      	bne.n	800c7a4 <find_volume+0x40c>
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	e00c      	b.n	800c7be <find_volume+0x426>
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	4413      	add	r3, r2
 800c7b0:	085a      	lsrs	r2, r3, #1
 800c7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800c7be:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c7c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c7cc:	0a5b      	lsrs	r3, r3, #9
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d201      	bcs.n	800c7d6 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800c7d2:	230d      	movs	r3, #13
 800c7d4:	e09e      	b.n	800c914 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800c7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	2280      	movs	r2, #128	; 0x80
 800c7f0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800c7f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7f8:	2b03      	cmp	r3, #3
 800c7fa:	d177      	bne.n	800c8ec <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c802:	021b      	lsls	r3, r3, #8
 800c804:	b21a      	sxth	r2, r3
 800c806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c808:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c80c:	b21b      	sxth	r3, r3
 800c80e:	4313      	orrs	r3, r2
 800c810:	b21b      	sxth	r3, r3
 800c812:	2b01      	cmp	r3, #1
 800c814:	d16a      	bne.n	800c8ec <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800c816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c818:	3301      	adds	r3, #1
 800c81a:	4619      	mov	r1, r3
 800c81c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c81e:	f7fe fd3c 	bl	800b29a <move_window>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d161      	bne.n	800c8ec <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 800c828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c832:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800c836:	021b      	lsls	r3, r3, #8
 800c838:	b21a      	sxth	r2, r3
 800c83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c840:	b21b      	sxth	r3, r3
 800c842:	4313      	orrs	r3, r2
 800c844:	b21b      	sxth	r3, r3
 800c846:	4a35      	ldr	r2, [pc, #212]	; (800c91c <find_volume+0x584>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d14f      	bne.n	800c8ec <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	78db      	ldrb	r3, [r3, #3]
 800c850:	061a      	lsls	r2, r3, #24
 800c852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c854:	789b      	ldrb	r3, [r3, #2]
 800c856:	041b      	lsls	r3, r3, #16
 800c858:	4313      	orrs	r3, r2
 800c85a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c85c:	7852      	ldrb	r2, [r2, #1]
 800c85e:	0212      	lsls	r2, r2, #8
 800c860:	4313      	orrs	r3, r2
 800c862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c864:	7812      	ldrb	r2, [r2, #0]
 800c866:	4313      	orrs	r3, r2
 800c868:	4a2d      	ldr	r2, [pc, #180]	; (800c920 <find_volume+0x588>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d13e      	bne.n	800c8ec <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800c86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c870:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800c874:	061a      	lsls	r2, r3, #24
 800c876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c878:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800c87c:	041b      	lsls	r3, r3, #16
 800c87e:	4313      	orrs	r3, r2
 800c880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c882:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800c886:	0212      	lsls	r2, r2, #8
 800c888:	4313      	orrs	r3, r2
 800c88a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c88c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800c890:	4313      	orrs	r3, r2
 800c892:	4a24      	ldr	r2, [pc, #144]	; (800c924 <find_volume+0x58c>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d129      	bne.n	800c8ec <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800c89e:	061a      	lsls	r2, r3, #24
 800c8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800c8a6:	041b      	lsls	r3, r3, #16
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8ac:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800c8b0:	0212      	lsls	r2, r2, #8
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8b6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800c8ba:	431a      	orrs	r2, r3
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800c8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c4:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800c8c8:	061a      	lsls	r2, r3, #24
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8cc:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800c8d0:	041b      	lsls	r3, r3, #16
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8d6:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800c8da:	0212      	lsls	r2, r2, #8
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8e0:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800c8e4:	431a      	orrs	r2, r3
 800c8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c8f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800c8f6:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <find_volume+0x590>)
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	4b0a      	ldr	r3, [pc, #40]	; (800c928 <find_volume+0x590>)
 800c900:	801a      	strh	r2, [r3, #0]
 800c902:	4b09      	ldr	r3, [pc, #36]	; (800c928 <find_volume+0x590>)
 800c904:	881a      	ldrh	r2, [r3, #0]
 800c906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c908:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800c90c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c90e:	f7fe fc51 	bl	800b1b4 <clear_lock>
#endif

	return FR_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3758      	adds	r7, #88	; 0x58
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	ffffaa55 	.word	0xffffaa55
 800c920:	41615252 	.word	0x41615252
 800c924:	61417272 	.word	0x61417272
 800c928:	20000330 	.word	0x20000330

0800c92c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d022      	beq.n	800c984 <validate+0x58>
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c944:	2b00      	cmp	r3, #0
 800c946:	d01d      	beq.n	800c984 <validate+0x58>
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c94e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c952:	2b00      	cmp	r3, #0
 800c954:	d016      	beq.n	800c984 <validate+0x58>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c95c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800c966:	429a      	cmp	r2, r3
 800c968:	d10c      	bne.n	800c984 <validate+0x58>
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c970:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c974:	4618      	mov	r0, r3
 800c976:	f7fe f975 	bl	800ac64 <disk_status>
 800c97a:	4603      	mov	r3, r0
 800c97c:	f003 0301 	and.w	r3, r3, #1
 800c980:	2b00      	cmp	r3, #0
 800c982:	d001      	beq.n	800c988 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800c984:	2309      	movs	r3, #9
 800c986:	e000      	b.n	800c98a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
	...

0800c994 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b088      	sub	sp, #32
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800c9a6:	f107 0310 	add.w	r3, r7, #16
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7ff fc46 	bl	800c23c <get_ldnumber>
 800c9b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	da01      	bge.n	800c9bc <f_mount+0x28>
 800c9b8:	230b      	movs	r3, #11
 800c9ba:	e02d      	b.n	800ca18 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c9bc:	4a18      	ldr	r2, [pc, #96]	; (800ca20 <f_mount+0x8c>)
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d006      	beq.n	800c9da <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800c9cc:	69b8      	ldr	r0, [r7, #24]
 800c9ce:	f7fe fbf1 	bl	800b1b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d003      	beq.n	800c9e8 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	490d      	ldr	r1, [pc, #52]	; (800ca20 <f_mount+0x8c>)
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d002      	beq.n	800c9fe <f_mount+0x6a>
 800c9f8:	79fb      	ldrb	r3, [r7, #7]
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d001      	beq.n	800ca02 <f_mount+0x6e>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	e00a      	b.n	800ca18 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800ca02:	f107 0108 	add.w	r1, r7, #8
 800ca06:	f107 030c 	add.w	r3, r7, #12
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7ff fcc3 	bl	800c398 <find_volume>
 800ca12:	4603      	mov	r3, r0
 800ca14:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3720      	adds	r7, #32
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	2000032c 	.word	0x2000032c

0800ca24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	f107 030c 	add.w	r3, r7, #12
 800ca30:	6018      	str	r0, [r3, #0]
 800ca32:	f107 0308 	add.w	r3, r7, #8
 800ca36:	6019      	str	r1, [r3, #0]
 800ca38:	1dfb      	adds	r3, r7, #7
 800ca3a:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800ca3c:	f107 030c 	add.w	r3, r7, #12
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <f_open+0x26>
 800ca46:	2309      	movs	r3, #9
 800ca48:	e1f2      	b.n	800ce30 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 800ca4a:	f107 030c 	add.w	r3, r7, #12
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2200      	movs	r2, #0
 800ca52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800ca56:	1dfb      	adds	r3, r7, #7
 800ca58:	1dfa      	adds	r2, r7, #7
 800ca5a:	7812      	ldrb	r2, [r2, #0]
 800ca5c:	f002 021f 	and.w	r2, r2, #31
 800ca60:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800ca62:	1dfb      	adds	r3, r7, #7
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	f023 0301 	bic.w	r3, r3, #1
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	f107 0108 	add.w	r1, r7, #8
 800ca70:	f107 0320 	add.w	r3, r7, #32
 800ca74:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7ff fc8d 	bl	800c398 <find_volume>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800ca84:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f040 81cf 	bne.w	800ce2c <f_open+0x408>
		INIT_BUF(dj);
 800ca8e:	f107 0320 	add.w	r3, r7, #32
 800ca92:	f107 0214 	add.w	r2, r7, #20
 800ca96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800ca9a:	f107 0308 	add.w	r3, r7, #8
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	f107 0320 	add.w	r3, r7, #32
 800caa4:	4611      	mov	r1, r2
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7ff fb5a 	bl	800c160 <follow_path>
 800caac:	4603      	mov	r3, r0
 800caae:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800cab2:	f107 0320 	add.w	r3, r7, #32
 800cab6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800caba:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cabe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d11a      	bne.n	800cafc <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 800cac6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d103      	bne.n	800cad6 <f_open+0xb2>
				res = FR_INVALID_NAME;
 800cace:	2306      	movs	r3, #6
 800cad0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800cad4:	e012      	b.n	800cafc <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cad6:	1dfb      	adds	r3, r7, #7
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	f023 0301 	bic.w	r3, r3, #1
 800cade:	2b00      	cmp	r3, #0
 800cae0:	bf14      	ite	ne
 800cae2:	2301      	movne	r3, #1
 800cae4:	2300      	moveq	r3, #0
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	461a      	mov	r2, r3
 800caea:	f107 0320 	add.w	r3, r7, #32
 800caee:	4611      	mov	r1, r2
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fe f9d1 	bl	800ae98 <chk_lock>
 800caf6:	4603      	mov	r3, r0
 800caf8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cafc:	1dfb      	adds	r3, r7, #7
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	f003 031c 	and.w	r3, r3, #28
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f000 80cc 	beq.w	800cca2 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 800cb0a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d01f      	beq.n	800cb52 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800cb12:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cb16:	2b04      	cmp	r3, #4
 800cb18:	d10e      	bne.n	800cb38 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cb1a:	f7fe fa2b 	bl	800af74 <enq_lock>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d006      	beq.n	800cb32 <f_open+0x10e>
 800cb24:	f107 0320 	add.w	r3, r7, #32
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7ff fa20 	bl	800bf6e <dir_register>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	e000      	b.n	800cb34 <f_open+0x110>
 800cb32:	2312      	movs	r3, #18
 800cb34:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cb38:	1dfb      	adds	r3, r7, #7
 800cb3a:	1dfa      	adds	r2, r7, #7
 800cb3c:	7812      	ldrb	r2, [r2, #0]
 800cb3e:	f042 0208 	orr.w	r2, r2, #8
 800cb42:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800cb44:	f107 0320 	add.w	r3, r7, #32
 800cb48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cb4c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800cb50:	e014      	b.n	800cb7c <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cb52:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cb56:	330b      	adds	r3, #11
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	f003 0311 	and.w	r3, r3, #17
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d003      	beq.n	800cb6a <f_open+0x146>
					res = FR_DENIED;
 800cb62:	2307      	movs	r3, #7
 800cb64:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800cb68:	e008      	b.n	800cb7c <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800cb6a:	1dfb      	adds	r3, r7, #7
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	f003 0304 	and.w	r3, r3, #4
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d002      	beq.n	800cb7c <f_open+0x158>
						res = FR_EXIST;
 800cb76:	2308      	movs	r3, #8
 800cb78:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cb7c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f040 80af 	bne.w	800cce4 <f_open+0x2c0>
 800cb86:	1dfb      	adds	r3, r7, #7
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	f003 0308 	and.w	r3, r3, #8
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	f000 80a8 	beq.w	800cce4 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 800cb94:	f7fd fb28 	bl	800a1e8 <get_fattime>
 800cb98:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800cb9c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cba0:	330e      	adds	r3, #14
 800cba2:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800cba6:	b2d2      	uxtb	r2, r2
 800cba8:	701a      	strb	r2, [r3, #0]
 800cbaa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	0a1b      	lsrs	r3, r3, #8
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cbb8:	330f      	adds	r3, #15
 800cbba:	b2d2      	uxtb	r2, r2
 800cbbc:	701a      	strb	r2, [r3, #0]
 800cbbe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800cbc2:	0c1a      	lsrs	r2, r3, #16
 800cbc4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cbc8:	3310      	adds	r3, #16
 800cbca:	b2d2      	uxtb	r2, r2
 800cbcc:	701a      	strb	r2, [r3, #0]
 800cbce:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800cbd2:	0e1a      	lsrs	r2, r3, #24
 800cbd4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cbd8:	3311      	adds	r3, #17
 800cbda:	b2d2      	uxtb	r2, r2
 800cbdc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800cbde:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cbe2:	330b      	adds	r3, #11
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800cbe8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cbec:	331c      	adds	r3, #28
 800cbee:	2200      	movs	r2, #0
 800cbf0:	701a      	strb	r2, [r3, #0]
 800cbf2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cbf6:	331d      	adds	r3, #29
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	701a      	strb	r2, [r3, #0]
 800cbfc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cc00:	331e      	adds	r3, #30
 800cc02:	2200      	movs	r2, #0
 800cc04:	701a      	strb	r2, [r3, #0]
 800cc06:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cc0a:	331f      	adds	r3, #31
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800cc10:	f107 0320 	add.w	r3, r7, #32
 800cc14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cc18:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7ff f902 	bl	800be26 <ld_clust>
 800cc22:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800cc26:	2100      	movs	r1, #0
 800cc28:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800cc2c:	f7ff f929 	bl	800be82 <st_clust>
				dj.fs->wflag = 1;
 800cc30:	f107 0320 	add.w	r3, r7, #32
 800cc34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cc38:	2201      	movs	r2, #1
 800cc3a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800cc3e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d04e      	beq.n	800cce4 <f_open+0x2c0>
					dw = dj.fs->winsect;
 800cc46:	f107 0320 	add.w	r3, r7, #32
 800cc4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cc4e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800cc52:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800cc56:	f107 0320 	add.w	r3, r7, #32
 800cc5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cc5e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fe fdde 	bl	800b824 <remove_chain>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800cc6e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d136      	bne.n	800cce4 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800cc76:	f107 0320 	add.w	r3, r7, #32
 800cc7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cc7e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800cc82:	3a01      	subs	r2, #1
 800cc84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800cc88:	f107 0320 	add.w	r3, r7, #32
 800cc8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cc90:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fe fb00 	bl	800b29a <move_window>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800cca0:	e020      	b.n	800cce4 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800cca2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d11c      	bne.n	800cce4 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800ccaa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ccae:	330b      	adds	r3, #11
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	f003 0310 	and.w	r3, r3, #16
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d003      	beq.n	800ccc2 <f_open+0x29e>
					res = FR_NO_FILE;
 800ccba:	2304      	movs	r3, #4
 800ccbc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800ccc0:	e010      	b.n	800cce4 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800ccc2:	1dfb      	adds	r3, r7, #7
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	f003 0302 	and.w	r3, r3, #2
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00a      	beq.n	800cce4 <f_open+0x2c0>
 800ccce:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ccd2:	330b      	adds	r3, #11
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	f003 0301 	and.w	r3, r3, #1
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d002      	beq.n	800cce4 <f_open+0x2c0>
						res = FR_DENIED;
 800ccde:	2307      	movs	r3, #7
 800cce0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800cce4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d13d      	bne.n	800cd68 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ccec:	1dfb      	adds	r3, r7, #7
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	f003 0308 	and.w	r3, r3, #8
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d005      	beq.n	800cd04 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 800ccf8:	1dfb      	adds	r3, r7, #7
 800ccfa:	1dfa      	adds	r2, r7, #7
 800ccfc:	7812      	ldrb	r2, [r2, #0]
 800ccfe:	f042 0220 	orr.w	r2, r2, #32
 800cd02:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800cd04:	f107 0320 	add.w	r3, r7, #32
 800cd08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cd0c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800cd10:	f107 030c 	add.w	r3, r7, #12
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800cd1a:	f107 030c 	add.w	r3, r7, #12
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800cd24:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd28:	1dfb      	adds	r3, r7, #7
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	f023 0301 	bic.w	r3, r3, #1
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	bf14      	ite	ne
 800cd34:	2301      	movne	r3, #1
 800cd36:	2300      	moveq	r3, #0
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	f107 0320 	add.w	r3, r7, #32
 800cd40:	4611      	mov	r1, r2
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fe f93a 	bl	800afbc <inc_lock>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	f107 030c 	add.w	r3, r7, #12
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800cd54:	f107 030c 	add.w	r3, r7, #12
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d102      	bne.n	800cd68 <f_open+0x344>
 800cd62:	2302      	movs	r3, #2
 800cd64:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800cd68:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d15d      	bne.n	800ce2c <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 800cd70:	f107 030c 	add.w	r3, r7, #12
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	1dfa      	adds	r2, r7, #7
 800cd78:	7812      	ldrb	r2, [r2, #0]
 800cd7a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800cd7e:	f107 030c 	add.w	r3, r7, #12
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2200      	movs	r2, #0
 800cd86:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800cd8a:	f107 0320 	add.w	r3, r7, #32
 800cd8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cd92:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7ff f845 	bl	800be26 <ld_clust>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	f107 030c 	add.w	r3, r7, #12
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800cda8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cdac:	331f      	adds	r3, #31
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	061a      	lsls	r2, r3, #24
 800cdb2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800cdb6:	331e      	adds	r3, #30
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	041b      	lsls	r3, r3, #16
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800cdc2:	321d      	adds	r2, #29
 800cdc4:	7812      	ldrb	r2, [r2, #0]
 800cdc6:	0212      	lsls	r2, r2, #8
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800cdce:	321c      	adds	r2, #28
 800cdd0:	7812      	ldrb	r2, [r2, #0]
 800cdd2:	431a      	orrs	r2, r3
 800cdd4:	f107 030c 	add.w	r3, r7, #12
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800cdde:	f107 030c 	add.w	r3, r7, #12
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2200      	movs	r2, #0
 800cde6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800cdea:	f107 030c 	add.w	r3, r7, #12
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800cdf6:	f107 030c 	add.w	r3, r7, #12
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800ce02:	f107 0320 	add.w	r3, r7, #32
 800ce06:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ce0a:	f107 030c 	add.w	r3, r7, #12
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800ce14:	f107 030c 	add.w	r3, r7, #12
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ce1e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800ce22:	f107 030c 	add.w	r3, r7, #12
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800ce2c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b08c      	sub	sp, #48	; 0x30
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	60f8      	str	r0, [r7, #12]
 800ce42:	60b9      	str	r1, [r7, #8]
 800ce44:	607a      	str	r2, [r7, #4]
 800ce46:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800ce52:	68f8      	ldr	r0, [r7, #12]
 800ce54:	f7ff fd6a 	bl	800c92c <validate>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ce5c:	7ffb      	ldrb	r3, [r7, #31]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d001      	beq.n	800ce66 <f_read+0x2c>
 800ce62:	7ffb      	ldrb	r3, [r7, #31]
 800ce64:	e150      	b.n	800d108 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d003      	beq.n	800ce78 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800ce76:	e147      	b.n	800d108 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ce7e:	f003 0301 	and.w	r3, r3, #1
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d101      	bne.n	800ce8a <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800ce86:	2307      	movs	r3, #7
 800ce88:	e13e      	b.n	800d108 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ce96:	1ad3      	subs	r3, r2, r3
 800ce98:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	f240 812d 	bls.w	800d0fe <f_read+0x2c4>
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cea8:	e129      	b.n	800d0fe <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ceb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f040 80f2 	bne.w	800d09e <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800cec0:	0a5b      	lsrs	r3, r3, #9
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ceca:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800cece:	3b01      	subs	r3, #1
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	4013      	ands	r3, r2
 800ced4:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d139      	bne.n	800cf50 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d104      	bne.n	800cef0 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ceec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ceee:	e018      	b.n	800cf22 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d008      	beq.n	800cf0c <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800cf00:	4619      	mov	r1, r3
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	f7fe fd85 	bl	800ba12 <clmt_clust>
 800cf08:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cf0a:	e00a      	b.n	800cf22 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf18:	4619      	mov	r1, r3
 800cf1a:	4610      	mov	r0, r2
 800cf1c:	f7fe faba 	bl	800b494 <get_fat>
 800cf20:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800cf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d805      	bhi.n	800cf34 <f_read+0xfa>
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2202      	movs	r2, #2
 800cf2c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800cf30:	2302      	movs	r3, #2
 800cf32:	e0e9      	b.n	800d108 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800cf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf3a:	d105      	bne.n	800cf48 <f_read+0x10e>
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800cf44:	2301      	movs	r3, #1
 800cf46:	e0df      	b.n	800d108 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	4610      	mov	r0, r2
 800cf60:	f7fe fa76 	bl	800b450 <clust2sect>
 800cf64:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d105      	bne.n	800cf78 <f_read+0x13e>
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2202      	movs	r2, #2
 800cf70:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800cf74:	2302      	movs	r3, #2
 800cf76:	e0c7      	b.n	800d108 <f_read+0x2ce>
			sect += csect;
 800cf78:	7dfb      	ldrb	r3, [r7, #23]
 800cf7a:	693a      	ldr	r2, [r7, #16]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	0a5b      	lsrs	r3, r3, #9
 800cf84:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d046      	beq.n	800d01a <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800cf8c:	7dfa      	ldrb	r2, [r7, #23]
 800cf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf90:	4413      	add	r3, r2
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800cf98:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d908      	bls.n	800cfb2 <f_read+0x178>
					cc = fp->fs->csize - csect;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cfa6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800cfaa:	461a      	mov	r2, r3
 800cfac:	7dfb      	ldrb	r3, [r7, #23]
 800cfae:	1ad3      	subs	r3, r2, r3
 800cfb0:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cfb8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbe:	693a      	ldr	r2, [r7, #16]
 800cfc0:	6a39      	ldr	r1, [r7, #32]
 800cfc2:	f7fd fe8f 	bl	800ace4 <disk_read>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d005      	beq.n	800cfd8 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	e097      	b.n	800d108 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800cfde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d015      	beq.n	800d012 <f_read+0x1d8>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	1ad3      	subs	r3, r2, r3
 800cff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d90d      	bls.n	800d012 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	025b      	lsls	r3, r3, #9
 800d002:	6a3a      	ldr	r2, [r7, #32]
 800d004:	4413      	add	r3, r2
 800d006:	68f9      	ldr	r1, [r7, #12]
 800d008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7fd fec7 	bl	800ada0 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800d012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d014:	025b      	lsls	r3, r3, #9
 800d016:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800d018:	e05b      	b.n	800d0d2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d020:	693a      	ldr	r2, [r7, #16]
 800d022:	429a      	cmp	r2, r3
 800d024:	d037      	beq.n	800d096 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d030:	2b00      	cmp	r3, #0
 800d032:	d01d      	beq.n	800d070 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d03a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d03e:	68f9      	ldr	r1, [r7, #12]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d046:	2301      	movs	r3, #1
 800d048:	f7fd fe6c 	bl	800ad24 <disk_write>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d005      	beq.n	800d05e <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2201      	movs	r2, #1
 800d056:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d05a:	2301      	movs	r3, #1
 800d05c:	e054      	b.n	800d108 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d076:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d07a:	68f9      	ldr	r1, [r7, #12]
 800d07c:	2301      	movs	r3, #1
 800d07e:	693a      	ldr	r2, [r7, #16]
 800d080:	f7fd fe30 	bl	800ace4 <disk_read>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d005      	beq.n	800d096 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2201      	movs	r2, #1
 800d08e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d092:	2301      	movs	r3, #1
 800d094:	e038      	b.n	800d108 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	693a      	ldr	r2, [r7, #16]
 800d09a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0a8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d0ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800d0ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d901      	bls.n	800d0ba <f_read+0x280>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	6a38      	ldr	r0, [r7, #32]
 800d0ce:	f7fd fe67 	bl	800ada0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d0d2:	6a3a      	ldr	r2, [r7, #32]
 800d0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d6:	4413      	add	r3, r2
 800d0d8:	623b      	str	r3, [r7, #32]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e2:	441a      	add	r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f0:	441a      	add	r2, r3
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	601a      	str	r2, [r3, #0]
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	f47f aed2 	bne.w	800ceaa <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800d106:	2300      	movs	r3, #0
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3730      	adds	r7, #48	; 0x30
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b08a      	sub	sp, #40	; 0x28
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	2200      	movs	r2, #0
 800d126:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7ff fbff 	bl	800c92c <validate>
 800d12e:	4603      	mov	r3, r0
 800d130:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d132:	7dfb      	ldrb	r3, [r7, #23]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d001      	beq.n	800d13c <f_write+0x2c>
 800d138:	7dfb      	ldrb	r3, [r7, #23]
 800d13a:	e192      	b.n	800d462 <f_write+0x352>
	if (fp->err)							/* Check error */
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d142:	2b00      	cmp	r3, #0
 800d144:	d003      	beq.n	800d14e <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d14c:	e189      	b.n	800d462 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d154:	f003 0302 	and.w	r3, r3, #2
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d101      	bne.n	800d160 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800d15c:	2307      	movs	r3, #7
 800d15e:	e180      	b.n	800d462 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	441a      	add	r2, r3
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d170:	429a      	cmp	r2, r3
 800d172:	f080 8158 	bcs.w	800d426 <f_write+0x316>
 800d176:	2300      	movs	r3, #0
 800d178:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800d17a:	e154      	b.n	800d426 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d186:	2b00      	cmp	r3, #0
 800d188:	f040 8114 	bne.w	800d3b4 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d192:	0a5b      	lsrs	r3, r3, #9
 800d194:	b2da      	uxtb	r2, r3
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d19c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	4013      	ands	r3, r2
 800d1a6:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800d1a8:	7dbb      	ldrb	r3, [r7, #22]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d151      	bne.n	800d252 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10f      	bne.n	800d1d8 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d1be:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800d1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d121      	bne.n	800d20a <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fe fb82 	bl	800b8d8 <create_chain>
 800d1d4:	6278      	str	r0, [r7, #36]	; 0x24
 800d1d6:	e018      	b.n	800d20a <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d008      	beq.n	800d1f4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f7fe fc11 	bl	800ba12 <clmt_clust>
 800d1f0:	6278      	str	r0, [r7, #36]	; 0x24
 800d1f2:	e00a      	b.n	800d20a <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d200:	4619      	mov	r1, r3
 800d202:	4610      	mov	r0, r2
 800d204:	f7fe fb68 	bl	800b8d8 <create_chain>
 800d208:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f000 810f 	beq.w	800d430 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d214:	2b01      	cmp	r3, #1
 800d216:	d105      	bne.n	800d224 <f_write+0x114>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2202      	movs	r2, #2
 800d21c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d220:	2302      	movs	r3, #2
 800d222:	e11e      	b.n	800d462 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d22a:	d105      	bne.n	800d238 <f_write+0x128>
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d234:	2301      	movs	r3, #1
 800d236:	e114      	b.n	800d462 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d23c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d246:	2b00      	cmp	r3, #0
 800d248:	d103      	bne.n	800d252 <f_write+0x142>
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d24e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d01d      	beq.n	800d29c <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d266:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d26a:	68f9      	ldr	r1, [r7, #12]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d272:	2301      	movs	r3, #1
 800d274:	f7fd fd56 	bl	800ad24 <disk_write>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d005      	beq.n	800d28a <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2201      	movs	r2, #1
 800d282:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d286:	2301      	movs	r3, #1
 800d288:	e0eb      	b.n	800d462 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d294:	b2da      	uxtb	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	f7fe f8d0 	bl	800b450 <clust2sect>
 800d2b0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d105      	bne.n	800d2c4 <f_write+0x1b4>
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d2c0:	2302      	movs	r3, #2
 800d2c2:	e0ce      	b.n	800d462 <f_write+0x352>
			sect += csect;
 800d2c4:	7dbb      	ldrb	r3, [r7, #22]
 800d2c6:	693a      	ldr	r2, [r7, #16]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	0a5b      	lsrs	r3, r3, #9
 800d2d0:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d048      	beq.n	800d36a <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d2d8:	7dba      	ldrb	r2, [r7, #22]
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	4413      	add	r3, r2
 800d2de:	68fa      	ldr	r2, [r7, #12]
 800d2e0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800d2e4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d908      	bls.n	800d2fe <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d2f2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	7dbb      	ldrb	r3, [r7, #22]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d304:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	693a      	ldr	r2, [r7, #16]
 800d30c:	69b9      	ldr	r1, [r7, #24]
 800d30e:	f7fd fd09 	bl	800ad24 <disk_write>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d005      	beq.n	800d324 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2201      	movs	r2, #1
 800d31c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d320:	2301      	movs	r3, #1
 800d322:	e09e      	b.n	800d462 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	69fa      	ldr	r2, [r7, #28]
 800d330:	429a      	cmp	r2, r3
 800d332:	d916      	bls.n	800d362 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800d334:	68f8      	ldr	r0, [r7, #12]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	025b      	lsls	r3, r3, #9
 800d342:	69ba      	ldr	r2, [r7, #24]
 800d344:	4413      	add	r3, r2
 800d346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d34a:	4619      	mov	r1, r3
 800d34c:	f7fd fd28 	bl	800ada0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d35a:	b2da      	uxtb	r2, r3
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	025b      	lsls	r3, r3, #9
 800d366:	623b      	str	r3, [r7, #32]
				continue;
 800d368:	e047      	b.n	800d3fa <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	429a      	cmp	r2, r3
 800d374:	d01a      	beq.n	800d3ac <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d382:	429a      	cmp	r2, r3
 800d384:	d212      	bcs.n	800d3ac <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d38c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d390:	68f9      	ldr	r1, [r7, #12]
 800d392:	2301      	movs	r3, #1
 800d394:	693a      	ldr	r2, [r7, #16]
 800d396:	f7fd fca5 	bl	800ace4 <disk_read>
 800d39a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d005      	beq.n	800d3ac <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e05a      	b.n	800d462 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3be:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d3c2:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800d3c4:	6a3a      	ldr	r2, [r7, #32]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d901      	bls.n	800d3d0 <f_write+0x2c0>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d3d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3da:	68fa      	ldr	r2, [r7, #12]
 800d3dc:	4413      	add	r3, r2
 800d3de:	6a3a      	ldr	r2, [r7, #32]
 800d3e0:	69b9      	ldr	r1, [r7, #24]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fd fcdc 	bl	800ada0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3f2:	b2da      	uxtb	r2, r3
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800d3fa:	69ba      	ldr	r2, [r7, #24]
 800d3fc:	6a3b      	ldr	r3, [r7, #32]
 800d3fe:	4413      	add	r3, r2
 800d400:	61bb      	str	r3, [r7, #24]
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d408:	6a3b      	ldr	r3, [r7, #32]
 800d40a:	441a      	add	r2, r3
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	441a      	add	r2, r3
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	601a      	str	r2, [r3, #0]
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	1ad3      	subs	r3, r2, r3
 800d424:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f47f aea7 	bne.w	800d17c <f_write+0x6c>
 800d42e:	e000      	b.n	800d432 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d430:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d43e:	429a      	cmp	r2, r3
 800d440:	d905      	bls.n	800d44e <f_write+0x33e>
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d454:	f043 0320 	orr.w	r3, r3, #32
 800d458:	b2da      	uxtb	r2, r3
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3728      	adds	r7, #40	; 0x28
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b086      	sub	sp, #24
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f7ff fa5a 	bl	800c92c <validate>
 800d478:	4603      	mov	r3, r0
 800d47a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d47c:	7dfb      	ldrb	r3, [r7, #23]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f040 80a8 	bne.w	800d5d4 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d48a:	f003 0320 	and.w	r3, r3, #32
 800d48e:	2b00      	cmp	r3, #0
 800d490:	f000 80a0 	beq.w	800d5d4 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d019      	beq.n	800d4d6 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d4a8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d4ac:	6879      	ldr	r1, [r7, #4]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	f7fd fc35 	bl	800ad24 <disk_write>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d001      	beq.n	800d4c4 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e088      	b.n	800d5d6 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d4ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	f7fd fed8 	bl	800b29a <move_window>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800d4ee:	7dfb      	ldrb	r3, [r7, #23]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d16f      	bne.n	800d5d4 <f_sync+0x16a>
				dir = fp->dir_ptr;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800d4fa:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	330b      	adds	r3, #11
 800d500:	781a      	ldrb	r2, [r3, #0]
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	330b      	adds	r3, #11
 800d506:	f042 0220 	orr.w	r2, r2, #32
 800d50a:	b2d2      	uxtb	r2, r2
 800d50c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	331c      	adds	r3, #28
 800d518:	b2d2      	uxtb	r2, r2
 800d51a:	701a      	strb	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d522:	b29b      	uxth	r3, r3
 800d524:	0a1b      	lsrs	r3, r3, #8
 800d526:	b29a      	uxth	r2, r3
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	331d      	adds	r3, #29
 800d52c:	b2d2      	uxtb	r2, r2
 800d52e:	701a      	strb	r2, [r3, #0]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d536:	0c1a      	lsrs	r2, r3, #16
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	331e      	adds	r3, #30
 800d53c:	b2d2      	uxtb	r2, r2
 800d53e:	701a      	strb	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d546:	0e1a      	lsrs	r2, r3, #24
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	331f      	adds	r3, #31
 800d54c:	b2d2      	uxtb	r2, r2
 800d54e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d556:	4619      	mov	r1, r3
 800d558:	6938      	ldr	r0, [r7, #16]
 800d55a:	f7fe fc92 	bl	800be82 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800d55e:	f7fc fe43 	bl	800a1e8 <get_fattime>
 800d562:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	3316      	adds	r3, #22
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	b2d2      	uxtb	r2, r2
 800d56c:	701a      	strb	r2, [r3, #0]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	b29b      	uxth	r3, r3
 800d572:	0a1b      	lsrs	r3, r3, #8
 800d574:	b29a      	uxth	r2, r3
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	3317      	adds	r3, #23
 800d57a:	b2d2      	uxtb	r2, r2
 800d57c:	701a      	strb	r2, [r3, #0]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	0c1a      	lsrs	r2, r3, #16
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	3318      	adds	r3, #24
 800d586:	b2d2      	uxtb	r2, r2
 800d588:	701a      	strb	r2, [r3, #0]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	0e1a      	lsrs	r2, r3, #24
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	3319      	adds	r3, #25
 800d592:	b2d2      	uxtb	r2, r2
 800d594:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	3312      	adds	r3, #18
 800d59a:	2200      	movs	r2, #0
 800d59c:	701a      	strb	r2, [r3, #0]
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	3313      	adds	r3, #19
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d5ac:	f023 0320 	bic.w	r3, r3, #32
 800d5b0:	b2da      	uxtb	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7fd fe93 	bl	800b2f6 <sync_fs>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800d5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3718      	adds	r7, #24
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b084      	sub	sp, #16
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f7ff ff3f 	bl	800d46a <f_sync>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d5f0:	7bfb      	ldrb	r3, [r7, #15]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d116      	bne.n	800d624 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7ff f998 	bl	800c92c <validate>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d600:	7bfb      	ldrb	r3, [r7, #15]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d10e      	bne.n	800d624 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fd fd8d 	bl	800b12c <dec_lock>
 800d612:	4603      	mov	r3, r0
 800d614:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d616:	7bfb      	ldrb	r3, [r7, #15]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d103      	bne.n	800d624 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d624:	7bfb      	ldrb	r3, [r7, #15]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b090      	sub	sp, #64	; 0x40
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
 800d636:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7ff f977 	bl	800c92c <validate>
 800d63e:	4603      	mov	r3, r0
 800d640:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d644:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d002      	beq.n	800d652 <f_lseek+0x24>
 800d64c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d650:	e247      	b.n	800dae2 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d003      	beq.n	800d664 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800d662:	e23e      	b.n	800dae2 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	f000 80f2 	beq.w	800d854 <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d676:	d164      	bne.n	800d742 <f_lseek+0x114>
			tbl = fp->cltbl;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d67e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d682:	1d1a      	adds	r2, r3, #4
 800d684:	627a      	str	r2, [r7, #36]	; 0x24
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	617b      	str	r3, [r7, #20]
 800d68a:	2302      	movs	r3, #2
 800d68c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d694:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d041      	beq.n	800d720 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69e:	613b      	str	r3, [r7, #16]
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a6:	3302      	adds	r3, #2
 800d6a8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ac:	60fb      	str	r3, [r7, #12]
 800d6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d6ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fd fee9 	bl	800b494 <get_fat>
 800d6c2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800d6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d805      	bhi.n	800d6d6 <f_lseek+0xa8>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2202      	movs	r2, #2
 800d6ce:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	e205      	b.n	800dae2 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6dc:	d105      	bne.n	800d6ea <f_lseek+0xbc>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e1fb      	b.n	800dae2 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d0da      	beq.n	800d6aa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d6f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d809      	bhi.n	800d710 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fe:	1d1a      	adds	r2, r3, #4
 800d700:	627a      	str	r2, [r7, #36]	; 0x24
 800d702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d704:	601a      	str	r2, [r3, #0]
 800d706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d708:	1d1a      	adds	r2, r3, #4
 800d70a:	627a      	str	r2, [r7, #36]	; 0x24
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d716:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d71a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d3bd      	bcc.n	800d69c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800d726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d728:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800d72a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d803      	bhi.n	800d73a <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 800d732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d734:	2200      	movs	r2, #0
 800d736:	601a      	str	r2, [r3, #0]
 800d738:	e1d1      	b.n	800dade <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d73a:	2311      	movs	r3, #17
 800d73c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d740:	e1cd      	b.n	800dade <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d748:	683a      	ldr	r2, [r7, #0]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d903      	bls.n	800d756 <f_lseek+0x128>
				ofs = fp->fsize;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d754:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	683a      	ldr	r2, [r7, #0]
 800d75a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	f000 81bc 	beq.w	800dade <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	3b01      	subs	r3, #1
 800d76a:	4619      	mov	r1, r3
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f7fe f950 	bl	800ba12 <clmt_clust>
 800d772:	4602      	mov	r2, r0
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d786:	4619      	mov	r1, r3
 800d788:	4610      	mov	r0, r2
 800d78a:	f7fd fe61 	bl	800b450 <clust2sect>
 800d78e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d105      	bne.n	800d7a2 <f_lseek+0x174>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2202      	movs	r2, #2
 800d79a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d79e:	2302      	movs	r3, #2
 800d7a0:	e19f      	b.n	800dae2 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	3b01      	subs	r3, #1
 800d7a6:	0a5b      	lsrs	r3, r3, #9
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800d7ae:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800d7b2:	3a01      	subs	r2, #1
 800d7b4:	4013      	ands	r3, r2
 800d7b6:	69ba      	ldr	r2, [r7, #24]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f000 8189 	beq.w	800dade <f_lseek+0x4b0>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d7d2:	69ba      	ldr	r2, [r7, #24]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	f000 8182 	beq.w	800dade <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d01d      	beq.n	800d824 <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d7ee:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d7f2:	6879      	ldr	r1, [r7, #4]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	f7fd fa92 	bl	800ad24 <disk_write>
 800d800:	4603      	mov	r3, r0
 800d802:	2b00      	cmp	r3, #0
 800d804:	d005      	beq.n	800d812 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2201      	movs	r2, #1
 800d80a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d80e:	2301      	movs	r3, #1
 800d810:	e167      	b.n	800dae2 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d81c:	b2da      	uxtb	r2, r3
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d82a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800d82e:	6879      	ldr	r1, [r7, #4]
 800d830:	2301      	movs	r3, #1
 800d832:	69ba      	ldr	r2, [r7, #24]
 800d834:	f7fd fa56 	bl	800ace4 <disk_read>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d005      	beq.n	800d84a <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d846:	2301      	movs	r3, #1
 800d848:	e14b      	b.n	800dae2 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	69ba      	ldr	r2, [r7, #24]
 800d84e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800d852:	e144      	b.n	800dade <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d90a      	bls.n	800d876 <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d866:	f003 0302 	and.w	r3, r3, #2
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d103      	bne.n	800d876 <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800d874:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d87c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d87e:	2300      	movs	r3, #0
 800d880:	637b      	str	r3, [r7, #52]	; 0x34
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d886:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f000 80c6 	beq.w	800da1e <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d898:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800d89c:	025b      	lsls	r3, r3, #9
 800d89e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d8a0:	6a3b      	ldr	r3, [r7, #32]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d01e      	beq.n	800d8e4 <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	1e5a      	subs	r2, r3, #1
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	fbb2 f2f3 	udiv	r2, r2, r3
 800d8b0:	6a3b      	ldr	r3, [r7, #32]
 800d8b2:	1e59      	subs	r1, r3, #1
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d312      	bcc.n	800d8e4 <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800d8be:	6a3b      	ldr	r3, [r7, #32]
 800d8c0:	1e5a      	subs	r2, r3, #1
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	425b      	negs	r3, r3
 800d8c6:	401a      	ands	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800d8d4:	683a      	ldr	r2, [r7, #0]
 800d8d6:	1ad3      	subs	r3, r2, r3
 800d8d8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d8e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8e2:	e029      	b.n	800d938 <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d8ea:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d11e      	bne.n	800d930 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7fd ffec 	bl	800b8d8 <create_chain>
 800d900:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d904:	2b01      	cmp	r3, #1
 800d906:	d105      	bne.n	800d914 <f_lseek+0x2e6>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2202      	movs	r2, #2
 800d90c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d910:	2302      	movs	r3, #2
 800d912:	e0e6      	b.n	800dae2 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d91a:	d105      	bne.n	800d928 <f_lseek+0x2fa>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d924:	2301      	movs	r3, #1
 800d926:	e0dc      	b.n	800dae2 <f_lseek+0x4b4>
					fp->sclust = clst;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d92c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d934:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 800d938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d06f      	beq.n	800da1e <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 800d93e:	e047      	b.n	800d9d0 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800d946:	f003 0302 	and.w	r3, r3, #2
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d00d      	beq.n	800d96a <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d954:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d956:	4618      	mov	r0, r3
 800d958:	f7fd ffbe 	bl	800b8d8 <create_chain>
 800d95c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800d95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10a      	bne.n	800d97a <f_lseek+0x34c>
							ofs = bcs; break;
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	603b      	str	r3, [r7, #0]
 800d968:	e036      	b.n	800d9d8 <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d970:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d972:	4618      	mov	r0, r3
 800d974:	f7fd fd8e 	bl	800b494 <get_fat>
 800d978:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d980:	d105      	bne.n	800d98e <f_lseek+0x360>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2201      	movs	r2, #1
 800d986:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d98a:	2301      	movs	r3, #1
 800d98c:	e0a9      	b.n	800dae2 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800d98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d990:	2b01      	cmp	r3, #1
 800d992:	d907      	bls.n	800d9a4 <f_lseek+0x376>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d99a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d99e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d305      	bcc.n	800d9b0 <f_lseek+0x382>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2202      	movs	r2, #2
 800d9a8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800d9ac:	2302      	movs	r3, #2
 800d9ae:	e098      	b.n	800dae2 <f_lseek+0x4b4>
					fp->clust = clst;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	441a      	add	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 800d9c8:	683a      	ldr	r2, [r7, #0]
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800d9d0:	683a      	ldr	r2, [r7, #0]
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d8b3      	bhi.n	800d940 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	441a      	add	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d015      	beq.n	800da1e <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d9f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7fd fd28 	bl	800b450 <clust2sect>
 800da00:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800da02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da04:	2b00      	cmp	r3, #0
 800da06:	d105      	bne.n	800da14 <f_lseek+0x3e6>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2202      	movs	r2, #2
 800da0c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800da10:	2302      	movs	r3, #2
 800da12:	e066      	b.n	800dae2 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	0a5b      	lsrs	r3, r3, #9
 800da18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da1a:	4413      	add	r3, r2
 800da1c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800da24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d041      	beq.n	800dab0 <f_lseek+0x482>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800da32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da34:	429a      	cmp	r2, r3
 800da36:	d03b      	beq.n	800dab0 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800da3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da42:	2b00      	cmp	r3, #0
 800da44:	d01d      	beq.n	800da82 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800da4c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800da50:	6879      	ldr	r1, [r7, #4]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800da58:	2301      	movs	r3, #1
 800da5a:	f7fd f963 	bl	800ad24 <disk_write>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d005      	beq.n	800da70 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800da6c:	2301      	movs	r3, #1
 800da6e:	e038      	b.n	800dae2 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800da76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800da88:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800da8c:	6879      	ldr	r1, [r7, #4]
 800da8e:	2301      	movs	r3, #1
 800da90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da92:	f7fd f927 	bl	800ace4 <disk_read>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d005      	beq.n	800daa8 <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800daa4:	2301      	movs	r3, #1
 800daa6:	e01c      	b.n	800dae2 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800daac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d90e      	bls.n	800dade <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800dad2:	f043 0320 	orr.w	r3, r3, #32
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800dade:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3740      	adds	r7, #64	; 0x40
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}

0800daea <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800daea:	b580      	push	{r7, lr}
 800daec:	b08e      	sub	sp, #56	; 0x38
 800daee:	af00      	add	r7, sp, #0
 800daf0:	60f8      	str	r0, [r7, #12]
 800daf2:	60b9      	str	r1, [r7, #8]
 800daf4:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800daf6:	f107 030c 	add.w	r3, r7, #12
 800dafa:	2200      	movs	r2, #0
 800dafc:	4619      	mov	r1, r3
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f7fe fc4a 	bl	800c398 <find_volume>
 800db04:	4603      	mov	r3, r0
 800db06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800db10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db14:	2b00      	cmp	r3, #0
 800db16:	f040 80af 	bne.w	800dc78 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800db26:	3b02      	subs	r3, #2
 800db28:	429a      	cmp	r2, r3
 800db2a:	d805      	bhi.n	800db38 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	601a      	str	r2, [r3, #0]
 800db36:	e09f      	b.n	800dc78 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800db3e:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800db40:	2300      	movs	r3, #0
 800db42:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800db44:	7efb      	ldrb	r3, [r7, #27]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d125      	bne.n	800db96 <f_getfree+0xac>
				clst = 2;
 800db4a:	2302      	movs	r3, #2
 800db4c:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800db4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db50:	69f8      	ldr	r0, [r7, #28]
 800db52:	f7fd fc9f 	bl	800b494 <get_fat>
 800db56:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db5e:	d103      	bne.n	800db68 <f_getfree+0x7e>
 800db60:	2301      	movs	r3, #1
 800db62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800db66:	e077      	b.n	800dc58 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d103      	bne.n	800db76 <f_getfree+0x8c>
 800db6e:	2302      	movs	r3, #2
 800db70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800db74:	e070      	b.n	800dc58 <f_getfree+0x16e>
					if (stat == 0) n++;
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d102      	bne.n	800db82 <f_getfree+0x98>
 800db7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7e:	3301      	adds	r3, #1
 800db80:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800db82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db84:	3301      	adds	r3, #1
 800db86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800db8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db90:	429a      	cmp	r2, r3
 800db92:	d3dc      	bcc.n	800db4e <f_getfree+0x64>
 800db94:	e060      	b.n	800dc58 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800db9c:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800dba4:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800dba6:	2300      	movs	r3, #0
 800dba8:	627b      	str	r3, [r7, #36]	; 0x24
 800dbaa:	2300      	movs	r3, #0
 800dbac:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d112      	bne.n	800dbda <f_getfree+0xf0>
						res = move_window(fs, sect++);
 800dbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb6:	1c5a      	adds	r2, r3, #1
 800dbb8:	62ba      	str	r2, [r7, #40]	; 0x28
 800dbba:	4619      	mov	r1, r3
 800dbbc:	69f8      	ldr	r0, [r7, #28]
 800dbbe:	f7fd fb6c 	bl	800b29a <move_window>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800dbc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d142      	bne.n	800dc56 <f_getfree+0x16c>
						p = fs->win.d8;
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800dbd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbd8:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800dbda:	7efb      	ldrb	r3, [r7, #27]
 800dbdc:	2b02      	cmp	r3, #2
 800dbde:	d115      	bne.n	800dc0c <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 800dbe0:	6a3b      	ldr	r3, [r7, #32]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	021b      	lsls	r3, r3, #8
 800dbe8:	b21a      	sxth	r2, r3
 800dbea:	6a3b      	ldr	r3, [r7, #32]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	b21b      	sxth	r3, r3
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	b21b      	sxth	r3, r3
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d102      	bne.n	800dbfe <f_getfree+0x114>
 800dbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800dbfe:	6a3b      	ldr	r3, [r7, #32]
 800dc00:	3302      	adds	r3, #2
 800dc02:	623b      	str	r3, [r7, #32]
 800dc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc06:	3b02      	subs	r3, #2
 800dc08:	627b      	str	r3, [r7, #36]	; 0x24
 800dc0a:	e01d      	b.n	800dc48 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800dc0c:	6a3b      	ldr	r3, [r7, #32]
 800dc0e:	3303      	adds	r3, #3
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	061a      	lsls	r2, r3, #24
 800dc14:	6a3b      	ldr	r3, [r7, #32]
 800dc16:	3302      	adds	r3, #2
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	041b      	lsls	r3, r3, #16
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	6a3a      	ldr	r2, [r7, #32]
 800dc20:	3201      	adds	r2, #1
 800dc22:	7812      	ldrb	r2, [r2, #0]
 800dc24:	0212      	lsls	r2, r2, #8
 800dc26:	4313      	orrs	r3, r2
 800dc28:	6a3a      	ldr	r2, [r7, #32]
 800dc2a:	7812      	ldrb	r2, [r2, #0]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d102      	bne.n	800dc3c <f_getfree+0x152>
 800dc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc38:	3301      	adds	r3, #1
 800dc3a:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800dc3c:	6a3b      	ldr	r3, [r7, #32]
 800dc3e:	3304      	adds	r3, #4
 800dc40:	623b      	str	r3, [r7, #32]
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	3b04      	subs	r3, #4
 800dc46:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800dc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4a:	3b01      	subs	r3, #1
 800dc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1ac      	bne.n	800dbae <f_getfree+0xc4>
 800dc54:	e000      	b.n	800dc58 <f_getfree+0x16e>
						if (res != FR_OK) break;
 800dc56:	bf00      	nop
			}
			fs->free_clust = n;
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc5c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800dc66:	f043 0301 	orr.w	r3, r3, #1
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc76:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800dc78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3738      	adds	r7, #56	; 0x38
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b088      	sub	sp, #32
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
	int n = 0;
 800dc90:	2300      	movs	r3, #0
 800dc92:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800dc98:	e01b      	b.n	800dcd2 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800dc9a:	f107 0310 	add.w	r3, r7, #16
 800dc9e:	f107 0114 	add.w	r1, r7, #20
 800dca2:	2201      	movs	r2, #1
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7ff f8c8 	bl	800ce3a <f_read>
		if (rc != 1) break;
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d116      	bne.n	800dcde <f_gets+0x5a>
		c = s[0];
 800dcb0:	7d3b      	ldrb	r3, [r7, #20]
 800dcb2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800dcb4:	7dfb      	ldrb	r3, [r7, #23]
 800dcb6:	2b0d      	cmp	r3, #13
 800dcb8:	d100      	bne.n	800dcbc <f_gets+0x38>
 800dcba:	e00a      	b.n	800dcd2 <f_gets+0x4e>
		*p++ = c;
 800dcbc:	69bb      	ldr	r3, [r7, #24]
 800dcbe:	1c5a      	adds	r2, r3, #1
 800dcc0:	61ba      	str	r2, [r7, #24]
 800dcc2:	7dfa      	ldrb	r2, [r7, #23]
 800dcc4:	701a      	strb	r2, [r3, #0]
		n++;
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800dccc:	7dfb      	ldrb	r3, [r7, #23]
 800dcce:	2b0a      	cmp	r3, #10
 800dcd0:	d007      	beq.n	800dce2 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	3b01      	subs	r3, #1
 800dcd6:	69fa      	ldr	r2, [r7, #28]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	dbde      	blt.n	800dc9a <f_gets+0x16>
 800dcdc:	e002      	b.n	800dce4 <f_gets+0x60>
		if (rc != 1) break;
 800dcde:	bf00      	nop
 800dce0:	e000      	b.n	800dce4 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800dce2:	bf00      	nop
	}
	*p = 0;
 800dce4:	69bb      	ldr	r3, [r7, #24]
 800dce6:	2200      	movs	r2, #0
 800dce8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d001      	beq.n	800dcf4 <f_gets+0x70>
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	e000      	b.n	800dcf6 <f_gets+0x72>
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3720      	adds	r7, #32
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
	...

0800dd00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b087      	sub	sp, #28
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800dd16:	4b1f      	ldr	r3, [pc, #124]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd18:	7a5b      	ldrb	r3, [r3, #9]
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d831      	bhi.n	800dd84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dd20:	4b1c      	ldr	r3, [pc, #112]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd22:	7a5b      	ldrb	r3, [r3, #9]
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	461a      	mov	r2, r3
 800dd28:	4b1a      	ldr	r3, [pc, #104]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800dd2e:	4b19      	ldr	r3, [pc, #100]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd30:	7a5b      	ldrb	r3, [r3, #9]
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	4a17      	ldr	r2, [pc, #92]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800dd3e:	4b15      	ldr	r3, [pc, #84]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd40:	7a5b      	ldrb	r3, [r3, #9]
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	461a      	mov	r2, r3
 800dd46:	4b13      	ldr	r3, [pc, #76]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd48:	4413      	add	r3, r2
 800dd4a:	79fa      	ldrb	r2, [r7, #7]
 800dd4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dd4e:	4b11      	ldr	r3, [pc, #68]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd50:	7a5b      	ldrb	r3, [r3, #9]
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	1c5a      	adds	r2, r3, #1
 800dd56:	b2d1      	uxtb	r1, r2
 800dd58:	4a0e      	ldr	r2, [pc, #56]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd5a:	7251      	strb	r1, [r2, #9]
 800dd5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dd5e:	7dbb      	ldrb	r3, [r7, #22]
 800dd60:	3330      	adds	r3, #48	; 0x30
 800dd62:	b2da      	uxtb	r2, r3
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	223a      	movs	r2, #58	; 0x3a
 800dd6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	3302      	adds	r3, #2
 800dd74:	222f      	movs	r2, #47	; 0x2f
 800dd76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	3303      	adds	r3, #3
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800dd84:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	371c      	adds	r7, #28
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	2000034c 	.word	0x2000034c

0800dd98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dda2:	2200      	movs	r2, #0
 800dda4:	6839      	ldr	r1, [r7, #0]
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7ff ffaa 	bl	800dd00 <FATFS_LinkDriverEx>
 800ddac:	4603      	mov	r3, r0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
	...

0800ddb8 <__assert_func>:
 800ddb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddba:	4614      	mov	r4, r2
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	4b09      	ldr	r3, [pc, #36]	; (800dde4 <__assert_func+0x2c>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4605      	mov	r5, r0
 800ddc4:	68d8      	ldr	r0, [r3, #12]
 800ddc6:	b14c      	cbz	r4, 800dddc <__assert_func+0x24>
 800ddc8:	4b07      	ldr	r3, [pc, #28]	; (800dde8 <__assert_func+0x30>)
 800ddca:	9100      	str	r1, [sp, #0]
 800ddcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddd0:	4906      	ldr	r1, [pc, #24]	; (800ddec <__assert_func+0x34>)
 800ddd2:	462b      	mov	r3, r5
 800ddd4:	f000 f81c 	bl	800de10 <fiprintf>
 800ddd8:	f001 ff18 	bl	800fc0c <abort>
 800dddc:	4b04      	ldr	r3, [pc, #16]	; (800ddf0 <__assert_func+0x38>)
 800ddde:	461c      	mov	r4, r3
 800dde0:	e7f3      	b.n	800ddca <__assert_func+0x12>
 800dde2:	bf00      	nop
 800dde4:	20000028 	.word	0x20000028
 800dde8:	08012c54 	.word	0x08012c54
 800ddec:	08012c61 	.word	0x08012c61
 800ddf0:	08012c8f 	.word	0x08012c8f

0800ddf4 <atof>:
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	f001 bd75 	b.w	800f8e4 <strtod>

0800ddfa <atoi>:
 800ddfa:	220a      	movs	r2, #10
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	f001 be01 	b.w	800fa04 <strtol>
	...

0800de04 <__errno>:
 800de04:	4b01      	ldr	r3, [pc, #4]	; (800de0c <__errno+0x8>)
 800de06:	6818      	ldr	r0, [r3, #0]
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	20000028 	.word	0x20000028

0800de10 <fiprintf>:
 800de10:	b40e      	push	{r1, r2, r3}
 800de12:	b503      	push	{r0, r1, lr}
 800de14:	4601      	mov	r1, r0
 800de16:	ab03      	add	r3, sp, #12
 800de18:	4805      	ldr	r0, [pc, #20]	; (800de30 <fiprintf+0x20>)
 800de1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de1e:	6800      	ldr	r0, [r0, #0]
 800de20:	9301      	str	r3, [sp, #4]
 800de22:	f000 f91d 	bl	800e060 <_vfiprintf_r>
 800de26:	b002      	add	sp, #8
 800de28:	f85d eb04 	ldr.w	lr, [sp], #4
 800de2c:	b003      	add	sp, #12
 800de2e:	4770      	bx	lr
 800de30:	20000028 	.word	0x20000028

0800de34 <__libc_init_array>:
 800de34:	b570      	push	{r4, r5, r6, lr}
 800de36:	4d0d      	ldr	r5, [pc, #52]	; (800de6c <__libc_init_array+0x38>)
 800de38:	4c0d      	ldr	r4, [pc, #52]	; (800de70 <__libc_init_array+0x3c>)
 800de3a:	1b64      	subs	r4, r4, r5
 800de3c:	10a4      	asrs	r4, r4, #2
 800de3e:	2600      	movs	r6, #0
 800de40:	42a6      	cmp	r6, r4
 800de42:	d109      	bne.n	800de58 <__libc_init_array+0x24>
 800de44:	4d0b      	ldr	r5, [pc, #44]	; (800de74 <__libc_init_array+0x40>)
 800de46:	4c0c      	ldr	r4, [pc, #48]	; (800de78 <__libc_init_array+0x44>)
 800de48:	f004 fa94 	bl	8012374 <_init>
 800de4c:	1b64      	subs	r4, r4, r5
 800de4e:	10a4      	asrs	r4, r4, #2
 800de50:	2600      	movs	r6, #0
 800de52:	42a6      	cmp	r6, r4
 800de54:	d105      	bne.n	800de62 <__libc_init_array+0x2e>
 800de56:	bd70      	pop	{r4, r5, r6, pc}
 800de58:	f855 3b04 	ldr.w	r3, [r5], #4
 800de5c:	4798      	blx	r3
 800de5e:	3601      	adds	r6, #1
 800de60:	e7ee      	b.n	800de40 <__libc_init_array+0xc>
 800de62:	f855 3b04 	ldr.w	r3, [r5], #4
 800de66:	4798      	blx	r3
 800de68:	3601      	adds	r6, #1
 800de6a:	e7f2      	b.n	800de52 <__libc_init_array+0x1e>
 800de6c:	08013104 	.word	0x08013104
 800de70:	08013104 	.word	0x08013104
 800de74:	08013104 	.word	0x08013104
 800de78:	08013108 	.word	0x08013108

0800de7c <malloc>:
 800de7c:	4b02      	ldr	r3, [pc, #8]	; (800de88 <malloc+0xc>)
 800de7e:	4601      	mov	r1, r0
 800de80:	6818      	ldr	r0, [r3, #0]
 800de82:	f000 b869 	b.w	800df58 <_malloc_r>
 800de86:	bf00      	nop
 800de88:	20000028 	.word	0x20000028

0800de8c <memcpy>:
 800de8c:	440a      	add	r2, r1
 800de8e:	4291      	cmp	r1, r2
 800de90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800de94:	d100      	bne.n	800de98 <memcpy+0xc>
 800de96:	4770      	bx	lr
 800de98:	b510      	push	{r4, lr}
 800de9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dea2:	4291      	cmp	r1, r2
 800dea4:	d1f9      	bne.n	800de9a <memcpy+0xe>
 800dea6:	bd10      	pop	{r4, pc}

0800dea8 <memset>:
 800dea8:	4402      	add	r2, r0
 800deaa:	4603      	mov	r3, r0
 800deac:	4293      	cmp	r3, r2
 800deae:	d100      	bne.n	800deb2 <memset+0xa>
 800deb0:	4770      	bx	lr
 800deb2:	f803 1b01 	strb.w	r1, [r3], #1
 800deb6:	e7f9      	b.n	800deac <memset+0x4>

0800deb8 <_free_r>:
 800deb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deba:	2900      	cmp	r1, #0
 800debc:	d048      	beq.n	800df50 <_free_r+0x98>
 800debe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dec2:	9001      	str	r0, [sp, #4]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f1a1 0404 	sub.w	r4, r1, #4
 800deca:	bfb8      	it	lt
 800decc:	18e4      	addlt	r4, r4, r3
 800dece:	f003 fad9 	bl	8011484 <__malloc_lock>
 800ded2:	4a20      	ldr	r2, [pc, #128]	; (800df54 <_free_r+0x9c>)
 800ded4:	9801      	ldr	r0, [sp, #4]
 800ded6:	6813      	ldr	r3, [r2, #0]
 800ded8:	4615      	mov	r5, r2
 800deda:	b933      	cbnz	r3, 800deea <_free_r+0x32>
 800dedc:	6063      	str	r3, [r4, #4]
 800dede:	6014      	str	r4, [r2, #0]
 800dee0:	b003      	add	sp, #12
 800dee2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dee6:	f003 bad3 	b.w	8011490 <__malloc_unlock>
 800deea:	42a3      	cmp	r3, r4
 800deec:	d90b      	bls.n	800df06 <_free_r+0x4e>
 800deee:	6821      	ldr	r1, [r4, #0]
 800def0:	1862      	adds	r2, r4, r1
 800def2:	4293      	cmp	r3, r2
 800def4:	bf04      	itt	eq
 800def6:	681a      	ldreq	r2, [r3, #0]
 800def8:	685b      	ldreq	r3, [r3, #4]
 800defa:	6063      	str	r3, [r4, #4]
 800defc:	bf04      	itt	eq
 800defe:	1852      	addeq	r2, r2, r1
 800df00:	6022      	streq	r2, [r4, #0]
 800df02:	602c      	str	r4, [r5, #0]
 800df04:	e7ec      	b.n	800dee0 <_free_r+0x28>
 800df06:	461a      	mov	r2, r3
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	b10b      	cbz	r3, 800df10 <_free_r+0x58>
 800df0c:	42a3      	cmp	r3, r4
 800df0e:	d9fa      	bls.n	800df06 <_free_r+0x4e>
 800df10:	6811      	ldr	r1, [r2, #0]
 800df12:	1855      	adds	r5, r2, r1
 800df14:	42a5      	cmp	r5, r4
 800df16:	d10b      	bne.n	800df30 <_free_r+0x78>
 800df18:	6824      	ldr	r4, [r4, #0]
 800df1a:	4421      	add	r1, r4
 800df1c:	1854      	adds	r4, r2, r1
 800df1e:	42a3      	cmp	r3, r4
 800df20:	6011      	str	r1, [r2, #0]
 800df22:	d1dd      	bne.n	800dee0 <_free_r+0x28>
 800df24:	681c      	ldr	r4, [r3, #0]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	6053      	str	r3, [r2, #4]
 800df2a:	4421      	add	r1, r4
 800df2c:	6011      	str	r1, [r2, #0]
 800df2e:	e7d7      	b.n	800dee0 <_free_r+0x28>
 800df30:	d902      	bls.n	800df38 <_free_r+0x80>
 800df32:	230c      	movs	r3, #12
 800df34:	6003      	str	r3, [r0, #0]
 800df36:	e7d3      	b.n	800dee0 <_free_r+0x28>
 800df38:	6825      	ldr	r5, [r4, #0]
 800df3a:	1961      	adds	r1, r4, r5
 800df3c:	428b      	cmp	r3, r1
 800df3e:	bf04      	itt	eq
 800df40:	6819      	ldreq	r1, [r3, #0]
 800df42:	685b      	ldreq	r3, [r3, #4]
 800df44:	6063      	str	r3, [r4, #4]
 800df46:	bf04      	itt	eq
 800df48:	1949      	addeq	r1, r1, r5
 800df4a:	6021      	streq	r1, [r4, #0]
 800df4c:	6054      	str	r4, [r2, #4]
 800df4e:	e7c7      	b.n	800dee0 <_free_r+0x28>
 800df50:	b003      	add	sp, #12
 800df52:	bd30      	pop	{r4, r5, pc}
 800df54:	20000358 	.word	0x20000358

0800df58 <_malloc_r>:
 800df58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5a:	1ccd      	adds	r5, r1, #3
 800df5c:	f025 0503 	bic.w	r5, r5, #3
 800df60:	3508      	adds	r5, #8
 800df62:	2d0c      	cmp	r5, #12
 800df64:	bf38      	it	cc
 800df66:	250c      	movcc	r5, #12
 800df68:	2d00      	cmp	r5, #0
 800df6a:	4606      	mov	r6, r0
 800df6c:	db01      	blt.n	800df72 <_malloc_r+0x1a>
 800df6e:	42a9      	cmp	r1, r5
 800df70:	d903      	bls.n	800df7a <_malloc_r+0x22>
 800df72:	230c      	movs	r3, #12
 800df74:	6033      	str	r3, [r6, #0]
 800df76:	2000      	movs	r0, #0
 800df78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df7a:	f003 fa83 	bl	8011484 <__malloc_lock>
 800df7e:	4921      	ldr	r1, [pc, #132]	; (800e004 <_malloc_r+0xac>)
 800df80:	680a      	ldr	r2, [r1, #0]
 800df82:	4614      	mov	r4, r2
 800df84:	b99c      	cbnz	r4, 800dfae <_malloc_r+0x56>
 800df86:	4f20      	ldr	r7, [pc, #128]	; (800e008 <_malloc_r+0xb0>)
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	b923      	cbnz	r3, 800df96 <_malloc_r+0x3e>
 800df8c:	4621      	mov	r1, r4
 800df8e:	4630      	mov	r0, r6
 800df90:	f000 fe00 	bl	800eb94 <_sbrk_r>
 800df94:	6038      	str	r0, [r7, #0]
 800df96:	4629      	mov	r1, r5
 800df98:	4630      	mov	r0, r6
 800df9a:	f000 fdfb 	bl	800eb94 <_sbrk_r>
 800df9e:	1c43      	adds	r3, r0, #1
 800dfa0:	d123      	bne.n	800dfea <_malloc_r+0x92>
 800dfa2:	230c      	movs	r3, #12
 800dfa4:	6033      	str	r3, [r6, #0]
 800dfa6:	4630      	mov	r0, r6
 800dfa8:	f003 fa72 	bl	8011490 <__malloc_unlock>
 800dfac:	e7e3      	b.n	800df76 <_malloc_r+0x1e>
 800dfae:	6823      	ldr	r3, [r4, #0]
 800dfb0:	1b5b      	subs	r3, r3, r5
 800dfb2:	d417      	bmi.n	800dfe4 <_malloc_r+0x8c>
 800dfb4:	2b0b      	cmp	r3, #11
 800dfb6:	d903      	bls.n	800dfc0 <_malloc_r+0x68>
 800dfb8:	6023      	str	r3, [r4, #0]
 800dfba:	441c      	add	r4, r3
 800dfbc:	6025      	str	r5, [r4, #0]
 800dfbe:	e004      	b.n	800dfca <_malloc_r+0x72>
 800dfc0:	6863      	ldr	r3, [r4, #4]
 800dfc2:	42a2      	cmp	r2, r4
 800dfc4:	bf0c      	ite	eq
 800dfc6:	600b      	streq	r3, [r1, #0]
 800dfc8:	6053      	strne	r3, [r2, #4]
 800dfca:	4630      	mov	r0, r6
 800dfcc:	f003 fa60 	bl	8011490 <__malloc_unlock>
 800dfd0:	f104 000b 	add.w	r0, r4, #11
 800dfd4:	1d23      	adds	r3, r4, #4
 800dfd6:	f020 0007 	bic.w	r0, r0, #7
 800dfda:	1ac2      	subs	r2, r0, r3
 800dfdc:	d0cc      	beq.n	800df78 <_malloc_r+0x20>
 800dfde:	1a1b      	subs	r3, r3, r0
 800dfe0:	50a3      	str	r3, [r4, r2]
 800dfe2:	e7c9      	b.n	800df78 <_malloc_r+0x20>
 800dfe4:	4622      	mov	r2, r4
 800dfe6:	6864      	ldr	r4, [r4, #4]
 800dfe8:	e7cc      	b.n	800df84 <_malloc_r+0x2c>
 800dfea:	1cc4      	adds	r4, r0, #3
 800dfec:	f024 0403 	bic.w	r4, r4, #3
 800dff0:	42a0      	cmp	r0, r4
 800dff2:	d0e3      	beq.n	800dfbc <_malloc_r+0x64>
 800dff4:	1a21      	subs	r1, r4, r0
 800dff6:	4630      	mov	r0, r6
 800dff8:	f000 fdcc 	bl	800eb94 <_sbrk_r>
 800dffc:	3001      	adds	r0, #1
 800dffe:	d1dd      	bne.n	800dfbc <_malloc_r+0x64>
 800e000:	e7cf      	b.n	800dfa2 <_malloc_r+0x4a>
 800e002:	bf00      	nop
 800e004:	20000358 	.word	0x20000358
 800e008:	2000035c 	.word	0x2000035c

0800e00c <__sfputc_r>:
 800e00c:	6893      	ldr	r3, [r2, #8]
 800e00e:	3b01      	subs	r3, #1
 800e010:	2b00      	cmp	r3, #0
 800e012:	b410      	push	{r4}
 800e014:	6093      	str	r3, [r2, #8]
 800e016:	da08      	bge.n	800e02a <__sfputc_r+0x1e>
 800e018:	6994      	ldr	r4, [r2, #24]
 800e01a:	42a3      	cmp	r3, r4
 800e01c:	db01      	blt.n	800e022 <__sfputc_r+0x16>
 800e01e:	290a      	cmp	r1, #10
 800e020:	d103      	bne.n	800e02a <__sfputc_r+0x1e>
 800e022:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e026:	f001 bd31 	b.w	800fa8c <__swbuf_r>
 800e02a:	6813      	ldr	r3, [r2, #0]
 800e02c:	1c58      	adds	r0, r3, #1
 800e02e:	6010      	str	r0, [r2, #0]
 800e030:	7019      	strb	r1, [r3, #0]
 800e032:	4608      	mov	r0, r1
 800e034:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e038:	4770      	bx	lr

0800e03a <__sfputs_r>:
 800e03a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03c:	4606      	mov	r6, r0
 800e03e:	460f      	mov	r7, r1
 800e040:	4614      	mov	r4, r2
 800e042:	18d5      	adds	r5, r2, r3
 800e044:	42ac      	cmp	r4, r5
 800e046:	d101      	bne.n	800e04c <__sfputs_r+0x12>
 800e048:	2000      	movs	r0, #0
 800e04a:	e007      	b.n	800e05c <__sfputs_r+0x22>
 800e04c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e050:	463a      	mov	r2, r7
 800e052:	4630      	mov	r0, r6
 800e054:	f7ff ffda 	bl	800e00c <__sfputc_r>
 800e058:	1c43      	adds	r3, r0, #1
 800e05a:	d1f3      	bne.n	800e044 <__sfputs_r+0xa>
 800e05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e060 <_vfiprintf_r>:
 800e060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e064:	460d      	mov	r5, r1
 800e066:	b09d      	sub	sp, #116	; 0x74
 800e068:	4614      	mov	r4, r2
 800e06a:	4698      	mov	r8, r3
 800e06c:	4606      	mov	r6, r0
 800e06e:	b118      	cbz	r0, 800e078 <_vfiprintf_r+0x18>
 800e070:	6983      	ldr	r3, [r0, #24]
 800e072:	b90b      	cbnz	r3, 800e078 <_vfiprintf_r+0x18>
 800e074:	f002 fd62 	bl	8010b3c <__sinit>
 800e078:	4b89      	ldr	r3, [pc, #548]	; (800e2a0 <_vfiprintf_r+0x240>)
 800e07a:	429d      	cmp	r5, r3
 800e07c:	d11b      	bne.n	800e0b6 <_vfiprintf_r+0x56>
 800e07e:	6875      	ldr	r5, [r6, #4]
 800e080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e082:	07d9      	lsls	r1, r3, #31
 800e084:	d405      	bmi.n	800e092 <_vfiprintf_r+0x32>
 800e086:	89ab      	ldrh	r3, [r5, #12]
 800e088:	059a      	lsls	r2, r3, #22
 800e08a:	d402      	bmi.n	800e092 <_vfiprintf_r+0x32>
 800e08c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e08e:	f003 f966 	bl	801135e <__retarget_lock_acquire_recursive>
 800e092:	89ab      	ldrh	r3, [r5, #12]
 800e094:	071b      	lsls	r3, r3, #28
 800e096:	d501      	bpl.n	800e09c <_vfiprintf_r+0x3c>
 800e098:	692b      	ldr	r3, [r5, #16]
 800e09a:	b9eb      	cbnz	r3, 800e0d8 <_vfiprintf_r+0x78>
 800e09c:	4629      	mov	r1, r5
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f001 fd46 	bl	800fb30 <__swsetup_r>
 800e0a4:	b1c0      	cbz	r0, 800e0d8 <_vfiprintf_r+0x78>
 800e0a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0a8:	07dc      	lsls	r4, r3, #31
 800e0aa:	d50e      	bpl.n	800e0ca <_vfiprintf_r+0x6a>
 800e0ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0b0:	b01d      	add	sp, #116	; 0x74
 800e0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b6:	4b7b      	ldr	r3, [pc, #492]	; (800e2a4 <_vfiprintf_r+0x244>)
 800e0b8:	429d      	cmp	r5, r3
 800e0ba:	d101      	bne.n	800e0c0 <_vfiprintf_r+0x60>
 800e0bc:	68b5      	ldr	r5, [r6, #8]
 800e0be:	e7df      	b.n	800e080 <_vfiprintf_r+0x20>
 800e0c0:	4b79      	ldr	r3, [pc, #484]	; (800e2a8 <_vfiprintf_r+0x248>)
 800e0c2:	429d      	cmp	r5, r3
 800e0c4:	bf08      	it	eq
 800e0c6:	68f5      	ldreq	r5, [r6, #12]
 800e0c8:	e7da      	b.n	800e080 <_vfiprintf_r+0x20>
 800e0ca:	89ab      	ldrh	r3, [r5, #12]
 800e0cc:	0598      	lsls	r0, r3, #22
 800e0ce:	d4ed      	bmi.n	800e0ac <_vfiprintf_r+0x4c>
 800e0d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0d2:	f003 f945 	bl	8011360 <__retarget_lock_release_recursive>
 800e0d6:	e7e9      	b.n	800e0ac <_vfiprintf_r+0x4c>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	9309      	str	r3, [sp, #36]	; 0x24
 800e0dc:	2320      	movs	r3, #32
 800e0de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0e6:	2330      	movs	r3, #48	; 0x30
 800e0e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e2ac <_vfiprintf_r+0x24c>
 800e0ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0f0:	f04f 0901 	mov.w	r9, #1
 800e0f4:	4623      	mov	r3, r4
 800e0f6:	469a      	mov	sl, r3
 800e0f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0fc:	b10a      	cbz	r2, 800e102 <_vfiprintf_r+0xa2>
 800e0fe:	2a25      	cmp	r2, #37	; 0x25
 800e100:	d1f9      	bne.n	800e0f6 <_vfiprintf_r+0x96>
 800e102:	ebba 0b04 	subs.w	fp, sl, r4
 800e106:	d00b      	beq.n	800e120 <_vfiprintf_r+0xc0>
 800e108:	465b      	mov	r3, fp
 800e10a:	4622      	mov	r2, r4
 800e10c:	4629      	mov	r1, r5
 800e10e:	4630      	mov	r0, r6
 800e110:	f7ff ff93 	bl	800e03a <__sfputs_r>
 800e114:	3001      	adds	r0, #1
 800e116:	f000 80aa 	beq.w	800e26e <_vfiprintf_r+0x20e>
 800e11a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e11c:	445a      	add	r2, fp
 800e11e:	9209      	str	r2, [sp, #36]	; 0x24
 800e120:	f89a 3000 	ldrb.w	r3, [sl]
 800e124:	2b00      	cmp	r3, #0
 800e126:	f000 80a2 	beq.w	800e26e <_vfiprintf_r+0x20e>
 800e12a:	2300      	movs	r3, #0
 800e12c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e134:	f10a 0a01 	add.w	sl, sl, #1
 800e138:	9304      	str	r3, [sp, #16]
 800e13a:	9307      	str	r3, [sp, #28]
 800e13c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e140:	931a      	str	r3, [sp, #104]	; 0x68
 800e142:	4654      	mov	r4, sl
 800e144:	2205      	movs	r2, #5
 800e146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e14a:	4858      	ldr	r0, [pc, #352]	; (800e2ac <_vfiprintf_r+0x24c>)
 800e14c:	f7f2 f858 	bl	8000200 <memchr>
 800e150:	9a04      	ldr	r2, [sp, #16]
 800e152:	b9d8      	cbnz	r0, 800e18c <_vfiprintf_r+0x12c>
 800e154:	06d1      	lsls	r1, r2, #27
 800e156:	bf44      	itt	mi
 800e158:	2320      	movmi	r3, #32
 800e15a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e15e:	0713      	lsls	r3, r2, #28
 800e160:	bf44      	itt	mi
 800e162:	232b      	movmi	r3, #43	; 0x2b
 800e164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e168:	f89a 3000 	ldrb.w	r3, [sl]
 800e16c:	2b2a      	cmp	r3, #42	; 0x2a
 800e16e:	d015      	beq.n	800e19c <_vfiprintf_r+0x13c>
 800e170:	9a07      	ldr	r2, [sp, #28]
 800e172:	4654      	mov	r4, sl
 800e174:	2000      	movs	r0, #0
 800e176:	f04f 0c0a 	mov.w	ip, #10
 800e17a:	4621      	mov	r1, r4
 800e17c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e180:	3b30      	subs	r3, #48	; 0x30
 800e182:	2b09      	cmp	r3, #9
 800e184:	d94e      	bls.n	800e224 <_vfiprintf_r+0x1c4>
 800e186:	b1b0      	cbz	r0, 800e1b6 <_vfiprintf_r+0x156>
 800e188:	9207      	str	r2, [sp, #28]
 800e18a:	e014      	b.n	800e1b6 <_vfiprintf_r+0x156>
 800e18c:	eba0 0308 	sub.w	r3, r0, r8
 800e190:	fa09 f303 	lsl.w	r3, r9, r3
 800e194:	4313      	orrs	r3, r2
 800e196:	9304      	str	r3, [sp, #16]
 800e198:	46a2      	mov	sl, r4
 800e19a:	e7d2      	b.n	800e142 <_vfiprintf_r+0xe2>
 800e19c:	9b03      	ldr	r3, [sp, #12]
 800e19e:	1d19      	adds	r1, r3, #4
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	9103      	str	r1, [sp, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	bfbb      	ittet	lt
 800e1a8:	425b      	neglt	r3, r3
 800e1aa:	f042 0202 	orrlt.w	r2, r2, #2
 800e1ae:	9307      	strge	r3, [sp, #28]
 800e1b0:	9307      	strlt	r3, [sp, #28]
 800e1b2:	bfb8      	it	lt
 800e1b4:	9204      	strlt	r2, [sp, #16]
 800e1b6:	7823      	ldrb	r3, [r4, #0]
 800e1b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e1ba:	d10c      	bne.n	800e1d6 <_vfiprintf_r+0x176>
 800e1bc:	7863      	ldrb	r3, [r4, #1]
 800e1be:	2b2a      	cmp	r3, #42	; 0x2a
 800e1c0:	d135      	bne.n	800e22e <_vfiprintf_r+0x1ce>
 800e1c2:	9b03      	ldr	r3, [sp, #12]
 800e1c4:	1d1a      	adds	r2, r3, #4
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	9203      	str	r2, [sp, #12]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	bfb8      	it	lt
 800e1ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e1d2:	3402      	adds	r4, #2
 800e1d4:	9305      	str	r3, [sp, #20]
 800e1d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e2bc <_vfiprintf_r+0x25c>
 800e1da:	7821      	ldrb	r1, [r4, #0]
 800e1dc:	2203      	movs	r2, #3
 800e1de:	4650      	mov	r0, sl
 800e1e0:	f7f2 f80e 	bl	8000200 <memchr>
 800e1e4:	b140      	cbz	r0, 800e1f8 <_vfiprintf_r+0x198>
 800e1e6:	2340      	movs	r3, #64	; 0x40
 800e1e8:	eba0 000a 	sub.w	r0, r0, sl
 800e1ec:	fa03 f000 	lsl.w	r0, r3, r0
 800e1f0:	9b04      	ldr	r3, [sp, #16]
 800e1f2:	4303      	orrs	r3, r0
 800e1f4:	3401      	adds	r4, #1
 800e1f6:	9304      	str	r3, [sp, #16]
 800e1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1fc:	482c      	ldr	r0, [pc, #176]	; (800e2b0 <_vfiprintf_r+0x250>)
 800e1fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e202:	2206      	movs	r2, #6
 800e204:	f7f1 fffc 	bl	8000200 <memchr>
 800e208:	2800      	cmp	r0, #0
 800e20a:	d03f      	beq.n	800e28c <_vfiprintf_r+0x22c>
 800e20c:	4b29      	ldr	r3, [pc, #164]	; (800e2b4 <_vfiprintf_r+0x254>)
 800e20e:	bb1b      	cbnz	r3, 800e258 <_vfiprintf_r+0x1f8>
 800e210:	9b03      	ldr	r3, [sp, #12]
 800e212:	3307      	adds	r3, #7
 800e214:	f023 0307 	bic.w	r3, r3, #7
 800e218:	3308      	adds	r3, #8
 800e21a:	9303      	str	r3, [sp, #12]
 800e21c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e21e:	443b      	add	r3, r7
 800e220:	9309      	str	r3, [sp, #36]	; 0x24
 800e222:	e767      	b.n	800e0f4 <_vfiprintf_r+0x94>
 800e224:	fb0c 3202 	mla	r2, ip, r2, r3
 800e228:	460c      	mov	r4, r1
 800e22a:	2001      	movs	r0, #1
 800e22c:	e7a5      	b.n	800e17a <_vfiprintf_r+0x11a>
 800e22e:	2300      	movs	r3, #0
 800e230:	3401      	adds	r4, #1
 800e232:	9305      	str	r3, [sp, #20]
 800e234:	4619      	mov	r1, r3
 800e236:	f04f 0c0a 	mov.w	ip, #10
 800e23a:	4620      	mov	r0, r4
 800e23c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e240:	3a30      	subs	r2, #48	; 0x30
 800e242:	2a09      	cmp	r2, #9
 800e244:	d903      	bls.n	800e24e <_vfiprintf_r+0x1ee>
 800e246:	2b00      	cmp	r3, #0
 800e248:	d0c5      	beq.n	800e1d6 <_vfiprintf_r+0x176>
 800e24a:	9105      	str	r1, [sp, #20]
 800e24c:	e7c3      	b.n	800e1d6 <_vfiprintf_r+0x176>
 800e24e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e252:	4604      	mov	r4, r0
 800e254:	2301      	movs	r3, #1
 800e256:	e7f0      	b.n	800e23a <_vfiprintf_r+0x1da>
 800e258:	ab03      	add	r3, sp, #12
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	462a      	mov	r2, r5
 800e25e:	4b16      	ldr	r3, [pc, #88]	; (800e2b8 <_vfiprintf_r+0x258>)
 800e260:	a904      	add	r1, sp, #16
 800e262:	4630      	mov	r0, r6
 800e264:	f000 f8cc 	bl	800e400 <_printf_float>
 800e268:	4607      	mov	r7, r0
 800e26a:	1c78      	adds	r0, r7, #1
 800e26c:	d1d6      	bne.n	800e21c <_vfiprintf_r+0x1bc>
 800e26e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e270:	07d9      	lsls	r1, r3, #31
 800e272:	d405      	bmi.n	800e280 <_vfiprintf_r+0x220>
 800e274:	89ab      	ldrh	r3, [r5, #12]
 800e276:	059a      	lsls	r2, r3, #22
 800e278:	d402      	bmi.n	800e280 <_vfiprintf_r+0x220>
 800e27a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e27c:	f003 f870 	bl	8011360 <__retarget_lock_release_recursive>
 800e280:	89ab      	ldrh	r3, [r5, #12]
 800e282:	065b      	lsls	r3, r3, #25
 800e284:	f53f af12 	bmi.w	800e0ac <_vfiprintf_r+0x4c>
 800e288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e28a:	e711      	b.n	800e0b0 <_vfiprintf_r+0x50>
 800e28c:	ab03      	add	r3, sp, #12
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	462a      	mov	r2, r5
 800e292:	4b09      	ldr	r3, [pc, #36]	; (800e2b8 <_vfiprintf_r+0x258>)
 800e294:	a904      	add	r1, sp, #16
 800e296:	4630      	mov	r0, r6
 800e298:	f000 fb56 	bl	800e948 <_printf_i>
 800e29c:	e7e4      	b.n	800e268 <_vfiprintf_r+0x208>
 800e29e:	bf00      	nop
 800e2a0:	08012ee8 	.word	0x08012ee8
 800e2a4:	08012f08 	.word	0x08012f08
 800e2a8:	08012ec8 	.word	0x08012ec8
 800e2ac:	08012c94 	.word	0x08012c94
 800e2b0:	08012c9e 	.word	0x08012c9e
 800e2b4:	0800e401 	.word	0x0800e401
 800e2b8:	0800e03b 	.word	0x0800e03b
 800e2bc:	08012c9a 	.word	0x08012c9a

0800e2c0 <__cvt>:
 800e2c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c4:	ec55 4b10 	vmov	r4, r5, d0
 800e2c8:	2d00      	cmp	r5, #0
 800e2ca:	460e      	mov	r6, r1
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	462b      	mov	r3, r5
 800e2d0:	bfbb      	ittet	lt
 800e2d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e2d6:	461d      	movlt	r5, r3
 800e2d8:	2300      	movge	r3, #0
 800e2da:	232d      	movlt	r3, #45	; 0x2d
 800e2dc:	700b      	strb	r3, [r1, #0]
 800e2de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e2e4:	4691      	mov	r9, r2
 800e2e6:	f023 0820 	bic.w	r8, r3, #32
 800e2ea:	bfbc      	itt	lt
 800e2ec:	4622      	movlt	r2, r4
 800e2ee:	4614      	movlt	r4, r2
 800e2f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e2f4:	d005      	beq.n	800e302 <__cvt+0x42>
 800e2f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e2fa:	d100      	bne.n	800e2fe <__cvt+0x3e>
 800e2fc:	3601      	adds	r6, #1
 800e2fe:	2102      	movs	r1, #2
 800e300:	e000      	b.n	800e304 <__cvt+0x44>
 800e302:	2103      	movs	r1, #3
 800e304:	ab03      	add	r3, sp, #12
 800e306:	9301      	str	r3, [sp, #4]
 800e308:	ab02      	add	r3, sp, #8
 800e30a:	9300      	str	r3, [sp, #0]
 800e30c:	ec45 4b10 	vmov	d0, r4, r5
 800e310:	4653      	mov	r3, sl
 800e312:	4632      	mov	r2, r6
 800e314:	f001 fd0c 	bl	800fd30 <_dtoa_r>
 800e318:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e31c:	4607      	mov	r7, r0
 800e31e:	d102      	bne.n	800e326 <__cvt+0x66>
 800e320:	f019 0f01 	tst.w	r9, #1
 800e324:	d022      	beq.n	800e36c <__cvt+0xac>
 800e326:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e32a:	eb07 0906 	add.w	r9, r7, r6
 800e32e:	d110      	bne.n	800e352 <__cvt+0x92>
 800e330:	783b      	ldrb	r3, [r7, #0]
 800e332:	2b30      	cmp	r3, #48	; 0x30
 800e334:	d10a      	bne.n	800e34c <__cvt+0x8c>
 800e336:	2200      	movs	r2, #0
 800e338:	2300      	movs	r3, #0
 800e33a:	4620      	mov	r0, r4
 800e33c:	4629      	mov	r1, r5
 800e33e:	f7f2 fbd3 	bl	8000ae8 <__aeabi_dcmpeq>
 800e342:	b918      	cbnz	r0, 800e34c <__cvt+0x8c>
 800e344:	f1c6 0601 	rsb	r6, r6, #1
 800e348:	f8ca 6000 	str.w	r6, [sl]
 800e34c:	f8da 3000 	ldr.w	r3, [sl]
 800e350:	4499      	add	r9, r3
 800e352:	2200      	movs	r2, #0
 800e354:	2300      	movs	r3, #0
 800e356:	4620      	mov	r0, r4
 800e358:	4629      	mov	r1, r5
 800e35a:	f7f2 fbc5 	bl	8000ae8 <__aeabi_dcmpeq>
 800e35e:	b108      	cbz	r0, 800e364 <__cvt+0xa4>
 800e360:	f8cd 900c 	str.w	r9, [sp, #12]
 800e364:	2230      	movs	r2, #48	; 0x30
 800e366:	9b03      	ldr	r3, [sp, #12]
 800e368:	454b      	cmp	r3, r9
 800e36a:	d307      	bcc.n	800e37c <__cvt+0xbc>
 800e36c:	9b03      	ldr	r3, [sp, #12]
 800e36e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e370:	1bdb      	subs	r3, r3, r7
 800e372:	4638      	mov	r0, r7
 800e374:	6013      	str	r3, [r2, #0]
 800e376:	b004      	add	sp, #16
 800e378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e37c:	1c59      	adds	r1, r3, #1
 800e37e:	9103      	str	r1, [sp, #12]
 800e380:	701a      	strb	r2, [r3, #0]
 800e382:	e7f0      	b.n	800e366 <__cvt+0xa6>

0800e384 <__exponent>:
 800e384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e386:	4603      	mov	r3, r0
 800e388:	2900      	cmp	r1, #0
 800e38a:	bfb8      	it	lt
 800e38c:	4249      	neglt	r1, r1
 800e38e:	f803 2b02 	strb.w	r2, [r3], #2
 800e392:	bfb4      	ite	lt
 800e394:	222d      	movlt	r2, #45	; 0x2d
 800e396:	222b      	movge	r2, #43	; 0x2b
 800e398:	2909      	cmp	r1, #9
 800e39a:	7042      	strb	r2, [r0, #1]
 800e39c:	dd2a      	ble.n	800e3f4 <__exponent+0x70>
 800e39e:	f10d 0407 	add.w	r4, sp, #7
 800e3a2:	46a4      	mov	ip, r4
 800e3a4:	270a      	movs	r7, #10
 800e3a6:	46a6      	mov	lr, r4
 800e3a8:	460a      	mov	r2, r1
 800e3aa:	fb91 f6f7 	sdiv	r6, r1, r7
 800e3ae:	fb07 1516 	mls	r5, r7, r6, r1
 800e3b2:	3530      	adds	r5, #48	; 0x30
 800e3b4:	2a63      	cmp	r2, #99	; 0x63
 800e3b6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e3ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e3be:	4631      	mov	r1, r6
 800e3c0:	dcf1      	bgt.n	800e3a6 <__exponent+0x22>
 800e3c2:	3130      	adds	r1, #48	; 0x30
 800e3c4:	f1ae 0502 	sub.w	r5, lr, #2
 800e3c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e3cc:	1c44      	adds	r4, r0, #1
 800e3ce:	4629      	mov	r1, r5
 800e3d0:	4561      	cmp	r1, ip
 800e3d2:	d30a      	bcc.n	800e3ea <__exponent+0x66>
 800e3d4:	f10d 0209 	add.w	r2, sp, #9
 800e3d8:	eba2 020e 	sub.w	r2, r2, lr
 800e3dc:	4565      	cmp	r5, ip
 800e3de:	bf88      	it	hi
 800e3e0:	2200      	movhi	r2, #0
 800e3e2:	4413      	add	r3, r2
 800e3e4:	1a18      	subs	r0, r3, r0
 800e3e6:	b003      	add	sp, #12
 800e3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e3f2:	e7ed      	b.n	800e3d0 <__exponent+0x4c>
 800e3f4:	2330      	movs	r3, #48	; 0x30
 800e3f6:	3130      	adds	r1, #48	; 0x30
 800e3f8:	7083      	strb	r3, [r0, #2]
 800e3fa:	70c1      	strb	r1, [r0, #3]
 800e3fc:	1d03      	adds	r3, r0, #4
 800e3fe:	e7f1      	b.n	800e3e4 <__exponent+0x60>

0800e400 <_printf_float>:
 800e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e404:	ed2d 8b02 	vpush	{d8}
 800e408:	b08d      	sub	sp, #52	; 0x34
 800e40a:	460c      	mov	r4, r1
 800e40c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e410:	4616      	mov	r6, r2
 800e412:	461f      	mov	r7, r3
 800e414:	4605      	mov	r5, r0
 800e416:	f002 ff9d 	bl	8011354 <_localeconv_r>
 800e41a:	f8d0 a000 	ldr.w	sl, [r0]
 800e41e:	4650      	mov	r0, sl
 800e420:	f7f1 fee0 	bl	80001e4 <strlen>
 800e424:	2300      	movs	r3, #0
 800e426:	930a      	str	r3, [sp, #40]	; 0x28
 800e428:	6823      	ldr	r3, [r4, #0]
 800e42a:	9305      	str	r3, [sp, #20]
 800e42c:	f8d8 3000 	ldr.w	r3, [r8]
 800e430:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e434:	3307      	adds	r3, #7
 800e436:	f023 0307 	bic.w	r3, r3, #7
 800e43a:	f103 0208 	add.w	r2, r3, #8
 800e43e:	f8c8 2000 	str.w	r2, [r8]
 800e442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e446:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e44a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e44e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e452:	9307      	str	r3, [sp, #28]
 800e454:	f8cd 8018 	str.w	r8, [sp, #24]
 800e458:	ee08 0a10 	vmov	s16, r0
 800e45c:	4b9f      	ldr	r3, [pc, #636]	; (800e6dc <_printf_float+0x2dc>)
 800e45e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e466:	f7f2 fb71 	bl	8000b4c <__aeabi_dcmpun>
 800e46a:	bb88      	cbnz	r0, 800e4d0 <_printf_float+0xd0>
 800e46c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e470:	4b9a      	ldr	r3, [pc, #616]	; (800e6dc <_printf_float+0x2dc>)
 800e472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e476:	f7f2 fb4b 	bl	8000b10 <__aeabi_dcmple>
 800e47a:	bb48      	cbnz	r0, 800e4d0 <_printf_float+0xd0>
 800e47c:	2200      	movs	r2, #0
 800e47e:	2300      	movs	r3, #0
 800e480:	4640      	mov	r0, r8
 800e482:	4649      	mov	r1, r9
 800e484:	f7f2 fb3a 	bl	8000afc <__aeabi_dcmplt>
 800e488:	b110      	cbz	r0, 800e490 <_printf_float+0x90>
 800e48a:	232d      	movs	r3, #45	; 0x2d
 800e48c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e490:	4b93      	ldr	r3, [pc, #588]	; (800e6e0 <_printf_float+0x2e0>)
 800e492:	4894      	ldr	r0, [pc, #592]	; (800e6e4 <_printf_float+0x2e4>)
 800e494:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e498:	bf94      	ite	ls
 800e49a:	4698      	movls	r8, r3
 800e49c:	4680      	movhi	r8, r0
 800e49e:	2303      	movs	r3, #3
 800e4a0:	6123      	str	r3, [r4, #16]
 800e4a2:	9b05      	ldr	r3, [sp, #20]
 800e4a4:	f023 0204 	bic.w	r2, r3, #4
 800e4a8:	6022      	str	r2, [r4, #0]
 800e4aa:	f04f 0900 	mov.w	r9, #0
 800e4ae:	9700      	str	r7, [sp, #0]
 800e4b0:	4633      	mov	r3, r6
 800e4b2:	aa0b      	add	r2, sp, #44	; 0x2c
 800e4b4:	4621      	mov	r1, r4
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	f000 f9d8 	bl	800e86c <_printf_common>
 800e4bc:	3001      	adds	r0, #1
 800e4be:	f040 8090 	bne.w	800e5e2 <_printf_float+0x1e2>
 800e4c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4c6:	b00d      	add	sp, #52	; 0x34
 800e4c8:	ecbd 8b02 	vpop	{d8}
 800e4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d0:	4642      	mov	r2, r8
 800e4d2:	464b      	mov	r3, r9
 800e4d4:	4640      	mov	r0, r8
 800e4d6:	4649      	mov	r1, r9
 800e4d8:	f7f2 fb38 	bl	8000b4c <__aeabi_dcmpun>
 800e4dc:	b140      	cbz	r0, 800e4f0 <_printf_float+0xf0>
 800e4de:	464b      	mov	r3, r9
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	bfbc      	itt	lt
 800e4e4:	232d      	movlt	r3, #45	; 0x2d
 800e4e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e4ea:	487f      	ldr	r0, [pc, #508]	; (800e6e8 <_printf_float+0x2e8>)
 800e4ec:	4b7f      	ldr	r3, [pc, #508]	; (800e6ec <_printf_float+0x2ec>)
 800e4ee:	e7d1      	b.n	800e494 <_printf_float+0x94>
 800e4f0:	6863      	ldr	r3, [r4, #4]
 800e4f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e4f6:	9206      	str	r2, [sp, #24]
 800e4f8:	1c5a      	adds	r2, r3, #1
 800e4fa:	d13f      	bne.n	800e57c <_printf_float+0x17c>
 800e4fc:	2306      	movs	r3, #6
 800e4fe:	6063      	str	r3, [r4, #4]
 800e500:	9b05      	ldr	r3, [sp, #20]
 800e502:	6861      	ldr	r1, [r4, #4]
 800e504:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e508:	2300      	movs	r3, #0
 800e50a:	9303      	str	r3, [sp, #12]
 800e50c:	ab0a      	add	r3, sp, #40	; 0x28
 800e50e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e512:	ab09      	add	r3, sp, #36	; 0x24
 800e514:	ec49 8b10 	vmov	d0, r8, r9
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	6022      	str	r2, [r4, #0]
 800e51c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e520:	4628      	mov	r0, r5
 800e522:	f7ff fecd 	bl	800e2c0 <__cvt>
 800e526:	9b06      	ldr	r3, [sp, #24]
 800e528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e52a:	2b47      	cmp	r3, #71	; 0x47
 800e52c:	4680      	mov	r8, r0
 800e52e:	d108      	bne.n	800e542 <_printf_float+0x142>
 800e530:	1cc8      	adds	r0, r1, #3
 800e532:	db02      	blt.n	800e53a <_printf_float+0x13a>
 800e534:	6863      	ldr	r3, [r4, #4]
 800e536:	4299      	cmp	r1, r3
 800e538:	dd41      	ble.n	800e5be <_printf_float+0x1be>
 800e53a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e53e:	fa5f fb8b 	uxtb.w	fp, fp
 800e542:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e546:	d820      	bhi.n	800e58a <_printf_float+0x18a>
 800e548:	3901      	subs	r1, #1
 800e54a:	465a      	mov	r2, fp
 800e54c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e550:	9109      	str	r1, [sp, #36]	; 0x24
 800e552:	f7ff ff17 	bl	800e384 <__exponent>
 800e556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e558:	1813      	adds	r3, r2, r0
 800e55a:	2a01      	cmp	r2, #1
 800e55c:	4681      	mov	r9, r0
 800e55e:	6123      	str	r3, [r4, #16]
 800e560:	dc02      	bgt.n	800e568 <_printf_float+0x168>
 800e562:	6822      	ldr	r2, [r4, #0]
 800e564:	07d2      	lsls	r2, r2, #31
 800e566:	d501      	bpl.n	800e56c <_printf_float+0x16c>
 800e568:	3301      	adds	r3, #1
 800e56a:	6123      	str	r3, [r4, #16]
 800e56c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e570:	2b00      	cmp	r3, #0
 800e572:	d09c      	beq.n	800e4ae <_printf_float+0xae>
 800e574:	232d      	movs	r3, #45	; 0x2d
 800e576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e57a:	e798      	b.n	800e4ae <_printf_float+0xae>
 800e57c:	9a06      	ldr	r2, [sp, #24]
 800e57e:	2a47      	cmp	r2, #71	; 0x47
 800e580:	d1be      	bne.n	800e500 <_printf_float+0x100>
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1bc      	bne.n	800e500 <_printf_float+0x100>
 800e586:	2301      	movs	r3, #1
 800e588:	e7b9      	b.n	800e4fe <_printf_float+0xfe>
 800e58a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e58e:	d118      	bne.n	800e5c2 <_printf_float+0x1c2>
 800e590:	2900      	cmp	r1, #0
 800e592:	6863      	ldr	r3, [r4, #4]
 800e594:	dd0b      	ble.n	800e5ae <_printf_float+0x1ae>
 800e596:	6121      	str	r1, [r4, #16]
 800e598:	b913      	cbnz	r3, 800e5a0 <_printf_float+0x1a0>
 800e59a:	6822      	ldr	r2, [r4, #0]
 800e59c:	07d0      	lsls	r0, r2, #31
 800e59e:	d502      	bpl.n	800e5a6 <_printf_float+0x1a6>
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	440b      	add	r3, r1
 800e5a4:	6123      	str	r3, [r4, #16]
 800e5a6:	65a1      	str	r1, [r4, #88]	; 0x58
 800e5a8:	f04f 0900 	mov.w	r9, #0
 800e5ac:	e7de      	b.n	800e56c <_printf_float+0x16c>
 800e5ae:	b913      	cbnz	r3, 800e5b6 <_printf_float+0x1b6>
 800e5b0:	6822      	ldr	r2, [r4, #0]
 800e5b2:	07d2      	lsls	r2, r2, #31
 800e5b4:	d501      	bpl.n	800e5ba <_printf_float+0x1ba>
 800e5b6:	3302      	adds	r3, #2
 800e5b8:	e7f4      	b.n	800e5a4 <_printf_float+0x1a4>
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e7f2      	b.n	800e5a4 <_printf_float+0x1a4>
 800e5be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5c4:	4299      	cmp	r1, r3
 800e5c6:	db05      	blt.n	800e5d4 <_printf_float+0x1d4>
 800e5c8:	6823      	ldr	r3, [r4, #0]
 800e5ca:	6121      	str	r1, [r4, #16]
 800e5cc:	07d8      	lsls	r0, r3, #31
 800e5ce:	d5ea      	bpl.n	800e5a6 <_printf_float+0x1a6>
 800e5d0:	1c4b      	adds	r3, r1, #1
 800e5d2:	e7e7      	b.n	800e5a4 <_printf_float+0x1a4>
 800e5d4:	2900      	cmp	r1, #0
 800e5d6:	bfd4      	ite	le
 800e5d8:	f1c1 0202 	rsble	r2, r1, #2
 800e5dc:	2201      	movgt	r2, #1
 800e5de:	4413      	add	r3, r2
 800e5e0:	e7e0      	b.n	800e5a4 <_printf_float+0x1a4>
 800e5e2:	6823      	ldr	r3, [r4, #0]
 800e5e4:	055a      	lsls	r2, r3, #21
 800e5e6:	d407      	bmi.n	800e5f8 <_printf_float+0x1f8>
 800e5e8:	6923      	ldr	r3, [r4, #16]
 800e5ea:	4642      	mov	r2, r8
 800e5ec:	4631      	mov	r1, r6
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	47b8      	blx	r7
 800e5f2:	3001      	adds	r0, #1
 800e5f4:	d12c      	bne.n	800e650 <_printf_float+0x250>
 800e5f6:	e764      	b.n	800e4c2 <_printf_float+0xc2>
 800e5f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e5fc:	f240 80e0 	bls.w	800e7c0 <_printf_float+0x3c0>
 800e600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e604:	2200      	movs	r2, #0
 800e606:	2300      	movs	r3, #0
 800e608:	f7f2 fa6e 	bl	8000ae8 <__aeabi_dcmpeq>
 800e60c:	2800      	cmp	r0, #0
 800e60e:	d034      	beq.n	800e67a <_printf_float+0x27a>
 800e610:	4a37      	ldr	r2, [pc, #220]	; (800e6f0 <_printf_float+0x2f0>)
 800e612:	2301      	movs	r3, #1
 800e614:	4631      	mov	r1, r6
 800e616:	4628      	mov	r0, r5
 800e618:	47b8      	blx	r7
 800e61a:	3001      	adds	r0, #1
 800e61c:	f43f af51 	beq.w	800e4c2 <_printf_float+0xc2>
 800e620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e624:	429a      	cmp	r2, r3
 800e626:	db02      	blt.n	800e62e <_printf_float+0x22e>
 800e628:	6823      	ldr	r3, [r4, #0]
 800e62a:	07d8      	lsls	r0, r3, #31
 800e62c:	d510      	bpl.n	800e650 <_printf_float+0x250>
 800e62e:	ee18 3a10 	vmov	r3, s16
 800e632:	4652      	mov	r2, sl
 800e634:	4631      	mov	r1, r6
 800e636:	4628      	mov	r0, r5
 800e638:	47b8      	blx	r7
 800e63a:	3001      	adds	r0, #1
 800e63c:	f43f af41 	beq.w	800e4c2 <_printf_float+0xc2>
 800e640:	f04f 0800 	mov.w	r8, #0
 800e644:	f104 091a 	add.w	r9, r4, #26
 800e648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e64a:	3b01      	subs	r3, #1
 800e64c:	4543      	cmp	r3, r8
 800e64e:	dc09      	bgt.n	800e664 <_printf_float+0x264>
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	079b      	lsls	r3, r3, #30
 800e654:	f100 8105 	bmi.w	800e862 <_printf_float+0x462>
 800e658:	68e0      	ldr	r0, [r4, #12]
 800e65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e65c:	4298      	cmp	r0, r3
 800e65e:	bfb8      	it	lt
 800e660:	4618      	movlt	r0, r3
 800e662:	e730      	b.n	800e4c6 <_printf_float+0xc6>
 800e664:	2301      	movs	r3, #1
 800e666:	464a      	mov	r2, r9
 800e668:	4631      	mov	r1, r6
 800e66a:	4628      	mov	r0, r5
 800e66c:	47b8      	blx	r7
 800e66e:	3001      	adds	r0, #1
 800e670:	f43f af27 	beq.w	800e4c2 <_printf_float+0xc2>
 800e674:	f108 0801 	add.w	r8, r8, #1
 800e678:	e7e6      	b.n	800e648 <_printf_float+0x248>
 800e67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	dc39      	bgt.n	800e6f4 <_printf_float+0x2f4>
 800e680:	4a1b      	ldr	r2, [pc, #108]	; (800e6f0 <_printf_float+0x2f0>)
 800e682:	2301      	movs	r3, #1
 800e684:	4631      	mov	r1, r6
 800e686:	4628      	mov	r0, r5
 800e688:	47b8      	blx	r7
 800e68a:	3001      	adds	r0, #1
 800e68c:	f43f af19 	beq.w	800e4c2 <_printf_float+0xc2>
 800e690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e694:	4313      	orrs	r3, r2
 800e696:	d102      	bne.n	800e69e <_printf_float+0x29e>
 800e698:	6823      	ldr	r3, [r4, #0]
 800e69a:	07d9      	lsls	r1, r3, #31
 800e69c:	d5d8      	bpl.n	800e650 <_printf_float+0x250>
 800e69e:	ee18 3a10 	vmov	r3, s16
 800e6a2:	4652      	mov	r2, sl
 800e6a4:	4631      	mov	r1, r6
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	47b8      	blx	r7
 800e6aa:	3001      	adds	r0, #1
 800e6ac:	f43f af09 	beq.w	800e4c2 <_printf_float+0xc2>
 800e6b0:	f04f 0900 	mov.w	r9, #0
 800e6b4:	f104 0a1a 	add.w	sl, r4, #26
 800e6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ba:	425b      	negs	r3, r3
 800e6bc:	454b      	cmp	r3, r9
 800e6be:	dc01      	bgt.n	800e6c4 <_printf_float+0x2c4>
 800e6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6c2:	e792      	b.n	800e5ea <_printf_float+0x1ea>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	4652      	mov	r2, sl
 800e6c8:	4631      	mov	r1, r6
 800e6ca:	4628      	mov	r0, r5
 800e6cc:	47b8      	blx	r7
 800e6ce:	3001      	adds	r0, #1
 800e6d0:	f43f aef7 	beq.w	800e4c2 <_printf_float+0xc2>
 800e6d4:	f109 0901 	add.w	r9, r9, #1
 800e6d8:	e7ee      	b.n	800e6b8 <_printf_float+0x2b8>
 800e6da:	bf00      	nop
 800e6dc:	7fefffff 	.word	0x7fefffff
 800e6e0:	08012ca5 	.word	0x08012ca5
 800e6e4:	08012ca9 	.word	0x08012ca9
 800e6e8:	08012cb1 	.word	0x08012cb1
 800e6ec:	08012cad 	.word	0x08012cad
 800e6f0:	08012cb5 	.word	0x08012cb5
 800e6f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	bfa8      	it	ge
 800e6fc:	461a      	movge	r2, r3
 800e6fe:	2a00      	cmp	r2, #0
 800e700:	4691      	mov	r9, r2
 800e702:	dc37      	bgt.n	800e774 <_printf_float+0x374>
 800e704:	f04f 0b00 	mov.w	fp, #0
 800e708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e70c:	f104 021a 	add.w	r2, r4, #26
 800e710:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e712:	9305      	str	r3, [sp, #20]
 800e714:	eba3 0309 	sub.w	r3, r3, r9
 800e718:	455b      	cmp	r3, fp
 800e71a:	dc33      	bgt.n	800e784 <_printf_float+0x384>
 800e71c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e720:	429a      	cmp	r2, r3
 800e722:	db3b      	blt.n	800e79c <_printf_float+0x39c>
 800e724:	6823      	ldr	r3, [r4, #0]
 800e726:	07da      	lsls	r2, r3, #31
 800e728:	d438      	bmi.n	800e79c <_printf_float+0x39c>
 800e72a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e72c:	9b05      	ldr	r3, [sp, #20]
 800e72e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e730:	1ad3      	subs	r3, r2, r3
 800e732:	eba2 0901 	sub.w	r9, r2, r1
 800e736:	4599      	cmp	r9, r3
 800e738:	bfa8      	it	ge
 800e73a:	4699      	movge	r9, r3
 800e73c:	f1b9 0f00 	cmp.w	r9, #0
 800e740:	dc35      	bgt.n	800e7ae <_printf_float+0x3ae>
 800e742:	f04f 0800 	mov.w	r8, #0
 800e746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e74a:	f104 0a1a 	add.w	sl, r4, #26
 800e74e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e752:	1a9b      	subs	r3, r3, r2
 800e754:	eba3 0309 	sub.w	r3, r3, r9
 800e758:	4543      	cmp	r3, r8
 800e75a:	f77f af79 	ble.w	800e650 <_printf_float+0x250>
 800e75e:	2301      	movs	r3, #1
 800e760:	4652      	mov	r2, sl
 800e762:	4631      	mov	r1, r6
 800e764:	4628      	mov	r0, r5
 800e766:	47b8      	blx	r7
 800e768:	3001      	adds	r0, #1
 800e76a:	f43f aeaa 	beq.w	800e4c2 <_printf_float+0xc2>
 800e76e:	f108 0801 	add.w	r8, r8, #1
 800e772:	e7ec      	b.n	800e74e <_printf_float+0x34e>
 800e774:	4613      	mov	r3, r2
 800e776:	4631      	mov	r1, r6
 800e778:	4642      	mov	r2, r8
 800e77a:	4628      	mov	r0, r5
 800e77c:	47b8      	blx	r7
 800e77e:	3001      	adds	r0, #1
 800e780:	d1c0      	bne.n	800e704 <_printf_float+0x304>
 800e782:	e69e      	b.n	800e4c2 <_printf_float+0xc2>
 800e784:	2301      	movs	r3, #1
 800e786:	4631      	mov	r1, r6
 800e788:	4628      	mov	r0, r5
 800e78a:	9205      	str	r2, [sp, #20]
 800e78c:	47b8      	blx	r7
 800e78e:	3001      	adds	r0, #1
 800e790:	f43f ae97 	beq.w	800e4c2 <_printf_float+0xc2>
 800e794:	9a05      	ldr	r2, [sp, #20]
 800e796:	f10b 0b01 	add.w	fp, fp, #1
 800e79a:	e7b9      	b.n	800e710 <_printf_float+0x310>
 800e79c:	ee18 3a10 	vmov	r3, s16
 800e7a0:	4652      	mov	r2, sl
 800e7a2:	4631      	mov	r1, r6
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	47b8      	blx	r7
 800e7a8:	3001      	adds	r0, #1
 800e7aa:	d1be      	bne.n	800e72a <_printf_float+0x32a>
 800e7ac:	e689      	b.n	800e4c2 <_printf_float+0xc2>
 800e7ae:	9a05      	ldr	r2, [sp, #20]
 800e7b0:	464b      	mov	r3, r9
 800e7b2:	4442      	add	r2, r8
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	47b8      	blx	r7
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	d1c1      	bne.n	800e742 <_printf_float+0x342>
 800e7be:	e680      	b.n	800e4c2 <_printf_float+0xc2>
 800e7c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7c2:	2a01      	cmp	r2, #1
 800e7c4:	dc01      	bgt.n	800e7ca <_printf_float+0x3ca>
 800e7c6:	07db      	lsls	r3, r3, #31
 800e7c8:	d538      	bpl.n	800e83c <_printf_float+0x43c>
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	4642      	mov	r2, r8
 800e7ce:	4631      	mov	r1, r6
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	47b8      	blx	r7
 800e7d4:	3001      	adds	r0, #1
 800e7d6:	f43f ae74 	beq.w	800e4c2 <_printf_float+0xc2>
 800e7da:	ee18 3a10 	vmov	r3, s16
 800e7de:	4652      	mov	r2, sl
 800e7e0:	4631      	mov	r1, r6
 800e7e2:	4628      	mov	r0, r5
 800e7e4:	47b8      	blx	r7
 800e7e6:	3001      	adds	r0, #1
 800e7e8:	f43f ae6b 	beq.w	800e4c2 <_printf_float+0xc2>
 800e7ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f7f2 f978 	bl	8000ae8 <__aeabi_dcmpeq>
 800e7f8:	b9d8      	cbnz	r0, 800e832 <_printf_float+0x432>
 800e7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7fc:	f108 0201 	add.w	r2, r8, #1
 800e800:	3b01      	subs	r3, #1
 800e802:	4631      	mov	r1, r6
 800e804:	4628      	mov	r0, r5
 800e806:	47b8      	blx	r7
 800e808:	3001      	adds	r0, #1
 800e80a:	d10e      	bne.n	800e82a <_printf_float+0x42a>
 800e80c:	e659      	b.n	800e4c2 <_printf_float+0xc2>
 800e80e:	2301      	movs	r3, #1
 800e810:	4652      	mov	r2, sl
 800e812:	4631      	mov	r1, r6
 800e814:	4628      	mov	r0, r5
 800e816:	47b8      	blx	r7
 800e818:	3001      	adds	r0, #1
 800e81a:	f43f ae52 	beq.w	800e4c2 <_printf_float+0xc2>
 800e81e:	f108 0801 	add.w	r8, r8, #1
 800e822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e824:	3b01      	subs	r3, #1
 800e826:	4543      	cmp	r3, r8
 800e828:	dcf1      	bgt.n	800e80e <_printf_float+0x40e>
 800e82a:	464b      	mov	r3, r9
 800e82c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e830:	e6dc      	b.n	800e5ec <_printf_float+0x1ec>
 800e832:	f04f 0800 	mov.w	r8, #0
 800e836:	f104 0a1a 	add.w	sl, r4, #26
 800e83a:	e7f2      	b.n	800e822 <_printf_float+0x422>
 800e83c:	2301      	movs	r3, #1
 800e83e:	4642      	mov	r2, r8
 800e840:	e7df      	b.n	800e802 <_printf_float+0x402>
 800e842:	2301      	movs	r3, #1
 800e844:	464a      	mov	r2, r9
 800e846:	4631      	mov	r1, r6
 800e848:	4628      	mov	r0, r5
 800e84a:	47b8      	blx	r7
 800e84c:	3001      	adds	r0, #1
 800e84e:	f43f ae38 	beq.w	800e4c2 <_printf_float+0xc2>
 800e852:	f108 0801 	add.w	r8, r8, #1
 800e856:	68e3      	ldr	r3, [r4, #12]
 800e858:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e85a:	1a5b      	subs	r3, r3, r1
 800e85c:	4543      	cmp	r3, r8
 800e85e:	dcf0      	bgt.n	800e842 <_printf_float+0x442>
 800e860:	e6fa      	b.n	800e658 <_printf_float+0x258>
 800e862:	f04f 0800 	mov.w	r8, #0
 800e866:	f104 0919 	add.w	r9, r4, #25
 800e86a:	e7f4      	b.n	800e856 <_printf_float+0x456>

0800e86c <_printf_common>:
 800e86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e870:	4616      	mov	r6, r2
 800e872:	4699      	mov	r9, r3
 800e874:	688a      	ldr	r2, [r1, #8]
 800e876:	690b      	ldr	r3, [r1, #16]
 800e878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e87c:	4293      	cmp	r3, r2
 800e87e:	bfb8      	it	lt
 800e880:	4613      	movlt	r3, r2
 800e882:	6033      	str	r3, [r6, #0]
 800e884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e888:	4607      	mov	r7, r0
 800e88a:	460c      	mov	r4, r1
 800e88c:	b10a      	cbz	r2, 800e892 <_printf_common+0x26>
 800e88e:	3301      	adds	r3, #1
 800e890:	6033      	str	r3, [r6, #0]
 800e892:	6823      	ldr	r3, [r4, #0]
 800e894:	0699      	lsls	r1, r3, #26
 800e896:	bf42      	ittt	mi
 800e898:	6833      	ldrmi	r3, [r6, #0]
 800e89a:	3302      	addmi	r3, #2
 800e89c:	6033      	strmi	r3, [r6, #0]
 800e89e:	6825      	ldr	r5, [r4, #0]
 800e8a0:	f015 0506 	ands.w	r5, r5, #6
 800e8a4:	d106      	bne.n	800e8b4 <_printf_common+0x48>
 800e8a6:	f104 0a19 	add.w	sl, r4, #25
 800e8aa:	68e3      	ldr	r3, [r4, #12]
 800e8ac:	6832      	ldr	r2, [r6, #0]
 800e8ae:	1a9b      	subs	r3, r3, r2
 800e8b0:	42ab      	cmp	r3, r5
 800e8b2:	dc26      	bgt.n	800e902 <_printf_common+0x96>
 800e8b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8b8:	1e13      	subs	r3, r2, #0
 800e8ba:	6822      	ldr	r2, [r4, #0]
 800e8bc:	bf18      	it	ne
 800e8be:	2301      	movne	r3, #1
 800e8c0:	0692      	lsls	r2, r2, #26
 800e8c2:	d42b      	bmi.n	800e91c <_printf_common+0xb0>
 800e8c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8c8:	4649      	mov	r1, r9
 800e8ca:	4638      	mov	r0, r7
 800e8cc:	47c0      	blx	r8
 800e8ce:	3001      	adds	r0, #1
 800e8d0:	d01e      	beq.n	800e910 <_printf_common+0xa4>
 800e8d2:	6823      	ldr	r3, [r4, #0]
 800e8d4:	68e5      	ldr	r5, [r4, #12]
 800e8d6:	6832      	ldr	r2, [r6, #0]
 800e8d8:	f003 0306 	and.w	r3, r3, #6
 800e8dc:	2b04      	cmp	r3, #4
 800e8de:	bf08      	it	eq
 800e8e0:	1aad      	subeq	r5, r5, r2
 800e8e2:	68a3      	ldr	r3, [r4, #8]
 800e8e4:	6922      	ldr	r2, [r4, #16]
 800e8e6:	bf0c      	ite	eq
 800e8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8ec:	2500      	movne	r5, #0
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	bfc4      	itt	gt
 800e8f2:	1a9b      	subgt	r3, r3, r2
 800e8f4:	18ed      	addgt	r5, r5, r3
 800e8f6:	2600      	movs	r6, #0
 800e8f8:	341a      	adds	r4, #26
 800e8fa:	42b5      	cmp	r5, r6
 800e8fc:	d11a      	bne.n	800e934 <_printf_common+0xc8>
 800e8fe:	2000      	movs	r0, #0
 800e900:	e008      	b.n	800e914 <_printf_common+0xa8>
 800e902:	2301      	movs	r3, #1
 800e904:	4652      	mov	r2, sl
 800e906:	4649      	mov	r1, r9
 800e908:	4638      	mov	r0, r7
 800e90a:	47c0      	blx	r8
 800e90c:	3001      	adds	r0, #1
 800e90e:	d103      	bne.n	800e918 <_printf_common+0xac>
 800e910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e918:	3501      	adds	r5, #1
 800e91a:	e7c6      	b.n	800e8aa <_printf_common+0x3e>
 800e91c:	18e1      	adds	r1, r4, r3
 800e91e:	1c5a      	adds	r2, r3, #1
 800e920:	2030      	movs	r0, #48	; 0x30
 800e922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e926:	4422      	add	r2, r4
 800e928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e92c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e930:	3302      	adds	r3, #2
 800e932:	e7c7      	b.n	800e8c4 <_printf_common+0x58>
 800e934:	2301      	movs	r3, #1
 800e936:	4622      	mov	r2, r4
 800e938:	4649      	mov	r1, r9
 800e93a:	4638      	mov	r0, r7
 800e93c:	47c0      	blx	r8
 800e93e:	3001      	adds	r0, #1
 800e940:	d0e6      	beq.n	800e910 <_printf_common+0xa4>
 800e942:	3601      	adds	r6, #1
 800e944:	e7d9      	b.n	800e8fa <_printf_common+0x8e>
	...

0800e948 <_printf_i>:
 800e948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e94c:	460c      	mov	r4, r1
 800e94e:	4691      	mov	r9, r2
 800e950:	7e27      	ldrb	r7, [r4, #24]
 800e952:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e954:	2f78      	cmp	r7, #120	; 0x78
 800e956:	4680      	mov	r8, r0
 800e958:	469a      	mov	sl, r3
 800e95a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e95e:	d807      	bhi.n	800e970 <_printf_i+0x28>
 800e960:	2f62      	cmp	r7, #98	; 0x62
 800e962:	d80a      	bhi.n	800e97a <_printf_i+0x32>
 800e964:	2f00      	cmp	r7, #0
 800e966:	f000 80d8 	beq.w	800eb1a <_printf_i+0x1d2>
 800e96a:	2f58      	cmp	r7, #88	; 0x58
 800e96c:	f000 80a3 	beq.w	800eab6 <_printf_i+0x16e>
 800e970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e978:	e03a      	b.n	800e9f0 <_printf_i+0xa8>
 800e97a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e97e:	2b15      	cmp	r3, #21
 800e980:	d8f6      	bhi.n	800e970 <_printf_i+0x28>
 800e982:	a001      	add	r0, pc, #4	; (adr r0, 800e988 <_printf_i+0x40>)
 800e984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e988:	0800e9e1 	.word	0x0800e9e1
 800e98c:	0800e9f5 	.word	0x0800e9f5
 800e990:	0800e971 	.word	0x0800e971
 800e994:	0800e971 	.word	0x0800e971
 800e998:	0800e971 	.word	0x0800e971
 800e99c:	0800e971 	.word	0x0800e971
 800e9a0:	0800e9f5 	.word	0x0800e9f5
 800e9a4:	0800e971 	.word	0x0800e971
 800e9a8:	0800e971 	.word	0x0800e971
 800e9ac:	0800e971 	.word	0x0800e971
 800e9b0:	0800e971 	.word	0x0800e971
 800e9b4:	0800eb01 	.word	0x0800eb01
 800e9b8:	0800ea25 	.word	0x0800ea25
 800e9bc:	0800eae3 	.word	0x0800eae3
 800e9c0:	0800e971 	.word	0x0800e971
 800e9c4:	0800e971 	.word	0x0800e971
 800e9c8:	0800eb23 	.word	0x0800eb23
 800e9cc:	0800e971 	.word	0x0800e971
 800e9d0:	0800ea25 	.word	0x0800ea25
 800e9d4:	0800e971 	.word	0x0800e971
 800e9d8:	0800e971 	.word	0x0800e971
 800e9dc:	0800eaeb 	.word	0x0800eaeb
 800e9e0:	680b      	ldr	r3, [r1, #0]
 800e9e2:	1d1a      	adds	r2, r3, #4
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	600a      	str	r2, [r1, #0]
 800e9e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e0a3      	b.n	800eb3c <_printf_i+0x1f4>
 800e9f4:	6825      	ldr	r5, [r4, #0]
 800e9f6:	6808      	ldr	r0, [r1, #0]
 800e9f8:	062e      	lsls	r6, r5, #24
 800e9fa:	f100 0304 	add.w	r3, r0, #4
 800e9fe:	d50a      	bpl.n	800ea16 <_printf_i+0xce>
 800ea00:	6805      	ldr	r5, [r0, #0]
 800ea02:	600b      	str	r3, [r1, #0]
 800ea04:	2d00      	cmp	r5, #0
 800ea06:	da03      	bge.n	800ea10 <_printf_i+0xc8>
 800ea08:	232d      	movs	r3, #45	; 0x2d
 800ea0a:	426d      	negs	r5, r5
 800ea0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea10:	485e      	ldr	r0, [pc, #376]	; (800eb8c <_printf_i+0x244>)
 800ea12:	230a      	movs	r3, #10
 800ea14:	e019      	b.n	800ea4a <_printf_i+0x102>
 800ea16:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ea1a:	6805      	ldr	r5, [r0, #0]
 800ea1c:	600b      	str	r3, [r1, #0]
 800ea1e:	bf18      	it	ne
 800ea20:	b22d      	sxthne	r5, r5
 800ea22:	e7ef      	b.n	800ea04 <_printf_i+0xbc>
 800ea24:	680b      	ldr	r3, [r1, #0]
 800ea26:	6825      	ldr	r5, [r4, #0]
 800ea28:	1d18      	adds	r0, r3, #4
 800ea2a:	6008      	str	r0, [r1, #0]
 800ea2c:	0628      	lsls	r0, r5, #24
 800ea2e:	d501      	bpl.n	800ea34 <_printf_i+0xec>
 800ea30:	681d      	ldr	r5, [r3, #0]
 800ea32:	e002      	b.n	800ea3a <_printf_i+0xf2>
 800ea34:	0669      	lsls	r1, r5, #25
 800ea36:	d5fb      	bpl.n	800ea30 <_printf_i+0xe8>
 800ea38:	881d      	ldrh	r5, [r3, #0]
 800ea3a:	4854      	ldr	r0, [pc, #336]	; (800eb8c <_printf_i+0x244>)
 800ea3c:	2f6f      	cmp	r7, #111	; 0x6f
 800ea3e:	bf0c      	ite	eq
 800ea40:	2308      	moveq	r3, #8
 800ea42:	230a      	movne	r3, #10
 800ea44:	2100      	movs	r1, #0
 800ea46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea4a:	6866      	ldr	r6, [r4, #4]
 800ea4c:	60a6      	str	r6, [r4, #8]
 800ea4e:	2e00      	cmp	r6, #0
 800ea50:	bfa2      	ittt	ge
 800ea52:	6821      	ldrge	r1, [r4, #0]
 800ea54:	f021 0104 	bicge.w	r1, r1, #4
 800ea58:	6021      	strge	r1, [r4, #0]
 800ea5a:	b90d      	cbnz	r5, 800ea60 <_printf_i+0x118>
 800ea5c:	2e00      	cmp	r6, #0
 800ea5e:	d04d      	beq.n	800eafc <_printf_i+0x1b4>
 800ea60:	4616      	mov	r6, r2
 800ea62:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea66:	fb03 5711 	mls	r7, r3, r1, r5
 800ea6a:	5dc7      	ldrb	r7, [r0, r7]
 800ea6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ea70:	462f      	mov	r7, r5
 800ea72:	42bb      	cmp	r3, r7
 800ea74:	460d      	mov	r5, r1
 800ea76:	d9f4      	bls.n	800ea62 <_printf_i+0x11a>
 800ea78:	2b08      	cmp	r3, #8
 800ea7a:	d10b      	bne.n	800ea94 <_printf_i+0x14c>
 800ea7c:	6823      	ldr	r3, [r4, #0]
 800ea7e:	07df      	lsls	r7, r3, #31
 800ea80:	d508      	bpl.n	800ea94 <_printf_i+0x14c>
 800ea82:	6923      	ldr	r3, [r4, #16]
 800ea84:	6861      	ldr	r1, [r4, #4]
 800ea86:	4299      	cmp	r1, r3
 800ea88:	bfde      	ittt	le
 800ea8a:	2330      	movle	r3, #48	; 0x30
 800ea8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ea90:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ea94:	1b92      	subs	r2, r2, r6
 800ea96:	6122      	str	r2, [r4, #16]
 800ea98:	f8cd a000 	str.w	sl, [sp]
 800ea9c:	464b      	mov	r3, r9
 800ea9e:	aa03      	add	r2, sp, #12
 800eaa0:	4621      	mov	r1, r4
 800eaa2:	4640      	mov	r0, r8
 800eaa4:	f7ff fee2 	bl	800e86c <_printf_common>
 800eaa8:	3001      	adds	r0, #1
 800eaaa:	d14c      	bne.n	800eb46 <_printf_i+0x1fe>
 800eaac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eab0:	b004      	add	sp, #16
 800eab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eab6:	4835      	ldr	r0, [pc, #212]	; (800eb8c <_printf_i+0x244>)
 800eab8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eabc:	6823      	ldr	r3, [r4, #0]
 800eabe:	680e      	ldr	r6, [r1, #0]
 800eac0:	061f      	lsls	r7, r3, #24
 800eac2:	f856 5b04 	ldr.w	r5, [r6], #4
 800eac6:	600e      	str	r6, [r1, #0]
 800eac8:	d514      	bpl.n	800eaf4 <_printf_i+0x1ac>
 800eaca:	07d9      	lsls	r1, r3, #31
 800eacc:	bf44      	itt	mi
 800eace:	f043 0320 	orrmi.w	r3, r3, #32
 800ead2:	6023      	strmi	r3, [r4, #0]
 800ead4:	b91d      	cbnz	r5, 800eade <_printf_i+0x196>
 800ead6:	6823      	ldr	r3, [r4, #0]
 800ead8:	f023 0320 	bic.w	r3, r3, #32
 800eadc:	6023      	str	r3, [r4, #0]
 800eade:	2310      	movs	r3, #16
 800eae0:	e7b0      	b.n	800ea44 <_printf_i+0xfc>
 800eae2:	6823      	ldr	r3, [r4, #0]
 800eae4:	f043 0320 	orr.w	r3, r3, #32
 800eae8:	6023      	str	r3, [r4, #0]
 800eaea:	2378      	movs	r3, #120	; 0x78
 800eaec:	4828      	ldr	r0, [pc, #160]	; (800eb90 <_printf_i+0x248>)
 800eaee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eaf2:	e7e3      	b.n	800eabc <_printf_i+0x174>
 800eaf4:	065e      	lsls	r6, r3, #25
 800eaf6:	bf48      	it	mi
 800eaf8:	b2ad      	uxthmi	r5, r5
 800eafa:	e7e6      	b.n	800eaca <_printf_i+0x182>
 800eafc:	4616      	mov	r6, r2
 800eafe:	e7bb      	b.n	800ea78 <_printf_i+0x130>
 800eb00:	680b      	ldr	r3, [r1, #0]
 800eb02:	6826      	ldr	r6, [r4, #0]
 800eb04:	6960      	ldr	r0, [r4, #20]
 800eb06:	1d1d      	adds	r5, r3, #4
 800eb08:	600d      	str	r5, [r1, #0]
 800eb0a:	0635      	lsls	r5, r6, #24
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	d501      	bpl.n	800eb14 <_printf_i+0x1cc>
 800eb10:	6018      	str	r0, [r3, #0]
 800eb12:	e002      	b.n	800eb1a <_printf_i+0x1d2>
 800eb14:	0671      	lsls	r1, r6, #25
 800eb16:	d5fb      	bpl.n	800eb10 <_printf_i+0x1c8>
 800eb18:	8018      	strh	r0, [r3, #0]
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	6123      	str	r3, [r4, #16]
 800eb1e:	4616      	mov	r6, r2
 800eb20:	e7ba      	b.n	800ea98 <_printf_i+0x150>
 800eb22:	680b      	ldr	r3, [r1, #0]
 800eb24:	1d1a      	adds	r2, r3, #4
 800eb26:	600a      	str	r2, [r1, #0]
 800eb28:	681e      	ldr	r6, [r3, #0]
 800eb2a:	6862      	ldr	r2, [r4, #4]
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	4630      	mov	r0, r6
 800eb30:	f7f1 fb66 	bl	8000200 <memchr>
 800eb34:	b108      	cbz	r0, 800eb3a <_printf_i+0x1f2>
 800eb36:	1b80      	subs	r0, r0, r6
 800eb38:	6060      	str	r0, [r4, #4]
 800eb3a:	6863      	ldr	r3, [r4, #4]
 800eb3c:	6123      	str	r3, [r4, #16]
 800eb3e:	2300      	movs	r3, #0
 800eb40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb44:	e7a8      	b.n	800ea98 <_printf_i+0x150>
 800eb46:	6923      	ldr	r3, [r4, #16]
 800eb48:	4632      	mov	r2, r6
 800eb4a:	4649      	mov	r1, r9
 800eb4c:	4640      	mov	r0, r8
 800eb4e:	47d0      	blx	sl
 800eb50:	3001      	adds	r0, #1
 800eb52:	d0ab      	beq.n	800eaac <_printf_i+0x164>
 800eb54:	6823      	ldr	r3, [r4, #0]
 800eb56:	079b      	lsls	r3, r3, #30
 800eb58:	d413      	bmi.n	800eb82 <_printf_i+0x23a>
 800eb5a:	68e0      	ldr	r0, [r4, #12]
 800eb5c:	9b03      	ldr	r3, [sp, #12]
 800eb5e:	4298      	cmp	r0, r3
 800eb60:	bfb8      	it	lt
 800eb62:	4618      	movlt	r0, r3
 800eb64:	e7a4      	b.n	800eab0 <_printf_i+0x168>
 800eb66:	2301      	movs	r3, #1
 800eb68:	4632      	mov	r2, r6
 800eb6a:	4649      	mov	r1, r9
 800eb6c:	4640      	mov	r0, r8
 800eb6e:	47d0      	blx	sl
 800eb70:	3001      	adds	r0, #1
 800eb72:	d09b      	beq.n	800eaac <_printf_i+0x164>
 800eb74:	3501      	adds	r5, #1
 800eb76:	68e3      	ldr	r3, [r4, #12]
 800eb78:	9903      	ldr	r1, [sp, #12]
 800eb7a:	1a5b      	subs	r3, r3, r1
 800eb7c:	42ab      	cmp	r3, r5
 800eb7e:	dcf2      	bgt.n	800eb66 <_printf_i+0x21e>
 800eb80:	e7eb      	b.n	800eb5a <_printf_i+0x212>
 800eb82:	2500      	movs	r5, #0
 800eb84:	f104 0619 	add.w	r6, r4, #25
 800eb88:	e7f5      	b.n	800eb76 <_printf_i+0x22e>
 800eb8a:	bf00      	nop
 800eb8c:	08012cb7 	.word	0x08012cb7
 800eb90:	08012cc8 	.word	0x08012cc8

0800eb94 <_sbrk_r>:
 800eb94:	b538      	push	{r3, r4, r5, lr}
 800eb96:	4d06      	ldr	r5, [pc, #24]	; (800ebb0 <_sbrk_r+0x1c>)
 800eb98:	2300      	movs	r3, #0
 800eb9a:	4604      	mov	r4, r0
 800eb9c:	4608      	mov	r0, r1
 800eb9e:	602b      	str	r3, [r5, #0]
 800eba0:	f7f5 f9fa 	bl	8003f98 <_sbrk>
 800eba4:	1c43      	adds	r3, r0, #1
 800eba6:	d102      	bne.n	800ebae <_sbrk_r+0x1a>
 800eba8:	682b      	ldr	r3, [r5, #0]
 800ebaa:	b103      	cbz	r3, 800ebae <_sbrk_r+0x1a>
 800ebac:	6023      	str	r3, [r4, #0]
 800ebae:	bd38      	pop	{r3, r4, r5, pc}
 800ebb0:	20000ec0 	.word	0x20000ec0

0800ebb4 <siprintf>:
 800ebb4:	b40e      	push	{r1, r2, r3}
 800ebb6:	b500      	push	{lr}
 800ebb8:	b09c      	sub	sp, #112	; 0x70
 800ebba:	ab1d      	add	r3, sp, #116	; 0x74
 800ebbc:	9002      	str	r0, [sp, #8]
 800ebbe:	9006      	str	r0, [sp, #24]
 800ebc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ebc4:	4809      	ldr	r0, [pc, #36]	; (800ebec <siprintf+0x38>)
 800ebc6:	9107      	str	r1, [sp, #28]
 800ebc8:	9104      	str	r1, [sp, #16]
 800ebca:	4909      	ldr	r1, [pc, #36]	; (800ebf0 <siprintf+0x3c>)
 800ebcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebd0:	9105      	str	r1, [sp, #20]
 800ebd2:	6800      	ldr	r0, [r0, #0]
 800ebd4:	9301      	str	r3, [sp, #4]
 800ebd6:	a902      	add	r1, sp, #8
 800ebd8:	f003 f9ac 	bl	8011f34 <_svfiprintf_r>
 800ebdc:	9b02      	ldr	r3, [sp, #8]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	701a      	strb	r2, [r3, #0]
 800ebe2:	b01c      	add	sp, #112	; 0x70
 800ebe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebe8:	b003      	add	sp, #12
 800ebea:	4770      	bx	lr
 800ebec:	20000028 	.word	0x20000028
 800ebf0:	ffff0208 	.word	0xffff0208

0800ebf4 <strcat>:
 800ebf4:	b510      	push	{r4, lr}
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	7814      	ldrb	r4, [r2, #0]
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	3201      	adds	r2, #1
 800ebfe:	2c00      	cmp	r4, #0
 800ec00:	d1fa      	bne.n	800ebf8 <strcat+0x4>
 800ec02:	3b01      	subs	r3, #1
 800ec04:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec08:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec0c:	2a00      	cmp	r2, #0
 800ec0e:	d1f9      	bne.n	800ec04 <strcat+0x10>
 800ec10:	bd10      	pop	{r4, pc}

0800ec12 <strcpy>:
 800ec12:	4603      	mov	r3, r0
 800ec14:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec18:	f803 2b01 	strb.w	r2, [r3], #1
 800ec1c:	2a00      	cmp	r2, #0
 800ec1e:	d1f9      	bne.n	800ec14 <strcpy+0x2>
 800ec20:	4770      	bx	lr

0800ec22 <strcspn>:
 800ec22:	b570      	push	{r4, r5, r6, lr}
 800ec24:	4603      	mov	r3, r0
 800ec26:	461e      	mov	r6, r3
 800ec28:	f813 4b01 	ldrb.w	r4, [r3], #1
 800ec2c:	b144      	cbz	r4, 800ec40 <strcspn+0x1e>
 800ec2e:	1e4a      	subs	r2, r1, #1
 800ec30:	e001      	b.n	800ec36 <strcspn+0x14>
 800ec32:	42a5      	cmp	r5, r4
 800ec34:	d004      	beq.n	800ec40 <strcspn+0x1e>
 800ec36:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800ec3a:	2d00      	cmp	r5, #0
 800ec3c:	d1f9      	bne.n	800ec32 <strcspn+0x10>
 800ec3e:	e7f2      	b.n	800ec26 <strcspn+0x4>
 800ec40:	1a30      	subs	r0, r6, r0
 800ec42:	bd70      	pop	{r4, r5, r6, pc}

0800ec44 <strncpy>:
 800ec44:	b510      	push	{r4, lr}
 800ec46:	3901      	subs	r1, #1
 800ec48:	4603      	mov	r3, r0
 800ec4a:	b132      	cbz	r2, 800ec5a <strncpy+0x16>
 800ec4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ec50:	f803 4b01 	strb.w	r4, [r3], #1
 800ec54:	3a01      	subs	r2, #1
 800ec56:	2c00      	cmp	r4, #0
 800ec58:	d1f7      	bne.n	800ec4a <strncpy+0x6>
 800ec5a:	441a      	add	r2, r3
 800ec5c:	2100      	movs	r1, #0
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d100      	bne.n	800ec64 <strncpy+0x20>
 800ec62:	bd10      	pop	{r4, pc}
 800ec64:	f803 1b01 	strb.w	r1, [r3], #1
 800ec68:	e7f9      	b.n	800ec5e <strncpy+0x1a>

0800ec6a <strstr>:
 800ec6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec6c:	780c      	ldrb	r4, [r1, #0]
 800ec6e:	b164      	cbz	r4, 800ec8a <strstr+0x20>
 800ec70:	4603      	mov	r3, r0
 800ec72:	781a      	ldrb	r2, [r3, #0]
 800ec74:	4618      	mov	r0, r3
 800ec76:	1c5e      	adds	r6, r3, #1
 800ec78:	b90a      	cbnz	r2, 800ec7e <strstr+0x14>
 800ec7a:	4610      	mov	r0, r2
 800ec7c:	e005      	b.n	800ec8a <strstr+0x20>
 800ec7e:	4294      	cmp	r4, r2
 800ec80:	d108      	bne.n	800ec94 <strstr+0x2a>
 800ec82:	460d      	mov	r5, r1
 800ec84:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ec88:	b902      	cbnz	r2, 800ec8c <strstr+0x22>
 800ec8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec8c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800ec90:	4297      	cmp	r7, r2
 800ec92:	d0f7      	beq.n	800ec84 <strstr+0x1a>
 800ec94:	4633      	mov	r3, r6
 800ec96:	e7ec      	b.n	800ec72 <strstr+0x8>

0800ec98 <sulp>:
 800ec98:	b570      	push	{r4, r5, r6, lr}
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	460d      	mov	r5, r1
 800ec9e:	ec45 4b10 	vmov	d0, r4, r5
 800eca2:	4616      	mov	r6, r2
 800eca4:	f002 ff66 	bl	8011b74 <__ulp>
 800eca8:	ec51 0b10 	vmov	r0, r1, d0
 800ecac:	b17e      	cbz	r6, 800ecce <sulp+0x36>
 800ecae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ecb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	dd09      	ble.n	800ecce <sulp+0x36>
 800ecba:	051b      	lsls	r3, r3, #20
 800ecbc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ecc0:	2400      	movs	r4, #0
 800ecc2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ecc6:	4622      	mov	r2, r4
 800ecc8:	462b      	mov	r3, r5
 800ecca:	f7f1 fca5 	bl	8000618 <__aeabi_dmul>
 800ecce:	bd70      	pop	{r4, r5, r6, pc}

0800ecd0 <_strtod_l>:
 800ecd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd4:	b0a3      	sub	sp, #140	; 0x8c
 800ecd6:	461f      	mov	r7, r3
 800ecd8:	2300      	movs	r3, #0
 800ecda:	931e      	str	r3, [sp, #120]	; 0x78
 800ecdc:	4ba4      	ldr	r3, [pc, #656]	; (800ef70 <_strtod_l+0x2a0>)
 800ecde:	9219      	str	r2, [sp, #100]	; 0x64
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	9307      	str	r3, [sp, #28]
 800ece4:	4604      	mov	r4, r0
 800ece6:	4618      	mov	r0, r3
 800ece8:	4688      	mov	r8, r1
 800ecea:	f7f1 fa7b 	bl	80001e4 <strlen>
 800ecee:	f04f 0a00 	mov.w	sl, #0
 800ecf2:	4605      	mov	r5, r0
 800ecf4:	f04f 0b00 	mov.w	fp, #0
 800ecf8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ecfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ecfe:	781a      	ldrb	r2, [r3, #0]
 800ed00:	2a2b      	cmp	r2, #43	; 0x2b
 800ed02:	d04c      	beq.n	800ed9e <_strtod_l+0xce>
 800ed04:	d839      	bhi.n	800ed7a <_strtod_l+0xaa>
 800ed06:	2a0d      	cmp	r2, #13
 800ed08:	d832      	bhi.n	800ed70 <_strtod_l+0xa0>
 800ed0a:	2a08      	cmp	r2, #8
 800ed0c:	d832      	bhi.n	800ed74 <_strtod_l+0xa4>
 800ed0e:	2a00      	cmp	r2, #0
 800ed10:	d03c      	beq.n	800ed8c <_strtod_l+0xbc>
 800ed12:	2300      	movs	r3, #0
 800ed14:	930e      	str	r3, [sp, #56]	; 0x38
 800ed16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ed18:	7833      	ldrb	r3, [r6, #0]
 800ed1a:	2b30      	cmp	r3, #48	; 0x30
 800ed1c:	f040 80b4 	bne.w	800ee88 <_strtod_l+0x1b8>
 800ed20:	7873      	ldrb	r3, [r6, #1]
 800ed22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ed26:	2b58      	cmp	r3, #88	; 0x58
 800ed28:	d16c      	bne.n	800ee04 <_strtod_l+0x134>
 800ed2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed2c:	9301      	str	r3, [sp, #4]
 800ed2e:	ab1e      	add	r3, sp, #120	; 0x78
 800ed30:	9702      	str	r7, [sp, #8]
 800ed32:	9300      	str	r3, [sp, #0]
 800ed34:	4a8f      	ldr	r2, [pc, #572]	; (800ef74 <_strtod_l+0x2a4>)
 800ed36:	ab1f      	add	r3, sp, #124	; 0x7c
 800ed38:	a91d      	add	r1, sp, #116	; 0x74
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	f002 f802 	bl	8010d44 <__gethex>
 800ed40:	f010 0707 	ands.w	r7, r0, #7
 800ed44:	4605      	mov	r5, r0
 800ed46:	d005      	beq.n	800ed54 <_strtod_l+0x84>
 800ed48:	2f06      	cmp	r7, #6
 800ed4a:	d12a      	bne.n	800eda2 <_strtod_l+0xd2>
 800ed4c:	3601      	adds	r6, #1
 800ed4e:	2300      	movs	r3, #0
 800ed50:	961d      	str	r6, [sp, #116]	; 0x74
 800ed52:	930e      	str	r3, [sp, #56]	; 0x38
 800ed54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f040 8596 	bne.w	800f888 <_strtod_l+0xbb8>
 800ed5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed5e:	b1db      	cbz	r3, 800ed98 <_strtod_l+0xc8>
 800ed60:	4652      	mov	r2, sl
 800ed62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ed66:	ec43 2b10 	vmov	d0, r2, r3
 800ed6a:	b023      	add	sp, #140	; 0x8c
 800ed6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed70:	2a20      	cmp	r2, #32
 800ed72:	d1ce      	bne.n	800ed12 <_strtod_l+0x42>
 800ed74:	3301      	adds	r3, #1
 800ed76:	931d      	str	r3, [sp, #116]	; 0x74
 800ed78:	e7c0      	b.n	800ecfc <_strtod_l+0x2c>
 800ed7a:	2a2d      	cmp	r2, #45	; 0x2d
 800ed7c:	d1c9      	bne.n	800ed12 <_strtod_l+0x42>
 800ed7e:	2201      	movs	r2, #1
 800ed80:	920e      	str	r2, [sp, #56]	; 0x38
 800ed82:	1c5a      	adds	r2, r3, #1
 800ed84:	921d      	str	r2, [sp, #116]	; 0x74
 800ed86:	785b      	ldrb	r3, [r3, #1]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1c4      	bne.n	800ed16 <_strtod_l+0x46>
 800ed8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ed8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	f040 8576 	bne.w	800f884 <_strtod_l+0xbb4>
 800ed98:	4652      	mov	r2, sl
 800ed9a:	465b      	mov	r3, fp
 800ed9c:	e7e3      	b.n	800ed66 <_strtod_l+0x96>
 800ed9e:	2200      	movs	r2, #0
 800eda0:	e7ee      	b.n	800ed80 <_strtod_l+0xb0>
 800eda2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800eda4:	b13a      	cbz	r2, 800edb6 <_strtod_l+0xe6>
 800eda6:	2135      	movs	r1, #53	; 0x35
 800eda8:	a820      	add	r0, sp, #128	; 0x80
 800edaa:	f002 ffee 	bl	8011d8a <__copybits>
 800edae:	991e      	ldr	r1, [sp, #120]	; 0x78
 800edb0:	4620      	mov	r0, r4
 800edb2:	f002 fbb3 	bl	801151c <_Bfree>
 800edb6:	3f01      	subs	r7, #1
 800edb8:	2f05      	cmp	r7, #5
 800edba:	d807      	bhi.n	800edcc <_strtod_l+0xfc>
 800edbc:	e8df f007 	tbb	[pc, r7]
 800edc0:	1d180b0e 	.word	0x1d180b0e
 800edc4:	030e      	.short	0x030e
 800edc6:	f04f 0b00 	mov.w	fp, #0
 800edca:	46da      	mov	sl, fp
 800edcc:	0728      	lsls	r0, r5, #28
 800edce:	d5c1      	bpl.n	800ed54 <_strtod_l+0x84>
 800edd0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800edd4:	e7be      	b.n	800ed54 <_strtod_l+0x84>
 800edd6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800edda:	e7f7      	b.n	800edcc <_strtod_l+0xfc>
 800eddc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800ede0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ede2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ede6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800edea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800edee:	e7ed      	b.n	800edcc <_strtod_l+0xfc>
 800edf0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800ef78 <_strtod_l+0x2a8>
 800edf4:	f04f 0a00 	mov.w	sl, #0
 800edf8:	e7e8      	b.n	800edcc <_strtod_l+0xfc>
 800edfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800edfe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ee02:	e7e3      	b.n	800edcc <_strtod_l+0xfc>
 800ee04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ee06:	1c5a      	adds	r2, r3, #1
 800ee08:	921d      	str	r2, [sp, #116]	; 0x74
 800ee0a:	785b      	ldrb	r3, [r3, #1]
 800ee0c:	2b30      	cmp	r3, #48	; 0x30
 800ee0e:	d0f9      	beq.n	800ee04 <_strtod_l+0x134>
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d09f      	beq.n	800ed54 <_strtod_l+0x84>
 800ee14:	2301      	movs	r3, #1
 800ee16:	f04f 0900 	mov.w	r9, #0
 800ee1a:	9304      	str	r3, [sp, #16]
 800ee1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ee1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee20:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ee24:	464f      	mov	r7, r9
 800ee26:	220a      	movs	r2, #10
 800ee28:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ee2a:	7806      	ldrb	r6, [r0, #0]
 800ee2c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ee30:	b2d9      	uxtb	r1, r3
 800ee32:	2909      	cmp	r1, #9
 800ee34:	d92a      	bls.n	800ee8c <_strtod_l+0x1bc>
 800ee36:	9907      	ldr	r1, [sp, #28]
 800ee38:	462a      	mov	r2, r5
 800ee3a:	f003 fa0c 	bl	8012256 <strncmp>
 800ee3e:	b398      	cbz	r0, 800eea8 <_strtod_l+0x1d8>
 800ee40:	2000      	movs	r0, #0
 800ee42:	4633      	mov	r3, r6
 800ee44:	463d      	mov	r5, r7
 800ee46:	9007      	str	r0, [sp, #28]
 800ee48:	4602      	mov	r2, r0
 800ee4a:	2b65      	cmp	r3, #101	; 0x65
 800ee4c:	d001      	beq.n	800ee52 <_strtod_l+0x182>
 800ee4e:	2b45      	cmp	r3, #69	; 0x45
 800ee50:	d118      	bne.n	800ee84 <_strtod_l+0x1b4>
 800ee52:	b91d      	cbnz	r5, 800ee5c <_strtod_l+0x18c>
 800ee54:	9b04      	ldr	r3, [sp, #16]
 800ee56:	4303      	orrs	r3, r0
 800ee58:	d098      	beq.n	800ed8c <_strtod_l+0xbc>
 800ee5a:	2500      	movs	r5, #0
 800ee5c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800ee60:	f108 0301 	add.w	r3, r8, #1
 800ee64:	931d      	str	r3, [sp, #116]	; 0x74
 800ee66:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ee6a:	2b2b      	cmp	r3, #43	; 0x2b
 800ee6c:	d075      	beq.n	800ef5a <_strtod_l+0x28a>
 800ee6e:	2b2d      	cmp	r3, #45	; 0x2d
 800ee70:	d07b      	beq.n	800ef6a <_strtod_l+0x29a>
 800ee72:	f04f 0c00 	mov.w	ip, #0
 800ee76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ee7a:	2909      	cmp	r1, #9
 800ee7c:	f240 8082 	bls.w	800ef84 <_strtod_l+0x2b4>
 800ee80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ee84:	2600      	movs	r6, #0
 800ee86:	e09d      	b.n	800efc4 <_strtod_l+0x2f4>
 800ee88:	2300      	movs	r3, #0
 800ee8a:	e7c4      	b.n	800ee16 <_strtod_l+0x146>
 800ee8c:	2f08      	cmp	r7, #8
 800ee8e:	bfd8      	it	le
 800ee90:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ee92:	f100 0001 	add.w	r0, r0, #1
 800ee96:	bfda      	itte	le
 800ee98:	fb02 3301 	mlale	r3, r2, r1, r3
 800ee9c:	9309      	strle	r3, [sp, #36]	; 0x24
 800ee9e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800eea2:	3701      	adds	r7, #1
 800eea4:	901d      	str	r0, [sp, #116]	; 0x74
 800eea6:	e7bf      	b.n	800ee28 <_strtod_l+0x158>
 800eea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eeaa:	195a      	adds	r2, r3, r5
 800eeac:	921d      	str	r2, [sp, #116]	; 0x74
 800eeae:	5d5b      	ldrb	r3, [r3, r5]
 800eeb0:	2f00      	cmp	r7, #0
 800eeb2:	d037      	beq.n	800ef24 <_strtod_l+0x254>
 800eeb4:	9007      	str	r0, [sp, #28]
 800eeb6:	463d      	mov	r5, r7
 800eeb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800eebc:	2a09      	cmp	r2, #9
 800eebe:	d912      	bls.n	800eee6 <_strtod_l+0x216>
 800eec0:	2201      	movs	r2, #1
 800eec2:	e7c2      	b.n	800ee4a <_strtod_l+0x17a>
 800eec4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eec6:	1c5a      	adds	r2, r3, #1
 800eec8:	921d      	str	r2, [sp, #116]	; 0x74
 800eeca:	785b      	ldrb	r3, [r3, #1]
 800eecc:	3001      	adds	r0, #1
 800eece:	2b30      	cmp	r3, #48	; 0x30
 800eed0:	d0f8      	beq.n	800eec4 <_strtod_l+0x1f4>
 800eed2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800eed6:	2a08      	cmp	r2, #8
 800eed8:	f200 84db 	bhi.w	800f892 <_strtod_l+0xbc2>
 800eedc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800eede:	9007      	str	r0, [sp, #28]
 800eee0:	2000      	movs	r0, #0
 800eee2:	920a      	str	r2, [sp, #40]	; 0x28
 800eee4:	4605      	mov	r5, r0
 800eee6:	3b30      	subs	r3, #48	; 0x30
 800eee8:	f100 0201 	add.w	r2, r0, #1
 800eeec:	d014      	beq.n	800ef18 <_strtod_l+0x248>
 800eeee:	9907      	ldr	r1, [sp, #28]
 800eef0:	4411      	add	r1, r2
 800eef2:	9107      	str	r1, [sp, #28]
 800eef4:	462a      	mov	r2, r5
 800eef6:	eb00 0e05 	add.w	lr, r0, r5
 800eefa:	210a      	movs	r1, #10
 800eefc:	4572      	cmp	r2, lr
 800eefe:	d113      	bne.n	800ef28 <_strtod_l+0x258>
 800ef00:	182a      	adds	r2, r5, r0
 800ef02:	2a08      	cmp	r2, #8
 800ef04:	f105 0501 	add.w	r5, r5, #1
 800ef08:	4405      	add	r5, r0
 800ef0a:	dc1c      	bgt.n	800ef46 <_strtod_l+0x276>
 800ef0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef0e:	220a      	movs	r2, #10
 800ef10:	fb02 3301 	mla	r3, r2, r1, r3
 800ef14:	9309      	str	r3, [sp, #36]	; 0x24
 800ef16:	2200      	movs	r2, #0
 800ef18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef1a:	1c59      	adds	r1, r3, #1
 800ef1c:	911d      	str	r1, [sp, #116]	; 0x74
 800ef1e:	785b      	ldrb	r3, [r3, #1]
 800ef20:	4610      	mov	r0, r2
 800ef22:	e7c9      	b.n	800eeb8 <_strtod_l+0x1e8>
 800ef24:	4638      	mov	r0, r7
 800ef26:	e7d2      	b.n	800eece <_strtod_l+0x1fe>
 800ef28:	2a08      	cmp	r2, #8
 800ef2a:	dc04      	bgt.n	800ef36 <_strtod_l+0x266>
 800ef2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ef2e:	434e      	muls	r6, r1
 800ef30:	9609      	str	r6, [sp, #36]	; 0x24
 800ef32:	3201      	adds	r2, #1
 800ef34:	e7e2      	b.n	800eefc <_strtod_l+0x22c>
 800ef36:	f102 0c01 	add.w	ip, r2, #1
 800ef3a:	f1bc 0f10 	cmp.w	ip, #16
 800ef3e:	bfd8      	it	le
 800ef40:	fb01 f909 	mulle.w	r9, r1, r9
 800ef44:	e7f5      	b.n	800ef32 <_strtod_l+0x262>
 800ef46:	2d10      	cmp	r5, #16
 800ef48:	bfdc      	itt	le
 800ef4a:	220a      	movle	r2, #10
 800ef4c:	fb02 3909 	mlale	r9, r2, r9, r3
 800ef50:	e7e1      	b.n	800ef16 <_strtod_l+0x246>
 800ef52:	2300      	movs	r3, #0
 800ef54:	9307      	str	r3, [sp, #28]
 800ef56:	2201      	movs	r2, #1
 800ef58:	e77c      	b.n	800ee54 <_strtod_l+0x184>
 800ef5a:	f04f 0c00 	mov.w	ip, #0
 800ef5e:	f108 0302 	add.w	r3, r8, #2
 800ef62:	931d      	str	r3, [sp, #116]	; 0x74
 800ef64:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ef68:	e785      	b.n	800ee76 <_strtod_l+0x1a6>
 800ef6a:	f04f 0c01 	mov.w	ip, #1
 800ef6e:	e7f6      	b.n	800ef5e <_strtod_l+0x28e>
 800ef70:	08012f94 	.word	0x08012f94
 800ef74:	08012cdc 	.word	0x08012cdc
 800ef78:	7ff00000 	.word	0x7ff00000
 800ef7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef7e:	1c59      	adds	r1, r3, #1
 800ef80:	911d      	str	r1, [sp, #116]	; 0x74
 800ef82:	785b      	ldrb	r3, [r3, #1]
 800ef84:	2b30      	cmp	r3, #48	; 0x30
 800ef86:	d0f9      	beq.n	800ef7c <_strtod_l+0x2ac>
 800ef88:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ef8c:	2908      	cmp	r1, #8
 800ef8e:	f63f af79 	bhi.w	800ee84 <_strtod_l+0x1b4>
 800ef92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ef96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef98:	9308      	str	r3, [sp, #32]
 800ef9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef9c:	1c59      	adds	r1, r3, #1
 800ef9e:	911d      	str	r1, [sp, #116]	; 0x74
 800efa0:	785b      	ldrb	r3, [r3, #1]
 800efa2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800efa6:	2e09      	cmp	r6, #9
 800efa8:	d937      	bls.n	800f01a <_strtod_l+0x34a>
 800efaa:	9e08      	ldr	r6, [sp, #32]
 800efac:	1b89      	subs	r1, r1, r6
 800efae:	2908      	cmp	r1, #8
 800efb0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800efb4:	dc02      	bgt.n	800efbc <_strtod_l+0x2ec>
 800efb6:	4576      	cmp	r6, lr
 800efb8:	bfa8      	it	ge
 800efba:	4676      	movge	r6, lr
 800efbc:	f1bc 0f00 	cmp.w	ip, #0
 800efc0:	d000      	beq.n	800efc4 <_strtod_l+0x2f4>
 800efc2:	4276      	negs	r6, r6
 800efc4:	2d00      	cmp	r5, #0
 800efc6:	d14f      	bne.n	800f068 <_strtod_l+0x398>
 800efc8:	9904      	ldr	r1, [sp, #16]
 800efca:	4301      	orrs	r1, r0
 800efcc:	f47f aec2 	bne.w	800ed54 <_strtod_l+0x84>
 800efd0:	2a00      	cmp	r2, #0
 800efd2:	f47f aedb 	bne.w	800ed8c <_strtod_l+0xbc>
 800efd6:	2b69      	cmp	r3, #105	; 0x69
 800efd8:	d027      	beq.n	800f02a <_strtod_l+0x35a>
 800efda:	dc24      	bgt.n	800f026 <_strtod_l+0x356>
 800efdc:	2b49      	cmp	r3, #73	; 0x49
 800efde:	d024      	beq.n	800f02a <_strtod_l+0x35a>
 800efe0:	2b4e      	cmp	r3, #78	; 0x4e
 800efe2:	f47f aed3 	bne.w	800ed8c <_strtod_l+0xbc>
 800efe6:	499e      	ldr	r1, [pc, #632]	; (800f260 <_strtod_l+0x590>)
 800efe8:	a81d      	add	r0, sp, #116	; 0x74
 800efea:	f002 f903 	bl	80111f4 <__match>
 800efee:	2800      	cmp	r0, #0
 800eff0:	f43f aecc 	beq.w	800ed8c <_strtod_l+0xbc>
 800eff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	2b28      	cmp	r3, #40	; 0x28
 800effa:	d12d      	bne.n	800f058 <_strtod_l+0x388>
 800effc:	4999      	ldr	r1, [pc, #612]	; (800f264 <_strtod_l+0x594>)
 800effe:	aa20      	add	r2, sp, #128	; 0x80
 800f000:	a81d      	add	r0, sp, #116	; 0x74
 800f002:	f002 f90b 	bl	801121c <__hexnan>
 800f006:	2805      	cmp	r0, #5
 800f008:	d126      	bne.n	800f058 <_strtod_l+0x388>
 800f00a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f00c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800f010:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f014:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f018:	e69c      	b.n	800ed54 <_strtod_l+0x84>
 800f01a:	210a      	movs	r1, #10
 800f01c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f020:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f024:	e7b9      	b.n	800ef9a <_strtod_l+0x2ca>
 800f026:	2b6e      	cmp	r3, #110	; 0x6e
 800f028:	e7db      	b.n	800efe2 <_strtod_l+0x312>
 800f02a:	498f      	ldr	r1, [pc, #572]	; (800f268 <_strtod_l+0x598>)
 800f02c:	a81d      	add	r0, sp, #116	; 0x74
 800f02e:	f002 f8e1 	bl	80111f4 <__match>
 800f032:	2800      	cmp	r0, #0
 800f034:	f43f aeaa 	beq.w	800ed8c <_strtod_l+0xbc>
 800f038:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f03a:	498c      	ldr	r1, [pc, #560]	; (800f26c <_strtod_l+0x59c>)
 800f03c:	3b01      	subs	r3, #1
 800f03e:	a81d      	add	r0, sp, #116	; 0x74
 800f040:	931d      	str	r3, [sp, #116]	; 0x74
 800f042:	f002 f8d7 	bl	80111f4 <__match>
 800f046:	b910      	cbnz	r0, 800f04e <_strtod_l+0x37e>
 800f048:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f04a:	3301      	adds	r3, #1
 800f04c:	931d      	str	r3, [sp, #116]	; 0x74
 800f04e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800f27c <_strtod_l+0x5ac>
 800f052:	f04f 0a00 	mov.w	sl, #0
 800f056:	e67d      	b.n	800ed54 <_strtod_l+0x84>
 800f058:	4885      	ldr	r0, [pc, #532]	; (800f270 <_strtod_l+0x5a0>)
 800f05a:	f003 f86d 	bl	8012138 <nan>
 800f05e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f062:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f066:	e675      	b.n	800ed54 <_strtod_l+0x84>
 800f068:	9b07      	ldr	r3, [sp, #28]
 800f06a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f06c:	1af3      	subs	r3, r6, r3
 800f06e:	2f00      	cmp	r7, #0
 800f070:	bf08      	it	eq
 800f072:	462f      	moveq	r7, r5
 800f074:	2d10      	cmp	r5, #16
 800f076:	9308      	str	r3, [sp, #32]
 800f078:	46a8      	mov	r8, r5
 800f07a:	bfa8      	it	ge
 800f07c:	f04f 0810 	movge.w	r8, #16
 800f080:	f7f1 fa50 	bl	8000524 <__aeabi_ui2d>
 800f084:	2d09      	cmp	r5, #9
 800f086:	4682      	mov	sl, r0
 800f088:	468b      	mov	fp, r1
 800f08a:	dd13      	ble.n	800f0b4 <_strtod_l+0x3e4>
 800f08c:	4b79      	ldr	r3, [pc, #484]	; (800f274 <_strtod_l+0x5a4>)
 800f08e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f092:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f096:	f7f1 fabf 	bl	8000618 <__aeabi_dmul>
 800f09a:	4682      	mov	sl, r0
 800f09c:	4648      	mov	r0, r9
 800f09e:	468b      	mov	fp, r1
 800f0a0:	f7f1 fa40 	bl	8000524 <__aeabi_ui2d>
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	460b      	mov	r3, r1
 800f0a8:	4650      	mov	r0, sl
 800f0aa:	4659      	mov	r1, fp
 800f0ac:	f7f1 f8fe 	bl	80002ac <__adddf3>
 800f0b0:	4682      	mov	sl, r0
 800f0b2:	468b      	mov	fp, r1
 800f0b4:	2d0f      	cmp	r5, #15
 800f0b6:	dc38      	bgt.n	800f12a <_strtod_l+0x45a>
 800f0b8:	9b08      	ldr	r3, [sp, #32]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	f43f ae4a 	beq.w	800ed54 <_strtod_l+0x84>
 800f0c0:	dd24      	ble.n	800f10c <_strtod_l+0x43c>
 800f0c2:	2b16      	cmp	r3, #22
 800f0c4:	dc0b      	bgt.n	800f0de <_strtod_l+0x40e>
 800f0c6:	4d6b      	ldr	r5, [pc, #428]	; (800f274 <_strtod_l+0x5a4>)
 800f0c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800f0cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f0d0:	4652      	mov	r2, sl
 800f0d2:	465b      	mov	r3, fp
 800f0d4:	f7f1 faa0 	bl	8000618 <__aeabi_dmul>
 800f0d8:	4682      	mov	sl, r0
 800f0da:	468b      	mov	fp, r1
 800f0dc:	e63a      	b.n	800ed54 <_strtod_l+0x84>
 800f0de:	9a08      	ldr	r2, [sp, #32]
 800f0e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	db20      	blt.n	800f12a <_strtod_l+0x45a>
 800f0e8:	4c62      	ldr	r4, [pc, #392]	; (800f274 <_strtod_l+0x5a4>)
 800f0ea:	f1c5 050f 	rsb	r5, r5, #15
 800f0ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f0f2:	4652      	mov	r2, sl
 800f0f4:	465b      	mov	r3, fp
 800f0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0fa:	f7f1 fa8d 	bl	8000618 <__aeabi_dmul>
 800f0fe:	9b08      	ldr	r3, [sp, #32]
 800f100:	1b5d      	subs	r5, r3, r5
 800f102:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f106:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f10a:	e7e3      	b.n	800f0d4 <_strtod_l+0x404>
 800f10c:	9b08      	ldr	r3, [sp, #32]
 800f10e:	3316      	adds	r3, #22
 800f110:	db0b      	blt.n	800f12a <_strtod_l+0x45a>
 800f112:	9b07      	ldr	r3, [sp, #28]
 800f114:	4a57      	ldr	r2, [pc, #348]	; (800f274 <_strtod_l+0x5a4>)
 800f116:	1b9e      	subs	r6, r3, r6
 800f118:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f11c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f120:	4650      	mov	r0, sl
 800f122:	4659      	mov	r1, fp
 800f124:	f7f1 fba2 	bl	800086c <__aeabi_ddiv>
 800f128:	e7d6      	b.n	800f0d8 <_strtod_l+0x408>
 800f12a:	9b08      	ldr	r3, [sp, #32]
 800f12c:	eba5 0808 	sub.w	r8, r5, r8
 800f130:	4498      	add	r8, r3
 800f132:	f1b8 0f00 	cmp.w	r8, #0
 800f136:	dd71      	ble.n	800f21c <_strtod_l+0x54c>
 800f138:	f018 030f 	ands.w	r3, r8, #15
 800f13c:	d00a      	beq.n	800f154 <_strtod_l+0x484>
 800f13e:	494d      	ldr	r1, [pc, #308]	; (800f274 <_strtod_l+0x5a4>)
 800f140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f144:	4652      	mov	r2, sl
 800f146:	465b      	mov	r3, fp
 800f148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f14c:	f7f1 fa64 	bl	8000618 <__aeabi_dmul>
 800f150:	4682      	mov	sl, r0
 800f152:	468b      	mov	fp, r1
 800f154:	f038 080f 	bics.w	r8, r8, #15
 800f158:	d04d      	beq.n	800f1f6 <_strtod_l+0x526>
 800f15a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f15e:	dd22      	ble.n	800f1a6 <_strtod_l+0x4d6>
 800f160:	2500      	movs	r5, #0
 800f162:	462e      	mov	r6, r5
 800f164:	9509      	str	r5, [sp, #36]	; 0x24
 800f166:	9507      	str	r5, [sp, #28]
 800f168:	2322      	movs	r3, #34	; 0x22
 800f16a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800f27c <_strtod_l+0x5ac>
 800f16e:	6023      	str	r3, [r4, #0]
 800f170:	f04f 0a00 	mov.w	sl, #0
 800f174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f176:	2b00      	cmp	r3, #0
 800f178:	f43f adec 	beq.w	800ed54 <_strtod_l+0x84>
 800f17c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f17e:	4620      	mov	r0, r4
 800f180:	f002 f9cc 	bl	801151c <_Bfree>
 800f184:	9907      	ldr	r1, [sp, #28]
 800f186:	4620      	mov	r0, r4
 800f188:	f002 f9c8 	bl	801151c <_Bfree>
 800f18c:	4631      	mov	r1, r6
 800f18e:	4620      	mov	r0, r4
 800f190:	f002 f9c4 	bl	801151c <_Bfree>
 800f194:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f196:	4620      	mov	r0, r4
 800f198:	f002 f9c0 	bl	801151c <_Bfree>
 800f19c:	4629      	mov	r1, r5
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f002 f9bc 	bl	801151c <_Bfree>
 800f1a4:	e5d6      	b.n	800ed54 <_strtod_l+0x84>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f1ac:	4650      	mov	r0, sl
 800f1ae:	4659      	mov	r1, fp
 800f1b0:	4699      	mov	r9, r3
 800f1b2:	f1b8 0f01 	cmp.w	r8, #1
 800f1b6:	dc21      	bgt.n	800f1fc <_strtod_l+0x52c>
 800f1b8:	b10b      	cbz	r3, 800f1be <_strtod_l+0x4ee>
 800f1ba:	4682      	mov	sl, r0
 800f1bc:	468b      	mov	fp, r1
 800f1be:	4b2e      	ldr	r3, [pc, #184]	; (800f278 <_strtod_l+0x5a8>)
 800f1c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f1c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f1c8:	4652      	mov	r2, sl
 800f1ca:	465b      	mov	r3, fp
 800f1cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f1d0:	f7f1 fa22 	bl	8000618 <__aeabi_dmul>
 800f1d4:	4b29      	ldr	r3, [pc, #164]	; (800f27c <_strtod_l+0x5ac>)
 800f1d6:	460a      	mov	r2, r1
 800f1d8:	400b      	ands	r3, r1
 800f1da:	4929      	ldr	r1, [pc, #164]	; (800f280 <_strtod_l+0x5b0>)
 800f1dc:	428b      	cmp	r3, r1
 800f1de:	4682      	mov	sl, r0
 800f1e0:	d8be      	bhi.n	800f160 <_strtod_l+0x490>
 800f1e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f1e6:	428b      	cmp	r3, r1
 800f1e8:	bf86      	itte	hi
 800f1ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f284 <_strtod_l+0x5b4>
 800f1ee:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800f1f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	9304      	str	r3, [sp, #16]
 800f1fa:	e081      	b.n	800f300 <_strtod_l+0x630>
 800f1fc:	f018 0f01 	tst.w	r8, #1
 800f200:	d007      	beq.n	800f212 <_strtod_l+0x542>
 800f202:	4b1d      	ldr	r3, [pc, #116]	; (800f278 <_strtod_l+0x5a8>)
 800f204:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20c:	f7f1 fa04 	bl	8000618 <__aeabi_dmul>
 800f210:	2301      	movs	r3, #1
 800f212:	f109 0901 	add.w	r9, r9, #1
 800f216:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f21a:	e7ca      	b.n	800f1b2 <_strtod_l+0x4e2>
 800f21c:	d0eb      	beq.n	800f1f6 <_strtod_l+0x526>
 800f21e:	f1c8 0800 	rsb	r8, r8, #0
 800f222:	f018 020f 	ands.w	r2, r8, #15
 800f226:	d00a      	beq.n	800f23e <_strtod_l+0x56e>
 800f228:	4b12      	ldr	r3, [pc, #72]	; (800f274 <_strtod_l+0x5a4>)
 800f22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f22e:	4650      	mov	r0, sl
 800f230:	4659      	mov	r1, fp
 800f232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f236:	f7f1 fb19 	bl	800086c <__aeabi_ddiv>
 800f23a:	4682      	mov	sl, r0
 800f23c:	468b      	mov	fp, r1
 800f23e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f242:	d0d8      	beq.n	800f1f6 <_strtod_l+0x526>
 800f244:	f1b8 0f1f 	cmp.w	r8, #31
 800f248:	dd1e      	ble.n	800f288 <_strtod_l+0x5b8>
 800f24a:	2500      	movs	r5, #0
 800f24c:	462e      	mov	r6, r5
 800f24e:	9509      	str	r5, [sp, #36]	; 0x24
 800f250:	9507      	str	r5, [sp, #28]
 800f252:	2322      	movs	r3, #34	; 0x22
 800f254:	f04f 0a00 	mov.w	sl, #0
 800f258:	f04f 0b00 	mov.w	fp, #0
 800f25c:	6023      	str	r3, [r4, #0]
 800f25e:	e789      	b.n	800f174 <_strtod_l+0x4a4>
 800f260:	08012cb2 	.word	0x08012cb2
 800f264:	08012cf0 	.word	0x08012cf0
 800f268:	08012caa 	.word	0x08012caa
 800f26c:	08012e34 	.word	0x08012e34
 800f270:	08012c8f 	.word	0x08012c8f
 800f274:	08013030 	.word	0x08013030
 800f278:	08013008 	.word	0x08013008
 800f27c:	7ff00000 	.word	0x7ff00000
 800f280:	7ca00000 	.word	0x7ca00000
 800f284:	7fefffff 	.word	0x7fefffff
 800f288:	f018 0310 	ands.w	r3, r8, #16
 800f28c:	bf18      	it	ne
 800f28e:	236a      	movne	r3, #106	; 0x6a
 800f290:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800f648 <_strtod_l+0x978>
 800f294:	9304      	str	r3, [sp, #16]
 800f296:	4650      	mov	r0, sl
 800f298:	4659      	mov	r1, fp
 800f29a:	2300      	movs	r3, #0
 800f29c:	f018 0f01 	tst.w	r8, #1
 800f2a0:	d004      	beq.n	800f2ac <_strtod_l+0x5dc>
 800f2a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f2a6:	f7f1 f9b7 	bl	8000618 <__aeabi_dmul>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f2b0:	f109 0908 	add.w	r9, r9, #8
 800f2b4:	d1f2      	bne.n	800f29c <_strtod_l+0x5cc>
 800f2b6:	b10b      	cbz	r3, 800f2bc <_strtod_l+0x5ec>
 800f2b8:	4682      	mov	sl, r0
 800f2ba:	468b      	mov	fp, r1
 800f2bc:	9b04      	ldr	r3, [sp, #16]
 800f2be:	b1bb      	cbz	r3, 800f2f0 <_strtod_l+0x620>
 800f2c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f2c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	4659      	mov	r1, fp
 800f2cc:	dd10      	ble.n	800f2f0 <_strtod_l+0x620>
 800f2ce:	2b1f      	cmp	r3, #31
 800f2d0:	f340 8128 	ble.w	800f524 <_strtod_l+0x854>
 800f2d4:	2b34      	cmp	r3, #52	; 0x34
 800f2d6:	bfde      	ittt	le
 800f2d8:	3b20      	suble	r3, #32
 800f2da:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800f2de:	fa02 f303 	lslle.w	r3, r2, r3
 800f2e2:	f04f 0a00 	mov.w	sl, #0
 800f2e6:	bfcc      	ite	gt
 800f2e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f2ec:	ea03 0b01 	andle.w	fp, r3, r1
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	4650      	mov	r0, sl
 800f2f6:	4659      	mov	r1, fp
 800f2f8:	f7f1 fbf6 	bl	8000ae8 <__aeabi_dcmpeq>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	d1a4      	bne.n	800f24a <_strtod_l+0x57a>
 800f300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f306:	462b      	mov	r3, r5
 800f308:	463a      	mov	r2, r7
 800f30a:	4620      	mov	r0, r4
 800f30c:	f002 f972 	bl	80115f4 <__s2b>
 800f310:	9009      	str	r0, [sp, #36]	; 0x24
 800f312:	2800      	cmp	r0, #0
 800f314:	f43f af24 	beq.w	800f160 <_strtod_l+0x490>
 800f318:	9b07      	ldr	r3, [sp, #28]
 800f31a:	1b9e      	subs	r6, r3, r6
 800f31c:	9b08      	ldr	r3, [sp, #32]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	bfb4      	ite	lt
 800f322:	4633      	movlt	r3, r6
 800f324:	2300      	movge	r3, #0
 800f326:	9310      	str	r3, [sp, #64]	; 0x40
 800f328:	9b08      	ldr	r3, [sp, #32]
 800f32a:	2500      	movs	r5, #0
 800f32c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f330:	9318      	str	r3, [sp, #96]	; 0x60
 800f332:	462e      	mov	r6, r5
 800f334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f336:	4620      	mov	r0, r4
 800f338:	6859      	ldr	r1, [r3, #4]
 800f33a:	f002 f8af 	bl	801149c <_Balloc>
 800f33e:	9007      	str	r0, [sp, #28]
 800f340:	2800      	cmp	r0, #0
 800f342:	f43f af11 	beq.w	800f168 <_strtod_l+0x498>
 800f346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f348:	691a      	ldr	r2, [r3, #16]
 800f34a:	3202      	adds	r2, #2
 800f34c:	f103 010c 	add.w	r1, r3, #12
 800f350:	0092      	lsls	r2, r2, #2
 800f352:	300c      	adds	r0, #12
 800f354:	f7fe fd9a 	bl	800de8c <memcpy>
 800f358:	ec4b ab10 	vmov	d0, sl, fp
 800f35c:	aa20      	add	r2, sp, #128	; 0x80
 800f35e:	a91f      	add	r1, sp, #124	; 0x7c
 800f360:	4620      	mov	r0, r4
 800f362:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f366:	f002 fc81 	bl	8011c6c <__d2b>
 800f36a:	901e      	str	r0, [sp, #120]	; 0x78
 800f36c:	2800      	cmp	r0, #0
 800f36e:	f43f aefb 	beq.w	800f168 <_strtod_l+0x498>
 800f372:	2101      	movs	r1, #1
 800f374:	4620      	mov	r0, r4
 800f376:	f002 f9d7 	bl	8011728 <__i2b>
 800f37a:	4606      	mov	r6, r0
 800f37c:	2800      	cmp	r0, #0
 800f37e:	f43f aef3 	beq.w	800f168 <_strtod_l+0x498>
 800f382:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f384:	9904      	ldr	r1, [sp, #16]
 800f386:	2b00      	cmp	r3, #0
 800f388:	bfab      	itete	ge
 800f38a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800f38c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800f38e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800f390:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800f394:	bfac      	ite	ge
 800f396:	eb03 0902 	addge.w	r9, r3, r2
 800f39a:	1ad7      	sublt	r7, r2, r3
 800f39c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f39e:	eba3 0801 	sub.w	r8, r3, r1
 800f3a2:	4490      	add	r8, r2
 800f3a4:	4ba3      	ldr	r3, [pc, #652]	; (800f634 <_strtod_l+0x964>)
 800f3a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f3aa:	4598      	cmp	r8, r3
 800f3ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f3b0:	f280 80cc 	bge.w	800f54c <_strtod_l+0x87c>
 800f3b4:	eba3 0308 	sub.w	r3, r3, r8
 800f3b8:	2b1f      	cmp	r3, #31
 800f3ba:	eba2 0203 	sub.w	r2, r2, r3
 800f3be:	f04f 0101 	mov.w	r1, #1
 800f3c2:	f300 80b6 	bgt.w	800f532 <_strtod_l+0x862>
 800f3c6:	fa01 f303 	lsl.w	r3, r1, r3
 800f3ca:	9311      	str	r3, [sp, #68]	; 0x44
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	930c      	str	r3, [sp, #48]	; 0x30
 800f3d0:	eb09 0802 	add.w	r8, r9, r2
 800f3d4:	9b04      	ldr	r3, [sp, #16]
 800f3d6:	45c1      	cmp	r9, r8
 800f3d8:	4417      	add	r7, r2
 800f3da:	441f      	add	r7, r3
 800f3dc:	464b      	mov	r3, r9
 800f3de:	bfa8      	it	ge
 800f3e0:	4643      	movge	r3, r8
 800f3e2:	42bb      	cmp	r3, r7
 800f3e4:	bfa8      	it	ge
 800f3e6:	463b      	movge	r3, r7
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	bfc2      	ittt	gt
 800f3ec:	eba8 0803 	subgt.w	r8, r8, r3
 800f3f0:	1aff      	subgt	r7, r7, r3
 800f3f2:	eba9 0903 	subgt.w	r9, r9, r3
 800f3f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	dd17      	ble.n	800f42c <_strtod_l+0x75c>
 800f3fc:	4631      	mov	r1, r6
 800f3fe:	461a      	mov	r2, r3
 800f400:	4620      	mov	r0, r4
 800f402:	f002 fa4d 	bl	80118a0 <__pow5mult>
 800f406:	4606      	mov	r6, r0
 800f408:	2800      	cmp	r0, #0
 800f40a:	f43f aead 	beq.w	800f168 <_strtod_l+0x498>
 800f40e:	4601      	mov	r1, r0
 800f410:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f412:	4620      	mov	r0, r4
 800f414:	f002 f99e 	bl	8011754 <__multiply>
 800f418:	900f      	str	r0, [sp, #60]	; 0x3c
 800f41a:	2800      	cmp	r0, #0
 800f41c:	f43f aea4 	beq.w	800f168 <_strtod_l+0x498>
 800f420:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f422:	4620      	mov	r0, r4
 800f424:	f002 f87a 	bl	801151c <_Bfree>
 800f428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f42a:	931e      	str	r3, [sp, #120]	; 0x78
 800f42c:	f1b8 0f00 	cmp.w	r8, #0
 800f430:	f300 8091 	bgt.w	800f556 <_strtod_l+0x886>
 800f434:	9b08      	ldr	r3, [sp, #32]
 800f436:	2b00      	cmp	r3, #0
 800f438:	dd08      	ble.n	800f44c <_strtod_l+0x77c>
 800f43a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f43c:	9907      	ldr	r1, [sp, #28]
 800f43e:	4620      	mov	r0, r4
 800f440:	f002 fa2e 	bl	80118a0 <__pow5mult>
 800f444:	9007      	str	r0, [sp, #28]
 800f446:	2800      	cmp	r0, #0
 800f448:	f43f ae8e 	beq.w	800f168 <_strtod_l+0x498>
 800f44c:	2f00      	cmp	r7, #0
 800f44e:	dd08      	ble.n	800f462 <_strtod_l+0x792>
 800f450:	9907      	ldr	r1, [sp, #28]
 800f452:	463a      	mov	r2, r7
 800f454:	4620      	mov	r0, r4
 800f456:	f002 fa7d 	bl	8011954 <__lshift>
 800f45a:	9007      	str	r0, [sp, #28]
 800f45c:	2800      	cmp	r0, #0
 800f45e:	f43f ae83 	beq.w	800f168 <_strtod_l+0x498>
 800f462:	f1b9 0f00 	cmp.w	r9, #0
 800f466:	dd08      	ble.n	800f47a <_strtod_l+0x7aa>
 800f468:	4631      	mov	r1, r6
 800f46a:	464a      	mov	r2, r9
 800f46c:	4620      	mov	r0, r4
 800f46e:	f002 fa71 	bl	8011954 <__lshift>
 800f472:	4606      	mov	r6, r0
 800f474:	2800      	cmp	r0, #0
 800f476:	f43f ae77 	beq.w	800f168 <_strtod_l+0x498>
 800f47a:	9a07      	ldr	r2, [sp, #28]
 800f47c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f47e:	4620      	mov	r0, r4
 800f480:	f002 faf0 	bl	8011a64 <__mdiff>
 800f484:	4605      	mov	r5, r0
 800f486:	2800      	cmp	r0, #0
 800f488:	f43f ae6e 	beq.w	800f168 <_strtod_l+0x498>
 800f48c:	68c3      	ldr	r3, [r0, #12]
 800f48e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f490:	2300      	movs	r3, #0
 800f492:	60c3      	str	r3, [r0, #12]
 800f494:	4631      	mov	r1, r6
 800f496:	f002 fac9 	bl	8011a2c <__mcmp>
 800f49a:	2800      	cmp	r0, #0
 800f49c:	da65      	bge.n	800f56a <_strtod_l+0x89a>
 800f49e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f4a0:	ea53 030a 	orrs.w	r3, r3, sl
 800f4a4:	f040 8087 	bne.w	800f5b6 <_strtod_l+0x8e6>
 800f4a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f040 8082 	bne.w	800f5b6 <_strtod_l+0x8e6>
 800f4b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f4b6:	0d1b      	lsrs	r3, r3, #20
 800f4b8:	051b      	lsls	r3, r3, #20
 800f4ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f4be:	d97a      	bls.n	800f5b6 <_strtod_l+0x8e6>
 800f4c0:	696b      	ldr	r3, [r5, #20]
 800f4c2:	b913      	cbnz	r3, 800f4ca <_strtod_l+0x7fa>
 800f4c4:	692b      	ldr	r3, [r5, #16]
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	dd75      	ble.n	800f5b6 <_strtod_l+0x8e6>
 800f4ca:	4629      	mov	r1, r5
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	f002 fa40 	bl	8011954 <__lshift>
 800f4d4:	4631      	mov	r1, r6
 800f4d6:	4605      	mov	r5, r0
 800f4d8:	f002 faa8 	bl	8011a2c <__mcmp>
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	dd6a      	ble.n	800f5b6 <_strtod_l+0x8e6>
 800f4e0:	9904      	ldr	r1, [sp, #16]
 800f4e2:	4a55      	ldr	r2, [pc, #340]	; (800f638 <_strtod_l+0x968>)
 800f4e4:	465b      	mov	r3, fp
 800f4e6:	2900      	cmp	r1, #0
 800f4e8:	f000 8085 	beq.w	800f5f6 <_strtod_l+0x926>
 800f4ec:	ea02 010b 	and.w	r1, r2, fp
 800f4f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f4f4:	dc7f      	bgt.n	800f5f6 <_strtod_l+0x926>
 800f4f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f4fa:	f77f aeaa 	ble.w	800f252 <_strtod_l+0x582>
 800f4fe:	4a4f      	ldr	r2, [pc, #316]	; (800f63c <_strtod_l+0x96c>)
 800f500:	2300      	movs	r3, #0
 800f502:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800f506:	4650      	mov	r0, sl
 800f508:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800f50c:	4659      	mov	r1, fp
 800f50e:	f7f1 f883 	bl	8000618 <__aeabi_dmul>
 800f512:	460b      	mov	r3, r1
 800f514:	4303      	orrs	r3, r0
 800f516:	bf08      	it	eq
 800f518:	2322      	moveq	r3, #34	; 0x22
 800f51a:	4682      	mov	sl, r0
 800f51c:	468b      	mov	fp, r1
 800f51e:	bf08      	it	eq
 800f520:	6023      	streq	r3, [r4, #0]
 800f522:	e62b      	b.n	800f17c <_strtod_l+0x4ac>
 800f524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f528:	fa02 f303 	lsl.w	r3, r2, r3
 800f52c:	ea03 0a0a 	and.w	sl, r3, sl
 800f530:	e6de      	b.n	800f2f0 <_strtod_l+0x620>
 800f532:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f536:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f53a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f53e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f542:	fa01 f308 	lsl.w	r3, r1, r8
 800f546:	930c      	str	r3, [sp, #48]	; 0x30
 800f548:	9111      	str	r1, [sp, #68]	; 0x44
 800f54a:	e741      	b.n	800f3d0 <_strtod_l+0x700>
 800f54c:	2300      	movs	r3, #0
 800f54e:	930c      	str	r3, [sp, #48]	; 0x30
 800f550:	2301      	movs	r3, #1
 800f552:	9311      	str	r3, [sp, #68]	; 0x44
 800f554:	e73c      	b.n	800f3d0 <_strtod_l+0x700>
 800f556:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f558:	4642      	mov	r2, r8
 800f55a:	4620      	mov	r0, r4
 800f55c:	f002 f9fa 	bl	8011954 <__lshift>
 800f560:	901e      	str	r0, [sp, #120]	; 0x78
 800f562:	2800      	cmp	r0, #0
 800f564:	f47f af66 	bne.w	800f434 <_strtod_l+0x764>
 800f568:	e5fe      	b.n	800f168 <_strtod_l+0x498>
 800f56a:	465f      	mov	r7, fp
 800f56c:	d16e      	bne.n	800f64c <_strtod_l+0x97c>
 800f56e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f570:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f574:	b342      	cbz	r2, 800f5c8 <_strtod_l+0x8f8>
 800f576:	4a32      	ldr	r2, [pc, #200]	; (800f640 <_strtod_l+0x970>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d128      	bne.n	800f5ce <_strtod_l+0x8fe>
 800f57c:	9b04      	ldr	r3, [sp, #16]
 800f57e:	4650      	mov	r0, sl
 800f580:	b1eb      	cbz	r3, 800f5be <_strtod_l+0x8ee>
 800f582:	4a2d      	ldr	r2, [pc, #180]	; (800f638 <_strtod_l+0x968>)
 800f584:	403a      	ands	r2, r7
 800f586:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f58a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f58e:	d819      	bhi.n	800f5c4 <_strtod_l+0x8f4>
 800f590:	0d12      	lsrs	r2, r2, #20
 800f592:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f596:	fa01 f303 	lsl.w	r3, r1, r3
 800f59a:	4298      	cmp	r0, r3
 800f59c:	d117      	bne.n	800f5ce <_strtod_l+0x8fe>
 800f59e:	4b29      	ldr	r3, [pc, #164]	; (800f644 <_strtod_l+0x974>)
 800f5a0:	429f      	cmp	r7, r3
 800f5a2:	d102      	bne.n	800f5aa <_strtod_l+0x8da>
 800f5a4:	3001      	adds	r0, #1
 800f5a6:	f43f addf 	beq.w	800f168 <_strtod_l+0x498>
 800f5aa:	4b23      	ldr	r3, [pc, #140]	; (800f638 <_strtod_l+0x968>)
 800f5ac:	403b      	ands	r3, r7
 800f5ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f5b2:	f04f 0a00 	mov.w	sl, #0
 800f5b6:	9b04      	ldr	r3, [sp, #16]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d1a0      	bne.n	800f4fe <_strtod_l+0x82e>
 800f5bc:	e5de      	b.n	800f17c <_strtod_l+0x4ac>
 800f5be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5c2:	e7ea      	b.n	800f59a <_strtod_l+0x8ca>
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	e7e8      	b.n	800f59a <_strtod_l+0x8ca>
 800f5c8:	ea53 030a 	orrs.w	r3, r3, sl
 800f5cc:	d088      	beq.n	800f4e0 <_strtod_l+0x810>
 800f5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5d0:	b1db      	cbz	r3, 800f60a <_strtod_l+0x93a>
 800f5d2:	423b      	tst	r3, r7
 800f5d4:	d0ef      	beq.n	800f5b6 <_strtod_l+0x8e6>
 800f5d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5d8:	9a04      	ldr	r2, [sp, #16]
 800f5da:	4650      	mov	r0, sl
 800f5dc:	4659      	mov	r1, fp
 800f5de:	b1c3      	cbz	r3, 800f612 <_strtod_l+0x942>
 800f5e0:	f7ff fb5a 	bl	800ec98 <sulp>
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5ec:	f7f0 fe5e 	bl	80002ac <__adddf3>
 800f5f0:	4682      	mov	sl, r0
 800f5f2:	468b      	mov	fp, r1
 800f5f4:	e7df      	b.n	800f5b6 <_strtod_l+0x8e6>
 800f5f6:	4013      	ands	r3, r2
 800f5f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f5fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f600:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f604:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f608:	e7d5      	b.n	800f5b6 <_strtod_l+0x8e6>
 800f60a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f60c:	ea13 0f0a 	tst.w	r3, sl
 800f610:	e7e0      	b.n	800f5d4 <_strtod_l+0x904>
 800f612:	f7ff fb41 	bl	800ec98 <sulp>
 800f616:	4602      	mov	r2, r0
 800f618:	460b      	mov	r3, r1
 800f61a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f61e:	f7f0 fe43 	bl	80002a8 <__aeabi_dsub>
 800f622:	2200      	movs	r2, #0
 800f624:	2300      	movs	r3, #0
 800f626:	4682      	mov	sl, r0
 800f628:	468b      	mov	fp, r1
 800f62a:	f7f1 fa5d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f62e:	2800      	cmp	r0, #0
 800f630:	d0c1      	beq.n	800f5b6 <_strtod_l+0x8e6>
 800f632:	e60e      	b.n	800f252 <_strtod_l+0x582>
 800f634:	fffffc02 	.word	0xfffffc02
 800f638:	7ff00000 	.word	0x7ff00000
 800f63c:	39500000 	.word	0x39500000
 800f640:	000fffff 	.word	0x000fffff
 800f644:	7fefffff 	.word	0x7fefffff
 800f648:	08012d08 	.word	0x08012d08
 800f64c:	4631      	mov	r1, r6
 800f64e:	4628      	mov	r0, r5
 800f650:	f002 fb68 	bl	8011d24 <__ratio>
 800f654:	ec59 8b10 	vmov	r8, r9, d0
 800f658:	ee10 0a10 	vmov	r0, s0
 800f65c:	2200      	movs	r2, #0
 800f65e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f662:	4649      	mov	r1, r9
 800f664:	f7f1 fa54 	bl	8000b10 <__aeabi_dcmple>
 800f668:	2800      	cmp	r0, #0
 800f66a:	d07c      	beq.n	800f766 <_strtod_l+0xa96>
 800f66c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d04c      	beq.n	800f70c <_strtod_l+0xa3c>
 800f672:	4b95      	ldr	r3, [pc, #596]	; (800f8c8 <_strtod_l+0xbf8>)
 800f674:	2200      	movs	r2, #0
 800f676:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f67a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f8c8 <_strtod_l+0xbf8>
 800f67e:	f04f 0800 	mov.w	r8, #0
 800f682:	4b92      	ldr	r3, [pc, #584]	; (800f8cc <_strtod_l+0xbfc>)
 800f684:	403b      	ands	r3, r7
 800f686:	9311      	str	r3, [sp, #68]	; 0x44
 800f688:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f68a:	4b91      	ldr	r3, [pc, #580]	; (800f8d0 <_strtod_l+0xc00>)
 800f68c:	429a      	cmp	r2, r3
 800f68e:	f040 80b2 	bne.w	800f7f6 <_strtod_l+0xb26>
 800f692:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f69a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f69e:	ec4b ab10 	vmov	d0, sl, fp
 800f6a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800f6a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f6aa:	f002 fa63 	bl	8011b74 <__ulp>
 800f6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f6b2:	ec53 2b10 	vmov	r2, r3, d0
 800f6b6:	f7f0 ffaf 	bl	8000618 <__aeabi_dmul>
 800f6ba:	4652      	mov	r2, sl
 800f6bc:	465b      	mov	r3, fp
 800f6be:	f7f0 fdf5 	bl	80002ac <__adddf3>
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	4981      	ldr	r1, [pc, #516]	; (800f8cc <_strtod_l+0xbfc>)
 800f6c6:	4a83      	ldr	r2, [pc, #524]	; (800f8d4 <_strtod_l+0xc04>)
 800f6c8:	4019      	ands	r1, r3
 800f6ca:	4291      	cmp	r1, r2
 800f6cc:	4682      	mov	sl, r0
 800f6ce:	d95e      	bls.n	800f78e <_strtod_l+0xabe>
 800f6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d103      	bne.n	800f6e2 <_strtod_l+0xa12>
 800f6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6dc:	3301      	adds	r3, #1
 800f6de:	f43f ad43 	beq.w	800f168 <_strtod_l+0x498>
 800f6e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f8e0 <_strtod_l+0xc10>
 800f6e6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f6ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	f001 ff15 	bl	801151c <_Bfree>
 800f6f2:	9907      	ldr	r1, [sp, #28]
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f001 ff11 	bl	801151c <_Bfree>
 800f6fa:	4631      	mov	r1, r6
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f001 ff0d 	bl	801151c <_Bfree>
 800f702:	4629      	mov	r1, r5
 800f704:	4620      	mov	r0, r4
 800f706:	f001 ff09 	bl	801151c <_Bfree>
 800f70a:	e613      	b.n	800f334 <_strtod_l+0x664>
 800f70c:	f1ba 0f00 	cmp.w	sl, #0
 800f710:	d11b      	bne.n	800f74a <_strtod_l+0xa7a>
 800f712:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f716:	b9f3      	cbnz	r3, 800f756 <_strtod_l+0xa86>
 800f718:	4b6b      	ldr	r3, [pc, #428]	; (800f8c8 <_strtod_l+0xbf8>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	4640      	mov	r0, r8
 800f71e:	4649      	mov	r1, r9
 800f720:	f7f1 f9ec 	bl	8000afc <__aeabi_dcmplt>
 800f724:	b9d0      	cbnz	r0, 800f75c <_strtod_l+0xa8c>
 800f726:	4640      	mov	r0, r8
 800f728:	4649      	mov	r1, r9
 800f72a:	4b6b      	ldr	r3, [pc, #428]	; (800f8d8 <_strtod_l+0xc08>)
 800f72c:	2200      	movs	r2, #0
 800f72e:	f7f0 ff73 	bl	8000618 <__aeabi_dmul>
 800f732:	4680      	mov	r8, r0
 800f734:	4689      	mov	r9, r1
 800f736:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f73a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800f73e:	931b      	str	r3, [sp, #108]	; 0x6c
 800f740:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f744:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f748:	e79b      	b.n	800f682 <_strtod_l+0x9b2>
 800f74a:	f1ba 0f01 	cmp.w	sl, #1
 800f74e:	d102      	bne.n	800f756 <_strtod_l+0xa86>
 800f750:	2f00      	cmp	r7, #0
 800f752:	f43f ad7e 	beq.w	800f252 <_strtod_l+0x582>
 800f756:	4b61      	ldr	r3, [pc, #388]	; (800f8dc <_strtod_l+0xc0c>)
 800f758:	2200      	movs	r2, #0
 800f75a:	e78c      	b.n	800f676 <_strtod_l+0x9a6>
 800f75c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f8d8 <_strtod_l+0xc08>
 800f760:	f04f 0800 	mov.w	r8, #0
 800f764:	e7e7      	b.n	800f736 <_strtod_l+0xa66>
 800f766:	4b5c      	ldr	r3, [pc, #368]	; (800f8d8 <_strtod_l+0xc08>)
 800f768:	4640      	mov	r0, r8
 800f76a:	4649      	mov	r1, r9
 800f76c:	2200      	movs	r2, #0
 800f76e:	f7f0 ff53 	bl	8000618 <__aeabi_dmul>
 800f772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f774:	4680      	mov	r8, r0
 800f776:	4689      	mov	r9, r1
 800f778:	b933      	cbnz	r3, 800f788 <_strtod_l+0xab8>
 800f77a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f77e:	9012      	str	r0, [sp, #72]	; 0x48
 800f780:	9313      	str	r3, [sp, #76]	; 0x4c
 800f782:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f786:	e7dd      	b.n	800f744 <_strtod_l+0xa74>
 800f788:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800f78c:	e7f9      	b.n	800f782 <_strtod_l+0xab2>
 800f78e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f792:	9b04      	ldr	r3, [sp, #16]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d1a8      	bne.n	800f6ea <_strtod_l+0xa1a>
 800f798:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f79c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f79e:	0d1b      	lsrs	r3, r3, #20
 800f7a0:	051b      	lsls	r3, r3, #20
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d1a1      	bne.n	800f6ea <_strtod_l+0xa1a>
 800f7a6:	4640      	mov	r0, r8
 800f7a8:	4649      	mov	r1, r9
 800f7aa:	f7f1 fa7d 	bl	8000ca8 <__aeabi_d2lz>
 800f7ae:	f7f0 ff05 	bl	80005bc <__aeabi_l2d>
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	4640      	mov	r0, r8
 800f7b8:	4649      	mov	r1, r9
 800f7ba:	f7f0 fd75 	bl	80002a8 <__aeabi_dsub>
 800f7be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f7c4:	ea43 030a 	orr.w	r3, r3, sl
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	4680      	mov	r8, r0
 800f7cc:	4689      	mov	r9, r1
 800f7ce:	d053      	beq.n	800f878 <_strtod_l+0xba8>
 800f7d0:	a335      	add	r3, pc, #212	; (adr r3, 800f8a8 <_strtod_l+0xbd8>)
 800f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d6:	f7f1 f991 	bl	8000afc <__aeabi_dcmplt>
 800f7da:	2800      	cmp	r0, #0
 800f7dc:	f47f acce 	bne.w	800f17c <_strtod_l+0x4ac>
 800f7e0:	a333      	add	r3, pc, #204	; (adr r3, 800f8b0 <_strtod_l+0xbe0>)
 800f7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e6:	4640      	mov	r0, r8
 800f7e8:	4649      	mov	r1, r9
 800f7ea:	f7f1 f9a5 	bl	8000b38 <__aeabi_dcmpgt>
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	f43f af7b 	beq.w	800f6ea <_strtod_l+0xa1a>
 800f7f4:	e4c2      	b.n	800f17c <_strtod_l+0x4ac>
 800f7f6:	9b04      	ldr	r3, [sp, #16]
 800f7f8:	b333      	cbz	r3, 800f848 <_strtod_l+0xb78>
 800f7fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f7fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f800:	d822      	bhi.n	800f848 <_strtod_l+0xb78>
 800f802:	a32d      	add	r3, pc, #180	; (adr r3, 800f8b8 <_strtod_l+0xbe8>)
 800f804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f808:	4640      	mov	r0, r8
 800f80a:	4649      	mov	r1, r9
 800f80c:	f7f1 f980 	bl	8000b10 <__aeabi_dcmple>
 800f810:	b1a0      	cbz	r0, 800f83c <_strtod_l+0xb6c>
 800f812:	4649      	mov	r1, r9
 800f814:	4640      	mov	r0, r8
 800f816:	f7f1 f9d7 	bl	8000bc8 <__aeabi_d2uiz>
 800f81a:	2801      	cmp	r0, #1
 800f81c:	bf38      	it	cc
 800f81e:	2001      	movcc	r0, #1
 800f820:	f7f0 fe80 	bl	8000524 <__aeabi_ui2d>
 800f824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f826:	4680      	mov	r8, r0
 800f828:	4689      	mov	r9, r1
 800f82a:	bb13      	cbnz	r3, 800f872 <_strtod_l+0xba2>
 800f82c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f830:	9014      	str	r0, [sp, #80]	; 0x50
 800f832:	9315      	str	r3, [sp, #84]	; 0x54
 800f834:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f838:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f83e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f840:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f844:	1a9b      	subs	r3, r3, r2
 800f846:	930d      	str	r3, [sp, #52]	; 0x34
 800f848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f84c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f850:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f854:	f002 f98e 	bl	8011b74 <__ulp>
 800f858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f85c:	ec53 2b10 	vmov	r2, r3, d0
 800f860:	f7f0 feda 	bl	8000618 <__aeabi_dmul>
 800f864:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f868:	f7f0 fd20 	bl	80002ac <__adddf3>
 800f86c:	4682      	mov	sl, r0
 800f86e:	468b      	mov	fp, r1
 800f870:	e78f      	b.n	800f792 <_strtod_l+0xac2>
 800f872:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f876:	e7dd      	b.n	800f834 <_strtod_l+0xb64>
 800f878:	a311      	add	r3, pc, #68	; (adr r3, 800f8c0 <_strtod_l+0xbf0>)
 800f87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87e:	f7f1 f93d 	bl	8000afc <__aeabi_dcmplt>
 800f882:	e7b4      	b.n	800f7ee <_strtod_l+0xb1e>
 800f884:	2300      	movs	r3, #0
 800f886:	930e      	str	r3, [sp, #56]	; 0x38
 800f888:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f88a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f88c:	6013      	str	r3, [r2, #0]
 800f88e:	f7ff ba65 	b.w	800ed5c <_strtod_l+0x8c>
 800f892:	2b65      	cmp	r3, #101	; 0x65
 800f894:	f43f ab5d 	beq.w	800ef52 <_strtod_l+0x282>
 800f898:	2b45      	cmp	r3, #69	; 0x45
 800f89a:	f43f ab5a 	beq.w	800ef52 <_strtod_l+0x282>
 800f89e:	2201      	movs	r2, #1
 800f8a0:	f7ff bb92 	b.w	800efc8 <_strtod_l+0x2f8>
 800f8a4:	f3af 8000 	nop.w
 800f8a8:	94a03595 	.word	0x94a03595
 800f8ac:	3fdfffff 	.word	0x3fdfffff
 800f8b0:	35afe535 	.word	0x35afe535
 800f8b4:	3fe00000 	.word	0x3fe00000
 800f8b8:	ffc00000 	.word	0xffc00000
 800f8bc:	41dfffff 	.word	0x41dfffff
 800f8c0:	94a03595 	.word	0x94a03595
 800f8c4:	3fcfffff 	.word	0x3fcfffff
 800f8c8:	3ff00000 	.word	0x3ff00000
 800f8cc:	7ff00000 	.word	0x7ff00000
 800f8d0:	7fe00000 	.word	0x7fe00000
 800f8d4:	7c9fffff 	.word	0x7c9fffff
 800f8d8:	3fe00000 	.word	0x3fe00000
 800f8dc:	bff00000 	.word	0xbff00000
 800f8e0:	7fefffff 	.word	0x7fefffff

0800f8e4 <strtod>:
 800f8e4:	460a      	mov	r2, r1
 800f8e6:	4601      	mov	r1, r0
 800f8e8:	4802      	ldr	r0, [pc, #8]	; (800f8f4 <strtod+0x10>)
 800f8ea:	4b03      	ldr	r3, [pc, #12]	; (800f8f8 <strtod+0x14>)
 800f8ec:	6800      	ldr	r0, [r0, #0]
 800f8ee:	f7ff b9ef 	b.w	800ecd0 <_strtod_l>
 800f8f2:	bf00      	nop
 800f8f4:	20000028 	.word	0x20000028
 800f8f8:	20000090 	.word	0x20000090

0800f8fc <_strtol_l.isra.0>:
 800f8fc:	2b01      	cmp	r3, #1
 800f8fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f902:	d001      	beq.n	800f908 <_strtol_l.isra.0+0xc>
 800f904:	2b24      	cmp	r3, #36	; 0x24
 800f906:	d906      	bls.n	800f916 <_strtol_l.isra.0+0x1a>
 800f908:	f7fe fa7c 	bl	800de04 <__errno>
 800f90c:	2316      	movs	r3, #22
 800f90e:	6003      	str	r3, [r0, #0]
 800f910:	2000      	movs	r0, #0
 800f912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f916:	4f3a      	ldr	r7, [pc, #232]	; (800fa00 <_strtol_l.isra.0+0x104>)
 800f918:	468e      	mov	lr, r1
 800f91a:	4676      	mov	r6, lr
 800f91c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f920:	5de5      	ldrb	r5, [r4, r7]
 800f922:	f015 0508 	ands.w	r5, r5, #8
 800f926:	d1f8      	bne.n	800f91a <_strtol_l.isra.0+0x1e>
 800f928:	2c2d      	cmp	r4, #45	; 0x2d
 800f92a:	d134      	bne.n	800f996 <_strtol_l.isra.0+0x9a>
 800f92c:	f89e 4000 	ldrb.w	r4, [lr]
 800f930:	f04f 0801 	mov.w	r8, #1
 800f934:	f106 0e02 	add.w	lr, r6, #2
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d05c      	beq.n	800f9f6 <_strtol_l.isra.0+0xfa>
 800f93c:	2b10      	cmp	r3, #16
 800f93e:	d10c      	bne.n	800f95a <_strtol_l.isra.0+0x5e>
 800f940:	2c30      	cmp	r4, #48	; 0x30
 800f942:	d10a      	bne.n	800f95a <_strtol_l.isra.0+0x5e>
 800f944:	f89e 4000 	ldrb.w	r4, [lr]
 800f948:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f94c:	2c58      	cmp	r4, #88	; 0x58
 800f94e:	d14d      	bne.n	800f9ec <_strtol_l.isra.0+0xf0>
 800f950:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f954:	2310      	movs	r3, #16
 800f956:	f10e 0e02 	add.w	lr, lr, #2
 800f95a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f95e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800f962:	2600      	movs	r6, #0
 800f964:	fbbc f9f3 	udiv	r9, ip, r3
 800f968:	4635      	mov	r5, r6
 800f96a:	fb03 ca19 	mls	sl, r3, r9, ip
 800f96e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f972:	2f09      	cmp	r7, #9
 800f974:	d818      	bhi.n	800f9a8 <_strtol_l.isra.0+0xac>
 800f976:	463c      	mov	r4, r7
 800f978:	42a3      	cmp	r3, r4
 800f97a:	dd24      	ble.n	800f9c6 <_strtol_l.isra.0+0xca>
 800f97c:	2e00      	cmp	r6, #0
 800f97e:	db1f      	blt.n	800f9c0 <_strtol_l.isra.0+0xc4>
 800f980:	45a9      	cmp	r9, r5
 800f982:	d31d      	bcc.n	800f9c0 <_strtol_l.isra.0+0xc4>
 800f984:	d101      	bne.n	800f98a <_strtol_l.isra.0+0x8e>
 800f986:	45a2      	cmp	sl, r4
 800f988:	db1a      	blt.n	800f9c0 <_strtol_l.isra.0+0xc4>
 800f98a:	fb05 4503 	mla	r5, r5, r3, r4
 800f98e:	2601      	movs	r6, #1
 800f990:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f994:	e7eb      	b.n	800f96e <_strtol_l.isra.0+0x72>
 800f996:	2c2b      	cmp	r4, #43	; 0x2b
 800f998:	bf08      	it	eq
 800f99a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f99e:	46a8      	mov	r8, r5
 800f9a0:	bf08      	it	eq
 800f9a2:	f106 0e02 	addeq.w	lr, r6, #2
 800f9a6:	e7c7      	b.n	800f938 <_strtol_l.isra.0+0x3c>
 800f9a8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f9ac:	2f19      	cmp	r7, #25
 800f9ae:	d801      	bhi.n	800f9b4 <_strtol_l.isra.0+0xb8>
 800f9b0:	3c37      	subs	r4, #55	; 0x37
 800f9b2:	e7e1      	b.n	800f978 <_strtol_l.isra.0+0x7c>
 800f9b4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f9b8:	2f19      	cmp	r7, #25
 800f9ba:	d804      	bhi.n	800f9c6 <_strtol_l.isra.0+0xca>
 800f9bc:	3c57      	subs	r4, #87	; 0x57
 800f9be:	e7db      	b.n	800f978 <_strtol_l.isra.0+0x7c>
 800f9c0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800f9c4:	e7e4      	b.n	800f990 <_strtol_l.isra.0+0x94>
 800f9c6:	2e00      	cmp	r6, #0
 800f9c8:	da05      	bge.n	800f9d6 <_strtol_l.isra.0+0xda>
 800f9ca:	2322      	movs	r3, #34	; 0x22
 800f9cc:	6003      	str	r3, [r0, #0]
 800f9ce:	4665      	mov	r5, ip
 800f9d0:	b942      	cbnz	r2, 800f9e4 <_strtol_l.isra.0+0xe8>
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	e79d      	b.n	800f912 <_strtol_l.isra.0+0x16>
 800f9d6:	f1b8 0f00 	cmp.w	r8, #0
 800f9da:	d000      	beq.n	800f9de <_strtol_l.isra.0+0xe2>
 800f9dc:	426d      	negs	r5, r5
 800f9de:	2a00      	cmp	r2, #0
 800f9e0:	d0f7      	beq.n	800f9d2 <_strtol_l.isra.0+0xd6>
 800f9e2:	b10e      	cbz	r6, 800f9e8 <_strtol_l.isra.0+0xec>
 800f9e4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800f9e8:	6011      	str	r1, [r2, #0]
 800f9ea:	e7f2      	b.n	800f9d2 <_strtol_l.isra.0+0xd6>
 800f9ec:	2430      	movs	r4, #48	; 0x30
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1b3      	bne.n	800f95a <_strtol_l.isra.0+0x5e>
 800f9f2:	2308      	movs	r3, #8
 800f9f4:	e7b1      	b.n	800f95a <_strtol_l.isra.0+0x5e>
 800f9f6:	2c30      	cmp	r4, #48	; 0x30
 800f9f8:	d0a4      	beq.n	800f944 <_strtol_l.isra.0+0x48>
 800f9fa:	230a      	movs	r3, #10
 800f9fc:	e7ad      	b.n	800f95a <_strtol_l.isra.0+0x5e>
 800f9fe:	bf00      	nop
 800fa00:	08012d31 	.word	0x08012d31

0800fa04 <strtol>:
 800fa04:	4613      	mov	r3, r2
 800fa06:	460a      	mov	r2, r1
 800fa08:	4601      	mov	r1, r0
 800fa0a:	4802      	ldr	r0, [pc, #8]	; (800fa14 <strtol+0x10>)
 800fa0c:	6800      	ldr	r0, [r0, #0]
 800fa0e:	f7ff bf75 	b.w	800f8fc <_strtol_l.isra.0>
 800fa12:	bf00      	nop
 800fa14:	20000028 	.word	0x20000028

0800fa18 <_vsniprintf_r>:
 800fa18:	b530      	push	{r4, r5, lr}
 800fa1a:	1e14      	subs	r4, r2, #0
 800fa1c:	4605      	mov	r5, r0
 800fa1e:	b09b      	sub	sp, #108	; 0x6c
 800fa20:	4618      	mov	r0, r3
 800fa22:	da05      	bge.n	800fa30 <_vsniprintf_r+0x18>
 800fa24:	238b      	movs	r3, #139	; 0x8b
 800fa26:	602b      	str	r3, [r5, #0]
 800fa28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa2c:	b01b      	add	sp, #108	; 0x6c
 800fa2e:	bd30      	pop	{r4, r5, pc}
 800fa30:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fa34:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fa38:	bf14      	ite	ne
 800fa3a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fa3e:	4623      	moveq	r3, r4
 800fa40:	9302      	str	r3, [sp, #8]
 800fa42:	9305      	str	r3, [sp, #20]
 800fa44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa48:	9100      	str	r1, [sp, #0]
 800fa4a:	9104      	str	r1, [sp, #16]
 800fa4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fa50:	4602      	mov	r2, r0
 800fa52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fa54:	4669      	mov	r1, sp
 800fa56:	4628      	mov	r0, r5
 800fa58:	f002 fa6c 	bl	8011f34 <_svfiprintf_r>
 800fa5c:	1c43      	adds	r3, r0, #1
 800fa5e:	bfbc      	itt	lt
 800fa60:	238b      	movlt	r3, #139	; 0x8b
 800fa62:	602b      	strlt	r3, [r5, #0]
 800fa64:	2c00      	cmp	r4, #0
 800fa66:	d0e1      	beq.n	800fa2c <_vsniprintf_r+0x14>
 800fa68:	9b00      	ldr	r3, [sp, #0]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	701a      	strb	r2, [r3, #0]
 800fa6e:	e7dd      	b.n	800fa2c <_vsniprintf_r+0x14>

0800fa70 <vsniprintf>:
 800fa70:	b507      	push	{r0, r1, r2, lr}
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	4613      	mov	r3, r2
 800fa76:	460a      	mov	r2, r1
 800fa78:	4601      	mov	r1, r0
 800fa7a:	4803      	ldr	r0, [pc, #12]	; (800fa88 <vsniprintf+0x18>)
 800fa7c:	6800      	ldr	r0, [r0, #0]
 800fa7e:	f7ff ffcb 	bl	800fa18 <_vsniprintf_r>
 800fa82:	b003      	add	sp, #12
 800fa84:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa88:	20000028 	.word	0x20000028

0800fa8c <__swbuf_r>:
 800fa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa8e:	460e      	mov	r6, r1
 800fa90:	4614      	mov	r4, r2
 800fa92:	4605      	mov	r5, r0
 800fa94:	b118      	cbz	r0, 800fa9e <__swbuf_r+0x12>
 800fa96:	6983      	ldr	r3, [r0, #24]
 800fa98:	b90b      	cbnz	r3, 800fa9e <__swbuf_r+0x12>
 800fa9a:	f001 f84f 	bl	8010b3c <__sinit>
 800fa9e:	4b21      	ldr	r3, [pc, #132]	; (800fb24 <__swbuf_r+0x98>)
 800faa0:	429c      	cmp	r4, r3
 800faa2:	d12b      	bne.n	800fafc <__swbuf_r+0x70>
 800faa4:	686c      	ldr	r4, [r5, #4]
 800faa6:	69a3      	ldr	r3, [r4, #24]
 800faa8:	60a3      	str	r3, [r4, #8]
 800faaa:	89a3      	ldrh	r3, [r4, #12]
 800faac:	071a      	lsls	r2, r3, #28
 800faae:	d52f      	bpl.n	800fb10 <__swbuf_r+0x84>
 800fab0:	6923      	ldr	r3, [r4, #16]
 800fab2:	b36b      	cbz	r3, 800fb10 <__swbuf_r+0x84>
 800fab4:	6923      	ldr	r3, [r4, #16]
 800fab6:	6820      	ldr	r0, [r4, #0]
 800fab8:	1ac0      	subs	r0, r0, r3
 800faba:	6963      	ldr	r3, [r4, #20]
 800fabc:	b2f6      	uxtb	r6, r6
 800fabe:	4283      	cmp	r3, r0
 800fac0:	4637      	mov	r7, r6
 800fac2:	dc04      	bgt.n	800face <__swbuf_r+0x42>
 800fac4:	4621      	mov	r1, r4
 800fac6:	4628      	mov	r0, r5
 800fac8:	f000 ffa4 	bl	8010a14 <_fflush_r>
 800facc:	bb30      	cbnz	r0, 800fb1c <__swbuf_r+0x90>
 800face:	68a3      	ldr	r3, [r4, #8]
 800fad0:	3b01      	subs	r3, #1
 800fad2:	60a3      	str	r3, [r4, #8]
 800fad4:	6823      	ldr	r3, [r4, #0]
 800fad6:	1c5a      	adds	r2, r3, #1
 800fad8:	6022      	str	r2, [r4, #0]
 800fada:	701e      	strb	r6, [r3, #0]
 800fadc:	6963      	ldr	r3, [r4, #20]
 800fade:	3001      	adds	r0, #1
 800fae0:	4283      	cmp	r3, r0
 800fae2:	d004      	beq.n	800faee <__swbuf_r+0x62>
 800fae4:	89a3      	ldrh	r3, [r4, #12]
 800fae6:	07db      	lsls	r3, r3, #31
 800fae8:	d506      	bpl.n	800faf8 <__swbuf_r+0x6c>
 800faea:	2e0a      	cmp	r6, #10
 800faec:	d104      	bne.n	800faf8 <__swbuf_r+0x6c>
 800faee:	4621      	mov	r1, r4
 800faf0:	4628      	mov	r0, r5
 800faf2:	f000 ff8f 	bl	8010a14 <_fflush_r>
 800faf6:	b988      	cbnz	r0, 800fb1c <__swbuf_r+0x90>
 800faf8:	4638      	mov	r0, r7
 800fafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fafc:	4b0a      	ldr	r3, [pc, #40]	; (800fb28 <__swbuf_r+0x9c>)
 800fafe:	429c      	cmp	r4, r3
 800fb00:	d101      	bne.n	800fb06 <__swbuf_r+0x7a>
 800fb02:	68ac      	ldr	r4, [r5, #8]
 800fb04:	e7cf      	b.n	800faa6 <__swbuf_r+0x1a>
 800fb06:	4b09      	ldr	r3, [pc, #36]	; (800fb2c <__swbuf_r+0xa0>)
 800fb08:	429c      	cmp	r4, r3
 800fb0a:	bf08      	it	eq
 800fb0c:	68ec      	ldreq	r4, [r5, #12]
 800fb0e:	e7ca      	b.n	800faa6 <__swbuf_r+0x1a>
 800fb10:	4621      	mov	r1, r4
 800fb12:	4628      	mov	r0, r5
 800fb14:	f000 f80c 	bl	800fb30 <__swsetup_r>
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	d0cb      	beq.n	800fab4 <__swbuf_r+0x28>
 800fb1c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fb20:	e7ea      	b.n	800faf8 <__swbuf_r+0x6c>
 800fb22:	bf00      	nop
 800fb24:	08012ee8 	.word	0x08012ee8
 800fb28:	08012f08 	.word	0x08012f08
 800fb2c:	08012ec8 	.word	0x08012ec8

0800fb30 <__swsetup_r>:
 800fb30:	4b32      	ldr	r3, [pc, #200]	; (800fbfc <__swsetup_r+0xcc>)
 800fb32:	b570      	push	{r4, r5, r6, lr}
 800fb34:	681d      	ldr	r5, [r3, #0]
 800fb36:	4606      	mov	r6, r0
 800fb38:	460c      	mov	r4, r1
 800fb3a:	b125      	cbz	r5, 800fb46 <__swsetup_r+0x16>
 800fb3c:	69ab      	ldr	r3, [r5, #24]
 800fb3e:	b913      	cbnz	r3, 800fb46 <__swsetup_r+0x16>
 800fb40:	4628      	mov	r0, r5
 800fb42:	f000 fffb 	bl	8010b3c <__sinit>
 800fb46:	4b2e      	ldr	r3, [pc, #184]	; (800fc00 <__swsetup_r+0xd0>)
 800fb48:	429c      	cmp	r4, r3
 800fb4a:	d10f      	bne.n	800fb6c <__swsetup_r+0x3c>
 800fb4c:	686c      	ldr	r4, [r5, #4]
 800fb4e:	89a3      	ldrh	r3, [r4, #12]
 800fb50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb54:	0719      	lsls	r1, r3, #28
 800fb56:	d42c      	bmi.n	800fbb2 <__swsetup_r+0x82>
 800fb58:	06dd      	lsls	r5, r3, #27
 800fb5a:	d411      	bmi.n	800fb80 <__swsetup_r+0x50>
 800fb5c:	2309      	movs	r3, #9
 800fb5e:	6033      	str	r3, [r6, #0]
 800fb60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fb64:	81a3      	strh	r3, [r4, #12]
 800fb66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb6a:	e03e      	b.n	800fbea <__swsetup_r+0xba>
 800fb6c:	4b25      	ldr	r3, [pc, #148]	; (800fc04 <__swsetup_r+0xd4>)
 800fb6e:	429c      	cmp	r4, r3
 800fb70:	d101      	bne.n	800fb76 <__swsetup_r+0x46>
 800fb72:	68ac      	ldr	r4, [r5, #8]
 800fb74:	e7eb      	b.n	800fb4e <__swsetup_r+0x1e>
 800fb76:	4b24      	ldr	r3, [pc, #144]	; (800fc08 <__swsetup_r+0xd8>)
 800fb78:	429c      	cmp	r4, r3
 800fb7a:	bf08      	it	eq
 800fb7c:	68ec      	ldreq	r4, [r5, #12]
 800fb7e:	e7e6      	b.n	800fb4e <__swsetup_r+0x1e>
 800fb80:	0758      	lsls	r0, r3, #29
 800fb82:	d512      	bpl.n	800fbaa <__swsetup_r+0x7a>
 800fb84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb86:	b141      	cbz	r1, 800fb9a <__swsetup_r+0x6a>
 800fb88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb8c:	4299      	cmp	r1, r3
 800fb8e:	d002      	beq.n	800fb96 <__swsetup_r+0x66>
 800fb90:	4630      	mov	r0, r6
 800fb92:	f7fe f991 	bl	800deb8 <_free_r>
 800fb96:	2300      	movs	r3, #0
 800fb98:	6363      	str	r3, [r4, #52]	; 0x34
 800fb9a:	89a3      	ldrh	r3, [r4, #12]
 800fb9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fba0:	81a3      	strh	r3, [r4, #12]
 800fba2:	2300      	movs	r3, #0
 800fba4:	6063      	str	r3, [r4, #4]
 800fba6:	6923      	ldr	r3, [r4, #16]
 800fba8:	6023      	str	r3, [r4, #0]
 800fbaa:	89a3      	ldrh	r3, [r4, #12]
 800fbac:	f043 0308 	orr.w	r3, r3, #8
 800fbb0:	81a3      	strh	r3, [r4, #12]
 800fbb2:	6923      	ldr	r3, [r4, #16]
 800fbb4:	b94b      	cbnz	r3, 800fbca <__swsetup_r+0x9a>
 800fbb6:	89a3      	ldrh	r3, [r4, #12]
 800fbb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fbbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbc0:	d003      	beq.n	800fbca <__swsetup_r+0x9a>
 800fbc2:	4621      	mov	r1, r4
 800fbc4:	4630      	mov	r0, r6
 800fbc6:	f001 fbf1 	bl	80113ac <__smakebuf_r>
 800fbca:	89a0      	ldrh	r0, [r4, #12]
 800fbcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbd0:	f010 0301 	ands.w	r3, r0, #1
 800fbd4:	d00a      	beq.n	800fbec <__swsetup_r+0xbc>
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	60a3      	str	r3, [r4, #8]
 800fbda:	6963      	ldr	r3, [r4, #20]
 800fbdc:	425b      	negs	r3, r3
 800fbde:	61a3      	str	r3, [r4, #24]
 800fbe0:	6923      	ldr	r3, [r4, #16]
 800fbe2:	b943      	cbnz	r3, 800fbf6 <__swsetup_r+0xc6>
 800fbe4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fbe8:	d1ba      	bne.n	800fb60 <__swsetup_r+0x30>
 800fbea:	bd70      	pop	{r4, r5, r6, pc}
 800fbec:	0781      	lsls	r1, r0, #30
 800fbee:	bf58      	it	pl
 800fbf0:	6963      	ldrpl	r3, [r4, #20]
 800fbf2:	60a3      	str	r3, [r4, #8]
 800fbf4:	e7f4      	b.n	800fbe0 <__swsetup_r+0xb0>
 800fbf6:	2000      	movs	r0, #0
 800fbf8:	e7f7      	b.n	800fbea <__swsetup_r+0xba>
 800fbfa:	bf00      	nop
 800fbfc:	20000028 	.word	0x20000028
 800fc00:	08012ee8 	.word	0x08012ee8
 800fc04:	08012f08 	.word	0x08012f08
 800fc08:	08012ec8 	.word	0x08012ec8

0800fc0c <abort>:
 800fc0c:	b508      	push	{r3, lr}
 800fc0e:	2006      	movs	r0, #6
 800fc10:	f002 fac2 	bl	8012198 <raise>
 800fc14:	2001      	movs	r0, #1
 800fc16:	f7f4 f947 	bl	8003ea8 <_exit>

0800fc1a <quorem>:
 800fc1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc1e:	6903      	ldr	r3, [r0, #16]
 800fc20:	690c      	ldr	r4, [r1, #16]
 800fc22:	42a3      	cmp	r3, r4
 800fc24:	4607      	mov	r7, r0
 800fc26:	f2c0 8081 	blt.w	800fd2c <quorem+0x112>
 800fc2a:	3c01      	subs	r4, #1
 800fc2c:	f101 0814 	add.w	r8, r1, #20
 800fc30:	f100 0514 	add.w	r5, r0, #20
 800fc34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc38:	9301      	str	r3, [sp, #4]
 800fc3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc42:	3301      	adds	r3, #1
 800fc44:	429a      	cmp	r2, r3
 800fc46:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fc4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc4e:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc52:	d331      	bcc.n	800fcb8 <quorem+0x9e>
 800fc54:	f04f 0e00 	mov.w	lr, #0
 800fc58:	4640      	mov	r0, r8
 800fc5a:	46ac      	mov	ip, r5
 800fc5c:	46f2      	mov	sl, lr
 800fc5e:	f850 2b04 	ldr.w	r2, [r0], #4
 800fc62:	b293      	uxth	r3, r2
 800fc64:	fb06 e303 	mla	r3, r6, r3, lr
 800fc68:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	ebaa 0303 	sub.w	r3, sl, r3
 800fc72:	0c12      	lsrs	r2, r2, #16
 800fc74:	f8dc a000 	ldr.w	sl, [ip]
 800fc78:	fb06 e202 	mla	r2, r6, r2, lr
 800fc7c:	fa13 f38a 	uxtah	r3, r3, sl
 800fc80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fc84:	fa1f fa82 	uxth.w	sl, r2
 800fc88:	f8dc 2000 	ldr.w	r2, [ip]
 800fc8c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fc90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc9a:	4581      	cmp	r9, r0
 800fc9c:	f84c 3b04 	str.w	r3, [ip], #4
 800fca0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fca4:	d2db      	bcs.n	800fc5e <quorem+0x44>
 800fca6:	f855 300b 	ldr.w	r3, [r5, fp]
 800fcaa:	b92b      	cbnz	r3, 800fcb8 <quorem+0x9e>
 800fcac:	9b01      	ldr	r3, [sp, #4]
 800fcae:	3b04      	subs	r3, #4
 800fcb0:	429d      	cmp	r5, r3
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	d32e      	bcc.n	800fd14 <quorem+0xfa>
 800fcb6:	613c      	str	r4, [r7, #16]
 800fcb8:	4638      	mov	r0, r7
 800fcba:	f001 feb7 	bl	8011a2c <__mcmp>
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	db24      	blt.n	800fd0c <quorem+0xf2>
 800fcc2:	3601      	adds	r6, #1
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	f04f 0c00 	mov.w	ip, #0
 800fcca:	f858 2b04 	ldr.w	r2, [r8], #4
 800fcce:	f8d0 e000 	ldr.w	lr, [r0]
 800fcd2:	b293      	uxth	r3, r2
 800fcd4:	ebac 0303 	sub.w	r3, ip, r3
 800fcd8:	0c12      	lsrs	r2, r2, #16
 800fcda:	fa13 f38e 	uxtah	r3, r3, lr
 800fcde:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fce2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcec:	45c1      	cmp	r9, r8
 800fcee:	f840 3b04 	str.w	r3, [r0], #4
 800fcf2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fcf6:	d2e8      	bcs.n	800fcca <quorem+0xb0>
 800fcf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fcfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd00:	b922      	cbnz	r2, 800fd0c <quorem+0xf2>
 800fd02:	3b04      	subs	r3, #4
 800fd04:	429d      	cmp	r5, r3
 800fd06:	461a      	mov	r2, r3
 800fd08:	d30a      	bcc.n	800fd20 <quorem+0x106>
 800fd0a:	613c      	str	r4, [r7, #16]
 800fd0c:	4630      	mov	r0, r6
 800fd0e:	b003      	add	sp, #12
 800fd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd14:	6812      	ldr	r2, [r2, #0]
 800fd16:	3b04      	subs	r3, #4
 800fd18:	2a00      	cmp	r2, #0
 800fd1a:	d1cc      	bne.n	800fcb6 <quorem+0x9c>
 800fd1c:	3c01      	subs	r4, #1
 800fd1e:	e7c7      	b.n	800fcb0 <quorem+0x96>
 800fd20:	6812      	ldr	r2, [r2, #0]
 800fd22:	3b04      	subs	r3, #4
 800fd24:	2a00      	cmp	r2, #0
 800fd26:	d1f0      	bne.n	800fd0a <quorem+0xf0>
 800fd28:	3c01      	subs	r4, #1
 800fd2a:	e7eb      	b.n	800fd04 <quorem+0xea>
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	e7ee      	b.n	800fd0e <quorem+0xf4>

0800fd30 <_dtoa_r>:
 800fd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd34:	ed2d 8b02 	vpush	{d8}
 800fd38:	ec57 6b10 	vmov	r6, r7, d0
 800fd3c:	b095      	sub	sp, #84	; 0x54
 800fd3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fd40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fd44:	9105      	str	r1, [sp, #20]
 800fd46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fd4a:	4604      	mov	r4, r0
 800fd4c:	9209      	str	r2, [sp, #36]	; 0x24
 800fd4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd50:	b975      	cbnz	r5, 800fd70 <_dtoa_r+0x40>
 800fd52:	2010      	movs	r0, #16
 800fd54:	f7fe f892 	bl	800de7c <malloc>
 800fd58:	4602      	mov	r2, r0
 800fd5a:	6260      	str	r0, [r4, #36]	; 0x24
 800fd5c:	b920      	cbnz	r0, 800fd68 <_dtoa_r+0x38>
 800fd5e:	4bb2      	ldr	r3, [pc, #712]	; (8010028 <_dtoa_r+0x2f8>)
 800fd60:	21ea      	movs	r1, #234	; 0xea
 800fd62:	48b2      	ldr	r0, [pc, #712]	; (801002c <_dtoa_r+0x2fc>)
 800fd64:	f7fe f828 	bl	800ddb8 <__assert_func>
 800fd68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fd6c:	6005      	str	r5, [r0, #0]
 800fd6e:	60c5      	str	r5, [r0, #12]
 800fd70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd72:	6819      	ldr	r1, [r3, #0]
 800fd74:	b151      	cbz	r1, 800fd8c <_dtoa_r+0x5c>
 800fd76:	685a      	ldr	r2, [r3, #4]
 800fd78:	604a      	str	r2, [r1, #4]
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	4093      	lsls	r3, r2
 800fd7e:	608b      	str	r3, [r1, #8]
 800fd80:	4620      	mov	r0, r4
 800fd82:	f001 fbcb 	bl	801151c <_Bfree>
 800fd86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd88:	2200      	movs	r2, #0
 800fd8a:	601a      	str	r2, [r3, #0]
 800fd8c:	1e3b      	subs	r3, r7, #0
 800fd8e:	bfb9      	ittee	lt
 800fd90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fd94:	9303      	strlt	r3, [sp, #12]
 800fd96:	2300      	movge	r3, #0
 800fd98:	f8c8 3000 	strge.w	r3, [r8]
 800fd9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fda0:	4ba3      	ldr	r3, [pc, #652]	; (8010030 <_dtoa_r+0x300>)
 800fda2:	bfbc      	itt	lt
 800fda4:	2201      	movlt	r2, #1
 800fda6:	f8c8 2000 	strlt.w	r2, [r8]
 800fdaa:	ea33 0309 	bics.w	r3, r3, r9
 800fdae:	d11b      	bne.n	800fde8 <_dtoa_r+0xb8>
 800fdb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fdb2:	f242 730f 	movw	r3, #9999	; 0x270f
 800fdb6:	6013      	str	r3, [r2, #0]
 800fdb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fdbc:	4333      	orrs	r3, r6
 800fdbe:	f000 857a 	beq.w	80108b6 <_dtoa_r+0xb86>
 800fdc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdc4:	b963      	cbnz	r3, 800fde0 <_dtoa_r+0xb0>
 800fdc6:	4b9b      	ldr	r3, [pc, #620]	; (8010034 <_dtoa_r+0x304>)
 800fdc8:	e024      	b.n	800fe14 <_dtoa_r+0xe4>
 800fdca:	4b9b      	ldr	r3, [pc, #620]	; (8010038 <_dtoa_r+0x308>)
 800fdcc:	9300      	str	r3, [sp, #0]
 800fdce:	3308      	adds	r3, #8
 800fdd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fdd2:	6013      	str	r3, [r2, #0]
 800fdd4:	9800      	ldr	r0, [sp, #0]
 800fdd6:	b015      	add	sp, #84	; 0x54
 800fdd8:	ecbd 8b02 	vpop	{d8}
 800fddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde0:	4b94      	ldr	r3, [pc, #592]	; (8010034 <_dtoa_r+0x304>)
 800fde2:	9300      	str	r3, [sp, #0]
 800fde4:	3303      	adds	r3, #3
 800fde6:	e7f3      	b.n	800fdd0 <_dtoa_r+0xa0>
 800fde8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fdec:	2200      	movs	r2, #0
 800fdee:	ec51 0b17 	vmov	r0, r1, d7
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fdf8:	f7f0 fe76 	bl	8000ae8 <__aeabi_dcmpeq>
 800fdfc:	4680      	mov	r8, r0
 800fdfe:	b158      	cbz	r0, 800fe18 <_dtoa_r+0xe8>
 800fe00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe02:	2301      	movs	r3, #1
 800fe04:	6013      	str	r3, [r2, #0]
 800fe06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f000 8551 	beq.w	80108b0 <_dtoa_r+0xb80>
 800fe0e:	488b      	ldr	r0, [pc, #556]	; (801003c <_dtoa_r+0x30c>)
 800fe10:	6018      	str	r0, [r3, #0]
 800fe12:	1e43      	subs	r3, r0, #1
 800fe14:	9300      	str	r3, [sp, #0]
 800fe16:	e7dd      	b.n	800fdd4 <_dtoa_r+0xa4>
 800fe18:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fe1c:	aa12      	add	r2, sp, #72	; 0x48
 800fe1e:	a913      	add	r1, sp, #76	; 0x4c
 800fe20:	4620      	mov	r0, r4
 800fe22:	f001 ff23 	bl	8011c6c <__d2b>
 800fe26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fe2a:	4683      	mov	fp, r0
 800fe2c:	2d00      	cmp	r5, #0
 800fe2e:	d07c      	beq.n	800ff2a <_dtoa_r+0x1fa>
 800fe30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe32:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800fe36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe3a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800fe3e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fe42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fe46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fe4a:	4b7d      	ldr	r3, [pc, #500]	; (8010040 <_dtoa_r+0x310>)
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	4630      	mov	r0, r6
 800fe50:	4639      	mov	r1, r7
 800fe52:	f7f0 fa29 	bl	80002a8 <__aeabi_dsub>
 800fe56:	a36e      	add	r3, pc, #440	; (adr r3, 8010010 <_dtoa_r+0x2e0>)
 800fe58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5c:	f7f0 fbdc 	bl	8000618 <__aeabi_dmul>
 800fe60:	a36d      	add	r3, pc, #436	; (adr r3, 8010018 <_dtoa_r+0x2e8>)
 800fe62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe66:	f7f0 fa21 	bl	80002ac <__adddf3>
 800fe6a:	4606      	mov	r6, r0
 800fe6c:	4628      	mov	r0, r5
 800fe6e:	460f      	mov	r7, r1
 800fe70:	f7f0 fb68 	bl	8000544 <__aeabi_i2d>
 800fe74:	a36a      	add	r3, pc, #424	; (adr r3, 8010020 <_dtoa_r+0x2f0>)
 800fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7a:	f7f0 fbcd 	bl	8000618 <__aeabi_dmul>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	460b      	mov	r3, r1
 800fe82:	4630      	mov	r0, r6
 800fe84:	4639      	mov	r1, r7
 800fe86:	f7f0 fa11 	bl	80002ac <__adddf3>
 800fe8a:	4606      	mov	r6, r0
 800fe8c:	460f      	mov	r7, r1
 800fe8e:	f7f0 fe73 	bl	8000b78 <__aeabi_d2iz>
 800fe92:	2200      	movs	r2, #0
 800fe94:	4682      	mov	sl, r0
 800fe96:	2300      	movs	r3, #0
 800fe98:	4630      	mov	r0, r6
 800fe9a:	4639      	mov	r1, r7
 800fe9c:	f7f0 fe2e 	bl	8000afc <__aeabi_dcmplt>
 800fea0:	b148      	cbz	r0, 800feb6 <_dtoa_r+0x186>
 800fea2:	4650      	mov	r0, sl
 800fea4:	f7f0 fb4e 	bl	8000544 <__aeabi_i2d>
 800fea8:	4632      	mov	r2, r6
 800feaa:	463b      	mov	r3, r7
 800feac:	f7f0 fe1c 	bl	8000ae8 <__aeabi_dcmpeq>
 800feb0:	b908      	cbnz	r0, 800feb6 <_dtoa_r+0x186>
 800feb2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800feb6:	f1ba 0f16 	cmp.w	sl, #22
 800feba:	d854      	bhi.n	800ff66 <_dtoa_r+0x236>
 800febc:	4b61      	ldr	r3, [pc, #388]	; (8010044 <_dtoa_r+0x314>)
 800febe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800feca:	f7f0 fe17 	bl	8000afc <__aeabi_dcmplt>
 800fece:	2800      	cmp	r0, #0
 800fed0:	d04b      	beq.n	800ff6a <_dtoa_r+0x23a>
 800fed2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fed6:	2300      	movs	r3, #0
 800fed8:	930e      	str	r3, [sp, #56]	; 0x38
 800feda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fedc:	1b5d      	subs	r5, r3, r5
 800fede:	1e6b      	subs	r3, r5, #1
 800fee0:	9304      	str	r3, [sp, #16]
 800fee2:	bf43      	ittte	mi
 800fee4:	2300      	movmi	r3, #0
 800fee6:	f1c5 0801 	rsbmi	r8, r5, #1
 800feea:	9304      	strmi	r3, [sp, #16]
 800feec:	f04f 0800 	movpl.w	r8, #0
 800fef0:	f1ba 0f00 	cmp.w	sl, #0
 800fef4:	db3b      	blt.n	800ff6e <_dtoa_r+0x23e>
 800fef6:	9b04      	ldr	r3, [sp, #16]
 800fef8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800fefc:	4453      	add	r3, sl
 800fefe:	9304      	str	r3, [sp, #16]
 800ff00:	2300      	movs	r3, #0
 800ff02:	9306      	str	r3, [sp, #24]
 800ff04:	9b05      	ldr	r3, [sp, #20]
 800ff06:	2b09      	cmp	r3, #9
 800ff08:	d869      	bhi.n	800ffde <_dtoa_r+0x2ae>
 800ff0a:	2b05      	cmp	r3, #5
 800ff0c:	bfc4      	itt	gt
 800ff0e:	3b04      	subgt	r3, #4
 800ff10:	9305      	strgt	r3, [sp, #20]
 800ff12:	9b05      	ldr	r3, [sp, #20]
 800ff14:	f1a3 0302 	sub.w	r3, r3, #2
 800ff18:	bfcc      	ite	gt
 800ff1a:	2500      	movgt	r5, #0
 800ff1c:	2501      	movle	r5, #1
 800ff1e:	2b03      	cmp	r3, #3
 800ff20:	d869      	bhi.n	800fff6 <_dtoa_r+0x2c6>
 800ff22:	e8df f003 	tbb	[pc, r3]
 800ff26:	4e2c      	.short	0x4e2c
 800ff28:	5a4c      	.short	0x5a4c
 800ff2a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ff2e:	441d      	add	r5, r3
 800ff30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ff34:	2b20      	cmp	r3, #32
 800ff36:	bfc1      	itttt	gt
 800ff38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ff3c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ff40:	fa09 f303 	lslgt.w	r3, r9, r3
 800ff44:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ff48:	bfda      	itte	le
 800ff4a:	f1c3 0320 	rsble	r3, r3, #32
 800ff4e:	fa06 f003 	lslle.w	r0, r6, r3
 800ff52:	4318      	orrgt	r0, r3
 800ff54:	f7f0 fae6 	bl	8000524 <__aeabi_ui2d>
 800ff58:	2301      	movs	r3, #1
 800ff5a:	4606      	mov	r6, r0
 800ff5c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ff60:	3d01      	subs	r5, #1
 800ff62:	9310      	str	r3, [sp, #64]	; 0x40
 800ff64:	e771      	b.n	800fe4a <_dtoa_r+0x11a>
 800ff66:	2301      	movs	r3, #1
 800ff68:	e7b6      	b.n	800fed8 <_dtoa_r+0x1a8>
 800ff6a:	900e      	str	r0, [sp, #56]	; 0x38
 800ff6c:	e7b5      	b.n	800feda <_dtoa_r+0x1aa>
 800ff6e:	f1ca 0300 	rsb	r3, sl, #0
 800ff72:	9306      	str	r3, [sp, #24]
 800ff74:	2300      	movs	r3, #0
 800ff76:	eba8 080a 	sub.w	r8, r8, sl
 800ff7a:	930d      	str	r3, [sp, #52]	; 0x34
 800ff7c:	e7c2      	b.n	800ff04 <_dtoa_r+0x1d4>
 800ff7e:	2300      	movs	r3, #0
 800ff80:	9308      	str	r3, [sp, #32]
 800ff82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	dc39      	bgt.n	800fffc <_dtoa_r+0x2cc>
 800ff88:	f04f 0901 	mov.w	r9, #1
 800ff8c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ff90:	464b      	mov	r3, r9
 800ff92:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ff96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ff98:	2200      	movs	r2, #0
 800ff9a:	6042      	str	r2, [r0, #4]
 800ff9c:	2204      	movs	r2, #4
 800ff9e:	f102 0614 	add.w	r6, r2, #20
 800ffa2:	429e      	cmp	r6, r3
 800ffa4:	6841      	ldr	r1, [r0, #4]
 800ffa6:	d92f      	bls.n	8010008 <_dtoa_r+0x2d8>
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f001 fa77 	bl	801149c <_Balloc>
 800ffae:	9000      	str	r0, [sp, #0]
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	d14b      	bne.n	801004c <_dtoa_r+0x31c>
 800ffb4:	4b24      	ldr	r3, [pc, #144]	; (8010048 <_dtoa_r+0x318>)
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ffbc:	e6d1      	b.n	800fd62 <_dtoa_r+0x32>
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	e7de      	b.n	800ff80 <_dtoa_r+0x250>
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	9308      	str	r3, [sp, #32]
 800ffc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffc8:	eb0a 0903 	add.w	r9, sl, r3
 800ffcc:	f109 0301 	add.w	r3, r9, #1
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	9301      	str	r3, [sp, #4]
 800ffd4:	bfb8      	it	lt
 800ffd6:	2301      	movlt	r3, #1
 800ffd8:	e7dd      	b.n	800ff96 <_dtoa_r+0x266>
 800ffda:	2301      	movs	r3, #1
 800ffdc:	e7f2      	b.n	800ffc4 <_dtoa_r+0x294>
 800ffde:	2501      	movs	r5, #1
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	9305      	str	r3, [sp, #20]
 800ffe4:	9508      	str	r5, [sp, #32]
 800ffe6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800ffea:	2200      	movs	r2, #0
 800ffec:	f8cd 9004 	str.w	r9, [sp, #4]
 800fff0:	2312      	movs	r3, #18
 800fff2:	9209      	str	r2, [sp, #36]	; 0x24
 800fff4:	e7cf      	b.n	800ff96 <_dtoa_r+0x266>
 800fff6:	2301      	movs	r3, #1
 800fff8:	9308      	str	r3, [sp, #32]
 800fffa:	e7f4      	b.n	800ffe6 <_dtoa_r+0x2b6>
 800fffc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010000:	f8cd 9004 	str.w	r9, [sp, #4]
 8010004:	464b      	mov	r3, r9
 8010006:	e7c6      	b.n	800ff96 <_dtoa_r+0x266>
 8010008:	3101      	adds	r1, #1
 801000a:	6041      	str	r1, [r0, #4]
 801000c:	0052      	lsls	r2, r2, #1
 801000e:	e7c6      	b.n	800ff9e <_dtoa_r+0x26e>
 8010010:	636f4361 	.word	0x636f4361
 8010014:	3fd287a7 	.word	0x3fd287a7
 8010018:	8b60c8b3 	.word	0x8b60c8b3
 801001c:	3fc68a28 	.word	0x3fc68a28
 8010020:	509f79fb 	.word	0x509f79fb
 8010024:	3fd34413 	.word	0x3fd34413
 8010028:	08012e3e 	.word	0x08012e3e
 801002c:	08012e55 	.word	0x08012e55
 8010030:	7ff00000 	.word	0x7ff00000
 8010034:	08012e3a 	.word	0x08012e3a
 8010038:	08012e31 	.word	0x08012e31
 801003c:	08012cb6 	.word	0x08012cb6
 8010040:	3ff80000 	.word	0x3ff80000
 8010044:	08013030 	.word	0x08013030
 8010048:	08012eb4 	.word	0x08012eb4
 801004c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801004e:	9a00      	ldr	r2, [sp, #0]
 8010050:	601a      	str	r2, [r3, #0]
 8010052:	9b01      	ldr	r3, [sp, #4]
 8010054:	2b0e      	cmp	r3, #14
 8010056:	f200 80ad 	bhi.w	80101b4 <_dtoa_r+0x484>
 801005a:	2d00      	cmp	r5, #0
 801005c:	f000 80aa 	beq.w	80101b4 <_dtoa_r+0x484>
 8010060:	f1ba 0f00 	cmp.w	sl, #0
 8010064:	dd36      	ble.n	80100d4 <_dtoa_r+0x3a4>
 8010066:	4ac3      	ldr	r2, [pc, #780]	; (8010374 <_dtoa_r+0x644>)
 8010068:	f00a 030f 	and.w	r3, sl, #15
 801006c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010070:	ed93 7b00 	vldr	d7, [r3]
 8010074:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010078:	ea4f 172a 	mov.w	r7, sl, asr #4
 801007c:	eeb0 8a47 	vmov.f32	s16, s14
 8010080:	eef0 8a67 	vmov.f32	s17, s15
 8010084:	d016      	beq.n	80100b4 <_dtoa_r+0x384>
 8010086:	4bbc      	ldr	r3, [pc, #752]	; (8010378 <_dtoa_r+0x648>)
 8010088:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801008c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010090:	f7f0 fbec 	bl	800086c <__aeabi_ddiv>
 8010094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010098:	f007 070f 	and.w	r7, r7, #15
 801009c:	2503      	movs	r5, #3
 801009e:	4eb6      	ldr	r6, [pc, #728]	; (8010378 <_dtoa_r+0x648>)
 80100a0:	b957      	cbnz	r7, 80100b8 <_dtoa_r+0x388>
 80100a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100a6:	ec53 2b18 	vmov	r2, r3, d8
 80100aa:	f7f0 fbdf 	bl	800086c <__aeabi_ddiv>
 80100ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100b2:	e029      	b.n	8010108 <_dtoa_r+0x3d8>
 80100b4:	2502      	movs	r5, #2
 80100b6:	e7f2      	b.n	801009e <_dtoa_r+0x36e>
 80100b8:	07f9      	lsls	r1, r7, #31
 80100ba:	d508      	bpl.n	80100ce <_dtoa_r+0x39e>
 80100bc:	ec51 0b18 	vmov	r0, r1, d8
 80100c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80100c4:	f7f0 faa8 	bl	8000618 <__aeabi_dmul>
 80100c8:	ec41 0b18 	vmov	d8, r0, r1
 80100cc:	3501      	adds	r5, #1
 80100ce:	107f      	asrs	r7, r7, #1
 80100d0:	3608      	adds	r6, #8
 80100d2:	e7e5      	b.n	80100a0 <_dtoa_r+0x370>
 80100d4:	f000 80a6 	beq.w	8010224 <_dtoa_r+0x4f4>
 80100d8:	f1ca 0600 	rsb	r6, sl, #0
 80100dc:	4ba5      	ldr	r3, [pc, #660]	; (8010374 <_dtoa_r+0x644>)
 80100de:	4fa6      	ldr	r7, [pc, #664]	; (8010378 <_dtoa_r+0x648>)
 80100e0:	f006 020f 	and.w	r2, r6, #15
 80100e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80100f0:	f7f0 fa92 	bl	8000618 <__aeabi_dmul>
 80100f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100f8:	1136      	asrs	r6, r6, #4
 80100fa:	2300      	movs	r3, #0
 80100fc:	2502      	movs	r5, #2
 80100fe:	2e00      	cmp	r6, #0
 8010100:	f040 8085 	bne.w	801020e <_dtoa_r+0x4de>
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1d2      	bne.n	80100ae <_dtoa_r+0x37e>
 8010108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801010a:	2b00      	cmp	r3, #0
 801010c:	f000 808c 	beq.w	8010228 <_dtoa_r+0x4f8>
 8010110:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010114:	4b99      	ldr	r3, [pc, #612]	; (801037c <_dtoa_r+0x64c>)
 8010116:	2200      	movs	r2, #0
 8010118:	4630      	mov	r0, r6
 801011a:	4639      	mov	r1, r7
 801011c:	f7f0 fcee 	bl	8000afc <__aeabi_dcmplt>
 8010120:	2800      	cmp	r0, #0
 8010122:	f000 8081 	beq.w	8010228 <_dtoa_r+0x4f8>
 8010126:	9b01      	ldr	r3, [sp, #4]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d07d      	beq.n	8010228 <_dtoa_r+0x4f8>
 801012c:	f1b9 0f00 	cmp.w	r9, #0
 8010130:	dd3c      	ble.n	80101ac <_dtoa_r+0x47c>
 8010132:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8010136:	9307      	str	r3, [sp, #28]
 8010138:	2200      	movs	r2, #0
 801013a:	4b91      	ldr	r3, [pc, #580]	; (8010380 <_dtoa_r+0x650>)
 801013c:	4630      	mov	r0, r6
 801013e:	4639      	mov	r1, r7
 8010140:	f7f0 fa6a 	bl	8000618 <__aeabi_dmul>
 8010144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010148:	3501      	adds	r5, #1
 801014a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801014e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010152:	4628      	mov	r0, r5
 8010154:	f7f0 f9f6 	bl	8000544 <__aeabi_i2d>
 8010158:	4632      	mov	r2, r6
 801015a:	463b      	mov	r3, r7
 801015c:	f7f0 fa5c 	bl	8000618 <__aeabi_dmul>
 8010160:	4b88      	ldr	r3, [pc, #544]	; (8010384 <_dtoa_r+0x654>)
 8010162:	2200      	movs	r2, #0
 8010164:	f7f0 f8a2 	bl	80002ac <__adddf3>
 8010168:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801016c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010170:	9303      	str	r3, [sp, #12]
 8010172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010174:	2b00      	cmp	r3, #0
 8010176:	d15c      	bne.n	8010232 <_dtoa_r+0x502>
 8010178:	4b83      	ldr	r3, [pc, #524]	; (8010388 <_dtoa_r+0x658>)
 801017a:	2200      	movs	r2, #0
 801017c:	4630      	mov	r0, r6
 801017e:	4639      	mov	r1, r7
 8010180:	f7f0 f892 	bl	80002a8 <__aeabi_dsub>
 8010184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010188:	4606      	mov	r6, r0
 801018a:	460f      	mov	r7, r1
 801018c:	f7f0 fcd4 	bl	8000b38 <__aeabi_dcmpgt>
 8010190:	2800      	cmp	r0, #0
 8010192:	f040 8296 	bne.w	80106c2 <_dtoa_r+0x992>
 8010196:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801019a:	4630      	mov	r0, r6
 801019c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101a0:	4639      	mov	r1, r7
 80101a2:	f7f0 fcab 	bl	8000afc <__aeabi_dcmplt>
 80101a6:	2800      	cmp	r0, #0
 80101a8:	f040 8288 	bne.w	80106bc <_dtoa_r+0x98c>
 80101ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80101b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80101b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	f2c0 8158 	blt.w	801046c <_dtoa_r+0x73c>
 80101bc:	f1ba 0f0e 	cmp.w	sl, #14
 80101c0:	f300 8154 	bgt.w	801046c <_dtoa_r+0x73c>
 80101c4:	4b6b      	ldr	r3, [pc, #428]	; (8010374 <_dtoa_r+0x644>)
 80101c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80101ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80101ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	f280 80e3 	bge.w	801039c <_dtoa_r+0x66c>
 80101d6:	9b01      	ldr	r3, [sp, #4]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	f300 80df 	bgt.w	801039c <_dtoa_r+0x66c>
 80101de:	f040 826d 	bne.w	80106bc <_dtoa_r+0x98c>
 80101e2:	4b69      	ldr	r3, [pc, #420]	; (8010388 <_dtoa_r+0x658>)
 80101e4:	2200      	movs	r2, #0
 80101e6:	4640      	mov	r0, r8
 80101e8:	4649      	mov	r1, r9
 80101ea:	f7f0 fa15 	bl	8000618 <__aeabi_dmul>
 80101ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101f2:	f7f0 fc97 	bl	8000b24 <__aeabi_dcmpge>
 80101f6:	9e01      	ldr	r6, [sp, #4]
 80101f8:	4637      	mov	r7, r6
 80101fa:	2800      	cmp	r0, #0
 80101fc:	f040 8243 	bne.w	8010686 <_dtoa_r+0x956>
 8010200:	9d00      	ldr	r5, [sp, #0]
 8010202:	2331      	movs	r3, #49	; 0x31
 8010204:	f805 3b01 	strb.w	r3, [r5], #1
 8010208:	f10a 0a01 	add.w	sl, sl, #1
 801020c:	e23f      	b.n	801068e <_dtoa_r+0x95e>
 801020e:	07f2      	lsls	r2, r6, #31
 8010210:	d505      	bpl.n	801021e <_dtoa_r+0x4ee>
 8010212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010216:	f7f0 f9ff 	bl	8000618 <__aeabi_dmul>
 801021a:	3501      	adds	r5, #1
 801021c:	2301      	movs	r3, #1
 801021e:	1076      	asrs	r6, r6, #1
 8010220:	3708      	adds	r7, #8
 8010222:	e76c      	b.n	80100fe <_dtoa_r+0x3ce>
 8010224:	2502      	movs	r5, #2
 8010226:	e76f      	b.n	8010108 <_dtoa_r+0x3d8>
 8010228:	9b01      	ldr	r3, [sp, #4]
 801022a:	f8cd a01c 	str.w	sl, [sp, #28]
 801022e:	930c      	str	r3, [sp, #48]	; 0x30
 8010230:	e78d      	b.n	801014e <_dtoa_r+0x41e>
 8010232:	9900      	ldr	r1, [sp, #0]
 8010234:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010236:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010238:	4b4e      	ldr	r3, [pc, #312]	; (8010374 <_dtoa_r+0x644>)
 801023a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801023e:	4401      	add	r1, r0
 8010240:	9102      	str	r1, [sp, #8]
 8010242:	9908      	ldr	r1, [sp, #32]
 8010244:	eeb0 8a47 	vmov.f32	s16, s14
 8010248:	eef0 8a67 	vmov.f32	s17, s15
 801024c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010250:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010254:	2900      	cmp	r1, #0
 8010256:	d045      	beq.n	80102e4 <_dtoa_r+0x5b4>
 8010258:	494c      	ldr	r1, [pc, #304]	; (801038c <_dtoa_r+0x65c>)
 801025a:	2000      	movs	r0, #0
 801025c:	f7f0 fb06 	bl	800086c <__aeabi_ddiv>
 8010260:	ec53 2b18 	vmov	r2, r3, d8
 8010264:	f7f0 f820 	bl	80002a8 <__aeabi_dsub>
 8010268:	9d00      	ldr	r5, [sp, #0]
 801026a:	ec41 0b18 	vmov	d8, r0, r1
 801026e:	4639      	mov	r1, r7
 8010270:	4630      	mov	r0, r6
 8010272:	f7f0 fc81 	bl	8000b78 <__aeabi_d2iz>
 8010276:	900c      	str	r0, [sp, #48]	; 0x30
 8010278:	f7f0 f964 	bl	8000544 <__aeabi_i2d>
 801027c:	4602      	mov	r2, r0
 801027e:	460b      	mov	r3, r1
 8010280:	4630      	mov	r0, r6
 8010282:	4639      	mov	r1, r7
 8010284:	f7f0 f810 	bl	80002a8 <__aeabi_dsub>
 8010288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801028a:	3330      	adds	r3, #48	; 0x30
 801028c:	f805 3b01 	strb.w	r3, [r5], #1
 8010290:	ec53 2b18 	vmov	r2, r3, d8
 8010294:	4606      	mov	r6, r0
 8010296:	460f      	mov	r7, r1
 8010298:	f7f0 fc30 	bl	8000afc <__aeabi_dcmplt>
 801029c:	2800      	cmp	r0, #0
 801029e:	d165      	bne.n	801036c <_dtoa_r+0x63c>
 80102a0:	4632      	mov	r2, r6
 80102a2:	463b      	mov	r3, r7
 80102a4:	4935      	ldr	r1, [pc, #212]	; (801037c <_dtoa_r+0x64c>)
 80102a6:	2000      	movs	r0, #0
 80102a8:	f7ef fffe 	bl	80002a8 <__aeabi_dsub>
 80102ac:	ec53 2b18 	vmov	r2, r3, d8
 80102b0:	f7f0 fc24 	bl	8000afc <__aeabi_dcmplt>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	f040 80b9 	bne.w	801042c <_dtoa_r+0x6fc>
 80102ba:	9b02      	ldr	r3, [sp, #8]
 80102bc:	429d      	cmp	r5, r3
 80102be:	f43f af75 	beq.w	80101ac <_dtoa_r+0x47c>
 80102c2:	4b2f      	ldr	r3, [pc, #188]	; (8010380 <_dtoa_r+0x650>)
 80102c4:	ec51 0b18 	vmov	r0, r1, d8
 80102c8:	2200      	movs	r2, #0
 80102ca:	f7f0 f9a5 	bl	8000618 <__aeabi_dmul>
 80102ce:	4b2c      	ldr	r3, [pc, #176]	; (8010380 <_dtoa_r+0x650>)
 80102d0:	ec41 0b18 	vmov	d8, r0, r1
 80102d4:	2200      	movs	r2, #0
 80102d6:	4630      	mov	r0, r6
 80102d8:	4639      	mov	r1, r7
 80102da:	f7f0 f99d 	bl	8000618 <__aeabi_dmul>
 80102de:	4606      	mov	r6, r0
 80102e0:	460f      	mov	r7, r1
 80102e2:	e7c4      	b.n	801026e <_dtoa_r+0x53e>
 80102e4:	ec51 0b17 	vmov	r0, r1, d7
 80102e8:	f7f0 f996 	bl	8000618 <__aeabi_dmul>
 80102ec:	9b02      	ldr	r3, [sp, #8]
 80102ee:	9d00      	ldr	r5, [sp, #0]
 80102f0:	930c      	str	r3, [sp, #48]	; 0x30
 80102f2:	ec41 0b18 	vmov	d8, r0, r1
 80102f6:	4639      	mov	r1, r7
 80102f8:	4630      	mov	r0, r6
 80102fa:	f7f0 fc3d 	bl	8000b78 <__aeabi_d2iz>
 80102fe:	9011      	str	r0, [sp, #68]	; 0x44
 8010300:	f7f0 f920 	bl	8000544 <__aeabi_i2d>
 8010304:	4602      	mov	r2, r0
 8010306:	460b      	mov	r3, r1
 8010308:	4630      	mov	r0, r6
 801030a:	4639      	mov	r1, r7
 801030c:	f7ef ffcc 	bl	80002a8 <__aeabi_dsub>
 8010310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010312:	3330      	adds	r3, #48	; 0x30
 8010314:	f805 3b01 	strb.w	r3, [r5], #1
 8010318:	9b02      	ldr	r3, [sp, #8]
 801031a:	429d      	cmp	r5, r3
 801031c:	4606      	mov	r6, r0
 801031e:	460f      	mov	r7, r1
 8010320:	f04f 0200 	mov.w	r2, #0
 8010324:	d134      	bne.n	8010390 <_dtoa_r+0x660>
 8010326:	4b19      	ldr	r3, [pc, #100]	; (801038c <_dtoa_r+0x65c>)
 8010328:	ec51 0b18 	vmov	r0, r1, d8
 801032c:	f7ef ffbe 	bl	80002ac <__adddf3>
 8010330:	4602      	mov	r2, r0
 8010332:	460b      	mov	r3, r1
 8010334:	4630      	mov	r0, r6
 8010336:	4639      	mov	r1, r7
 8010338:	f7f0 fbfe 	bl	8000b38 <__aeabi_dcmpgt>
 801033c:	2800      	cmp	r0, #0
 801033e:	d175      	bne.n	801042c <_dtoa_r+0x6fc>
 8010340:	ec53 2b18 	vmov	r2, r3, d8
 8010344:	4911      	ldr	r1, [pc, #68]	; (801038c <_dtoa_r+0x65c>)
 8010346:	2000      	movs	r0, #0
 8010348:	f7ef ffae 	bl	80002a8 <__aeabi_dsub>
 801034c:	4602      	mov	r2, r0
 801034e:	460b      	mov	r3, r1
 8010350:	4630      	mov	r0, r6
 8010352:	4639      	mov	r1, r7
 8010354:	f7f0 fbd2 	bl	8000afc <__aeabi_dcmplt>
 8010358:	2800      	cmp	r0, #0
 801035a:	f43f af27 	beq.w	80101ac <_dtoa_r+0x47c>
 801035e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010360:	1e6b      	subs	r3, r5, #1
 8010362:	930c      	str	r3, [sp, #48]	; 0x30
 8010364:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010368:	2b30      	cmp	r3, #48	; 0x30
 801036a:	d0f8      	beq.n	801035e <_dtoa_r+0x62e>
 801036c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010370:	e04a      	b.n	8010408 <_dtoa_r+0x6d8>
 8010372:	bf00      	nop
 8010374:	08013030 	.word	0x08013030
 8010378:	08013008 	.word	0x08013008
 801037c:	3ff00000 	.word	0x3ff00000
 8010380:	40240000 	.word	0x40240000
 8010384:	401c0000 	.word	0x401c0000
 8010388:	40140000 	.word	0x40140000
 801038c:	3fe00000 	.word	0x3fe00000
 8010390:	4baf      	ldr	r3, [pc, #700]	; (8010650 <_dtoa_r+0x920>)
 8010392:	f7f0 f941 	bl	8000618 <__aeabi_dmul>
 8010396:	4606      	mov	r6, r0
 8010398:	460f      	mov	r7, r1
 801039a:	e7ac      	b.n	80102f6 <_dtoa_r+0x5c6>
 801039c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80103a0:	9d00      	ldr	r5, [sp, #0]
 80103a2:	4642      	mov	r2, r8
 80103a4:	464b      	mov	r3, r9
 80103a6:	4630      	mov	r0, r6
 80103a8:	4639      	mov	r1, r7
 80103aa:	f7f0 fa5f 	bl	800086c <__aeabi_ddiv>
 80103ae:	f7f0 fbe3 	bl	8000b78 <__aeabi_d2iz>
 80103b2:	9002      	str	r0, [sp, #8]
 80103b4:	f7f0 f8c6 	bl	8000544 <__aeabi_i2d>
 80103b8:	4642      	mov	r2, r8
 80103ba:	464b      	mov	r3, r9
 80103bc:	f7f0 f92c 	bl	8000618 <__aeabi_dmul>
 80103c0:	4602      	mov	r2, r0
 80103c2:	460b      	mov	r3, r1
 80103c4:	4630      	mov	r0, r6
 80103c6:	4639      	mov	r1, r7
 80103c8:	f7ef ff6e 	bl	80002a8 <__aeabi_dsub>
 80103cc:	9e02      	ldr	r6, [sp, #8]
 80103ce:	9f01      	ldr	r7, [sp, #4]
 80103d0:	3630      	adds	r6, #48	; 0x30
 80103d2:	f805 6b01 	strb.w	r6, [r5], #1
 80103d6:	9e00      	ldr	r6, [sp, #0]
 80103d8:	1bae      	subs	r6, r5, r6
 80103da:	42b7      	cmp	r7, r6
 80103dc:	4602      	mov	r2, r0
 80103de:	460b      	mov	r3, r1
 80103e0:	d137      	bne.n	8010452 <_dtoa_r+0x722>
 80103e2:	f7ef ff63 	bl	80002ac <__adddf3>
 80103e6:	4642      	mov	r2, r8
 80103e8:	464b      	mov	r3, r9
 80103ea:	4606      	mov	r6, r0
 80103ec:	460f      	mov	r7, r1
 80103ee:	f7f0 fba3 	bl	8000b38 <__aeabi_dcmpgt>
 80103f2:	b9c8      	cbnz	r0, 8010428 <_dtoa_r+0x6f8>
 80103f4:	4642      	mov	r2, r8
 80103f6:	464b      	mov	r3, r9
 80103f8:	4630      	mov	r0, r6
 80103fa:	4639      	mov	r1, r7
 80103fc:	f7f0 fb74 	bl	8000ae8 <__aeabi_dcmpeq>
 8010400:	b110      	cbz	r0, 8010408 <_dtoa_r+0x6d8>
 8010402:	9b02      	ldr	r3, [sp, #8]
 8010404:	07d9      	lsls	r1, r3, #31
 8010406:	d40f      	bmi.n	8010428 <_dtoa_r+0x6f8>
 8010408:	4620      	mov	r0, r4
 801040a:	4659      	mov	r1, fp
 801040c:	f001 f886 	bl	801151c <_Bfree>
 8010410:	2300      	movs	r3, #0
 8010412:	702b      	strb	r3, [r5, #0]
 8010414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010416:	f10a 0001 	add.w	r0, sl, #1
 801041a:	6018      	str	r0, [r3, #0]
 801041c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801041e:	2b00      	cmp	r3, #0
 8010420:	f43f acd8 	beq.w	800fdd4 <_dtoa_r+0xa4>
 8010424:	601d      	str	r5, [r3, #0]
 8010426:	e4d5      	b.n	800fdd4 <_dtoa_r+0xa4>
 8010428:	f8cd a01c 	str.w	sl, [sp, #28]
 801042c:	462b      	mov	r3, r5
 801042e:	461d      	mov	r5, r3
 8010430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010434:	2a39      	cmp	r2, #57	; 0x39
 8010436:	d108      	bne.n	801044a <_dtoa_r+0x71a>
 8010438:	9a00      	ldr	r2, [sp, #0]
 801043a:	429a      	cmp	r2, r3
 801043c:	d1f7      	bne.n	801042e <_dtoa_r+0x6fe>
 801043e:	9a07      	ldr	r2, [sp, #28]
 8010440:	9900      	ldr	r1, [sp, #0]
 8010442:	3201      	adds	r2, #1
 8010444:	9207      	str	r2, [sp, #28]
 8010446:	2230      	movs	r2, #48	; 0x30
 8010448:	700a      	strb	r2, [r1, #0]
 801044a:	781a      	ldrb	r2, [r3, #0]
 801044c:	3201      	adds	r2, #1
 801044e:	701a      	strb	r2, [r3, #0]
 8010450:	e78c      	b.n	801036c <_dtoa_r+0x63c>
 8010452:	4b7f      	ldr	r3, [pc, #508]	; (8010650 <_dtoa_r+0x920>)
 8010454:	2200      	movs	r2, #0
 8010456:	f7f0 f8df 	bl	8000618 <__aeabi_dmul>
 801045a:	2200      	movs	r2, #0
 801045c:	2300      	movs	r3, #0
 801045e:	4606      	mov	r6, r0
 8010460:	460f      	mov	r7, r1
 8010462:	f7f0 fb41 	bl	8000ae8 <__aeabi_dcmpeq>
 8010466:	2800      	cmp	r0, #0
 8010468:	d09b      	beq.n	80103a2 <_dtoa_r+0x672>
 801046a:	e7cd      	b.n	8010408 <_dtoa_r+0x6d8>
 801046c:	9a08      	ldr	r2, [sp, #32]
 801046e:	2a00      	cmp	r2, #0
 8010470:	f000 80c4 	beq.w	80105fc <_dtoa_r+0x8cc>
 8010474:	9a05      	ldr	r2, [sp, #20]
 8010476:	2a01      	cmp	r2, #1
 8010478:	f300 80a8 	bgt.w	80105cc <_dtoa_r+0x89c>
 801047c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801047e:	2a00      	cmp	r2, #0
 8010480:	f000 80a0 	beq.w	80105c4 <_dtoa_r+0x894>
 8010484:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010488:	9e06      	ldr	r6, [sp, #24]
 801048a:	4645      	mov	r5, r8
 801048c:	9a04      	ldr	r2, [sp, #16]
 801048e:	2101      	movs	r1, #1
 8010490:	441a      	add	r2, r3
 8010492:	4620      	mov	r0, r4
 8010494:	4498      	add	r8, r3
 8010496:	9204      	str	r2, [sp, #16]
 8010498:	f001 f946 	bl	8011728 <__i2b>
 801049c:	4607      	mov	r7, r0
 801049e:	2d00      	cmp	r5, #0
 80104a0:	dd0b      	ble.n	80104ba <_dtoa_r+0x78a>
 80104a2:	9b04      	ldr	r3, [sp, #16]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	dd08      	ble.n	80104ba <_dtoa_r+0x78a>
 80104a8:	42ab      	cmp	r3, r5
 80104aa:	9a04      	ldr	r2, [sp, #16]
 80104ac:	bfa8      	it	ge
 80104ae:	462b      	movge	r3, r5
 80104b0:	eba8 0803 	sub.w	r8, r8, r3
 80104b4:	1aed      	subs	r5, r5, r3
 80104b6:	1ad3      	subs	r3, r2, r3
 80104b8:	9304      	str	r3, [sp, #16]
 80104ba:	9b06      	ldr	r3, [sp, #24]
 80104bc:	b1fb      	cbz	r3, 80104fe <_dtoa_r+0x7ce>
 80104be:	9b08      	ldr	r3, [sp, #32]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f000 809f 	beq.w	8010604 <_dtoa_r+0x8d4>
 80104c6:	2e00      	cmp	r6, #0
 80104c8:	dd11      	ble.n	80104ee <_dtoa_r+0x7be>
 80104ca:	4639      	mov	r1, r7
 80104cc:	4632      	mov	r2, r6
 80104ce:	4620      	mov	r0, r4
 80104d0:	f001 f9e6 	bl	80118a0 <__pow5mult>
 80104d4:	465a      	mov	r2, fp
 80104d6:	4601      	mov	r1, r0
 80104d8:	4607      	mov	r7, r0
 80104da:	4620      	mov	r0, r4
 80104dc:	f001 f93a 	bl	8011754 <__multiply>
 80104e0:	4659      	mov	r1, fp
 80104e2:	9007      	str	r0, [sp, #28]
 80104e4:	4620      	mov	r0, r4
 80104e6:	f001 f819 	bl	801151c <_Bfree>
 80104ea:	9b07      	ldr	r3, [sp, #28]
 80104ec:	469b      	mov	fp, r3
 80104ee:	9b06      	ldr	r3, [sp, #24]
 80104f0:	1b9a      	subs	r2, r3, r6
 80104f2:	d004      	beq.n	80104fe <_dtoa_r+0x7ce>
 80104f4:	4659      	mov	r1, fp
 80104f6:	4620      	mov	r0, r4
 80104f8:	f001 f9d2 	bl	80118a0 <__pow5mult>
 80104fc:	4683      	mov	fp, r0
 80104fe:	2101      	movs	r1, #1
 8010500:	4620      	mov	r0, r4
 8010502:	f001 f911 	bl	8011728 <__i2b>
 8010506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010508:	2b00      	cmp	r3, #0
 801050a:	4606      	mov	r6, r0
 801050c:	dd7c      	ble.n	8010608 <_dtoa_r+0x8d8>
 801050e:	461a      	mov	r2, r3
 8010510:	4601      	mov	r1, r0
 8010512:	4620      	mov	r0, r4
 8010514:	f001 f9c4 	bl	80118a0 <__pow5mult>
 8010518:	9b05      	ldr	r3, [sp, #20]
 801051a:	2b01      	cmp	r3, #1
 801051c:	4606      	mov	r6, r0
 801051e:	dd76      	ble.n	801060e <_dtoa_r+0x8de>
 8010520:	2300      	movs	r3, #0
 8010522:	9306      	str	r3, [sp, #24]
 8010524:	6933      	ldr	r3, [r6, #16]
 8010526:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801052a:	6918      	ldr	r0, [r3, #16]
 801052c:	f001 f8ac 	bl	8011688 <__hi0bits>
 8010530:	f1c0 0020 	rsb	r0, r0, #32
 8010534:	9b04      	ldr	r3, [sp, #16]
 8010536:	4418      	add	r0, r3
 8010538:	f010 001f 	ands.w	r0, r0, #31
 801053c:	f000 8086 	beq.w	801064c <_dtoa_r+0x91c>
 8010540:	f1c0 0320 	rsb	r3, r0, #32
 8010544:	2b04      	cmp	r3, #4
 8010546:	dd7f      	ble.n	8010648 <_dtoa_r+0x918>
 8010548:	f1c0 001c 	rsb	r0, r0, #28
 801054c:	9b04      	ldr	r3, [sp, #16]
 801054e:	4403      	add	r3, r0
 8010550:	4480      	add	r8, r0
 8010552:	4405      	add	r5, r0
 8010554:	9304      	str	r3, [sp, #16]
 8010556:	f1b8 0f00 	cmp.w	r8, #0
 801055a:	dd05      	ble.n	8010568 <_dtoa_r+0x838>
 801055c:	4659      	mov	r1, fp
 801055e:	4642      	mov	r2, r8
 8010560:	4620      	mov	r0, r4
 8010562:	f001 f9f7 	bl	8011954 <__lshift>
 8010566:	4683      	mov	fp, r0
 8010568:	9b04      	ldr	r3, [sp, #16]
 801056a:	2b00      	cmp	r3, #0
 801056c:	dd05      	ble.n	801057a <_dtoa_r+0x84a>
 801056e:	4631      	mov	r1, r6
 8010570:	461a      	mov	r2, r3
 8010572:	4620      	mov	r0, r4
 8010574:	f001 f9ee 	bl	8011954 <__lshift>
 8010578:	4606      	mov	r6, r0
 801057a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801057c:	2b00      	cmp	r3, #0
 801057e:	d069      	beq.n	8010654 <_dtoa_r+0x924>
 8010580:	4631      	mov	r1, r6
 8010582:	4658      	mov	r0, fp
 8010584:	f001 fa52 	bl	8011a2c <__mcmp>
 8010588:	2800      	cmp	r0, #0
 801058a:	da63      	bge.n	8010654 <_dtoa_r+0x924>
 801058c:	2300      	movs	r3, #0
 801058e:	4659      	mov	r1, fp
 8010590:	220a      	movs	r2, #10
 8010592:	4620      	mov	r0, r4
 8010594:	f000 ffe4 	bl	8011560 <__multadd>
 8010598:	9b08      	ldr	r3, [sp, #32]
 801059a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801059e:	4683      	mov	fp, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	f000 818f 	beq.w	80108c4 <_dtoa_r+0xb94>
 80105a6:	4639      	mov	r1, r7
 80105a8:	2300      	movs	r3, #0
 80105aa:	220a      	movs	r2, #10
 80105ac:	4620      	mov	r0, r4
 80105ae:	f000 ffd7 	bl	8011560 <__multadd>
 80105b2:	f1b9 0f00 	cmp.w	r9, #0
 80105b6:	4607      	mov	r7, r0
 80105b8:	f300 808e 	bgt.w	80106d8 <_dtoa_r+0x9a8>
 80105bc:	9b05      	ldr	r3, [sp, #20]
 80105be:	2b02      	cmp	r3, #2
 80105c0:	dc50      	bgt.n	8010664 <_dtoa_r+0x934>
 80105c2:	e089      	b.n	80106d8 <_dtoa_r+0x9a8>
 80105c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80105c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80105ca:	e75d      	b.n	8010488 <_dtoa_r+0x758>
 80105cc:	9b01      	ldr	r3, [sp, #4]
 80105ce:	1e5e      	subs	r6, r3, #1
 80105d0:	9b06      	ldr	r3, [sp, #24]
 80105d2:	42b3      	cmp	r3, r6
 80105d4:	bfbf      	itttt	lt
 80105d6:	9b06      	ldrlt	r3, [sp, #24]
 80105d8:	9606      	strlt	r6, [sp, #24]
 80105da:	1af2      	sublt	r2, r6, r3
 80105dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80105de:	bfb6      	itet	lt
 80105e0:	189b      	addlt	r3, r3, r2
 80105e2:	1b9e      	subge	r6, r3, r6
 80105e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80105e6:	9b01      	ldr	r3, [sp, #4]
 80105e8:	bfb8      	it	lt
 80105ea:	2600      	movlt	r6, #0
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	bfb5      	itete	lt
 80105f0:	eba8 0503 	sublt.w	r5, r8, r3
 80105f4:	9b01      	ldrge	r3, [sp, #4]
 80105f6:	2300      	movlt	r3, #0
 80105f8:	4645      	movge	r5, r8
 80105fa:	e747      	b.n	801048c <_dtoa_r+0x75c>
 80105fc:	9e06      	ldr	r6, [sp, #24]
 80105fe:	9f08      	ldr	r7, [sp, #32]
 8010600:	4645      	mov	r5, r8
 8010602:	e74c      	b.n	801049e <_dtoa_r+0x76e>
 8010604:	9a06      	ldr	r2, [sp, #24]
 8010606:	e775      	b.n	80104f4 <_dtoa_r+0x7c4>
 8010608:	9b05      	ldr	r3, [sp, #20]
 801060a:	2b01      	cmp	r3, #1
 801060c:	dc18      	bgt.n	8010640 <_dtoa_r+0x910>
 801060e:	9b02      	ldr	r3, [sp, #8]
 8010610:	b9b3      	cbnz	r3, 8010640 <_dtoa_r+0x910>
 8010612:	9b03      	ldr	r3, [sp, #12]
 8010614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010618:	b9a3      	cbnz	r3, 8010644 <_dtoa_r+0x914>
 801061a:	9b03      	ldr	r3, [sp, #12]
 801061c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010620:	0d1b      	lsrs	r3, r3, #20
 8010622:	051b      	lsls	r3, r3, #20
 8010624:	b12b      	cbz	r3, 8010632 <_dtoa_r+0x902>
 8010626:	9b04      	ldr	r3, [sp, #16]
 8010628:	3301      	adds	r3, #1
 801062a:	9304      	str	r3, [sp, #16]
 801062c:	f108 0801 	add.w	r8, r8, #1
 8010630:	2301      	movs	r3, #1
 8010632:	9306      	str	r3, [sp, #24]
 8010634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010636:	2b00      	cmp	r3, #0
 8010638:	f47f af74 	bne.w	8010524 <_dtoa_r+0x7f4>
 801063c:	2001      	movs	r0, #1
 801063e:	e779      	b.n	8010534 <_dtoa_r+0x804>
 8010640:	2300      	movs	r3, #0
 8010642:	e7f6      	b.n	8010632 <_dtoa_r+0x902>
 8010644:	9b02      	ldr	r3, [sp, #8]
 8010646:	e7f4      	b.n	8010632 <_dtoa_r+0x902>
 8010648:	d085      	beq.n	8010556 <_dtoa_r+0x826>
 801064a:	4618      	mov	r0, r3
 801064c:	301c      	adds	r0, #28
 801064e:	e77d      	b.n	801054c <_dtoa_r+0x81c>
 8010650:	40240000 	.word	0x40240000
 8010654:	9b01      	ldr	r3, [sp, #4]
 8010656:	2b00      	cmp	r3, #0
 8010658:	dc38      	bgt.n	80106cc <_dtoa_r+0x99c>
 801065a:	9b05      	ldr	r3, [sp, #20]
 801065c:	2b02      	cmp	r3, #2
 801065e:	dd35      	ble.n	80106cc <_dtoa_r+0x99c>
 8010660:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010664:	f1b9 0f00 	cmp.w	r9, #0
 8010668:	d10d      	bne.n	8010686 <_dtoa_r+0x956>
 801066a:	4631      	mov	r1, r6
 801066c:	464b      	mov	r3, r9
 801066e:	2205      	movs	r2, #5
 8010670:	4620      	mov	r0, r4
 8010672:	f000 ff75 	bl	8011560 <__multadd>
 8010676:	4601      	mov	r1, r0
 8010678:	4606      	mov	r6, r0
 801067a:	4658      	mov	r0, fp
 801067c:	f001 f9d6 	bl	8011a2c <__mcmp>
 8010680:	2800      	cmp	r0, #0
 8010682:	f73f adbd 	bgt.w	8010200 <_dtoa_r+0x4d0>
 8010686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010688:	9d00      	ldr	r5, [sp, #0]
 801068a:	ea6f 0a03 	mvn.w	sl, r3
 801068e:	f04f 0800 	mov.w	r8, #0
 8010692:	4631      	mov	r1, r6
 8010694:	4620      	mov	r0, r4
 8010696:	f000 ff41 	bl	801151c <_Bfree>
 801069a:	2f00      	cmp	r7, #0
 801069c:	f43f aeb4 	beq.w	8010408 <_dtoa_r+0x6d8>
 80106a0:	f1b8 0f00 	cmp.w	r8, #0
 80106a4:	d005      	beq.n	80106b2 <_dtoa_r+0x982>
 80106a6:	45b8      	cmp	r8, r7
 80106a8:	d003      	beq.n	80106b2 <_dtoa_r+0x982>
 80106aa:	4641      	mov	r1, r8
 80106ac:	4620      	mov	r0, r4
 80106ae:	f000 ff35 	bl	801151c <_Bfree>
 80106b2:	4639      	mov	r1, r7
 80106b4:	4620      	mov	r0, r4
 80106b6:	f000 ff31 	bl	801151c <_Bfree>
 80106ba:	e6a5      	b.n	8010408 <_dtoa_r+0x6d8>
 80106bc:	2600      	movs	r6, #0
 80106be:	4637      	mov	r7, r6
 80106c0:	e7e1      	b.n	8010686 <_dtoa_r+0x956>
 80106c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80106c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80106c8:	4637      	mov	r7, r6
 80106ca:	e599      	b.n	8010200 <_dtoa_r+0x4d0>
 80106cc:	9b08      	ldr	r3, [sp, #32]
 80106ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	f000 80fd 	beq.w	80108d2 <_dtoa_r+0xba2>
 80106d8:	2d00      	cmp	r5, #0
 80106da:	dd05      	ble.n	80106e8 <_dtoa_r+0x9b8>
 80106dc:	4639      	mov	r1, r7
 80106de:	462a      	mov	r2, r5
 80106e0:	4620      	mov	r0, r4
 80106e2:	f001 f937 	bl	8011954 <__lshift>
 80106e6:	4607      	mov	r7, r0
 80106e8:	9b06      	ldr	r3, [sp, #24]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d05c      	beq.n	80107a8 <_dtoa_r+0xa78>
 80106ee:	6879      	ldr	r1, [r7, #4]
 80106f0:	4620      	mov	r0, r4
 80106f2:	f000 fed3 	bl	801149c <_Balloc>
 80106f6:	4605      	mov	r5, r0
 80106f8:	b928      	cbnz	r0, 8010706 <_dtoa_r+0x9d6>
 80106fa:	4b80      	ldr	r3, [pc, #512]	; (80108fc <_dtoa_r+0xbcc>)
 80106fc:	4602      	mov	r2, r0
 80106fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010702:	f7ff bb2e 	b.w	800fd62 <_dtoa_r+0x32>
 8010706:	693a      	ldr	r2, [r7, #16]
 8010708:	3202      	adds	r2, #2
 801070a:	0092      	lsls	r2, r2, #2
 801070c:	f107 010c 	add.w	r1, r7, #12
 8010710:	300c      	adds	r0, #12
 8010712:	f7fd fbbb 	bl	800de8c <memcpy>
 8010716:	2201      	movs	r2, #1
 8010718:	4629      	mov	r1, r5
 801071a:	4620      	mov	r0, r4
 801071c:	f001 f91a 	bl	8011954 <__lshift>
 8010720:	9b00      	ldr	r3, [sp, #0]
 8010722:	3301      	adds	r3, #1
 8010724:	9301      	str	r3, [sp, #4]
 8010726:	9b00      	ldr	r3, [sp, #0]
 8010728:	444b      	add	r3, r9
 801072a:	9307      	str	r3, [sp, #28]
 801072c:	9b02      	ldr	r3, [sp, #8]
 801072e:	f003 0301 	and.w	r3, r3, #1
 8010732:	46b8      	mov	r8, r7
 8010734:	9306      	str	r3, [sp, #24]
 8010736:	4607      	mov	r7, r0
 8010738:	9b01      	ldr	r3, [sp, #4]
 801073a:	4631      	mov	r1, r6
 801073c:	3b01      	subs	r3, #1
 801073e:	4658      	mov	r0, fp
 8010740:	9302      	str	r3, [sp, #8]
 8010742:	f7ff fa6a 	bl	800fc1a <quorem>
 8010746:	4603      	mov	r3, r0
 8010748:	3330      	adds	r3, #48	; 0x30
 801074a:	9004      	str	r0, [sp, #16]
 801074c:	4641      	mov	r1, r8
 801074e:	4658      	mov	r0, fp
 8010750:	9308      	str	r3, [sp, #32]
 8010752:	f001 f96b 	bl	8011a2c <__mcmp>
 8010756:	463a      	mov	r2, r7
 8010758:	4681      	mov	r9, r0
 801075a:	4631      	mov	r1, r6
 801075c:	4620      	mov	r0, r4
 801075e:	f001 f981 	bl	8011a64 <__mdiff>
 8010762:	68c2      	ldr	r2, [r0, #12]
 8010764:	9b08      	ldr	r3, [sp, #32]
 8010766:	4605      	mov	r5, r0
 8010768:	bb02      	cbnz	r2, 80107ac <_dtoa_r+0xa7c>
 801076a:	4601      	mov	r1, r0
 801076c:	4658      	mov	r0, fp
 801076e:	f001 f95d 	bl	8011a2c <__mcmp>
 8010772:	9b08      	ldr	r3, [sp, #32]
 8010774:	4602      	mov	r2, r0
 8010776:	4629      	mov	r1, r5
 8010778:	4620      	mov	r0, r4
 801077a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801077e:	f000 fecd 	bl	801151c <_Bfree>
 8010782:	9b05      	ldr	r3, [sp, #20]
 8010784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010786:	9d01      	ldr	r5, [sp, #4]
 8010788:	ea43 0102 	orr.w	r1, r3, r2
 801078c:	9b06      	ldr	r3, [sp, #24]
 801078e:	430b      	orrs	r3, r1
 8010790:	9b08      	ldr	r3, [sp, #32]
 8010792:	d10d      	bne.n	80107b0 <_dtoa_r+0xa80>
 8010794:	2b39      	cmp	r3, #57	; 0x39
 8010796:	d029      	beq.n	80107ec <_dtoa_r+0xabc>
 8010798:	f1b9 0f00 	cmp.w	r9, #0
 801079c:	dd01      	ble.n	80107a2 <_dtoa_r+0xa72>
 801079e:	9b04      	ldr	r3, [sp, #16]
 80107a0:	3331      	adds	r3, #49	; 0x31
 80107a2:	9a02      	ldr	r2, [sp, #8]
 80107a4:	7013      	strb	r3, [r2, #0]
 80107a6:	e774      	b.n	8010692 <_dtoa_r+0x962>
 80107a8:	4638      	mov	r0, r7
 80107aa:	e7b9      	b.n	8010720 <_dtoa_r+0x9f0>
 80107ac:	2201      	movs	r2, #1
 80107ae:	e7e2      	b.n	8010776 <_dtoa_r+0xa46>
 80107b0:	f1b9 0f00 	cmp.w	r9, #0
 80107b4:	db06      	blt.n	80107c4 <_dtoa_r+0xa94>
 80107b6:	9905      	ldr	r1, [sp, #20]
 80107b8:	ea41 0909 	orr.w	r9, r1, r9
 80107bc:	9906      	ldr	r1, [sp, #24]
 80107be:	ea59 0101 	orrs.w	r1, r9, r1
 80107c2:	d120      	bne.n	8010806 <_dtoa_r+0xad6>
 80107c4:	2a00      	cmp	r2, #0
 80107c6:	ddec      	ble.n	80107a2 <_dtoa_r+0xa72>
 80107c8:	4659      	mov	r1, fp
 80107ca:	2201      	movs	r2, #1
 80107cc:	4620      	mov	r0, r4
 80107ce:	9301      	str	r3, [sp, #4]
 80107d0:	f001 f8c0 	bl	8011954 <__lshift>
 80107d4:	4631      	mov	r1, r6
 80107d6:	4683      	mov	fp, r0
 80107d8:	f001 f928 	bl	8011a2c <__mcmp>
 80107dc:	2800      	cmp	r0, #0
 80107de:	9b01      	ldr	r3, [sp, #4]
 80107e0:	dc02      	bgt.n	80107e8 <_dtoa_r+0xab8>
 80107e2:	d1de      	bne.n	80107a2 <_dtoa_r+0xa72>
 80107e4:	07da      	lsls	r2, r3, #31
 80107e6:	d5dc      	bpl.n	80107a2 <_dtoa_r+0xa72>
 80107e8:	2b39      	cmp	r3, #57	; 0x39
 80107ea:	d1d8      	bne.n	801079e <_dtoa_r+0xa6e>
 80107ec:	9a02      	ldr	r2, [sp, #8]
 80107ee:	2339      	movs	r3, #57	; 0x39
 80107f0:	7013      	strb	r3, [r2, #0]
 80107f2:	462b      	mov	r3, r5
 80107f4:	461d      	mov	r5, r3
 80107f6:	3b01      	subs	r3, #1
 80107f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80107fc:	2a39      	cmp	r2, #57	; 0x39
 80107fe:	d050      	beq.n	80108a2 <_dtoa_r+0xb72>
 8010800:	3201      	adds	r2, #1
 8010802:	701a      	strb	r2, [r3, #0]
 8010804:	e745      	b.n	8010692 <_dtoa_r+0x962>
 8010806:	2a00      	cmp	r2, #0
 8010808:	dd03      	ble.n	8010812 <_dtoa_r+0xae2>
 801080a:	2b39      	cmp	r3, #57	; 0x39
 801080c:	d0ee      	beq.n	80107ec <_dtoa_r+0xabc>
 801080e:	3301      	adds	r3, #1
 8010810:	e7c7      	b.n	80107a2 <_dtoa_r+0xa72>
 8010812:	9a01      	ldr	r2, [sp, #4]
 8010814:	9907      	ldr	r1, [sp, #28]
 8010816:	f802 3c01 	strb.w	r3, [r2, #-1]
 801081a:	428a      	cmp	r2, r1
 801081c:	d02a      	beq.n	8010874 <_dtoa_r+0xb44>
 801081e:	4659      	mov	r1, fp
 8010820:	2300      	movs	r3, #0
 8010822:	220a      	movs	r2, #10
 8010824:	4620      	mov	r0, r4
 8010826:	f000 fe9b 	bl	8011560 <__multadd>
 801082a:	45b8      	cmp	r8, r7
 801082c:	4683      	mov	fp, r0
 801082e:	f04f 0300 	mov.w	r3, #0
 8010832:	f04f 020a 	mov.w	r2, #10
 8010836:	4641      	mov	r1, r8
 8010838:	4620      	mov	r0, r4
 801083a:	d107      	bne.n	801084c <_dtoa_r+0xb1c>
 801083c:	f000 fe90 	bl	8011560 <__multadd>
 8010840:	4680      	mov	r8, r0
 8010842:	4607      	mov	r7, r0
 8010844:	9b01      	ldr	r3, [sp, #4]
 8010846:	3301      	adds	r3, #1
 8010848:	9301      	str	r3, [sp, #4]
 801084a:	e775      	b.n	8010738 <_dtoa_r+0xa08>
 801084c:	f000 fe88 	bl	8011560 <__multadd>
 8010850:	4639      	mov	r1, r7
 8010852:	4680      	mov	r8, r0
 8010854:	2300      	movs	r3, #0
 8010856:	220a      	movs	r2, #10
 8010858:	4620      	mov	r0, r4
 801085a:	f000 fe81 	bl	8011560 <__multadd>
 801085e:	4607      	mov	r7, r0
 8010860:	e7f0      	b.n	8010844 <_dtoa_r+0xb14>
 8010862:	f1b9 0f00 	cmp.w	r9, #0
 8010866:	9a00      	ldr	r2, [sp, #0]
 8010868:	bfcc      	ite	gt
 801086a:	464d      	movgt	r5, r9
 801086c:	2501      	movle	r5, #1
 801086e:	4415      	add	r5, r2
 8010870:	f04f 0800 	mov.w	r8, #0
 8010874:	4659      	mov	r1, fp
 8010876:	2201      	movs	r2, #1
 8010878:	4620      	mov	r0, r4
 801087a:	9301      	str	r3, [sp, #4]
 801087c:	f001 f86a 	bl	8011954 <__lshift>
 8010880:	4631      	mov	r1, r6
 8010882:	4683      	mov	fp, r0
 8010884:	f001 f8d2 	bl	8011a2c <__mcmp>
 8010888:	2800      	cmp	r0, #0
 801088a:	dcb2      	bgt.n	80107f2 <_dtoa_r+0xac2>
 801088c:	d102      	bne.n	8010894 <_dtoa_r+0xb64>
 801088e:	9b01      	ldr	r3, [sp, #4]
 8010890:	07db      	lsls	r3, r3, #31
 8010892:	d4ae      	bmi.n	80107f2 <_dtoa_r+0xac2>
 8010894:	462b      	mov	r3, r5
 8010896:	461d      	mov	r5, r3
 8010898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801089c:	2a30      	cmp	r2, #48	; 0x30
 801089e:	d0fa      	beq.n	8010896 <_dtoa_r+0xb66>
 80108a0:	e6f7      	b.n	8010692 <_dtoa_r+0x962>
 80108a2:	9a00      	ldr	r2, [sp, #0]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d1a5      	bne.n	80107f4 <_dtoa_r+0xac4>
 80108a8:	f10a 0a01 	add.w	sl, sl, #1
 80108ac:	2331      	movs	r3, #49	; 0x31
 80108ae:	e779      	b.n	80107a4 <_dtoa_r+0xa74>
 80108b0:	4b13      	ldr	r3, [pc, #76]	; (8010900 <_dtoa_r+0xbd0>)
 80108b2:	f7ff baaf 	b.w	800fe14 <_dtoa_r+0xe4>
 80108b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	f47f aa86 	bne.w	800fdca <_dtoa_r+0x9a>
 80108be:	4b11      	ldr	r3, [pc, #68]	; (8010904 <_dtoa_r+0xbd4>)
 80108c0:	f7ff baa8 	b.w	800fe14 <_dtoa_r+0xe4>
 80108c4:	f1b9 0f00 	cmp.w	r9, #0
 80108c8:	dc03      	bgt.n	80108d2 <_dtoa_r+0xba2>
 80108ca:	9b05      	ldr	r3, [sp, #20]
 80108cc:	2b02      	cmp	r3, #2
 80108ce:	f73f aec9 	bgt.w	8010664 <_dtoa_r+0x934>
 80108d2:	9d00      	ldr	r5, [sp, #0]
 80108d4:	4631      	mov	r1, r6
 80108d6:	4658      	mov	r0, fp
 80108d8:	f7ff f99f 	bl	800fc1a <quorem>
 80108dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80108e0:	f805 3b01 	strb.w	r3, [r5], #1
 80108e4:	9a00      	ldr	r2, [sp, #0]
 80108e6:	1aaa      	subs	r2, r5, r2
 80108e8:	4591      	cmp	r9, r2
 80108ea:	ddba      	ble.n	8010862 <_dtoa_r+0xb32>
 80108ec:	4659      	mov	r1, fp
 80108ee:	2300      	movs	r3, #0
 80108f0:	220a      	movs	r2, #10
 80108f2:	4620      	mov	r0, r4
 80108f4:	f000 fe34 	bl	8011560 <__multadd>
 80108f8:	4683      	mov	fp, r0
 80108fa:	e7eb      	b.n	80108d4 <_dtoa_r+0xba4>
 80108fc:	08012eb4 	.word	0x08012eb4
 8010900:	08012cb5 	.word	0x08012cb5
 8010904:	08012e31 	.word	0x08012e31

08010908 <__sflush_r>:
 8010908:	898a      	ldrh	r2, [r1, #12]
 801090a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801090e:	4605      	mov	r5, r0
 8010910:	0710      	lsls	r0, r2, #28
 8010912:	460c      	mov	r4, r1
 8010914:	d458      	bmi.n	80109c8 <__sflush_r+0xc0>
 8010916:	684b      	ldr	r3, [r1, #4]
 8010918:	2b00      	cmp	r3, #0
 801091a:	dc05      	bgt.n	8010928 <__sflush_r+0x20>
 801091c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801091e:	2b00      	cmp	r3, #0
 8010920:	dc02      	bgt.n	8010928 <__sflush_r+0x20>
 8010922:	2000      	movs	r0, #0
 8010924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801092a:	2e00      	cmp	r6, #0
 801092c:	d0f9      	beq.n	8010922 <__sflush_r+0x1a>
 801092e:	2300      	movs	r3, #0
 8010930:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010934:	682f      	ldr	r7, [r5, #0]
 8010936:	602b      	str	r3, [r5, #0]
 8010938:	d032      	beq.n	80109a0 <__sflush_r+0x98>
 801093a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801093c:	89a3      	ldrh	r3, [r4, #12]
 801093e:	075a      	lsls	r2, r3, #29
 8010940:	d505      	bpl.n	801094e <__sflush_r+0x46>
 8010942:	6863      	ldr	r3, [r4, #4]
 8010944:	1ac0      	subs	r0, r0, r3
 8010946:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010948:	b10b      	cbz	r3, 801094e <__sflush_r+0x46>
 801094a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801094c:	1ac0      	subs	r0, r0, r3
 801094e:	2300      	movs	r3, #0
 8010950:	4602      	mov	r2, r0
 8010952:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010954:	6a21      	ldr	r1, [r4, #32]
 8010956:	4628      	mov	r0, r5
 8010958:	47b0      	blx	r6
 801095a:	1c43      	adds	r3, r0, #1
 801095c:	89a3      	ldrh	r3, [r4, #12]
 801095e:	d106      	bne.n	801096e <__sflush_r+0x66>
 8010960:	6829      	ldr	r1, [r5, #0]
 8010962:	291d      	cmp	r1, #29
 8010964:	d82c      	bhi.n	80109c0 <__sflush_r+0xb8>
 8010966:	4a2a      	ldr	r2, [pc, #168]	; (8010a10 <__sflush_r+0x108>)
 8010968:	40ca      	lsrs	r2, r1
 801096a:	07d6      	lsls	r6, r2, #31
 801096c:	d528      	bpl.n	80109c0 <__sflush_r+0xb8>
 801096e:	2200      	movs	r2, #0
 8010970:	6062      	str	r2, [r4, #4]
 8010972:	04d9      	lsls	r1, r3, #19
 8010974:	6922      	ldr	r2, [r4, #16]
 8010976:	6022      	str	r2, [r4, #0]
 8010978:	d504      	bpl.n	8010984 <__sflush_r+0x7c>
 801097a:	1c42      	adds	r2, r0, #1
 801097c:	d101      	bne.n	8010982 <__sflush_r+0x7a>
 801097e:	682b      	ldr	r3, [r5, #0]
 8010980:	b903      	cbnz	r3, 8010984 <__sflush_r+0x7c>
 8010982:	6560      	str	r0, [r4, #84]	; 0x54
 8010984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010986:	602f      	str	r7, [r5, #0]
 8010988:	2900      	cmp	r1, #0
 801098a:	d0ca      	beq.n	8010922 <__sflush_r+0x1a>
 801098c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010990:	4299      	cmp	r1, r3
 8010992:	d002      	beq.n	801099a <__sflush_r+0x92>
 8010994:	4628      	mov	r0, r5
 8010996:	f7fd fa8f 	bl	800deb8 <_free_r>
 801099a:	2000      	movs	r0, #0
 801099c:	6360      	str	r0, [r4, #52]	; 0x34
 801099e:	e7c1      	b.n	8010924 <__sflush_r+0x1c>
 80109a0:	6a21      	ldr	r1, [r4, #32]
 80109a2:	2301      	movs	r3, #1
 80109a4:	4628      	mov	r0, r5
 80109a6:	47b0      	blx	r6
 80109a8:	1c41      	adds	r1, r0, #1
 80109aa:	d1c7      	bne.n	801093c <__sflush_r+0x34>
 80109ac:	682b      	ldr	r3, [r5, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d0c4      	beq.n	801093c <__sflush_r+0x34>
 80109b2:	2b1d      	cmp	r3, #29
 80109b4:	d001      	beq.n	80109ba <__sflush_r+0xb2>
 80109b6:	2b16      	cmp	r3, #22
 80109b8:	d101      	bne.n	80109be <__sflush_r+0xb6>
 80109ba:	602f      	str	r7, [r5, #0]
 80109bc:	e7b1      	b.n	8010922 <__sflush_r+0x1a>
 80109be:	89a3      	ldrh	r3, [r4, #12]
 80109c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109c4:	81a3      	strh	r3, [r4, #12]
 80109c6:	e7ad      	b.n	8010924 <__sflush_r+0x1c>
 80109c8:	690f      	ldr	r7, [r1, #16]
 80109ca:	2f00      	cmp	r7, #0
 80109cc:	d0a9      	beq.n	8010922 <__sflush_r+0x1a>
 80109ce:	0793      	lsls	r3, r2, #30
 80109d0:	680e      	ldr	r6, [r1, #0]
 80109d2:	bf08      	it	eq
 80109d4:	694b      	ldreq	r3, [r1, #20]
 80109d6:	600f      	str	r7, [r1, #0]
 80109d8:	bf18      	it	ne
 80109da:	2300      	movne	r3, #0
 80109dc:	eba6 0807 	sub.w	r8, r6, r7
 80109e0:	608b      	str	r3, [r1, #8]
 80109e2:	f1b8 0f00 	cmp.w	r8, #0
 80109e6:	dd9c      	ble.n	8010922 <__sflush_r+0x1a>
 80109e8:	6a21      	ldr	r1, [r4, #32]
 80109ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80109ec:	4643      	mov	r3, r8
 80109ee:	463a      	mov	r2, r7
 80109f0:	4628      	mov	r0, r5
 80109f2:	47b0      	blx	r6
 80109f4:	2800      	cmp	r0, #0
 80109f6:	dc06      	bgt.n	8010a06 <__sflush_r+0xfe>
 80109f8:	89a3      	ldrh	r3, [r4, #12]
 80109fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109fe:	81a3      	strh	r3, [r4, #12]
 8010a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a04:	e78e      	b.n	8010924 <__sflush_r+0x1c>
 8010a06:	4407      	add	r7, r0
 8010a08:	eba8 0800 	sub.w	r8, r8, r0
 8010a0c:	e7e9      	b.n	80109e2 <__sflush_r+0xda>
 8010a0e:	bf00      	nop
 8010a10:	20400001 	.word	0x20400001

08010a14 <_fflush_r>:
 8010a14:	b538      	push	{r3, r4, r5, lr}
 8010a16:	690b      	ldr	r3, [r1, #16]
 8010a18:	4605      	mov	r5, r0
 8010a1a:	460c      	mov	r4, r1
 8010a1c:	b913      	cbnz	r3, 8010a24 <_fflush_r+0x10>
 8010a1e:	2500      	movs	r5, #0
 8010a20:	4628      	mov	r0, r5
 8010a22:	bd38      	pop	{r3, r4, r5, pc}
 8010a24:	b118      	cbz	r0, 8010a2e <_fflush_r+0x1a>
 8010a26:	6983      	ldr	r3, [r0, #24]
 8010a28:	b90b      	cbnz	r3, 8010a2e <_fflush_r+0x1a>
 8010a2a:	f000 f887 	bl	8010b3c <__sinit>
 8010a2e:	4b14      	ldr	r3, [pc, #80]	; (8010a80 <_fflush_r+0x6c>)
 8010a30:	429c      	cmp	r4, r3
 8010a32:	d11b      	bne.n	8010a6c <_fflush_r+0x58>
 8010a34:	686c      	ldr	r4, [r5, #4]
 8010a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d0ef      	beq.n	8010a1e <_fflush_r+0xa>
 8010a3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010a40:	07d0      	lsls	r0, r2, #31
 8010a42:	d404      	bmi.n	8010a4e <_fflush_r+0x3a>
 8010a44:	0599      	lsls	r1, r3, #22
 8010a46:	d402      	bmi.n	8010a4e <_fflush_r+0x3a>
 8010a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a4a:	f000 fc88 	bl	801135e <__retarget_lock_acquire_recursive>
 8010a4e:	4628      	mov	r0, r5
 8010a50:	4621      	mov	r1, r4
 8010a52:	f7ff ff59 	bl	8010908 <__sflush_r>
 8010a56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a58:	07da      	lsls	r2, r3, #31
 8010a5a:	4605      	mov	r5, r0
 8010a5c:	d4e0      	bmi.n	8010a20 <_fflush_r+0xc>
 8010a5e:	89a3      	ldrh	r3, [r4, #12]
 8010a60:	059b      	lsls	r3, r3, #22
 8010a62:	d4dd      	bmi.n	8010a20 <_fflush_r+0xc>
 8010a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a66:	f000 fc7b 	bl	8011360 <__retarget_lock_release_recursive>
 8010a6a:	e7d9      	b.n	8010a20 <_fflush_r+0xc>
 8010a6c:	4b05      	ldr	r3, [pc, #20]	; (8010a84 <_fflush_r+0x70>)
 8010a6e:	429c      	cmp	r4, r3
 8010a70:	d101      	bne.n	8010a76 <_fflush_r+0x62>
 8010a72:	68ac      	ldr	r4, [r5, #8]
 8010a74:	e7df      	b.n	8010a36 <_fflush_r+0x22>
 8010a76:	4b04      	ldr	r3, [pc, #16]	; (8010a88 <_fflush_r+0x74>)
 8010a78:	429c      	cmp	r4, r3
 8010a7a:	bf08      	it	eq
 8010a7c:	68ec      	ldreq	r4, [r5, #12]
 8010a7e:	e7da      	b.n	8010a36 <_fflush_r+0x22>
 8010a80:	08012ee8 	.word	0x08012ee8
 8010a84:	08012f08 	.word	0x08012f08
 8010a88:	08012ec8 	.word	0x08012ec8

08010a8c <std>:
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	b510      	push	{r4, lr}
 8010a90:	4604      	mov	r4, r0
 8010a92:	e9c0 3300 	strd	r3, r3, [r0]
 8010a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a9a:	6083      	str	r3, [r0, #8]
 8010a9c:	8181      	strh	r1, [r0, #12]
 8010a9e:	6643      	str	r3, [r0, #100]	; 0x64
 8010aa0:	81c2      	strh	r2, [r0, #14]
 8010aa2:	6183      	str	r3, [r0, #24]
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	2208      	movs	r2, #8
 8010aa8:	305c      	adds	r0, #92	; 0x5c
 8010aaa:	f7fd f9fd 	bl	800dea8 <memset>
 8010aae:	4b05      	ldr	r3, [pc, #20]	; (8010ac4 <std+0x38>)
 8010ab0:	6263      	str	r3, [r4, #36]	; 0x24
 8010ab2:	4b05      	ldr	r3, [pc, #20]	; (8010ac8 <std+0x3c>)
 8010ab4:	62a3      	str	r3, [r4, #40]	; 0x28
 8010ab6:	4b05      	ldr	r3, [pc, #20]	; (8010acc <std+0x40>)
 8010ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010aba:	4b05      	ldr	r3, [pc, #20]	; (8010ad0 <std+0x44>)
 8010abc:	6224      	str	r4, [r4, #32]
 8010abe:	6323      	str	r3, [r4, #48]	; 0x30
 8010ac0:	bd10      	pop	{r4, pc}
 8010ac2:	bf00      	nop
 8010ac4:	080121d1 	.word	0x080121d1
 8010ac8:	080121f3 	.word	0x080121f3
 8010acc:	0801222b 	.word	0x0801222b
 8010ad0:	0801224f 	.word	0x0801224f

08010ad4 <_cleanup_r>:
 8010ad4:	4901      	ldr	r1, [pc, #4]	; (8010adc <_cleanup_r+0x8>)
 8010ad6:	f000 b8af 	b.w	8010c38 <_fwalk_reent>
 8010ada:	bf00      	nop
 8010adc:	08010a15 	.word	0x08010a15

08010ae0 <__sfmoreglue>:
 8010ae0:	b570      	push	{r4, r5, r6, lr}
 8010ae2:	1e4a      	subs	r2, r1, #1
 8010ae4:	2568      	movs	r5, #104	; 0x68
 8010ae6:	4355      	muls	r5, r2
 8010ae8:	460e      	mov	r6, r1
 8010aea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010aee:	f7fd fa33 	bl	800df58 <_malloc_r>
 8010af2:	4604      	mov	r4, r0
 8010af4:	b140      	cbz	r0, 8010b08 <__sfmoreglue+0x28>
 8010af6:	2100      	movs	r1, #0
 8010af8:	e9c0 1600 	strd	r1, r6, [r0]
 8010afc:	300c      	adds	r0, #12
 8010afe:	60a0      	str	r0, [r4, #8]
 8010b00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010b04:	f7fd f9d0 	bl	800dea8 <memset>
 8010b08:	4620      	mov	r0, r4
 8010b0a:	bd70      	pop	{r4, r5, r6, pc}

08010b0c <__sfp_lock_acquire>:
 8010b0c:	4801      	ldr	r0, [pc, #4]	; (8010b14 <__sfp_lock_acquire+0x8>)
 8010b0e:	f000 bc26 	b.w	801135e <__retarget_lock_acquire_recursive>
 8010b12:	bf00      	nop
 8010b14:	20000ebc 	.word	0x20000ebc

08010b18 <__sfp_lock_release>:
 8010b18:	4801      	ldr	r0, [pc, #4]	; (8010b20 <__sfp_lock_release+0x8>)
 8010b1a:	f000 bc21 	b.w	8011360 <__retarget_lock_release_recursive>
 8010b1e:	bf00      	nop
 8010b20:	20000ebc 	.word	0x20000ebc

08010b24 <__sinit_lock_acquire>:
 8010b24:	4801      	ldr	r0, [pc, #4]	; (8010b2c <__sinit_lock_acquire+0x8>)
 8010b26:	f000 bc1a 	b.w	801135e <__retarget_lock_acquire_recursive>
 8010b2a:	bf00      	nop
 8010b2c:	20000eb7 	.word	0x20000eb7

08010b30 <__sinit_lock_release>:
 8010b30:	4801      	ldr	r0, [pc, #4]	; (8010b38 <__sinit_lock_release+0x8>)
 8010b32:	f000 bc15 	b.w	8011360 <__retarget_lock_release_recursive>
 8010b36:	bf00      	nop
 8010b38:	20000eb7 	.word	0x20000eb7

08010b3c <__sinit>:
 8010b3c:	b510      	push	{r4, lr}
 8010b3e:	4604      	mov	r4, r0
 8010b40:	f7ff fff0 	bl	8010b24 <__sinit_lock_acquire>
 8010b44:	69a3      	ldr	r3, [r4, #24]
 8010b46:	b11b      	cbz	r3, 8010b50 <__sinit+0x14>
 8010b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b4c:	f7ff bff0 	b.w	8010b30 <__sinit_lock_release>
 8010b50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010b54:	6523      	str	r3, [r4, #80]	; 0x50
 8010b56:	4b13      	ldr	r3, [pc, #76]	; (8010ba4 <__sinit+0x68>)
 8010b58:	4a13      	ldr	r2, [pc, #76]	; (8010ba8 <__sinit+0x6c>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b5e:	42a3      	cmp	r3, r4
 8010b60:	bf04      	itt	eq
 8010b62:	2301      	moveq	r3, #1
 8010b64:	61a3      	streq	r3, [r4, #24]
 8010b66:	4620      	mov	r0, r4
 8010b68:	f000 f820 	bl	8010bac <__sfp>
 8010b6c:	6060      	str	r0, [r4, #4]
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f000 f81c 	bl	8010bac <__sfp>
 8010b74:	60a0      	str	r0, [r4, #8]
 8010b76:	4620      	mov	r0, r4
 8010b78:	f000 f818 	bl	8010bac <__sfp>
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	60e0      	str	r0, [r4, #12]
 8010b80:	2104      	movs	r1, #4
 8010b82:	6860      	ldr	r0, [r4, #4]
 8010b84:	f7ff ff82 	bl	8010a8c <std>
 8010b88:	68a0      	ldr	r0, [r4, #8]
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	2109      	movs	r1, #9
 8010b8e:	f7ff ff7d 	bl	8010a8c <std>
 8010b92:	68e0      	ldr	r0, [r4, #12]
 8010b94:	2202      	movs	r2, #2
 8010b96:	2112      	movs	r1, #18
 8010b98:	f7ff ff78 	bl	8010a8c <std>
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	61a3      	str	r3, [r4, #24]
 8010ba0:	e7d2      	b.n	8010b48 <__sinit+0xc>
 8010ba2:	bf00      	nop
 8010ba4:	08012c90 	.word	0x08012c90
 8010ba8:	08010ad5 	.word	0x08010ad5

08010bac <__sfp>:
 8010bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bae:	4607      	mov	r7, r0
 8010bb0:	f7ff ffac 	bl	8010b0c <__sfp_lock_acquire>
 8010bb4:	4b1e      	ldr	r3, [pc, #120]	; (8010c30 <__sfp+0x84>)
 8010bb6:	681e      	ldr	r6, [r3, #0]
 8010bb8:	69b3      	ldr	r3, [r6, #24]
 8010bba:	b913      	cbnz	r3, 8010bc2 <__sfp+0x16>
 8010bbc:	4630      	mov	r0, r6
 8010bbe:	f7ff ffbd 	bl	8010b3c <__sinit>
 8010bc2:	3648      	adds	r6, #72	; 0x48
 8010bc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	d503      	bpl.n	8010bd4 <__sfp+0x28>
 8010bcc:	6833      	ldr	r3, [r6, #0]
 8010bce:	b30b      	cbz	r3, 8010c14 <__sfp+0x68>
 8010bd0:	6836      	ldr	r6, [r6, #0]
 8010bd2:	e7f7      	b.n	8010bc4 <__sfp+0x18>
 8010bd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010bd8:	b9d5      	cbnz	r5, 8010c10 <__sfp+0x64>
 8010bda:	4b16      	ldr	r3, [pc, #88]	; (8010c34 <__sfp+0x88>)
 8010bdc:	60e3      	str	r3, [r4, #12]
 8010bde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010be2:	6665      	str	r5, [r4, #100]	; 0x64
 8010be4:	f000 fbba 	bl	801135c <__retarget_lock_init_recursive>
 8010be8:	f7ff ff96 	bl	8010b18 <__sfp_lock_release>
 8010bec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010bf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010bf4:	6025      	str	r5, [r4, #0]
 8010bf6:	61a5      	str	r5, [r4, #24]
 8010bf8:	2208      	movs	r2, #8
 8010bfa:	4629      	mov	r1, r5
 8010bfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010c00:	f7fd f952 	bl	800dea8 <memset>
 8010c04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010c08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c10:	3468      	adds	r4, #104	; 0x68
 8010c12:	e7d9      	b.n	8010bc8 <__sfp+0x1c>
 8010c14:	2104      	movs	r1, #4
 8010c16:	4638      	mov	r0, r7
 8010c18:	f7ff ff62 	bl	8010ae0 <__sfmoreglue>
 8010c1c:	4604      	mov	r4, r0
 8010c1e:	6030      	str	r0, [r6, #0]
 8010c20:	2800      	cmp	r0, #0
 8010c22:	d1d5      	bne.n	8010bd0 <__sfp+0x24>
 8010c24:	f7ff ff78 	bl	8010b18 <__sfp_lock_release>
 8010c28:	230c      	movs	r3, #12
 8010c2a:	603b      	str	r3, [r7, #0]
 8010c2c:	e7ee      	b.n	8010c0c <__sfp+0x60>
 8010c2e:	bf00      	nop
 8010c30:	08012c90 	.word	0x08012c90
 8010c34:	ffff0001 	.word	0xffff0001

08010c38 <_fwalk_reent>:
 8010c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c3c:	4606      	mov	r6, r0
 8010c3e:	4688      	mov	r8, r1
 8010c40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c44:	2700      	movs	r7, #0
 8010c46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c4a:	f1b9 0901 	subs.w	r9, r9, #1
 8010c4e:	d505      	bpl.n	8010c5c <_fwalk_reent+0x24>
 8010c50:	6824      	ldr	r4, [r4, #0]
 8010c52:	2c00      	cmp	r4, #0
 8010c54:	d1f7      	bne.n	8010c46 <_fwalk_reent+0xe>
 8010c56:	4638      	mov	r0, r7
 8010c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c5c:	89ab      	ldrh	r3, [r5, #12]
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d907      	bls.n	8010c72 <_fwalk_reent+0x3a>
 8010c62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c66:	3301      	adds	r3, #1
 8010c68:	d003      	beq.n	8010c72 <_fwalk_reent+0x3a>
 8010c6a:	4629      	mov	r1, r5
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	47c0      	blx	r8
 8010c70:	4307      	orrs	r7, r0
 8010c72:	3568      	adds	r5, #104	; 0x68
 8010c74:	e7e9      	b.n	8010c4a <_fwalk_reent+0x12>

08010c76 <rshift>:
 8010c76:	6903      	ldr	r3, [r0, #16]
 8010c78:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c80:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010c84:	f100 0414 	add.w	r4, r0, #20
 8010c88:	dd45      	ble.n	8010d16 <rshift+0xa0>
 8010c8a:	f011 011f 	ands.w	r1, r1, #31
 8010c8e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010c92:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010c96:	d10c      	bne.n	8010cb2 <rshift+0x3c>
 8010c98:	f100 0710 	add.w	r7, r0, #16
 8010c9c:	4629      	mov	r1, r5
 8010c9e:	42b1      	cmp	r1, r6
 8010ca0:	d334      	bcc.n	8010d0c <rshift+0x96>
 8010ca2:	1a9b      	subs	r3, r3, r2
 8010ca4:	009b      	lsls	r3, r3, #2
 8010ca6:	1eea      	subs	r2, r5, #3
 8010ca8:	4296      	cmp	r6, r2
 8010caa:	bf38      	it	cc
 8010cac:	2300      	movcc	r3, #0
 8010cae:	4423      	add	r3, r4
 8010cb0:	e015      	b.n	8010cde <rshift+0x68>
 8010cb2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010cb6:	f1c1 0820 	rsb	r8, r1, #32
 8010cba:	40cf      	lsrs	r7, r1
 8010cbc:	f105 0e04 	add.w	lr, r5, #4
 8010cc0:	46a1      	mov	r9, r4
 8010cc2:	4576      	cmp	r6, lr
 8010cc4:	46f4      	mov	ip, lr
 8010cc6:	d815      	bhi.n	8010cf4 <rshift+0x7e>
 8010cc8:	1a9b      	subs	r3, r3, r2
 8010cca:	009a      	lsls	r2, r3, #2
 8010ccc:	3a04      	subs	r2, #4
 8010cce:	3501      	adds	r5, #1
 8010cd0:	42ae      	cmp	r6, r5
 8010cd2:	bf38      	it	cc
 8010cd4:	2200      	movcc	r2, #0
 8010cd6:	18a3      	adds	r3, r4, r2
 8010cd8:	50a7      	str	r7, [r4, r2]
 8010cda:	b107      	cbz	r7, 8010cde <rshift+0x68>
 8010cdc:	3304      	adds	r3, #4
 8010cde:	1b1a      	subs	r2, r3, r4
 8010ce0:	42a3      	cmp	r3, r4
 8010ce2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010ce6:	bf08      	it	eq
 8010ce8:	2300      	moveq	r3, #0
 8010cea:	6102      	str	r2, [r0, #16]
 8010cec:	bf08      	it	eq
 8010cee:	6143      	streq	r3, [r0, #20]
 8010cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cf4:	f8dc c000 	ldr.w	ip, [ip]
 8010cf8:	fa0c fc08 	lsl.w	ip, ip, r8
 8010cfc:	ea4c 0707 	orr.w	r7, ip, r7
 8010d00:	f849 7b04 	str.w	r7, [r9], #4
 8010d04:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010d08:	40cf      	lsrs	r7, r1
 8010d0a:	e7da      	b.n	8010cc2 <rshift+0x4c>
 8010d0c:	f851 cb04 	ldr.w	ip, [r1], #4
 8010d10:	f847 cf04 	str.w	ip, [r7, #4]!
 8010d14:	e7c3      	b.n	8010c9e <rshift+0x28>
 8010d16:	4623      	mov	r3, r4
 8010d18:	e7e1      	b.n	8010cde <rshift+0x68>

08010d1a <__hexdig_fun>:
 8010d1a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010d1e:	2b09      	cmp	r3, #9
 8010d20:	d802      	bhi.n	8010d28 <__hexdig_fun+0xe>
 8010d22:	3820      	subs	r0, #32
 8010d24:	b2c0      	uxtb	r0, r0
 8010d26:	4770      	bx	lr
 8010d28:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010d2c:	2b05      	cmp	r3, #5
 8010d2e:	d801      	bhi.n	8010d34 <__hexdig_fun+0x1a>
 8010d30:	3847      	subs	r0, #71	; 0x47
 8010d32:	e7f7      	b.n	8010d24 <__hexdig_fun+0xa>
 8010d34:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010d38:	2b05      	cmp	r3, #5
 8010d3a:	d801      	bhi.n	8010d40 <__hexdig_fun+0x26>
 8010d3c:	3827      	subs	r0, #39	; 0x27
 8010d3e:	e7f1      	b.n	8010d24 <__hexdig_fun+0xa>
 8010d40:	2000      	movs	r0, #0
 8010d42:	4770      	bx	lr

08010d44 <__gethex>:
 8010d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d48:	ed2d 8b02 	vpush	{d8}
 8010d4c:	b089      	sub	sp, #36	; 0x24
 8010d4e:	ee08 0a10 	vmov	s16, r0
 8010d52:	9304      	str	r3, [sp, #16]
 8010d54:	4bbc      	ldr	r3, [pc, #752]	; (8011048 <__gethex+0x304>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	9301      	str	r3, [sp, #4]
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	468b      	mov	fp, r1
 8010d5e:	4690      	mov	r8, r2
 8010d60:	f7ef fa40 	bl	80001e4 <strlen>
 8010d64:	9b01      	ldr	r3, [sp, #4]
 8010d66:	f8db 2000 	ldr.w	r2, [fp]
 8010d6a:	4403      	add	r3, r0
 8010d6c:	4682      	mov	sl, r0
 8010d6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010d72:	9305      	str	r3, [sp, #20]
 8010d74:	1c93      	adds	r3, r2, #2
 8010d76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010d7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010d7e:	32fe      	adds	r2, #254	; 0xfe
 8010d80:	18d1      	adds	r1, r2, r3
 8010d82:	461f      	mov	r7, r3
 8010d84:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010d88:	9100      	str	r1, [sp, #0]
 8010d8a:	2830      	cmp	r0, #48	; 0x30
 8010d8c:	d0f8      	beq.n	8010d80 <__gethex+0x3c>
 8010d8e:	f7ff ffc4 	bl	8010d1a <__hexdig_fun>
 8010d92:	4604      	mov	r4, r0
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d13a      	bne.n	8010e0e <__gethex+0xca>
 8010d98:	9901      	ldr	r1, [sp, #4]
 8010d9a:	4652      	mov	r2, sl
 8010d9c:	4638      	mov	r0, r7
 8010d9e:	f001 fa5a 	bl	8012256 <strncmp>
 8010da2:	4605      	mov	r5, r0
 8010da4:	2800      	cmp	r0, #0
 8010da6:	d168      	bne.n	8010e7a <__gethex+0x136>
 8010da8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010dac:	eb07 060a 	add.w	r6, r7, sl
 8010db0:	f7ff ffb3 	bl	8010d1a <__hexdig_fun>
 8010db4:	2800      	cmp	r0, #0
 8010db6:	d062      	beq.n	8010e7e <__gethex+0x13a>
 8010db8:	4633      	mov	r3, r6
 8010dba:	7818      	ldrb	r0, [r3, #0]
 8010dbc:	2830      	cmp	r0, #48	; 0x30
 8010dbe:	461f      	mov	r7, r3
 8010dc0:	f103 0301 	add.w	r3, r3, #1
 8010dc4:	d0f9      	beq.n	8010dba <__gethex+0x76>
 8010dc6:	f7ff ffa8 	bl	8010d1a <__hexdig_fun>
 8010dca:	2301      	movs	r3, #1
 8010dcc:	fab0 f480 	clz	r4, r0
 8010dd0:	0964      	lsrs	r4, r4, #5
 8010dd2:	4635      	mov	r5, r6
 8010dd4:	9300      	str	r3, [sp, #0]
 8010dd6:	463a      	mov	r2, r7
 8010dd8:	4616      	mov	r6, r2
 8010dda:	3201      	adds	r2, #1
 8010ddc:	7830      	ldrb	r0, [r6, #0]
 8010dde:	f7ff ff9c 	bl	8010d1a <__hexdig_fun>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	d1f8      	bne.n	8010dd8 <__gethex+0x94>
 8010de6:	9901      	ldr	r1, [sp, #4]
 8010de8:	4652      	mov	r2, sl
 8010dea:	4630      	mov	r0, r6
 8010dec:	f001 fa33 	bl	8012256 <strncmp>
 8010df0:	b980      	cbnz	r0, 8010e14 <__gethex+0xd0>
 8010df2:	b94d      	cbnz	r5, 8010e08 <__gethex+0xc4>
 8010df4:	eb06 050a 	add.w	r5, r6, sl
 8010df8:	462a      	mov	r2, r5
 8010dfa:	4616      	mov	r6, r2
 8010dfc:	3201      	adds	r2, #1
 8010dfe:	7830      	ldrb	r0, [r6, #0]
 8010e00:	f7ff ff8b 	bl	8010d1a <__hexdig_fun>
 8010e04:	2800      	cmp	r0, #0
 8010e06:	d1f8      	bne.n	8010dfa <__gethex+0xb6>
 8010e08:	1bad      	subs	r5, r5, r6
 8010e0a:	00ad      	lsls	r5, r5, #2
 8010e0c:	e004      	b.n	8010e18 <__gethex+0xd4>
 8010e0e:	2400      	movs	r4, #0
 8010e10:	4625      	mov	r5, r4
 8010e12:	e7e0      	b.n	8010dd6 <__gethex+0x92>
 8010e14:	2d00      	cmp	r5, #0
 8010e16:	d1f7      	bne.n	8010e08 <__gethex+0xc4>
 8010e18:	7833      	ldrb	r3, [r6, #0]
 8010e1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010e1e:	2b50      	cmp	r3, #80	; 0x50
 8010e20:	d13b      	bne.n	8010e9a <__gethex+0x156>
 8010e22:	7873      	ldrb	r3, [r6, #1]
 8010e24:	2b2b      	cmp	r3, #43	; 0x2b
 8010e26:	d02c      	beq.n	8010e82 <__gethex+0x13e>
 8010e28:	2b2d      	cmp	r3, #45	; 0x2d
 8010e2a:	d02e      	beq.n	8010e8a <__gethex+0x146>
 8010e2c:	1c71      	adds	r1, r6, #1
 8010e2e:	f04f 0900 	mov.w	r9, #0
 8010e32:	7808      	ldrb	r0, [r1, #0]
 8010e34:	f7ff ff71 	bl	8010d1a <__hexdig_fun>
 8010e38:	1e43      	subs	r3, r0, #1
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	2b18      	cmp	r3, #24
 8010e3e:	d82c      	bhi.n	8010e9a <__gethex+0x156>
 8010e40:	f1a0 0210 	sub.w	r2, r0, #16
 8010e44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010e48:	f7ff ff67 	bl	8010d1a <__hexdig_fun>
 8010e4c:	1e43      	subs	r3, r0, #1
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	2b18      	cmp	r3, #24
 8010e52:	d91d      	bls.n	8010e90 <__gethex+0x14c>
 8010e54:	f1b9 0f00 	cmp.w	r9, #0
 8010e58:	d000      	beq.n	8010e5c <__gethex+0x118>
 8010e5a:	4252      	negs	r2, r2
 8010e5c:	4415      	add	r5, r2
 8010e5e:	f8cb 1000 	str.w	r1, [fp]
 8010e62:	b1e4      	cbz	r4, 8010e9e <__gethex+0x15a>
 8010e64:	9b00      	ldr	r3, [sp, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	bf14      	ite	ne
 8010e6a:	2700      	movne	r7, #0
 8010e6c:	2706      	moveq	r7, #6
 8010e6e:	4638      	mov	r0, r7
 8010e70:	b009      	add	sp, #36	; 0x24
 8010e72:	ecbd 8b02 	vpop	{d8}
 8010e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e7a:	463e      	mov	r6, r7
 8010e7c:	4625      	mov	r5, r4
 8010e7e:	2401      	movs	r4, #1
 8010e80:	e7ca      	b.n	8010e18 <__gethex+0xd4>
 8010e82:	f04f 0900 	mov.w	r9, #0
 8010e86:	1cb1      	adds	r1, r6, #2
 8010e88:	e7d3      	b.n	8010e32 <__gethex+0xee>
 8010e8a:	f04f 0901 	mov.w	r9, #1
 8010e8e:	e7fa      	b.n	8010e86 <__gethex+0x142>
 8010e90:	230a      	movs	r3, #10
 8010e92:	fb03 0202 	mla	r2, r3, r2, r0
 8010e96:	3a10      	subs	r2, #16
 8010e98:	e7d4      	b.n	8010e44 <__gethex+0x100>
 8010e9a:	4631      	mov	r1, r6
 8010e9c:	e7df      	b.n	8010e5e <__gethex+0x11a>
 8010e9e:	1bf3      	subs	r3, r6, r7
 8010ea0:	3b01      	subs	r3, #1
 8010ea2:	4621      	mov	r1, r4
 8010ea4:	2b07      	cmp	r3, #7
 8010ea6:	dc0b      	bgt.n	8010ec0 <__gethex+0x17c>
 8010ea8:	ee18 0a10 	vmov	r0, s16
 8010eac:	f000 faf6 	bl	801149c <_Balloc>
 8010eb0:	4604      	mov	r4, r0
 8010eb2:	b940      	cbnz	r0, 8010ec6 <__gethex+0x182>
 8010eb4:	4b65      	ldr	r3, [pc, #404]	; (801104c <__gethex+0x308>)
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	21de      	movs	r1, #222	; 0xde
 8010eba:	4865      	ldr	r0, [pc, #404]	; (8011050 <__gethex+0x30c>)
 8010ebc:	f7fc ff7c 	bl	800ddb8 <__assert_func>
 8010ec0:	3101      	adds	r1, #1
 8010ec2:	105b      	asrs	r3, r3, #1
 8010ec4:	e7ee      	b.n	8010ea4 <__gethex+0x160>
 8010ec6:	f100 0914 	add.w	r9, r0, #20
 8010eca:	f04f 0b00 	mov.w	fp, #0
 8010ece:	f1ca 0301 	rsb	r3, sl, #1
 8010ed2:	f8cd 9008 	str.w	r9, [sp, #8]
 8010ed6:	f8cd b000 	str.w	fp, [sp]
 8010eda:	9306      	str	r3, [sp, #24]
 8010edc:	42b7      	cmp	r7, r6
 8010ede:	d340      	bcc.n	8010f62 <__gethex+0x21e>
 8010ee0:	9802      	ldr	r0, [sp, #8]
 8010ee2:	9b00      	ldr	r3, [sp, #0]
 8010ee4:	f840 3b04 	str.w	r3, [r0], #4
 8010ee8:	eba0 0009 	sub.w	r0, r0, r9
 8010eec:	1080      	asrs	r0, r0, #2
 8010eee:	0146      	lsls	r6, r0, #5
 8010ef0:	6120      	str	r0, [r4, #16]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f000 fbc8 	bl	8011688 <__hi0bits>
 8010ef8:	1a30      	subs	r0, r6, r0
 8010efa:	f8d8 6000 	ldr.w	r6, [r8]
 8010efe:	42b0      	cmp	r0, r6
 8010f00:	dd63      	ble.n	8010fca <__gethex+0x286>
 8010f02:	1b87      	subs	r7, r0, r6
 8010f04:	4639      	mov	r1, r7
 8010f06:	4620      	mov	r0, r4
 8010f08:	f000 ff62 	bl	8011dd0 <__any_on>
 8010f0c:	4682      	mov	sl, r0
 8010f0e:	b1a8      	cbz	r0, 8010f3c <__gethex+0x1f8>
 8010f10:	1e7b      	subs	r3, r7, #1
 8010f12:	1159      	asrs	r1, r3, #5
 8010f14:	f003 021f 	and.w	r2, r3, #31
 8010f18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010f1c:	f04f 0a01 	mov.w	sl, #1
 8010f20:	fa0a f202 	lsl.w	r2, sl, r2
 8010f24:	420a      	tst	r2, r1
 8010f26:	d009      	beq.n	8010f3c <__gethex+0x1f8>
 8010f28:	4553      	cmp	r3, sl
 8010f2a:	dd05      	ble.n	8010f38 <__gethex+0x1f4>
 8010f2c:	1eb9      	subs	r1, r7, #2
 8010f2e:	4620      	mov	r0, r4
 8010f30:	f000 ff4e 	bl	8011dd0 <__any_on>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	d145      	bne.n	8010fc4 <__gethex+0x280>
 8010f38:	f04f 0a02 	mov.w	sl, #2
 8010f3c:	4639      	mov	r1, r7
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f7ff fe99 	bl	8010c76 <rshift>
 8010f44:	443d      	add	r5, r7
 8010f46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f4a:	42ab      	cmp	r3, r5
 8010f4c:	da4c      	bge.n	8010fe8 <__gethex+0x2a4>
 8010f4e:	ee18 0a10 	vmov	r0, s16
 8010f52:	4621      	mov	r1, r4
 8010f54:	f000 fae2 	bl	801151c <_Bfree>
 8010f58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	6013      	str	r3, [r2, #0]
 8010f5e:	27a3      	movs	r7, #163	; 0xa3
 8010f60:	e785      	b.n	8010e6e <__gethex+0x12a>
 8010f62:	1e73      	subs	r3, r6, #1
 8010f64:	9a05      	ldr	r2, [sp, #20]
 8010f66:	9303      	str	r3, [sp, #12]
 8010f68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010f6c:	4293      	cmp	r3, r2
 8010f6e:	d019      	beq.n	8010fa4 <__gethex+0x260>
 8010f70:	f1bb 0f20 	cmp.w	fp, #32
 8010f74:	d107      	bne.n	8010f86 <__gethex+0x242>
 8010f76:	9b02      	ldr	r3, [sp, #8]
 8010f78:	9a00      	ldr	r2, [sp, #0]
 8010f7a:	f843 2b04 	str.w	r2, [r3], #4
 8010f7e:	9302      	str	r3, [sp, #8]
 8010f80:	2300      	movs	r3, #0
 8010f82:	9300      	str	r3, [sp, #0]
 8010f84:	469b      	mov	fp, r3
 8010f86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010f8a:	f7ff fec6 	bl	8010d1a <__hexdig_fun>
 8010f8e:	9b00      	ldr	r3, [sp, #0]
 8010f90:	f000 000f 	and.w	r0, r0, #15
 8010f94:	fa00 f00b 	lsl.w	r0, r0, fp
 8010f98:	4303      	orrs	r3, r0
 8010f9a:	9300      	str	r3, [sp, #0]
 8010f9c:	f10b 0b04 	add.w	fp, fp, #4
 8010fa0:	9b03      	ldr	r3, [sp, #12]
 8010fa2:	e00d      	b.n	8010fc0 <__gethex+0x27c>
 8010fa4:	9b03      	ldr	r3, [sp, #12]
 8010fa6:	9a06      	ldr	r2, [sp, #24]
 8010fa8:	4413      	add	r3, r2
 8010faa:	42bb      	cmp	r3, r7
 8010fac:	d3e0      	bcc.n	8010f70 <__gethex+0x22c>
 8010fae:	4618      	mov	r0, r3
 8010fb0:	9901      	ldr	r1, [sp, #4]
 8010fb2:	9307      	str	r3, [sp, #28]
 8010fb4:	4652      	mov	r2, sl
 8010fb6:	f001 f94e 	bl	8012256 <strncmp>
 8010fba:	9b07      	ldr	r3, [sp, #28]
 8010fbc:	2800      	cmp	r0, #0
 8010fbe:	d1d7      	bne.n	8010f70 <__gethex+0x22c>
 8010fc0:	461e      	mov	r6, r3
 8010fc2:	e78b      	b.n	8010edc <__gethex+0x198>
 8010fc4:	f04f 0a03 	mov.w	sl, #3
 8010fc8:	e7b8      	b.n	8010f3c <__gethex+0x1f8>
 8010fca:	da0a      	bge.n	8010fe2 <__gethex+0x29e>
 8010fcc:	1a37      	subs	r7, r6, r0
 8010fce:	4621      	mov	r1, r4
 8010fd0:	ee18 0a10 	vmov	r0, s16
 8010fd4:	463a      	mov	r2, r7
 8010fd6:	f000 fcbd 	bl	8011954 <__lshift>
 8010fda:	1bed      	subs	r5, r5, r7
 8010fdc:	4604      	mov	r4, r0
 8010fde:	f100 0914 	add.w	r9, r0, #20
 8010fe2:	f04f 0a00 	mov.w	sl, #0
 8010fe6:	e7ae      	b.n	8010f46 <__gethex+0x202>
 8010fe8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010fec:	42a8      	cmp	r0, r5
 8010fee:	dd72      	ble.n	80110d6 <__gethex+0x392>
 8010ff0:	1b45      	subs	r5, r0, r5
 8010ff2:	42ae      	cmp	r6, r5
 8010ff4:	dc36      	bgt.n	8011064 <__gethex+0x320>
 8010ff6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ffa:	2b02      	cmp	r3, #2
 8010ffc:	d02a      	beq.n	8011054 <__gethex+0x310>
 8010ffe:	2b03      	cmp	r3, #3
 8011000:	d02c      	beq.n	801105c <__gethex+0x318>
 8011002:	2b01      	cmp	r3, #1
 8011004:	d115      	bne.n	8011032 <__gethex+0x2ee>
 8011006:	42ae      	cmp	r6, r5
 8011008:	d113      	bne.n	8011032 <__gethex+0x2ee>
 801100a:	2e01      	cmp	r6, #1
 801100c:	d10b      	bne.n	8011026 <__gethex+0x2e2>
 801100e:	9a04      	ldr	r2, [sp, #16]
 8011010:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011014:	6013      	str	r3, [r2, #0]
 8011016:	2301      	movs	r3, #1
 8011018:	6123      	str	r3, [r4, #16]
 801101a:	f8c9 3000 	str.w	r3, [r9]
 801101e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011020:	2762      	movs	r7, #98	; 0x62
 8011022:	601c      	str	r4, [r3, #0]
 8011024:	e723      	b.n	8010e6e <__gethex+0x12a>
 8011026:	1e71      	subs	r1, r6, #1
 8011028:	4620      	mov	r0, r4
 801102a:	f000 fed1 	bl	8011dd0 <__any_on>
 801102e:	2800      	cmp	r0, #0
 8011030:	d1ed      	bne.n	801100e <__gethex+0x2ca>
 8011032:	ee18 0a10 	vmov	r0, s16
 8011036:	4621      	mov	r1, r4
 8011038:	f000 fa70 	bl	801151c <_Bfree>
 801103c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801103e:	2300      	movs	r3, #0
 8011040:	6013      	str	r3, [r2, #0]
 8011042:	2750      	movs	r7, #80	; 0x50
 8011044:	e713      	b.n	8010e6e <__gethex+0x12a>
 8011046:	bf00      	nop
 8011048:	08012f94 	.word	0x08012f94
 801104c:	08012eb4 	.word	0x08012eb4
 8011050:	08012f28 	.word	0x08012f28
 8011054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011056:	2b00      	cmp	r3, #0
 8011058:	d1eb      	bne.n	8011032 <__gethex+0x2ee>
 801105a:	e7d8      	b.n	801100e <__gethex+0x2ca>
 801105c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801105e:	2b00      	cmp	r3, #0
 8011060:	d1d5      	bne.n	801100e <__gethex+0x2ca>
 8011062:	e7e6      	b.n	8011032 <__gethex+0x2ee>
 8011064:	1e6f      	subs	r7, r5, #1
 8011066:	f1ba 0f00 	cmp.w	sl, #0
 801106a:	d131      	bne.n	80110d0 <__gethex+0x38c>
 801106c:	b127      	cbz	r7, 8011078 <__gethex+0x334>
 801106e:	4639      	mov	r1, r7
 8011070:	4620      	mov	r0, r4
 8011072:	f000 fead 	bl	8011dd0 <__any_on>
 8011076:	4682      	mov	sl, r0
 8011078:	117b      	asrs	r3, r7, #5
 801107a:	2101      	movs	r1, #1
 801107c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011080:	f007 071f 	and.w	r7, r7, #31
 8011084:	fa01 f707 	lsl.w	r7, r1, r7
 8011088:	421f      	tst	r7, r3
 801108a:	4629      	mov	r1, r5
 801108c:	4620      	mov	r0, r4
 801108e:	bf18      	it	ne
 8011090:	f04a 0a02 	orrne.w	sl, sl, #2
 8011094:	1b76      	subs	r6, r6, r5
 8011096:	f7ff fdee 	bl	8010c76 <rshift>
 801109a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801109e:	2702      	movs	r7, #2
 80110a0:	f1ba 0f00 	cmp.w	sl, #0
 80110a4:	d048      	beq.n	8011138 <__gethex+0x3f4>
 80110a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80110aa:	2b02      	cmp	r3, #2
 80110ac:	d015      	beq.n	80110da <__gethex+0x396>
 80110ae:	2b03      	cmp	r3, #3
 80110b0:	d017      	beq.n	80110e2 <__gethex+0x39e>
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d109      	bne.n	80110ca <__gethex+0x386>
 80110b6:	f01a 0f02 	tst.w	sl, #2
 80110ba:	d006      	beq.n	80110ca <__gethex+0x386>
 80110bc:	f8d9 0000 	ldr.w	r0, [r9]
 80110c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80110c4:	f01a 0f01 	tst.w	sl, #1
 80110c8:	d10e      	bne.n	80110e8 <__gethex+0x3a4>
 80110ca:	f047 0710 	orr.w	r7, r7, #16
 80110ce:	e033      	b.n	8011138 <__gethex+0x3f4>
 80110d0:	f04f 0a01 	mov.w	sl, #1
 80110d4:	e7d0      	b.n	8011078 <__gethex+0x334>
 80110d6:	2701      	movs	r7, #1
 80110d8:	e7e2      	b.n	80110a0 <__gethex+0x35c>
 80110da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110dc:	f1c3 0301 	rsb	r3, r3, #1
 80110e0:	9315      	str	r3, [sp, #84]	; 0x54
 80110e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d0f0      	beq.n	80110ca <__gethex+0x386>
 80110e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80110ec:	f104 0314 	add.w	r3, r4, #20
 80110f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80110f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80110f8:	f04f 0c00 	mov.w	ip, #0
 80110fc:	4618      	mov	r0, r3
 80110fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011102:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8011106:	d01c      	beq.n	8011142 <__gethex+0x3fe>
 8011108:	3201      	adds	r2, #1
 801110a:	6002      	str	r2, [r0, #0]
 801110c:	2f02      	cmp	r7, #2
 801110e:	f104 0314 	add.w	r3, r4, #20
 8011112:	d13f      	bne.n	8011194 <__gethex+0x450>
 8011114:	f8d8 2000 	ldr.w	r2, [r8]
 8011118:	3a01      	subs	r2, #1
 801111a:	42b2      	cmp	r2, r6
 801111c:	d10a      	bne.n	8011134 <__gethex+0x3f0>
 801111e:	1171      	asrs	r1, r6, #5
 8011120:	2201      	movs	r2, #1
 8011122:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011126:	f006 061f 	and.w	r6, r6, #31
 801112a:	fa02 f606 	lsl.w	r6, r2, r6
 801112e:	421e      	tst	r6, r3
 8011130:	bf18      	it	ne
 8011132:	4617      	movne	r7, r2
 8011134:	f047 0720 	orr.w	r7, r7, #32
 8011138:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801113a:	601c      	str	r4, [r3, #0]
 801113c:	9b04      	ldr	r3, [sp, #16]
 801113e:	601d      	str	r5, [r3, #0]
 8011140:	e695      	b.n	8010e6e <__gethex+0x12a>
 8011142:	4299      	cmp	r1, r3
 8011144:	f843 cc04 	str.w	ip, [r3, #-4]
 8011148:	d8d8      	bhi.n	80110fc <__gethex+0x3b8>
 801114a:	68a3      	ldr	r3, [r4, #8]
 801114c:	459b      	cmp	fp, r3
 801114e:	db19      	blt.n	8011184 <__gethex+0x440>
 8011150:	6861      	ldr	r1, [r4, #4]
 8011152:	ee18 0a10 	vmov	r0, s16
 8011156:	3101      	adds	r1, #1
 8011158:	f000 f9a0 	bl	801149c <_Balloc>
 801115c:	4681      	mov	r9, r0
 801115e:	b918      	cbnz	r0, 8011168 <__gethex+0x424>
 8011160:	4b1a      	ldr	r3, [pc, #104]	; (80111cc <__gethex+0x488>)
 8011162:	4602      	mov	r2, r0
 8011164:	2184      	movs	r1, #132	; 0x84
 8011166:	e6a8      	b.n	8010eba <__gethex+0x176>
 8011168:	6922      	ldr	r2, [r4, #16]
 801116a:	3202      	adds	r2, #2
 801116c:	f104 010c 	add.w	r1, r4, #12
 8011170:	0092      	lsls	r2, r2, #2
 8011172:	300c      	adds	r0, #12
 8011174:	f7fc fe8a 	bl	800de8c <memcpy>
 8011178:	4621      	mov	r1, r4
 801117a:	ee18 0a10 	vmov	r0, s16
 801117e:	f000 f9cd 	bl	801151c <_Bfree>
 8011182:	464c      	mov	r4, r9
 8011184:	6923      	ldr	r3, [r4, #16]
 8011186:	1c5a      	adds	r2, r3, #1
 8011188:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801118c:	6122      	str	r2, [r4, #16]
 801118e:	2201      	movs	r2, #1
 8011190:	615a      	str	r2, [r3, #20]
 8011192:	e7bb      	b.n	801110c <__gethex+0x3c8>
 8011194:	6922      	ldr	r2, [r4, #16]
 8011196:	455a      	cmp	r2, fp
 8011198:	dd0b      	ble.n	80111b2 <__gethex+0x46e>
 801119a:	2101      	movs	r1, #1
 801119c:	4620      	mov	r0, r4
 801119e:	f7ff fd6a 	bl	8010c76 <rshift>
 80111a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80111a6:	3501      	adds	r5, #1
 80111a8:	42ab      	cmp	r3, r5
 80111aa:	f6ff aed0 	blt.w	8010f4e <__gethex+0x20a>
 80111ae:	2701      	movs	r7, #1
 80111b0:	e7c0      	b.n	8011134 <__gethex+0x3f0>
 80111b2:	f016 061f 	ands.w	r6, r6, #31
 80111b6:	d0fa      	beq.n	80111ae <__gethex+0x46a>
 80111b8:	449a      	add	sl, r3
 80111ba:	f1c6 0620 	rsb	r6, r6, #32
 80111be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80111c2:	f000 fa61 	bl	8011688 <__hi0bits>
 80111c6:	42b0      	cmp	r0, r6
 80111c8:	dbe7      	blt.n	801119a <__gethex+0x456>
 80111ca:	e7f0      	b.n	80111ae <__gethex+0x46a>
 80111cc:	08012eb4 	.word	0x08012eb4

080111d0 <L_shift>:
 80111d0:	f1c2 0208 	rsb	r2, r2, #8
 80111d4:	0092      	lsls	r2, r2, #2
 80111d6:	b570      	push	{r4, r5, r6, lr}
 80111d8:	f1c2 0620 	rsb	r6, r2, #32
 80111dc:	6843      	ldr	r3, [r0, #4]
 80111de:	6804      	ldr	r4, [r0, #0]
 80111e0:	fa03 f506 	lsl.w	r5, r3, r6
 80111e4:	432c      	orrs	r4, r5
 80111e6:	40d3      	lsrs	r3, r2
 80111e8:	6004      	str	r4, [r0, #0]
 80111ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80111ee:	4288      	cmp	r0, r1
 80111f0:	d3f4      	bcc.n	80111dc <L_shift+0xc>
 80111f2:	bd70      	pop	{r4, r5, r6, pc}

080111f4 <__match>:
 80111f4:	b530      	push	{r4, r5, lr}
 80111f6:	6803      	ldr	r3, [r0, #0]
 80111f8:	3301      	adds	r3, #1
 80111fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111fe:	b914      	cbnz	r4, 8011206 <__match+0x12>
 8011200:	6003      	str	r3, [r0, #0]
 8011202:	2001      	movs	r0, #1
 8011204:	bd30      	pop	{r4, r5, pc}
 8011206:	f813 2b01 	ldrb.w	r2, [r3], #1
 801120a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801120e:	2d19      	cmp	r5, #25
 8011210:	bf98      	it	ls
 8011212:	3220      	addls	r2, #32
 8011214:	42a2      	cmp	r2, r4
 8011216:	d0f0      	beq.n	80111fa <__match+0x6>
 8011218:	2000      	movs	r0, #0
 801121a:	e7f3      	b.n	8011204 <__match+0x10>

0801121c <__hexnan>:
 801121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011220:	680b      	ldr	r3, [r1, #0]
 8011222:	6801      	ldr	r1, [r0, #0]
 8011224:	115e      	asrs	r6, r3, #5
 8011226:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801122a:	f013 031f 	ands.w	r3, r3, #31
 801122e:	b087      	sub	sp, #28
 8011230:	bf18      	it	ne
 8011232:	3604      	addne	r6, #4
 8011234:	2500      	movs	r5, #0
 8011236:	1f37      	subs	r7, r6, #4
 8011238:	4682      	mov	sl, r0
 801123a:	4690      	mov	r8, r2
 801123c:	9301      	str	r3, [sp, #4]
 801123e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011242:	46b9      	mov	r9, r7
 8011244:	463c      	mov	r4, r7
 8011246:	9502      	str	r5, [sp, #8]
 8011248:	46ab      	mov	fp, r5
 801124a:	784a      	ldrb	r2, [r1, #1]
 801124c:	1c4b      	adds	r3, r1, #1
 801124e:	9303      	str	r3, [sp, #12]
 8011250:	b342      	cbz	r2, 80112a4 <__hexnan+0x88>
 8011252:	4610      	mov	r0, r2
 8011254:	9105      	str	r1, [sp, #20]
 8011256:	9204      	str	r2, [sp, #16]
 8011258:	f7ff fd5f 	bl	8010d1a <__hexdig_fun>
 801125c:	2800      	cmp	r0, #0
 801125e:	d14f      	bne.n	8011300 <__hexnan+0xe4>
 8011260:	9a04      	ldr	r2, [sp, #16]
 8011262:	9905      	ldr	r1, [sp, #20]
 8011264:	2a20      	cmp	r2, #32
 8011266:	d818      	bhi.n	801129a <__hexnan+0x7e>
 8011268:	9b02      	ldr	r3, [sp, #8]
 801126a:	459b      	cmp	fp, r3
 801126c:	dd13      	ble.n	8011296 <__hexnan+0x7a>
 801126e:	454c      	cmp	r4, r9
 8011270:	d206      	bcs.n	8011280 <__hexnan+0x64>
 8011272:	2d07      	cmp	r5, #7
 8011274:	dc04      	bgt.n	8011280 <__hexnan+0x64>
 8011276:	462a      	mov	r2, r5
 8011278:	4649      	mov	r1, r9
 801127a:	4620      	mov	r0, r4
 801127c:	f7ff ffa8 	bl	80111d0 <L_shift>
 8011280:	4544      	cmp	r4, r8
 8011282:	d950      	bls.n	8011326 <__hexnan+0x10a>
 8011284:	2300      	movs	r3, #0
 8011286:	f1a4 0904 	sub.w	r9, r4, #4
 801128a:	f844 3c04 	str.w	r3, [r4, #-4]
 801128e:	f8cd b008 	str.w	fp, [sp, #8]
 8011292:	464c      	mov	r4, r9
 8011294:	461d      	mov	r5, r3
 8011296:	9903      	ldr	r1, [sp, #12]
 8011298:	e7d7      	b.n	801124a <__hexnan+0x2e>
 801129a:	2a29      	cmp	r2, #41	; 0x29
 801129c:	d156      	bne.n	801134c <__hexnan+0x130>
 801129e:	3102      	adds	r1, #2
 80112a0:	f8ca 1000 	str.w	r1, [sl]
 80112a4:	f1bb 0f00 	cmp.w	fp, #0
 80112a8:	d050      	beq.n	801134c <__hexnan+0x130>
 80112aa:	454c      	cmp	r4, r9
 80112ac:	d206      	bcs.n	80112bc <__hexnan+0xa0>
 80112ae:	2d07      	cmp	r5, #7
 80112b0:	dc04      	bgt.n	80112bc <__hexnan+0xa0>
 80112b2:	462a      	mov	r2, r5
 80112b4:	4649      	mov	r1, r9
 80112b6:	4620      	mov	r0, r4
 80112b8:	f7ff ff8a 	bl	80111d0 <L_shift>
 80112bc:	4544      	cmp	r4, r8
 80112be:	d934      	bls.n	801132a <__hexnan+0x10e>
 80112c0:	f1a8 0204 	sub.w	r2, r8, #4
 80112c4:	4623      	mov	r3, r4
 80112c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80112ca:	f842 1f04 	str.w	r1, [r2, #4]!
 80112ce:	429f      	cmp	r7, r3
 80112d0:	d2f9      	bcs.n	80112c6 <__hexnan+0xaa>
 80112d2:	1b3b      	subs	r3, r7, r4
 80112d4:	f023 0303 	bic.w	r3, r3, #3
 80112d8:	3304      	adds	r3, #4
 80112da:	3401      	adds	r4, #1
 80112dc:	3e03      	subs	r6, #3
 80112de:	42b4      	cmp	r4, r6
 80112e0:	bf88      	it	hi
 80112e2:	2304      	movhi	r3, #4
 80112e4:	4443      	add	r3, r8
 80112e6:	2200      	movs	r2, #0
 80112e8:	f843 2b04 	str.w	r2, [r3], #4
 80112ec:	429f      	cmp	r7, r3
 80112ee:	d2fb      	bcs.n	80112e8 <__hexnan+0xcc>
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	b91b      	cbnz	r3, 80112fc <__hexnan+0xe0>
 80112f4:	4547      	cmp	r7, r8
 80112f6:	d127      	bne.n	8011348 <__hexnan+0x12c>
 80112f8:	2301      	movs	r3, #1
 80112fa:	603b      	str	r3, [r7, #0]
 80112fc:	2005      	movs	r0, #5
 80112fe:	e026      	b.n	801134e <__hexnan+0x132>
 8011300:	3501      	adds	r5, #1
 8011302:	2d08      	cmp	r5, #8
 8011304:	f10b 0b01 	add.w	fp, fp, #1
 8011308:	dd06      	ble.n	8011318 <__hexnan+0xfc>
 801130a:	4544      	cmp	r4, r8
 801130c:	d9c3      	bls.n	8011296 <__hexnan+0x7a>
 801130e:	2300      	movs	r3, #0
 8011310:	f844 3c04 	str.w	r3, [r4, #-4]
 8011314:	2501      	movs	r5, #1
 8011316:	3c04      	subs	r4, #4
 8011318:	6822      	ldr	r2, [r4, #0]
 801131a:	f000 000f 	and.w	r0, r0, #15
 801131e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011322:	6022      	str	r2, [r4, #0]
 8011324:	e7b7      	b.n	8011296 <__hexnan+0x7a>
 8011326:	2508      	movs	r5, #8
 8011328:	e7b5      	b.n	8011296 <__hexnan+0x7a>
 801132a:	9b01      	ldr	r3, [sp, #4]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d0df      	beq.n	80112f0 <__hexnan+0xd4>
 8011330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011334:	f1c3 0320 	rsb	r3, r3, #32
 8011338:	fa22 f303 	lsr.w	r3, r2, r3
 801133c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011340:	401a      	ands	r2, r3
 8011342:	f846 2c04 	str.w	r2, [r6, #-4]
 8011346:	e7d3      	b.n	80112f0 <__hexnan+0xd4>
 8011348:	3f04      	subs	r7, #4
 801134a:	e7d1      	b.n	80112f0 <__hexnan+0xd4>
 801134c:	2004      	movs	r0, #4
 801134e:	b007      	add	sp, #28
 8011350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011354 <_localeconv_r>:
 8011354:	4800      	ldr	r0, [pc, #0]	; (8011358 <_localeconv_r+0x4>)
 8011356:	4770      	bx	lr
 8011358:	20000180 	.word	0x20000180

0801135c <__retarget_lock_init_recursive>:
 801135c:	4770      	bx	lr

0801135e <__retarget_lock_acquire_recursive>:
 801135e:	4770      	bx	lr

08011360 <__retarget_lock_release_recursive>:
 8011360:	4770      	bx	lr

08011362 <__swhatbuf_r>:
 8011362:	b570      	push	{r4, r5, r6, lr}
 8011364:	460e      	mov	r6, r1
 8011366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801136a:	2900      	cmp	r1, #0
 801136c:	b096      	sub	sp, #88	; 0x58
 801136e:	4614      	mov	r4, r2
 8011370:	461d      	mov	r5, r3
 8011372:	da07      	bge.n	8011384 <__swhatbuf_r+0x22>
 8011374:	2300      	movs	r3, #0
 8011376:	602b      	str	r3, [r5, #0]
 8011378:	89b3      	ldrh	r3, [r6, #12]
 801137a:	061a      	lsls	r2, r3, #24
 801137c:	d410      	bmi.n	80113a0 <__swhatbuf_r+0x3e>
 801137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011382:	e00e      	b.n	80113a2 <__swhatbuf_r+0x40>
 8011384:	466a      	mov	r2, sp
 8011386:	f000 ffa7 	bl	80122d8 <_fstat_r>
 801138a:	2800      	cmp	r0, #0
 801138c:	dbf2      	blt.n	8011374 <__swhatbuf_r+0x12>
 801138e:	9a01      	ldr	r2, [sp, #4]
 8011390:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011394:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011398:	425a      	negs	r2, r3
 801139a:	415a      	adcs	r2, r3
 801139c:	602a      	str	r2, [r5, #0]
 801139e:	e7ee      	b.n	801137e <__swhatbuf_r+0x1c>
 80113a0:	2340      	movs	r3, #64	; 0x40
 80113a2:	2000      	movs	r0, #0
 80113a4:	6023      	str	r3, [r4, #0]
 80113a6:	b016      	add	sp, #88	; 0x58
 80113a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080113ac <__smakebuf_r>:
 80113ac:	898b      	ldrh	r3, [r1, #12]
 80113ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113b0:	079d      	lsls	r5, r3, #30
 80113b2:	4606      	mov	r6, r0
 80113b4:	460c      	mov	r4, r1
 80113b6:	d507      	bpl.n	80113c8 <__smakebuf_r+0x1c>
 80113b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113bc:	6023      	str	r3, [r4, #0]
 80113be:	6123      	str	r3, [r4, #16]
 80113c0:	2301      	movs	r3, #1
 80113c2:	6163      	str	r3, [r4, #20]
 80113c4:	b002      	add	sp, #8
 80113c6:	bd70      	pop	{r4, r5, r6, pc}
 80113c8:	ab01      	add	r3, sp, #4
 80113ca:	466a      	mov	r2, sp
 80113cc:	f7ff ffc9 	bl	8011362 <__swhatbuf_r>
 80113d0:	9900      	ldr	r1, [sp, #0]
 80113d2:	4605      	mov	r5, r0
 80113d4:	4630      	mov	r0, r6
 80113d6:	f7fc fdbf 	bl	800df58 <_malloc_r>
 80113da:	b948      	cbnz	r0, 80113f0 <__smakebuf_r+0x44>
 80113dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113e0:	059a      	lsls	r2, r3, #22
 80113e2:	d4ef      	bmi.n	80113c4 <__smakebuf_r+0x18>
 80113e4:	f023 0303 	bic.w	r3, r3, #3
 80113e8:	f043 0302 	orr.w	r3, r3, #2
 80113ec:	81a3      	strh	r3, [r4, #12]
 80113ee:	e7e3      	b.n	80113b8 <__smakebuf_r+0xc>
 80113f0:	4b0d      	ldr	r3, [pc, #52]	; (8011428 <__smakebuf_r+0x7c>)
 80113f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80113f4:	89a3      	ldrh	r3, [r4, #12]
 80113f6:	6020      	str	r0, [r4, #0]
 80113f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113fc:	81a3      	strh	r3, [r4, #12]
 80113fe:	9b00      	ldr	r3, [sp, #0]
 8011400:	6163      	str	r3, [r4, #20]
 8011402:	9b01      	ldr	r3, [sp, #4]
 8011404:	6120      	str	r0, [r4, #16]
 8011406:	b15b      	cbz	r3, 8011420 <__smakebuf_r+0x74>
 8011408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801140c:	4630      	mov	r0, r6
 801140e:	f000 ff75 	bl	80122fc <_isatty_r>
 8011412:	b128      	cbz	r0, 8011420 <__smakebuf_r+0x74>
 8011414:	89a3      	ldrh	r3, [r4, #12]
 8011416:	f023 0303 	bic.w	r3, r3, #3
 801141a:	f043 0301 	orr.w	r3, r3, #1
 801141e:	81a3      	strh	r3, [r4, #12]
 8011420:	89a0      	ldrh	r0, [r4, #12]
 8011422:	4305      	orrs	r5, r0
 8011424:	81a5      	strh	r5, [r4, #12]
 8011426:	e7cd      	b.n	80113c4 <__smakebuf_r+0x18>
 8011428:	08010ad5 	.word	0x08010ad5

0801142c <__ascii_mbtowc>:
 801142c:	b082      	sub	sp, #8
 801142e:	b901      	cbnz	r1, 8011432 <__ascii_mbtowc+0x6>
 8011430:	a901      	add	r1, sp, #4
 8011432:	b142      	cbz	r2, 8011446 <__ascii_mbtowc+0x1a>
 8011434:	b14b      	cbz	r3, 801144a <__ascii_mbtowc+0x1e>
 8011436:	7813      	ldrb	r3, [r2, #0]
 8011438:	600b      	str	r3, [r1, #0]
 801143a:	7812      	ldrb	r2, [r2, #0]
 801143c:	1e10      	subs	r0, r2, #0
 801143e:	bf18      	it	ne
 8011440:	2001      	movne	r0, #1
 8011442:	b002      	add	sp, #8
 8011444:	4770      	bx	lr
 8011446:	4610      	mov	r0, r2
 8011448:	e7fb      	b.n	8011442 <__ascii_mbtowc+0x16>
 801144a:	f06f 0001 	mvn.w	r0, #1
 801144e:	e7f8      	b.n	8011442 <__ascii_mbtowc+0x16>

08011450 <memmove>:
 8011450:	4288      	cmp	r0, r1
 8011452:	b510      	push	{r4, lr}
 8011454:	eb01 0402 	add.w	r4, r1, r2
 8011458:	d902      	bls.n	8011460 <memmove+0x10>
 801145a:	4284      	cmp	r4, r0
 801145c:	4623      	mov	r3, r4
 801145e:	d807      	bhi.n	8011470 <memmove+0x20>
 8011460:	1e43      	subs	r3, r0, #1
 8011462:	42a1      	cmp	r1, r4
 8011464:	d008      	beq.n	8011478 <memmove+0x28>
 8011466:	f811 2b01 	ldrb.w	r2, [r1], #1
 801146a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801146e:	e7f8      	b.n	8011462 <memmove+0x12>
 8011470:	4402      	add	r2, r0
 8011472:	4601      	mov	r1, r0
 8011474:	428a      	cmp	r2, r1
 8011476:	d100      	bne.n	801147a <memmove+0x2a>
 8011478:	bd10      	pop	{r4, pc}
 801147a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801147e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011482:	e7f7      	b.n	8011474 <memmove+0x24>

08011484 <__malloc_lock>:
 8011484:	4801      	ldr	r0, [pc, #4]	; (801148c <__malloc_lock+0x8>)
 8011486:	f7ff bf6a 	b.w	801135e <__retarget_lock_acquire_recursive>
 801148a:	bf00      	nop
 801148c:	20000eb8 	.word	0x20000eb8

08011490 <__malloc_unlock>:
 8011490:	4801      	ldr	r0, [pc, #4]	; (8011498 <__malloc_unlock+0x8>)
 8011492:	f7ff bf65 	b.w	8011360 <__retarget_lock_release_recursive>
 8011496:	bf00      	nop
 8011498:	20000eb8 	.word	0x20000eb8

0801149c <_Balloc>:
 801149c:	b570      	push	{r4, r5, r6, lr}
 801149e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80114a0:	4604      	mov	r4, r0
 80114a2:	460d      	mov	r5, r1
 80114a4:	b976      	cbnz	r6, 80114c4 <_Balloc+0x28>
 80114a6:	2010      	movs	r0, #16
 80114a8:	f7fc fce8 	bl	800de7c <malloc>
 80114ac:	4602      	mov	r2, r0
 80114ae:	6260      	str	r0, [r4, #36]	; 0x24
 80114b0:	b920      	cbnz	r0, 80114bc <_Balloc+0x20>
 80114b2:	4b18      	ldr	r3, [pc, #96]	; (8011514 <_Balloc+0x78>)
 80114b4:	4818      	ldr	r0, [pc, #96]	; (8011518 <_Balloc+0x7c>)
 80114b6:	2166      	movs	r1, #102	; 0x66
 80114b8:	f7fc fc7e 	bl	800ddb8 <__assert_func>
 80114bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114c0:	6006      	str	r6, [r0, #0]
 80114c2:	60c6      	str	r6, [r0, #12]
 80114c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80114c6:	68f3      	ldr	r3, [r6, #12]
 80114c8:	b183      	cbz	r3, 80114ec <_Balloc+0x50>
 80114ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114d2:	b9b8      	cbnz	r0, 8011504 <_Balloc+0x68>
 80114d4:	2101      	movs	r1, #1
 80114d6:	fa01 f605 	lsl.w	r6, r1, r5
 80114da:	1d72      	adds	r2, r6, #5
 80114dc:	0092      	lsls	r2, r2, #2
 80114de:	4620      	mov	r0, r4
 80114e0:	f000 fc97 	bl	8011e12 <_calloc_r>
 80114e4:	b160      	cbz	r0, 8011500 <_Balloc+0x64>
 80114e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114ea:	e00e      	b.n	801150a <_Balloc+0x6e>
 80114ec:	2221      	movs	r2, #33	; 0x21
 80114ee:	2104      	movs	r1, #4
 80114f0:	4620      	mov	r0, r4
 80114f2:	f000 fc8e 	bl	8011e12 <_calloc_r>
 80114f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114f8:	60f0      	str	r0, [r6, #12]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d1e4      	bne.n	80114ca <_Balloc+0x2e>
 8011500:	2000      	movs	r0, #0
 8011502:	bd70      	pop	{r4, r5, r6, pc}
 8011504:	6802      	ldr	r2, [r0, #0]
 8011506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801150a:	2300      	movs	r3, #0
 801150c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011510:	e7f7      	b.n	8011502 <_Balloc+0x66>
 8011512:	bf00      	nop
 8011514:	08012e3e 	.word	0x08012e3e
 8011518:	08012fa8 	.word	0x08012fa8

0801151c <_Bfree>:
 801151c:	b570      	push	{r4, r5, r6, lr}
 801151e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011520:	4605      	mov	r5, r0
 8011522:	460c      	mov	r4, r1
 8011524:	b976      	cbnz	r6, 8011544 <_Bfree+0x28>
 8011526:	2010      	movs	r0, #16
 8011528:	f7fc fca8 	bl	800de7c <malloc>
 801152c:	4602      	mov	r2, r0
 801152e:	6268      	str	r0, [r5, #36]	; 0x24
 8011530:	b920      	cbnz	r0, 801153c <_Bfree+0x20>
 8011532:	4b09      	ldr	r3, [pc, #36]	; (8011558 <_Bfree+0x3c>)
 8011534:	4809      	ldr	r0, [pc, #36]	; (801155c <_Bfree+0x40>)
 8011536:	218a      	movs	r1, #138	; 0x8a
 8011538:	f7fc fc3e 	bl	800ddb8 <__assert_func>
 801153c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011540:	6006      	str	r6, [r0, #0]
 8011542:	60c6      	str	r6, [r0, #12]
 8011544:	b13c      	cbz	r4, 8011556 <_Bfree+0x3a>
 8011546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011548:	6862      	ldr	r2, [r4, #4]
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011550:	6021      	str	r1, [r4, #0]
 8011552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011556:	bd70      	pop	{r4, r5, r6, pc}
 8011558:	08012e3e 	.word	0x08012e3e
 801155c:	08012fa8 	.word	0x08012fa8

08011560 <__multadd>:
 8011560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011564:	690e      	ldr	r6, [r1, #16]
 8011566:	4607      	mov	r7, r0
 8011568:	4698      	mov	r8, r3
 801156a:	460c      	mov	r4, r1
 801156c:	f101 0014 	add.w	r0, r1, #20
 8011570:	2300      	movs	r3, #0
 8011572:	6805      	ldr	r5, [r0, #0]
 8011574:	b2a9      	uxth	r1, r5
 8011576:	fb02 8101 	mla	r1, r2, r1, r8
 801157a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801157e:	0c2d      	lsrs	r5, r5, #16
 8011580:	fb02 c505 	mla	r5, r2, r5, ip
 8011584:	b289      	uxth	r1, r1
 8011586:	3301      	adds	r3, #1
 8011588:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801158c:	429e      	cmp	r6, r3
 801158e:	f840 1b04 	str.w	r1, [r0], #4
 8011592:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011596:	dcec      	bgt.n	8011572 <__multadd+0x12>
 8011598:	f1b8 0f00 	cmp.w	r8, #0
 801159c:	d022      	beq.n	80115e4 <__multadd+0x84>
 801159e:	68a3      	ldr	r3, [r4, #8]
 80115a0:	42b3      	cmp	r3, r6
 80115a2:	dc19      	bgt.n	80115d8 <__multadd+0x78>
 80115a4:	6861      	ldr	r1, [r4, #4]
 80115a6:	4638      	mov	r0, r7
 80115a8:	3101      	adds	r1, #1
 80115aa:	f7ff ff77 	bl	801149c <_Balloc>
 80115ae:	4605      	mov	r5, r0
 80115b0:	b928      	cbnz	r0, 80115be <__multadd+0x5e>
 80115b2:	4602      	mov	r2, r0
 80115b4:	4b0d      	ldr	r3, [pc, #52]	; (80115ec <__multadd+0x8c>)
 80115b6:	480e      	ldr	r0, [pc, #56]	; (80115f0 <__multadd+0x90>)
 80115b8:	21b5      	movs	r1, #181	; 0xb5
 80115ba:	f7fc fbfd 	bl	800ddb8 <__assert_func>
 80115be:	6922      	ldr	r2, [r4, #16]
 80115c0:	3202      	adds	r2, #2
 80115c2:	f104 010c 	add.w	r1, r4, #12
 80115c6:	0092      	lsls	r2, r2, #2
 80115c8:	300c      	adds	r0, #12
 80115ca:	f7fc fc5f 	bl	800de8c <memcpy>
 80115ce:	4621      	mov	r1, r4
 80115d0:	4638      	mov	r0, r7
 80115d2:	f7ff ffa3 	bl	801151c <_Bfree>
 80115d6:	462c      	mov	r4, r5
 80115d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80115dc:	3601      	adds	r6, #1
 80115de:	f8c3 8014 	str.w	r8, [r3, #20]
 80115e2:	6126      	str	r6, [r4, #16]
 80115e4:	4620      	mov	r0, r4
 80115e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ea:	bf00      	nop
 80115ec:	08012eb4 	.word	0x08012eb4
 80115f0:	08012fa8 	.word	0x08012fa8

080115f4 <__s2b>:
 80115f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115f8:	460c      	mov	r4, r1
 80115fa:	4615      	mov	r5, r2
 80115fc:	461f      	mov	r7, r3
 80115fe:	2209      	movs	r2, #9
 8011600:	3308      	adds	r3, #8
 8011602:	4606      	mov	r6, r0
 8011604:	fb93 f3f2 	sdiv	r3, r3, r2
 8011608:	2100      	movs	r1, #0
 801160a:	2201      	movs	r2, #1
 801160c:	429a      	cmp	r2, r3
 801160e:	db09      	blt.n	8011624 <__s2b+0x30>
 8011610:	4630      	mov	r0, r6
 8011612:	f7ff ff43 	bl	801149c <_Balloc>
 8011616:	b940      	cbnz	r0, 801162a <__s2b+0x36>
 8011618:	4602      	mov	r2, r0
 801161a:	4b19      	ldr	r3, [pc, #100]	; (8011680 <__s2b+0x8c>)
 801161c:	4819      	ldr	r0, [pc, #100]	; (8011684 <__s2b+0x90>)
 801161e:	21ce      	movs	r1, #206	; 0xce
 8011620:	f7fc fbca 	bl	800ddb8 <__assert_func>
 8011624:	0052      	lsls	r2, r2, #1
 8011626:	3101      	adds	r1, #1
 8011628:	e7f0      	b.n	801160c <__s2b+0x18>
 801162a:	9b08      	ldr	r3, [sp, #32]
 801162c:	6143      	str	r3, [r0, #20]
 801162e:	2d09      	cmp	r5, #9
 8011630:	f04f 0301 	mov.w	r3, #1
 8011634:	6103      	str	r3, [r0, #16]
 8011636:	dd16      	ble.n	8011666 <__s2b+0x72>
 8011638:	f104 0909 	add.w	r9, r4, #9
 801163c:	46c8      	mov	r8, r9
 801163e:	442c      	add	r4, r5
 8011640:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011644:	4601      	mov	r1, r0
 8011646:	3b30      	subs	r3, #48	; 0x30
 8011648:	220a      	movs	r2, #10
 801164a:	4630      	mov	r0, r6
 801164c:	f7ff ff88 	bl	8011560 <__multadd>
 8011650:	45a0      	cmp	r8, r4
 8011652:	d1f5      	bne.n	8011640 <__s2b+0x4c>
 8011654:	f1a5 0408 	sub.w	r4, r5, #8
 8011658:	444c      	add	r4, r9
 801165a:	1b2d      	subs	r5, r5, r4
 801165c:	1963      	adds	r3, r4, r5
 801165e:	42bb      	cmp	r3, r7
 8011660:	db04      	blt.n	801166c <__s2b+0x78>
 8011662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011666:	340a      	adds	r4, #10
 8011668:	2509      	movs	r5, #9
 801166a:	e7f6      	b.n	801165a <__s2b+0x66>
 801166c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011670:	4601      	mov	r1, r0
 8011672:	3b30      	subs	r3, #48	; 0x30
 8011674:	220a      	movs	r2, #10
 8011676:	4630      	mov	r0, r6
 8011678:	f7ff ff72 	bl	8011560 <__multadd>
 801167c:	e7ee      	b.n	801165c <__s2b+0x68>
 801167e:	bf00      	nop
 8011680:	08012eb4 	.word	0x08012eb4
 8011684:	08012fa8 	.word	0x08012fa8

08011688 <__hi0bits>:
 8011688:	0c03      	lsrs	r3, r0, #16
 801168a:	041b      	lsls	r3, r3, #16
 801168c:	b9d3      	cbnz	r3, 80116c4 <__hi0bits+0x3c>
 801168e:	0400      	lsls	r0, r0, #16
 8011690:	2310      	movs	r3, #16
 8011692:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011696:	bf04      	itt	eq
 8011698:	0200      	lsleq	r0, r0, #8
 801169a:	3308      	addeq	r3, #8
 801169c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80116a0:	bf04      	itt	eq
 80116a2:	0100      	lsleq	r0, r0, #4
 80116a4:	3304      	addeq	r3, #4
 80116a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80116aa:	bf04      	itt	eq
 80116ac:	0080      	lsleq	r0, r0, #2
 80116ae:	3302      	addeq	r3, #2
 80116b0:	2800      	cmp	r0, #0
 80116b2:	db05      	blt.n	80116c0 <__hi0bits+0x38>
 80116b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80116b8:	f103 0301 	add.w	r3, r3, #1
 80116bc:	bf08      	it	eq
 80116be:	2320      	moveq	r3, #32
 80116c0:	4618      	mov	r0, r3
 80116c2:	4770      	bx	lr
 80116c4:	2300      	movs	r3, #0
 80116c6:	e7e4      	b.n	8011692 <__hi0bits+0xa>

080116c8 <__lo0bits>:
 80116c8:	6803      	ldr	r3, [r0, #0]
 80116ca:	f013 0207 	ands.w	r2, r3, #7
 80116ce:	4601      	mov	r1, r0
 80116d0:	d00b      	beq.n	80116ea <__lo0bits+0x22>
 80116d2:	07da      	lsls	r2, r3, #31
 80116d4:	d424      	bmi.n	8011720 <__lo0bits+0x58>
 80116d6:	0798      	lsls	r0, r3, #30
 80116d8:	bf49      	itett	mi
 80116da:	085b      	lsrmi	r3, r3, #1
 80116dc:	089b      	lsrpl	r3, r3, #2
 80116de:	2001      	movmi	r0, #1
 80116e0:	600b      	strmi	r3, [r1, #0]
 80116e2:	bf5c      	itt	pl
 80116e4:	600b      	strpl	r3, [r1, #0]
 80116e6:	2002      	movpl	r0, #2
 80116e8:	4770      	bx	lr
 80116ea:	b298      	uxth	r0, r3
 80116ec:	b9b0      	cbnz	r0, 801171c <__lo0bits+0x54>
 80116ee:	0c1b      	lsrs	r3, r3, #16
 80116f0:	2010      	movs	r0, #16
 80116f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80116f6:	bf04      	itt	eq
 80116f8:	0a1b      	lsreq	r3, r3, #8
 80116fa:	3008      	addeq	r0, #8
 80116fc:	071a      	lsls	r2, r3, #28
 80116fe:	bf04      	itt	eq
 8011700:	091b      	lsreq	r3, r3, #4
 8011702:	3004      	addeq	r0, #4
 8011704:	079a      	lsls	r2, r3, #30
 8011706:	bf04      	itt	eq
 8011708:	089b      	lsreq	r3, r3, #2
 801170a:	3002      	addeq	r0, #2
 801170c:	07da      	lsls	r2, r3, #31
 801170e:	d403      	bmi.n	8011718 <__lo0bits+0x50>
 8011710:	085b      	lsrs	r3, r3, #1
 8011712:	f100 0001 	add.w	r0, r0, #1
 8011716:	d005      	beq.n	8011724 <__lo0bits+0x5c>
 8011718:	600b      	str	r3, [r1, #0]
 801171a:	4770      	bx	lr
 801171c:	4610      	mov	r0, r2
 801171e:	e7e8      	b.n	80116f2 <__lo0bits+0x2a>
 8011720:	2000      	movs	r0, #0
 8011722:	4770      	bx	lr
 8011724:	2020      	movs	r0, #32
 8011726:	4770      	bx	lr

08011728 <__i2b>:
 8011728:	b510      	push	{r4, lr}
 801172a:	460c      	mov	r4, r1
 801172c:	2101      	movs	r1, #1
 801172e:	f7ff feb5 	bl	801149c <_Balloc>
 8011732:	4602      	mov	r2, r0
 8011734:	b928      	cbnz	r0, 8011742 <__i2b+0x1a>
 8011736:	4b05      	ldr	r3, [pc, #20]	; (801174c <__i2b+0x24>)
 8011738:	4805      	ldr	r0, [pc, #20]	; (8011750 <__i2b+0x28>)
 801173a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801173e:	f7fc fb3b 	bl	800ddb8 <__assert_func>
 8011742:	2301      	movs	r3, #1
 8011744:	6144      	str	r4, [r0, #20]
 8011746:	6103      	str	r3, [r0, #16]
 8011748:	bd10      	pop	{r4, pc}
 801174a:	bf00      	nop
 801174c:	08012eb4 	.word	0x08012eb4
 8011750:	08012fa8 	.word	0x08012fa8

08011754 <__multiply>:
 8011754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011758:	4614      	mov	r4, r2
 801175a:	690a      	ldr	r2, [r1, #16]
 801175c:	6923      	ldr	r3, [r4, #16]
 801175e:	429a      	cmp	r2, r3
 8011760:	bfb8      	it	lt
 8011762:	460b      	movlt	r3, r1
 8011764:	460d      	mov	r5, r1
 8011766:	bfbc      	itt	lt
 8011768:	4625      	movlt	r5, r4
 801176a:	461c      	movlt	r4, r3
 801176c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011770:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011774:	68ab      	ldr	r3, [r5, #8]
 8011776:	6869      	ldr	r1, [r5, #4]
 8011778:	eb0a 0709 	add.w	r7, sl, r9
 801177c:	42bb      	cmp	r3, r7
 801177e:	b085      	sub	sp, #20
 8011780:	bfb8      	it	lt
 8011782:	3101      	addlt	r1, #1
 8011784:	f7ff fe8a 	bl	801149c <_Balloc>
 8011788:	b930      	cbnz	r0, 8011798 <__multiply+0x44>
 801178a:	4602      	mov	r2, r0
 801178c:	4b42      	ldr	r3, [pc, #264]	; (8011898 <__multiply+0x144>)
 801178e:	4843      	ldr	r0, [pc, #268]	; (801189c <__multiply+0x148>)
 8011790:	f240 115d 	movw	r1, #349	; 0x15d
 8011794:	f7fc fb10 	bl	800ddb8 <__assert_func>
 8011798:	f100 0614 	add.w	r6, r0, #20
 801179c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80117a0:	4633      	mov	r3, r6
 80117a2:	2200      	movs	r2, #0
 80117a4:	4543      	cmp	r3, r8
 80117a6:	d31e      	bcc.n	80117e6 <__multiply+0x92>
 80117a8:	f105 0c14 	add.w	ip, r5, #20
 80117ac:	f104 0314 	add.w	r3, r4, #20
 80117b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80117b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80117b8:	9202      	str	r2, [sp, #8]
 80117ba:	ebac 0205 	sub.w	r2, ip, r5
 80117be:	3a15      	subs	r2, #21
 80117c0:	f022 0203 	bic.w	r2, r2, #3
 80117c4:	3204      	adds	r2, #4
 80117c6:	f105 0115 	add.w	r1, r5, #21
 80117ca:	458c      	cmp	ip, r1
 80117cc:	bf38      	it	cc
 80117ce:	2204      	movcc	r2, #4
 80117d0:	9201      	str	r2, [sp, #4]
 80117d2:	9a02      	ldr	r2, [sp, #8]
 80117d4:	9303      	str	r3, [sp, #12]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d808      	bhi.n	80117ec <__multiply+0x98>
 80117da:	2f00      	cmp	r7, #0
 80117dc:	dc55      	bgt.n	801188a <__multiply+0x136>
 80117de:	6107      	str	r7, [r0, #16]
 80117e0:	b005      	add	sp, #20
 80117e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117e6:	f843 2b04 	str.w	r2, [r3], #4
 80117ea:	e7db      	b.n	80117a4 <__multiply+0x50>
 80117ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80117f0:	f1ba 0f00 	cmp.w	sl, #0
 80117f4:	d020      	beq.n	8011838 <__multiply+0xe4>
 80117f6:	f105 0e14 	add.w	lr, r5, #20
 80117fa:	46b1      	mov	r9, r6
 80117fc:	2200      	movs	r2, #0
 80117fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011802:	f8d9 b000 	ldr.w	fp, [r9]
 8011806:	b2a1      	uxth	r1, r4
 8011808:	fa1f fb8b 	uxth.w	fp, fp
 801180c:	fb0a b101 	mla	r1, sl, r1, fp
 8011810:	4411      	add	r1, r2
 8011812:	f8d9 2000 	ldr.w	r2, [r9]
 8011816:	0c24      	lsrs	r4, r4, #16
 8011818:	0c12      	lsrs	r2, r2, #16
 801181a:	fb0a 2404 	mla	r4, sl, r4, r2
 801181e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011822:	b289      	uxth	r1, r1
 8011824:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011828:	45f4      	cmp	ip, lr
 801182a:	f849 1b04 	str.w	r1, [r9], #4
 801182e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011832:	d8e4      	bhi.n	80117fe <__multiply+0xaa>
 8011834:	9901      	ldr	r1, [sp, #4]
 8011836:	5072      	str	r2, [r6, r1]
 8011838:	9a03      	ldr	r2, [sp, #12]
 801183a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801183e:	3304      	adds	r3, #4
 8011840:	f1b9 0f00 	cmp.w	r9, #0
 8011844:	d01f      	beq.n	8011886 <__multiply+0x132>
 8011846:	6834      	ldr	r4, [r6, #0]
 8011848:	f105 0114 	add.w	r1, r5, #20
 801184c:	46b6      	mov	lr, r6
 801184e:	f04f 0a00 	mov.w	sl, #0
 8011852:	880a      	ldrh	r2, [r1, #0]
 8011854:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011858:	fb09 b202 	mla	r2, r9, r2, fp
 801185c:	4492      	add	sl, r2
 801185e:	b2a4      	uxth	r4, r4
 8011860:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011864:	f84e 4b04 	str.w	r4, [lr], #4
 8011868:	f851 4b04 	ldr.w	r4, [r1], #4
 801186c:	f8be 2000 	ldrh.w	r2, [lr]
 8011870:	0c24      	lsrs	r4, r4, #16
 8011872:	fb09 2404 	mla	r4, r9, r4, r2
 8011876:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801187a:	458c      	cmp	ip, r1
 801187c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011880:	d8e7      	bhi.n	8011852 <__multiply+0xfe>
 8011882:	9a01      	ldr	r2, [sp, #4]
 8011884:	50b4      	str	r4, [r6, r2]
 8011886:	3604      	adds	r6, #4
 8011888:	e7a3      	b.n	80117d2 <__multiply+0x7e>
 801188a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801188e:	2b00      	cmp	r3, #0
 8011890:	d1a5      	bne.n	80117de <__multiply+0x8a>
 8011892:	3f01      	subs	r7, #1
 8011894:	e7a1      	b.n	80117da <__multiply+0x86>
 8011896:	bf00      	nop
 8011898:	08012eb4 	.word	0x08012eb4
 801189c:	08012fa8 	.word	0x08012fa8

080118a0 <__pow5mult>:
 80118a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118a4:	4615      	mov	r5, r2
 80118a6:	f012 0203 	ands.w	r2, r2, #3
 80118aa:	4606      	mov	r6, r0
 80118ac:	460f      	mov	r7, r1
 80118ae:	d007      	beq.n	80118c0 <__pow5mult+0x20>
 80118b0:	4c25      	ldr	r4, [pc, #148]	; (8011948 <__pow5mult+0xa8>)
 80118b2:	3a01      	subs	r2, #1
 80118b4:	2300      	movs	r3, #0
 80118b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118ba:	f7ff fe51 	bl	8011560 <__multadd>
 80118be:	4607      	mov	r7, r0
 80118c0:	10ad      	asrs	r5, r5, #2
 80118c2:	d03d      	beq.n	8011940 <__pow5mult+0xa0>
 80118c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80118c6:	b97c      	cbnz	r4, 80118e8 <__pow5mult+0x48>
 80118c8:	2010      	movs	r0, #16
 80118ca:	f7fc fad7 	bl	800de7c <malloc>
 80118ce:	4602      	mov	r2, r0
 80118d0:	6270      	str	r0, [r6, #36]	; 0x24
 80118d2:	b928      	cbnz	r0, 80118e0 <__pow5mult+0x40>
 80118d4:	4b1d      	ldr	r3, [pc, #116]	; (801194c <__pow5mult+0xac>)
 80118d6:	481e      	ldr	r0, [pc, #120]	; (8011950 <__pow5mult+0xb0>)
 80118d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80118dc:	f7fc fa6c 	bl	800ddb8 <__assert_func>
 80118e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118e4:	6004      	str	r4, [r0, #0]
 80118e6:	60c4      	str	r4, [r0, #12]
 80118e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80118ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118f0:	b94c      	cbnz	r4, 8011906 <__pow5mult+0x66>
 80118f2:	f240 2171 	movw	r1, #625	; 0x271
 80118f6:	4630      	mov	r0, r6
 80118f8:	f7ff ff16 	bl	8011728 <__i2b>
 80118fc:	2300      	movs	r3, #0
 80118fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8011902:	4604      	mov	r4, r0
 8011904:	6003      	str	r3, [r0, #0]
 8011906:	f04f 0900 	mov.w	r9, #0
 801190a:	07eb      	lsls	r3, r5, #31
 801190c:	d50a      	bpl.n	8011924 <__pow5mult+0x84>
 801190e:	4639      	mov	r1, r7
 8011910:	4622      	mov	r2, r4
 8011912:	4630      	mov	r0, r6
 8011914:	f7ff ff1e 	bl	8011754 <__multiply>
 8011918:	4639      	mov	r1, r7
 801191a:	4680      	mov	r8, r0
 801191c:	4630      	mov	r0, r6
 801191e:	f7ff fdfd 	bl	801151c <_Bfree>
 8011922:	4647      	mov	r7, r8
 8011924:	106d      	asrs	r5, r5, #1
 8011926:	d00b      	beq.n	8011940 <__pow5mult+0xa0>
 8011928:	6820      	ldr	r0, [r4, #0]
 801192a:	b938      	cbnz	r0, 801193c <__pow5mult+0x9c>
 801192c:	4622      	mov	r2, r4
 801192e:	4621      	mov	r1, r4
 8011930:	4630      	mov	r0, r6
 8011932:	f7ff ff0f 	bl	8011754 <__multiply>
 8011936:	6020      	str	r0, [r4, #0]
 8011938:	f8c0 9000 	str.w	r9, [r0]
 801193c:	4604      	mov	r4, r0
 801193e:	e7e4      	b.n	801190a <__pow5mult+0x6a>
 8011940:	4638      	mov	r0, r7
 8011942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011946:	bf00      	nop
 8011948:	080130f8 	.word	0x080130f8
 801194c:	08012e3e 	.word	0x08012e3e
 8011950:	08012fa8 	.word	0x08012fa8

08011954 <__lshift>:
 8011954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011958:	460c      	mov	r4, r1
 801195a:	6849      	ldr	r1, [r1, #4]
 801195c:	6923      	ldr	r3, [r4, #16]
 801195e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011962:	68a3      	ldr	r3, [r4, #8]
 8011964:	4607      	mov	r7, r0
 8011966:	4691      	mov	r9, r2
 8011968:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801196c:	f108 0601 	add.w	r6, r8, #1
 8011970:	42b3      	cmp	r3, r6
 8011972:	db0b      	blt.n	801198c <__lshift+0x38>
 8011974:	4638      	mov	r0, r7
 8011976:	f7ff fd91 	bl	801149c <_Balloc>
 801197a:	4605      	mov	r5, r0
 801197c:	b948      	cbnz	r0, 8011992 <__lshift+0x3e>
 801197e:	4602      	mov	r2, r0
 8011980:	4b28      	ldr	r3, [pc, #160]	; (8011a24 <__lshift+0xd0>)
 8011982:	4829      	ldr	r0, [pc, #164]	; (8011a28 <__lshift+0xd4>)
 8011984:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011988:	f7fc fa16 	bl	800ddb8 <__assert_func>
 801198c:	3101      	adds	r1, #1
 801198e:	005b      	lsls	r3, r3, #1
 8011990:	e7ee      	b.n	8011970 <__lshift+0x1c>
 8011992:	2300      	movs	r3, #0
 8011994:	f100 0114 	add.w	r1, r0, #20
 8011998:	f100 0210 	add.w	r2, r0, #16
 801199c:	4618      	mov	r0, r3
 801199e:	4553      	cmp	r3, sl
 80119a0:	db33      	blt.n	8011a0a <__lshift+0xb6>
 80119a2:	6920      	ldr	r0, [r4, #16]
 80119a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119a8:	f104 0314 	add.w	r3, r4, #20
 80119ac:	f019 091f 	ands.w	r9, r9, #31
 80119b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80119b8:	d02b      	beq.n	8011a12 <__lshift+0xbe>
 80119ba:	f1c9 0e20 	rsb	lr, r9, #32
 80119be:	468a      	mov	sl, r1
 80119c0:	2200      	movs	r2, #0
 80119c2:	6818      	ldr	r0, [r3, #0]
 80119c4:	fa00 f009 	lsl.w	r0, r0, r9
 80119c8:	4302      	orrs	r2, r0
 80119ca:	f84a 2b04 	str.w	r2, [sl], #4
 80119ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80119d2:	459c      	cmp	ip, r3
 80119d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80119d8:	d8f3      	bhi.n	80119c2 <__lshift+0x6e>
 80119da:	ebac 0304 	sub.w	r3, ip, r4
 80119de:	3b15      	subs	r3, #21
 80119e0:	f023 0303 	bic.w	r3, r3, #3
 80119e4:	3304      	adds	r3, #4
 80119e6:	f104 0015 	add.w	r0, r4, #21
 80119ea:	4584      	cmp	ip, r0
 80119ec:	bf38      	it	cc
 80119ee:	2304      	movcc	r3, #4
 80119f0:	50ca      	str	r2, [r1, r3]
 80119f2:	b10a      	cbz	r2, 80119f8 <__lshift+0xa4>
 80119f4:	f108 0602 	add.w	r6, r8, #2
 80119f8:	3e01      	subs	r6, #1
 80119fa:	4638      	mov	r0, r7
 80119fc:	612e      	str	r6, [r5, #16]
 80119fe:	4621      	mov	r1, r4
 8011a00:	f7ff fd8c 	bl	801151c <_Bfree>
 8011a04:	4628      	mov	r0, r5
 8011a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a0e:	3301      	adds	r3, #1
 8011a10:	e7c5      	b.n	801199e <__lshift+0x4a>
 8011a12:	3904      	subs	r1, #4
 8011a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a18:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a1c:	459c      	cmp	ip, r3
 8011a1e:	d8f9      	bhi.n	8011a14 <__lshift+0xc0>
 8011a20:	e7ea      	b.n	80119f8 <__lshift+0xa4>
 8011a22:	bf00      	nop
 8011a24:	08012eb4 	.word	0x08012eb4
 8011a28:	08012fa8 	.word	0x08012fa8

08011a2c <__mcmp>:
 8011a2c:	b530      	push	{r4, r5, lr}
 8011a2e:	6902      	ldr	r2, [r0, #16]
 8011a30:	690c      	ldr	r4, [r1, #16]
 8011a32:	1b12      	subs	r2, r2, r4
 8011a34:	d10e      	bne.n	8011a54 <__mcmp+0x28>
 8011a36:	f100 0314 	add.w	r3, r0, #20
 8011a3a:	3114      	adds	r1, #20
 8011a3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a4c:	42a5      	cmp	r5, r4
 8011a4e:	d003      	beq.n	8011a58 <__mcmp+0x2c>
 8011a50:	d305      	bcc.n	8011a5e <__mcmp+0x32>
 8011a52:	2201      	movs	r2, #1
 8011a54:	4610      	mov	r0, r2
 8011a56:	bd30      	pop	{r4, r5, pc}
 8011a58:	4283      	cmp	r3, r0
 8011a5a:	d3f3      	bcc.n	8011a44 <__mcmp+0x18>
 8011a5c:	e7fa      	b.n	8011a54 <__mcmp+0x28>
 8011a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a62:	e7f7      	b.n	8011a54 <__mcmp+0x28>

08011a64 <__mdiff>:
 8011a64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a68:	460c      	mov	r4, r1
 8011a6a:	4606      	mov	r6, r0
 8011a6c:	4611      	mov	r1, r2
 8011a6e:	4620      	mov	r0, r4
 8011a70:	4617      	mov	r7, r2
 8011a72:	f7ff ffdb 	bl	8011a2c <__mcmp>
 8011a76:	1e05      	subs	r5, r0, #0
 8011a78:	d110      	bne.n	8011a9c <__mdiff+0x38>
 8011a7a:	4629      	mov	r1, r5
 8011a7c:	4630      	mov	r0, r6
 8011a7e:	f7ff fd0d 	bl	801149c <_Balloc>
 8011a82:	b930      	cbnz	r0, 8011a92 <__mdiff+0x2e>
 8011a84:	4b39      	ldr	r3, [pc, #228]	; (8011b6c <__mdiff+0x108>)
 8011a86:	4602      	mov	r2, r0
 8011a88:	f240 2132 	movw	r1, #562	; 0x232
 8011a8c:	4838      	ldr	r0, [pc, #224]	; (8011b70 <__mdiff+0x10c>)
 8011a8e:	f7fc f993 	bl	800ddb8 <__assert_func>
 8011a92:	2301      	movs	r3, #1
 8011a94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a9c:	bfa4      	itt	ge
 8011a9e:	463b      	movge	r3, r7
 8011aa0:	4627      	movge	r7, r4
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	6879      	ldr	r1, [r7, #4]
 8011aa6:	bfa6      	itte	ge
 8011aa8:	461c      	movge	r4, r3
 8011aaa:	2500      	movge	r5, #0
 8011aac:	2501      	movlt	r5, #1
 8011aae:	f7ff fcf5 	bl	801149c <_Balloc>
 8011ab2:	b920      	cbnz	r0, 8011abe <__mdiff+0x5a>
 8011ab4:	4b2d      	ldr	r3, [pc, #180]	; (8011b6c <__mdiff+0x108>)
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011abc:	e7e6      	b.n	8011a8c <__mdiff+0x28>
 8011abe:	693e      	ldr	r6, [r7, #16]
 8011ac0:	60c5      	str	r5, [r0, #12]
 8011ac2:	6925      	ldr	r5, [r4, #16]
 8011ac4:	f107 0114 	add.w	r1, r7, #20
 8011ac8:	f104 0914 	add.w	r9, r4, #20
 8011acc:	f100 0e14 	add.w	lr, r0, #20
 8011ad0:	f107 0210 	add.w	r2, r7, #16
 8011ad4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011ad8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011adc:	46f2      	mov	sl, lr
 8011ade:	2700      	movs	r7, #0
 8011ae0:	f859 3b04 	ldr.w	r3, [r9], #4
 8011ae4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011ae8:	fa1f f883 	uxth.w	r8, r3
 8011aec:	fa17 f78b 	uxtah	r7, r7, fp
 8011af0:	0c1b      	lsrs	r3, r3, #16
 8011af2:	eba7 0808 	sub.w	r8, r7, r8
 8011af6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011afa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011afe:	fa1f f888 	uxth.w	r8, r8
 8011b02:	141f      	asrs	r7, r3, #16
 8011b04:	454d      	cmp	r5, r9
 8011b06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b0a:	f84a 3b04 	str.w	r3, [sl], #4
 8011b0e:	d8e7      	bhi.n	8011ae0 <__mdiff+0x7c>
 8011b10:	1b2b      	subs	r3, r5, r4
 8011b12:	3b15      	subs	r3, #21
 8011b14:	f023 0303 	bic.w	r3, r3, #3
 8011b18:	3304      	adds	r3, #4
 8011b1a:	3415      	adds	r4, #21
 8011b1c:	42a5      	cmp	r5, r4
 8011b1e:	bf38      	it	cc
 8011b20:	2304      	movcc	r3, #4
 8011b22:	4419      	add	r1, r3
 8011b24:	4473      	add	r3, lr
 8011b26:	469e      	mov	lr, r3
 8011b28:	460d      	mov	r5, r1
 8011b2a:	4565      	cmp	r5, ip
 8011b2c:	d30e      	bcc.n	8011b4c <__mdiff+0xe8>
 8011b2e:	f10c 0203 	add.w	r2, ip, #3
 8011b32:	1a52      	subs	r2, r2, r1
 8011b34:	f022 0203 	bic.w	r2, r2, #3
 8011b38:	3903      	subs	r1, #3
 8011b3a:	458c      	cmp	ip, r1
 8011b3c:	bf38      	it	cc
 8011b3e:	2200      	movcc	r2, #0
 8011b40:	441a      	add	r2, r3
 8011b42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011b46:	b17b      	cbz	r3, 8011b68 <__mdiff+0x104>
 8011b48:	6106      	str	r6, [r0, #16]
 8011b4a:	e7a5      	b.n	8011a98 <__mdiff+0x34>
 8011b4c:	f855 8b04 	ldr.w	r8, [r5], #4
 8011b50:	fa17 f488 	uxtah	r4, r7, r8
 8011b54:	1422      	asrs	r2, r4, #16
 8011b56:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011b5a:	b2a4      	uxth	r4, r4
 8011b5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011b60:	f84e 4b04 	str.w	r4, [lr], #4
 8011b64:	1417      	asrs	r7, r2, #16
 8011b66:	e7e0      	b.n	8011b2a <__mdiff+0xc6>
 8011b68:	3e01      	subs	r6, #1
 8011b6a:	e7ea      	b.n	8011b42 <__mdiff+0xde>
 8011b6c:	08012eb4 	.word	0x08012eb4
 8011b70:	08012fa8 	.word	0x08012fa8

08011b74 <__ulp>:
 8011b74:	b082      	sub	sp, #8
 8011b76:	ed8d 0b00 	vstr	d0, [sp]
 8011b7a:	9b01      	ldr	r3, [sp, #4]
 8011b7c:	4912      	ldr	r1, [pc, #72]	; (8011bc8 <__ulp+0x54>)
 8011b7e:	4019      	ands	r1, r3
 8011b80:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011b84:	2900      	cmp	r1, #0
 8011b86:	dd05      	ble.n	8011b94 <__ulp+0x20>
 8011b88:	2200      	movs	r2, #0
 8011b8a:	460b      	mov	r3, r1
 8011b8c:	ec43 2b10 	vmov	d0, r2, r3
 8011b90:	b002      	add	sp, #8
 8011b92:	4770      	bx	lr
 8011b94:	4249      	negs	r1, r1
 8011b96:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011b9a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011b9e:	f04f 0200 	mov.w	r2, #0
 8011ba2:	f04f 0300 	mov.w	r3, #0
 8011ba6:	da04      	bge.n	8011bb2 <__ulp+0x3e>
 8011ba8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011bac:	fa41 f300 	asr.w	r3, r1, r0
 8011bb0:	e7ec      	b.n	8011b8c <__ulp+0x18>
 8011bb2:	f1a0 0114 	sub.w	r1, r0, #20
 8011bb6:	291e      	cmp	r1, #30
 8011bb8:	bfda      	itte	le
 8011bba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011bbe:	fa20 f101 	lsrle.w	r1, r0, r1
 8011bc2:	2101      	movgt	r1, #1
 8011bc4:	460a      	mov	r2, r1
 8011bc6:	e7e1      	b.n	8011b8c <__ulp+0x18>
 8011bc8:	7ff00000 	.word	0x7ff00000

08011bcc <__b2d>:
 8011bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bce:	6905      	ldr	r5, [r0, #16]
 8011bd0:	f100 0714 	add.w	r7, r0, #20
 8011bd4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011bd8:	1f2e      	subs	r6, r5, #4
 8011bda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011bde:	4620      	mov	r0, r4
 8011be0:	f7ff fd52 	bl	8011688 <__hi0bits>
 8011be4:	f1c0 0320 	rsb	r3, r0, #32
 8011be8:	280a      	cmp	r0, #10
 8011bea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011c68 <__b2d+0x9c>
 8011bee:	600b      	str	r3, [r1, #0]
 8011bf0:	dc14      	bgt.n	8011c1c <__b2d+0x50>
 8011bf2:	f1c0 0e0b 	rsb	lr, r0, #11
 8011bf6:	fa24 f10e 	lsr.w	r1, r4, lr
 8011bfa:	42b7      	cmp	r7, r6
 8011bfc:	ea41 030c 	orr.w	r3, r1, ip
 8011c00:	bf34      	ite	cc
 8011c02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011c06:	2100      	movcs	r1, #0
 8011c08:	3015      	adds	r0, #21
 8011c0a:	fa04 f000 	lsl.w	r0, r4, r0
 8011c0e:	fa21 f10e 	lsr.w	r1, r1, lr
 8011c12:	ea40 0201 	orr.w	r2, r0, r1
 8011c16:	ec43 2b10 	vmov	d0, r2, r3
 8011c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c1c:	42b7      	cmp	r7, r6
 8011c1e:	bf3a      	itte	cc
 8011c20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011c24:	f1a5 0608 	subcc.w	r6, r5, #8
 8011c28:	2100      	movcs	r1, #0
 8011c2a:	380b      	subs	r0, #11
 8011c2c:	d017      	beq.n	8011c5e <__b2d+0x92>
 8011c2e:	f1c0 0c20 	rsb	ip, r0, #32
 8011c32:	fa04 f500 	lsl.w	r5, r4, r0
 8011c36:	42be      	cmp	r6, r7
 8011c38:	fa21 f40c 	lsr.w	r4, r1, ip
 8011c3c:	ea45 0504 	orr.w	r5, r5, r4
 8011c40:	bf8c      	ite	hi
 8011c42:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011c46:	2400      	movls	r4, #0
 8011c48:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011c4c:	fa01 f000 	lsl.w	r0, r1, r0
 8011c50:	fa24 f40c 	lsr.w	r4, r4, ip
 8011c54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011c58:	ea40 0204 	orr.w	r2, r0, r4
 8011c5c:	e7db      	b.n	8011c16 <__b2d+0x4a>
 8011c5e:	ea44 030c 	orr.w	r3, r4, ip
 8011c62:	460a      	mov	r2, r1
 8011c64:	e7d7      	b.n	8011c16 <__b2d+0x4a>
 8011c66:	bf00      	nop
 8011c68:	3ff00000 	.word	0x3ff00000

08011c6c <__d2b>:
 8011c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c70:	4689      	mov	r9, r1
 8011c72:	2101      	movs	r1, #1
 8011c74:	ec57 6b10 	vmov	r6, r7, d0
 8011c78:	4690      	mov	r8, r2
 8011c7a:	f7ff fc0f 	bl	801149c <_Balloc>
 8011c7e:	4604      	mov	r4, r0
 8011c80:	b930      	cbnz	r0, 8011c90 <__d2b+0x24>
 8011c82:	4602      	mov	r2, r0
 8011c84:	4b25      	ldr	r3, [pc, #148]	; (8011d1c <__d2b+0xb0>)
 8011c86:	4826      	ldr	r0, [pc, #152]	; (8011d20 <__d2b+0xb4>)
 8011c88:	f240 310a 	movw	r1, #778	; 0x30a
 8011c8c:	f7fc f894 	bl	800ddb8 <__assert_func>
 8011c90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011c94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011c98:	bb35      	cbnz	r5, 8011ce8 <__d2b+0x7c>
 8011c9a:	2e00      	cmp	r6, #0
 8011c9c:	9301      	str	r3, [sp, #4]
 8011c9e:	d028      	beq.n	8011cf2 <__d2b+0x86>
 8011ca0:	4668      	mov	r0, sp
 8011ca2:	9600      	str	r6, [sp, #0]
 8011ca4:	f7ff fd10 	bl	80116c8 <__lo0bits>
 8011ca8:	9900      	ldr	r1, [sp, #0]
 8011caa:	b300      	cbz	r0, 8011cee <__d2b+0x82>
 8011cac:	9a01      	ldr	r2, [sp, #4]
 8011cae:	f1c0 0320 	rsb	r3, r0, #32
 8011cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8011cb6:	430b      	orrs	r3, r1
 8011cb8:	40c2      	lsrs	r2, r0
 8011cba:	6163      	str	r3, [r4, #20]
 8011cbc:	9201      	str	r2, [sp, #4]
 8011cbe:	9b01      	ldr	r3, [sp, #4]
 8011cc0:	61a3      	str	r3, [r4, #24]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	bf14      	ite	ne
 8011cc6:	2202      	movne	r2, #2
 8011cc8:	2201      	moveq	r2, #1
 8011cca:	6122      	str	r2, [r4, #16]
 8011ccc:	b1d5      	cbz	r5, 8011d04 <__d2b+0x98>
 8011cce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011cd2:	4405      	add	r5, r0
 8011cd4:	f8c9 5000 	str.w	r5, [r9]
 8011cd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011cdc:	f8c8 0000 	str.w	r0, [r8]
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	b003      	add	sp, #12
 8011ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011cec:	e7d5      	b.n	8011c9a <__d2b+0x2e>
 8011cee:	6161      	str	r1, [r4, #20]
 8011cf0:	e7e5      	b.n	8011cbe <__d2b+0x52>
 8011cf2:	a801      	add	r0, sp, #4
 8011cf4:	f7ff fce8 	bl	80116c8 <__lo0bits>
 8011cf8:	9b01      	ldr	r3, [sp, #4]
 8011cfa:	6163      	str	r3, [r4, #20]
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	6122      	str	r2, [r4, #16]
 8011d00:	3020      	adds	r0, #32
 8011d02:	e7e3      	b.n	8011ccc <__d2b+0x60>
 8011d04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011d0c:	f8c9 0000 	str.w	r0, [r9]
 8011d10:	6918      	ldr	r0, [r3, #16]
 8011d12:	f7ff fcb9 	bl	8011688 <__hi0bits>
 8011d16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d1a:	e7df      	b.n	8011cdc <__d2b+0x70>
 8011d1c:	08012eb4 	.word	0x08012eb4
 8011d20:	08012fa8 	.word	0x08012fa8

08011d24 <__ratio>:
 8011d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d28:	4688      	mov	r8, r1
 8011d2a:	4669      	mov	r1, sp
 8011d2c:	4681      	mov	r9, r0
 8011d2e:	f7ff ff4d 	bl	8011bcc <__b2d>
 8011d32:	a901      	add	r1, sp, #4
 8011d34:	4640      	mov	r0, r8
 8011d36:	ec55 4b10 	vmov	r4, r5, d0
 8011d3a:	f7ff ff47 	bl	8011bcc <__b2d>
 8011d3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011d42:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011d46:	eba3 0c02 	sub.w	ip, r3, r2
 8011d4a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011d4e:	1a9b      	subs	r3, r3, r2
 8011d50:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011d54:	ec51 0b10 	vmov	r0, r1, d0
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	bfd6      	itet	le
 8011d5c:	460a      	movle	r2, r1
 8011d5e:	462a      	movgt	r2, r5
 8011d60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d64:	468b      	mov	fp, r1
 8011d66:	462f      	mov	r7, r5
 8011d68:	bfd4      	ite	le
 8011d6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011d6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011d72:	4620      	mov	r0, r4
 8011d74:	ee10 2a10 	vmov	r2, s0
 8011d78:	465b      	mov	r3, fp
 8011d7a:	4639      	mov	r1, r7
 8011d7c:	f7ee fd76 	bl	800086c <__aeabi_ddiv>
 8011d80:	ec41 0b10 	vmov	d0, r0, r1
 8011d84:	b003      	add	sp, #12
 8011d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d8a <__copybits>:
 8011d8a:	3901      	subs	r1, #1
 8011d8c:	b570      	push	{r4, r5, r6, lr}
 8011d8e:	1149      	asrs	r1, r1, #5
 8011d90:	6914      	ldr	r4, [r2, #16]
 8011d92:	3101      	adds	r1, #1
 8011d94:	f102 0314 	add.w	r3, r2, #20
 8011d98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011da0:	1f05      	subs	r5, r0, #4
 8011da2:	42a3      	cmp	r3, r4
 8011da4:	d30c      	bcc.n	8011dc0 <__copybits+0x36>
 8011da6:	1aa3      	subs	r3, r4, r2
 8011da8:	3b11      	subs	r3, #17
 8011daa:	f023 0303 	bic.w	r3, r3, #3
 8011dae:	3211      	adds	r2, #17
 8011db0:	42a2      	cmp	r2, r4
 8011db2:	bf88      	it	hi
 8011db4:	2300      	movhi	r3, #0
 8011db6:	4418      	add	r0, r3
 8011db8:	2300      	movs	r3, #0
 8011dba:	4288      	cmp	r0, r1
 8011dbc:	d305      	bcc.n	8011dca <__copybits+0x40>
 8011dbe:	bd70      	pop	{r4, r5, r6, pc}
 8011dc0:	f853 6b04 	ldr.w	r6, [r3], #4
 8011dc4:	f845 6f04 	str.w	r6, [r5, #4]!
 8011dc8:	e7eb      	b.n	8011da2 <__copybits+0x18>
 8011dca:	f840 3b04 	str.w	r3, [r0], #4
 8011dce:	e7f4      	b.n	8011dba <__copybits+0x30>

08011dd0 <__any_on>:
 8011dd0:	f100 0214 	add.w	r2, r0, #20
 8011dd4:	6900      	ldr	r0, [r0, #16]
 8011dd6:	114b      	asrs	r3, r1, #5
 8011dd8:	4298      	cmp	r0, r3
 8011dda:	b510      	push	{r4, lr}
 8011ddc:	db11      	blt.n	8011e02 <__any_on+0x32>
 8011dde:	dd0a      	ble.n	8011df6 <__any_on+0x26>
 8011de0:	f011 011f 	ands.w	r1, r1, #31
 8011de4:	d007      	beq.n	8011df6 <__any_on+0x26>
 8011de6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011dea:	fa24 f001 	lsr.w	r0, r4, r1
 8011dee:	fa00 f101 	lsl.w	r1, r0, r1
 8011df2:	428c      	cmp	r4, r1
 8011df4:	d10b      	bne.n	8011e0e <__any_on+0x3e>
 8011df6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011dfa:	4293      	cmp	r3, r2
 8011dfc:	d803      	bhi.n	8011e06 <__any_on+0x36>
 8011dfe:	2000      	movs	r0, #0
 8011e00:	bd10      	pop	{r4, pc}
 8011e02:	4603      	mov	r3, r0
 8011e04:	e7f7      	b.n	8011df6 <__any_on+0x26>
 8011e06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e0a:	2900      	cmp	r1, #0
 8011e0c:	d0f5      	beq.n	8011dfa <__any_on+0x2a>
 8011e0e:	2001      	movs	r0, #1
 8011e10:	e7f6      	b.n	8011e00 <__any_on+0x30>

08011e12 <_calloc_r>:
 8011e12:	b513      	push	{r0, r1, r4, lr}
 8011e14:	434a      	muls	r2, r1
 8011e16:	4611      	mov	r1, r2
 8011e18:	9201      	str	r2, [sp, #4]
 8011e1a:	f7fc f89d 	bl	800df58 <_malloc_r>
 8011e1e:	4604      	mov	r4, r0
 8011e20:	b118      	cbz	r0, 8011e2a <_calloc_r+0x18>
 8011e22:	9a01      	ldr	r2, [sp, #4]
 8011e24:	2100      	movs	r1, #0
 8011e26:	f7fc f83f 	bl	800dea8 <memset>
 8011e2a:	4620      	mov	r0, r4
 8011e2c:	b002      	add	sp, #8
 8011e2e:	bd10      	pop	{r4, pc}

08011e30 <_realloc_r>:
 8011e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e32:	4607      	mov	r7, r0
 8011e34:	4614      	mov	r4, r2
 8011e36:	460e      	mov	r6, r1
 8011e38:	b921      	cbnz	r1, 8011e44 <_realloc_r+0x14>
 8011e3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011e3e:	4611      	mov	r1, r2
 8011e40:	f7fc b88a 	b.w	800df58 <_malloc_r>
 8011e44:	b922      	cbnz	r2, 8011e50 <_realloc_r+0x20>
 8011e46:	f7fc f837 	bl	800deb8 <_free_r>
 8011e4a:	4625      	mov	r5, r4
 8011e4c:	4628      	mov	r0, r5
 8011e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e50:	f000 fa76 	bl	8012340 <_malloc_usable_size_r>
 8011e54:	42a0      	cmp	r0, r4
 8011e56:	d20f      	bcs.n	8011e78 <_realloc_r+0x48>
 8011e58:	4621      	mov	r1, r4
 8011e5a:	4638      	mov	r0, r7
 8011e5c:	f7fc f87c 	bl	800df58 <_malloc_r>
 8011e60:	4605      	mov	r5, r0
 8011e62:	2800      	cmp	r0, #0
 8011e64:	d0f2      	beq.n	8011e4c <_realloc_r+0x1c>
 8011e66:	4631      	mov	r1, r6
 8011e68:	4622      	mov	r2, r4
 8011e6a:	f7fc f80f 	bl	800de8c <memcpy>
 8011e6e:	4631      	mov	r1, r6
 8011e70:	4638      	mov	r0, r7
 8011e72:	f7fc f821 	bl	800deb8 <_free_r>
 8011e76:	e7e9      	b.n	8011e4c <_realloc_r+0x1c>
 8011e78:	4635      	mov	r5, r6
 8011e7a:	e7e7      	b.n	8011e4c <_realloc_r+0x1c>

08011e7c <__ssputs_r>:
 8011e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e80:	688e      	ldr	r6, [r1, #8]
 8011e82:	429e      	cmp	r6, r3
 8011e84:	4682      	mov	sl, r0
 8011e86:	460c      	mov	r4, r1
 8011e88:	4690      	mov	r8, r2
 8011e8a:	461f      	mov	r7, r3
 8011e8c:	d838      	bhi.n	8011f00 <__ssputs_r+0x84>
 8011e8e:	898a      	ldrh	r2, [r1, #12]
 8011e90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e94:	d032      	beq.n	8011efc <__ssputs_r+0x80>
 8011e96:	6825      	ldr	r5, [r4, #0]
 8011e98:	6909      	ldr	r1, [r1, #16]
 8011e9a:	eba5 0901 	sub.w	r9, r5, r1
 8011e9e:	6965      	ldr	r5, [r4, #20]
 8011ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ea4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	444b      	add	r3, r9
 8011eac:	106d      	asrs	r5, r5, #1
 8011eae:	429d      	cmp	r5, r3
 8011eb0:	bf38      	it	cc
 8011eb2:	461d      	movcc	r5, r3
 8011eb4:	0553      	lsls	r3, r2, #21
 8011eb6:	d531      	bpl.n	8011f1c <__ssputs_r+0xa0>
 8011eb8:	4629      	mov	r1, r5
 8011eba:	f7fc f84d 	bl	800df58 <_malloc_r>
 8011ebe:	4606      	mov	r6, r0
 8011ec0:	b950      	cbnz	r0, 8011ed8 <__ssputs_r+0x5c>
 8011ec2:	230c      	movs	r3, #12
 8011ec4:	f8ca 3000 	str.w	r3, [sl]
 8011ec8:	89a3      	ldrh	r3, [r4, #12]
 8011eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ece:	81a3      	strh	r3, [r4, #12]
 8011ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed8:	6921      	ldr	r1, [r4, #16]
 8011eda:	464a      	mov	r2, r9
 8011edc:	f7fb ffd6 	bl	800de8c <memcpy>
 8011ee0:	89a3      	ldrh	r3, [r4, #12]
 8011ee2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011eea:	81a3      	strh	r3, [r4, #12]
 8011eec:	6126      	str	r6, [r4, #16]
 8011eee:	6165      	str	r5, [r4, #20]
 8011ef0:	444e      	add	r6, r9
 8011ef2:	eba5 0509 	sub.w	r5, r5, r9
 8011ef6:	6026      	str	r6, [r4, #0]
 8011ef8:	60a5      	str	r5, [r4, #8]
 8011efa:	463e      	mov	r6, r7
 8011efc:	42be      	cmp	r6, r7
 8011efe:	d900      	bls.n	8011f02 <__ssputs_r+0x86>
 8011f00:	463e      	mov	r6, r7
 8011f02:	4632      	mov	r2, r6
 8011f04:	6820      	ldr	r0, [r4, #0]
 8011f06:	4641      	mov	r1, r8
 8011f08:	f7ff faa2 	bl	8011450 <memmove>
 8011f0c:	68a3      	ldr	r3, [r4, #8]
 8011f0e:	6822      	ldr	r2, [r4, #0]
 8011f10:	1b9b      	subs	r3, r3, r6
 8011f12:	4432      	add	r2, r6
 8011f14:	60a3      	str	r3, [r4, #8]
 8011f16:	6022      	str	r2, [r4, #0]
 8011f18:	2000      	movs	r0, #0
 8011f1a:	e7db      	b.n	8011ed4 <__ssputs_r+0x58>
 8011f1c:	462a      	mov	r2, r5
 8011f1e:	f7ff ff87 	bl	8011e30 <_realloc_r>
 8011f22:	4606      	mov	r6, r0
 8011f24:	2800      	cmp	r0, #0
 8011f26:	d1e1      	bne.n	8011eec <__ssputs_r+0x70>
 8011f28:	6921      	ldr	r1, [r4, #16]
 8011f2a:	4650      	mov	r0, sl
 8011f2c:	f7fb ffc4 	bl	800deb8 <_free_r>
 8011f30:	e7c7      	b.n	8011ec2 <__ssputs_r+0x46>
	...

08011f34 <_svfiprintf_r>:
 8011f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f38:	4698      	mov	r8, r3
 8011f3a:	898b      	ldrh	r3, [r1, #12]
 8011f3c:	061b      	lsls	r3, r3, #24
 8011f3e:	b09d      	sub	sp, #116	; 0x74
 8011f40:	4607      	mov	r7, r0
 8011f42:	460d      	mov	r5, r1
 8011f44:	4614      	mov	r4, r2
 8011f46:	d50e      	bpl.n	8011f66 <_svfiprintf_r+0x32>
 8011f48:	690b      	ldr	r3, [r1, #16]
 8011f4a:	b963      	cbnz	r3, 8011f66 <_svfiprintf_r+0x32>
 8011f4c:	2140      	movs	r1, #64	; 0x40
 8011f4e:	f7fc f803 	bl	800df58 <_malloc_r>
 8011f52:	6028      	str	r0, [r5, #0]
 8011f54:	6128      	str	r0, [r5, #16]
 8011f56:	b920      	cbnz	r0, 8011f62 <_svfiprintf_r+0x2e>
 8011f58:	230c      	movs	r3, #12
 8011f5a:	603b      	str	r3, [r7, #0]
 8011f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f60:	e0d1      	b.n	8012106 <_svfiprintf_r+0x1d2>
 8011f62:	2340      	movs	r3, #64	; 0x40
 8011f64:	616b      	str	r3, [r5, #20]
 8011f66:	2300      	movs	r3, #0
 8011f68:	9309      	str	r3, [sp, #36]	; 0x24
 8011f6a:	2320      	movs	r3, #32
 8011f6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f74:	2330      	movs	r3, #48	; 0x30
 8011f76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012120 <_svfiprintf_r+0x1ec>
 8011f7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f7e:	f04f 0901 	mov.w	r9, #1
 8011f82:	4623      	mov	r3, r4
 8011f84:	469a      	mov	sl, r3
 8011f86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f8a:	b10a      	cbz	r2, 8011f90 <_svfiprintf_r+0x5c>
 8011f8c:	2a25      	cmp	r2, #37	; 0x25
 8011f8e:	d1f9      	bne.n	8011f84 <_svfiprintf_r+0x50>
 8011f90:	ebba 0b04 	subs.w	fp, sl, r4
 8011f94:	d00b      	beq.n	8011fae <_svfiprintf_r+0x7a>
 8011f96:	465b      	mov	r3, fp
 8011f98:	4622      	mov	r2, r4
 8011f9a:	4629      	mov	r1, r5
 8011f9c:	4638      	mov	r0, r7
 8011f9e:	f7ff ff6d 	bl	8011e7c <__ssputs_r>
 8011fa2:	3001      	adds	r0, #1
 8011fa4:	f000 80aa 	beq.w	80120fc <_svfiprintf_r+0x1c8>
 8011fa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011faa:	445a      	add	r2, fp
 8011fac:	9209      	str	r2, [sp, #36]	; 0x24
 8011fae:	f89a 3000 	ldrb.w	r3, [sl]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	f000 80a2 	beq.w	80120fc <_svfiprintf_r+0x1c8>
 8011fb8:	2300      	movs	r3, #0
 8011fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011fbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fc2:	f10a 0a01 	add.w	sl, sl, #1
 8011fc6:	9304      	str	r3, [sp, #16]
 8011fc8:	9307      	str	r3, [sp, #28]
 8011fca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fce:	931a      	str	r3, [sp, #104]	; 0x68
 8011fd0:	4654      	mov	r4, sl
 8011fd2:	2205      	movs	r2, #5
 8011fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fd8:	4851      	ldr	r0, [pc, #324]	; (8012120 <_svfiprintf_r+0x1ec>)
 8011fda:	f7ee f911 	bl	8000200 <memchr>
 8011fde:	9a04      	ldr	r2, [sp, #16]
 8011fe0:	b9d8      	cbnz	r0, 801201a <_svfiprintf_r+0xe6>
 8011fe2:	06d0      	lsls	r0, r2, #27
 8011fe4:	bf44      	itt	mi
 8011fe6:	2320      	movmi	r3, #32
 8011fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fec:	0711      	lsls	r1, r2, #28
 8011fee:	bf44      	itt	mi
 8011ff0:	232b      	movmi	r3, #43	; 0x2b
 8011ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8011ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8011ffc:	d015      	beq.n	801202a <_svfiprintf_r+0xf6>
 8011ffe:	9a07      	ldr	r2, [sp, #28]
 8012000:	4654      	mov	r4, sl
 8012002:	2000      	movs	r0, #0
 8012004:	f04f 0c0a 	mov.w	ip, #10
 8012008:	4621      	mov	r1, r4
 801200a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801200e:	3b30      	subs	r3, #48	; 0x30
 8012010:	2b09      	cmp	r3, #9
 8012012:	d94e      	bls.n	80120b2 <_svfiprintf_r+0x17e>
 8012014:	b1b0      	cbz	r0, 8012044 <_svfiprintf_r+0x110>
 8012016:	9207      	str	r2, [sp, #28]
 8012018:	e014      	b.n	8012044 <_svfiprintf_r+0x110>
 801201a:	eba0 0308 	sub.w	r3, r0, r8
 801201e:	fa09 f303 	lsl.w	r3, r9, r3
 8012022:	4313      	orrs	r3, r2
 8012024:	9304      	str	r3, [sp, #16]
 8012026:	46a2      	mov	sl, r4
 8012028:	e7d2      	b.n	8011fd0 <_svfiprintf_r+0x9c>
 801202a:	9b03      	ldr	r3, [sp, #12]
 801202c:	1d19      	adds	r1, r3, #4
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	9103      	str	r1, [sp, #12]
 8012032:	2b00      	cmp	r3, #0
 8012034:	bfbb      	ittet	lt
 8012036:	425b      	neglt	r3, r3
 8012038:	f042 0202 	orrlt.w	r2, r2, #2
 801203c:	9307      	strge	r3, [sp, #28]
 801203e:	9307      	strlt	r3, [sp, #28]
 8012040:	bfb8      	it	lt
 8012042:	9204      	strlt	r2, [sp, #16]
 8012044:	7823      	ldrb	r3, [r4, #0]
 8012046:	2b2e      	cmp	r3, #46	; 0x2e
 8012048:	d10c      	bne.n	8012064 <_svfiprintf_r+0x130>
 801204a:	7863      	ldrb	r3, [r4, #1]
 801204c:	2b2a      	cmp	r3, #42	; 0x2a
 801204e:	d135      	bne.n	80120bc <_svfiprintf_r+0x188>
 8012050:	9b03      	ldr	r3, [sp, #12]
 8012052:	1d1a      	adds	r2, r3, #4
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	9203      	str	r2, [sp, #12]
 8012058:	2b00      	cmp	r3, #0
 801205a:	bfb8      	it	lt
 801205c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012060:	3402      	adds	r4, #2
 8012062:	9305      	str	r3, [sp, #20]
 8012064:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012130 <_svfiprintf_r+0x1fc>
 8012068:	7821      	ldrb	r1, [r4, #0]
 801206a:	2203      	movs	r2, #3
 801206c:	4650      	mov	r0, sl
 801206e:	f7ee f8c7 	bl	8000200 <memchr>
 8012072:	b140      	cbz	r0, 8012086 <_svfiprintf_r+0x152>
 8012074:	2340      	movs	r3, #64	; 0x40
 8012076:	eba0 000a 	sub.w	r0, r0, sl
 801207a:	fa03 f000 	lsl.w	r0, r3, r0
 801207e:	9b04      	ldr	r3, [sp, #16]
 8012080:	4303      	orrs	r3, r0
 8012082:	3401      	adds	r4, #1
 8012084:	9304      	str	r3, [sp, #16]
 8012086:	f814 1b01 	ldrb.w	r1, [r4], #1
 801208a:	4826      	ldr	r0, [pc, #152]	; (8012124 <_svfiprintf_r+0x1f0>)
 801208c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012090:	2206      	movs	r2, #6
 8012092:	f7ee f8b5 	bl	8000200 <memchr>
 8012096:	2800      	cmp	r0, #0
 8012098:	d038      	beq.n	801210c <_svfiprintf_r+0x1d8>
 801209a:	4b23      	ldr	r3, [pc, #140]	; (8012128 <_svfiprintf_r+0x1f4>)
 801209c:	bb1b      	cbnz	r3, 80120e6 <_svfiprintf_r+0x1b2>
 801209e:	9b03      	ldr	r3, [sp, #12]
 80120a0:	3307      	adds	r3, #7
 80120a2:	f023 0307 	bic.w	r3, r3, #7
 80120a6:	3308      	adds	r3, #8
 80120a8:	9303      	str	r3, [sp, #12]
 80120aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ac:	4433      	add	r3, r6
 80120ae:	9309      	str	r3, [sp, #36]	; 0x24
 80120b0:	e767      	b.n	8011f82 <_svfiprintf_r+0x4e>
 80120b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80120b6:	460c      	mov	r4, r1
 80120b8:	2001      	movs	r0, #1
 80120ba:	e7a5      	b.n	8012008 <_svfiprintf_r+0xd4>
 80120bc:	2300      	movs	r3, #0
 80120be:	3401      	adds	r4, #1
 80120c0:	9305      	str	r3, [sp, #20]
 80120c2:	4619      	mov	r1, r3
 80120c4:	f04f 0c0a 	mov.w	ip, #10
 80120c8:	4620      	mov	r0, r4
 80120ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120ce:	3a30      	subs	r2, #48	; 0x30
 80120d0:	2a09      	cmp	r2, #9
 80120d2:	d903      	bls.n	80120dc <_svfiprintf_r+0x1a8>
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d0c5      	beq.n	8012064 <_svfiprintf_r+0x130>
 80120d8:	9105      	str	r1, [sp, #20]
 80120da:	e7c3      	b.n	8012064 <_svfiprintf_r+0x130>
 80120dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80120e0:	4604      	mov	r4, r0
 80120e2:	2301      	movs	r3, #1
 80120e4:	e7f0      	b.n	80120c8 <_svfiprintf_r+0x194>
 80120e6:	ab03      	add	r3, sp, #12
 80120e8:	9300      	str	r3, [sp, #0]
 80120ea:	462a      	mov	r2, r5
 80120ec:	4b0f      	ldr	r3, [pc, #60]	; (801212c <_svfiprintf_r+0x1f8>)
 80120ee:	a904      	add	r1, sp, #16
 80120f0:	4638      	mov	r0, r7
 80120f2:	f7fc f985 	bl	800e400 <_printf_float>
 80120f6:	1c42      	adds	r2, r0, #1
 80120f8:	4606      	mov	r6, r0
 80120fa:	d1d6      	bne.n	80120aa <_svfiprintf_r+0x176>
 80120fc:	89ab      	ldrh	r3, [r5, #12]
 80120fe:	065b      	lsls	r3, r3, #25
 8012100:	f53f af2c 	bmi.w	8011f5c <_svfiprintf_r+0x28>
 8012104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012106:	b01d      	add	sp, #116	; 0x74
 8012108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801210c:	ab03      	add	r3, sp, #12
 801210e:	9300      	str	r3, [sp, #0]
 8012110:	462a      	mov	r2, r5
 8012112:	4b06      	ldr	r3, [pc, #24]	; (801212c <_svfiprintf_r+0x1f8>)
 8012114:	a904      	add	r1, sp, #16
 8012116:	4638      	mov	r0, r7
 8012118:	f7fc fc16 	bl	800e948 <_printf_i>
 801211c:	e7eb      	b.n	80120f6 <_svfiprintf_r+0x1c2>
 801211e:	bf00      	nop
 8012120:	08012c94 	.word	0x08012c94
 8012124:	08012c9e 	.word	0x08012c9e
 8012128:	0800e401 	.word	0x0800e401
 801212c:	08011e7d 	.word	0x08011e7d
 8012130:	08012c9a 	.word	0x08012c9a
 8012134:	00000000 	.word	0x00000000

08012138 <nan>:
 8012138:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012140 <nan+0x8>
 801213c:	4770      	bx	lr
 801213e:	bf00      	nop
 8012140:	00000000 	.word	0x00000000
 8012144:	7ff80000 	.word	0x7ff80000

08012148 <_raise_r>:
 8012148:	291f      	cmp	r1, #31
 801214a:	b538      	push	{r3, r4, r5, lr}
 801214c:	4604      	mov	r4, r0
 801214e:	460d      	mov	r5, r1
 8012150:	d904      	bls.n	801215c <_raise_r+0x14>
 8012152:	2316      	movs	r3, #22
 8012154:	6003      	str	r3, [r0, #0]
 8012156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801215a:	bd38      	pop	{r3, r4, r5, pc}
 801215c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801215e:	b112      	cbz	r2, 8012166 <_raise_r+0x1e>
 8012160:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012164:	b94b      	cbnz	r3, 801217a <_raise_r+0x32>
 8012166:	4620      	mov	r0, r4
 8012168:	f000 f830 	bl	80121cc <_getpid_r>
 801216c:	462a      	mov	r2, r5
 801216e:	4601      	mov	r1, r0
 8012170:	4620      	mov	r0, r4
 8012172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012176:	f000 b817 	b.w	80121a8 <_kill_r>
 801217a:	2b01      	cmp	r3, #1
 801217c:	d00a      	beq.n	8012194 <_raise_r+0x4c>
 801217e:	1c59      	adds	r1, r3, #1
 8012180:	d103      	bne.n	801218a <_raise_r+0x42>
 8012182:	2316      	movs	r3, #22
 8012184:	6003      	str	r3, [r0, #0]
 8012186:	2001      	movs	r0, #1
 8012188:	e7e7      	b.n	801215a <_raise_r+0x12>
 801218a:	2400      	movs	r4, #0
 801218c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012190:	4628      	mov	r0, r5
 8012192:	4798      	blx	r3
 8012194:	2000      	movs	r0, #0
 8012196:	e7e0      	b.n	801215a <_raise_r+0x12>

08012198 <raise>:
 8012198:	4b02      	ldr	r3, [pc, #8]	; (80121a4 <raise+0xc>)
 801219a:	4601      	mov	r1, r0
 801219c:	6818      	ldr	r0, [r3, #0]
 801219e:	f7ff bfd3 	b.w	8012148 <_raise_r>
 80121a2:	bf00      	nop
 80121a4:	20000028 	.word	0x20000028

080121a8 <_kill_r>:
 80121a8:	b538      	push	{r3, r4, r5, lr}
 80121aa:	4d07      	ldr	r5, [pc, #28]	; (80121c8 <_kill_r+0x20>)
 80121ac:	2300      	movs	r3, #0
 80121ae:	4604      	mov	r4, r0
 80121b0:	4608      	mov	r0, r1
 80121b2:	4611      	mov	r1, r2
 80121b4:	602b      	str	r3, [r5, #0]
 80121b6:	f7f1 fe67 	bl	8003e88 <_kill>
 80121ba:	1c43      	adds	r3, r0, #1
 80121bc:	d102      	bne.n	80121c4 <_kill_r+0x1c>
 80121be:	682b      	ldr	r3, [r5, #0]
 80121c0:	b103      	cbz	r3, 80121c4 <_kill_r+0x1c>
 80121c2:	6023      	str	r3, [r4, #0]
 80121c4:	bd38      	pop	{r3, r4, r5, pc}
 80121c6:	bf00      	nop
 80121c8:	20000ec0 	.word	0x20000ec0

080121cc <_getpid_r>:
 80121cc:	f7f1 be54 	b.w	8003e78 <_getpid>

080121d0 <__sread>:
 80121d0:	b510      	push	{r4, lr}
 80121d2:	460c      	mov	r4, r1
 80121d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121d8:	f000 f8ba 	bl	8012350 <_read_r>
 80121dc:	2800      	cmp	r0, #0
 80121de:	bfab      	itete	ge
 80121e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80121e2:	89a3      	ldrhlt	r3, [r4, #12]
 80121e4:	181b      	addge	r3, r3, r0
 80121e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80121ea:	bfac      	ite	ge
 80121ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80121ee:	81a3      	strhlt	r3, [r4, #12]
 80121f0:	bd10      	pop	{r4, pc}

080121f2 <__swrite>:
 80121f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121f6:	461f      	mov	r7, r3
 80121f8:	898b      	ldrh	r3, [r1, #12]
 80121fa:	05db      	lsls	r3, r3, #23
 80121fc:	4605      	mov	r5, r0
 80121fe:	460c      	mov	r4, r1
 8012200:	4616      	mov	r6, r2
 8012202:	d505      	bpl.n	8012210 <__swrite+0x1e>
 8012204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012208:	2302      	movs	r3, #2
 801220a:	2200      	movs	r2, #0
 801220c:	f000 f886 	bl	801231c <_lseek_r>
 8012210:	89a3      	ldrh	r3, [r4, #12]
 8012212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801221a:	81a3      	strh	r3, [r4, #12]
 801221c:	4632      	mov	r2, r6
 801221e:	463b      	mov	r3, r7
 8012220:	4628      	mov	r0, r5
 8012222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012226:	f000 b835 	b.w	8012294 <_write_r>

0801222a <__sseek>:
 801222a:	b510      	push	{r4, lr}
 801222c:	460c      	mov	r4, r1
 801222e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012232:	f000 f873 	bl	801231c <_lseek_r>
 8012236:	1c43      	adds	r3, r0, #1
 8012238:	89a3      	ldrh	r3, [r4, #12]
 801223a:	bf15      	itete	ne
 801223c:	6560      	strne	r0, [r4, #84]	; 0x54
 801223e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012246:	81a3      	strheq	r3, [r4, #12]
 8012248:	bf18      	it	ne
 801224a:	81a3      	strhne	r3, [r4, #12]
 801224c:	bd10      	pop	{r4, pc}

0801224e <__sclose>:
 801224e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012252:	f000 b831 	b.w	80122b8 <_close_r>

08012256 <strncmp>:
 8012256:	b510      	push	{r4, lr}
 8012258:	b16a      	cbz	r2, 8012276 <strncmp+0x20>
 801225a:	3901      	subs	r1, #1
 801225c:	1884      	adds	r4, r0, r2
 801225e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012262:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012266:	4293      	cmp	r3, r2
 8012268:	d103      	bne.n	8012272 <strncmp+0x1c>
 801226a:	42a0      	cmp	r0, r4
 801226c:	d001      	beq.n	8012272 <strncmp+0x1c>
 801226e:	2b00      	cmp	r3, #0
 8012270:	d1f5      	bne.n	801225e <strncmp+0x8>
 8012272:	1a98      	subs	r0, r3, r2
 8012274:	bd10      	pop	{r4, pc}
 8012276:	4610      	mov	r0, r2
 8012278:	e7fc      	b.n	8012274 <strncmp+0x1e>

0801227a <__ascii_wctomb>:
 801227a:	b149      	cbz	r1, 8012290 <__ascii_wctomb+0x16>
 801227c:	2aff      	cmp	r2, #255	; 0xff
 801227e:	bf85      	ittet	hi
 8012280:	238a      	movhi	r3, #138	; 0x8a
 8012282:	6003      	strhi	r3, [r0, #0]
 8012284:	700a      	strbls	r2, [r1, #0]
 8012286:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801228a:	bf98      	it	ls
 801228c:	2001      	movls	r0, #1
 801228e:	4770      	bx	lr
 8012290:	4608      	mov	r0, r1
 8012292:	4770      	bx	lr

08012294 <_write_r>:
 8012294:	b538      	push	{r3, r4, r5, lr}
 8012296:	4d07      	ldr	r5, [pc, #28]	; (80122b4 <_write_r+0x20>)
 8012298:	4604      	mov	r4, r0
 801229a:	4608      	mov	r0, r1
 801229c:	4611      	mov	r1, r2
 801229e:	2200      	movs	r2, #0
 80122a0:	602a      	str	r2, [r5, #0]
 80122a2:	461a      	mov	r2, r3
 80122a4:	f7f1 fe27 	bl	8003ef6 <_write>
 80122a8:	1c43      	adds	r3, r0, #1
 80122aa:	d102      	bne.n	80122b2 <_write_r+0x1e>
 80122ac:	682b      	ldr	r3, [r5, #0]
 80122ae:	b103      	cbz	r3, 80122b2 <_write_r+0x1e>
 80122b0:	6023      	str	r3, [r4, #0]
 80122b2:	bd38      	pop	{r3, r4, r5, pc}
 80122b4:	20000ec0 	.word	0x20000ec0

080122b8 <_close_r>:
 80122b8:	b538      	push	{r3, r4, r5, lr}
 80122ba:	4d06      	ldr	r5, [pc, #24]	; (80122d4 <_close_r+0x1c>)
 80122bc:	2300      	movs	r3, #0
 80122be:	4604      	mov	r4, r0
 80122c0:	4608      	mov	r0, r1
 80122c2:	602b      	str	r3, [r5, #0]
 80122c4:	f7f1 fe33 	bl	8003f2e <_close>
 80122c8:	1c43      	adds	r3, r0, #1
 80122ca:	d102      	bne.n	80122d2 <_close_r+0x1a>
 80122cc:	682b      	ldr	r3, [r5, #0]
 80122ce:	b103      	cbz	r3, 80122d2 <_close_r+0x1a>
 80122d0:	6023      	str	r3, [r4, #0]
 80122d2:	bd38      	pop	{r3, r4, r5, pc}
 80122d4:	20000ec0 	.word	0x20000ec0

080122d8 <_fstat_r>:
 80122d8:	b538      	push	{r3, r4, r5, lr}
 80122da:	4d07      	ldr	r5, [pc, #28]	; (80122f8 <_fstat_r+0x20>)
 80122dc:	2300      	movs	r3, #0
 80122de:	4604      	mov	r4, r0
 80122e0:	4608      	mov	r0, r1
 80122e2:	4611      	mov	r1, r2
 80122e4:	602b      	str	r3, [r5, #0]
 80122e6:	f7f1 fe2e 	bl	8003f46 <_fstat>
 80122ea:	1c43      	adds	r3, r0, #1
 80122ec:	d102      	bne.n	80122f4 <_fstat_r+0x1c>
 80122ee:	682b      	ldr	r3, [r5, #0]
 80122f0:	b103      	cbz	r3, 80122f4 <_fstat_r+0x1c>
 80122f2:	6023      	str	r3, [r4, #0]
 80122f4:	bd38      	pop	{r3, r4, r5, pc}
 80122f6:	bf00      	nop
 80122f8:	20000ec0 	.word	0x20000ec0

080122fc <_isatty_r>:
 80122fc:	b538      	push	{r3, r4, r5, lr}
 80122fe:	4d06      	ldr	r5, [pc, #24]	; (8012318 <_isatty_r+0x1c>)
 8012300:	2300      	movs	r3, #0
 8012302:	4604      	mov	r4, r0
 8012304:	4608      	mov	r0, r1
 8012306:	602b      	str	r3, [r5, #0]
 8012308:	f7f1 fe2d 	bl	8003f66 <_isatty>
 801230c:	1c43      	adds	r3, r0, #1
 801230e:	d102      	bne.n	8012316 <_isatty_r+0x1a>
 8012310:	682b      	ldr	r3, [r5, #0]
 8012312:	b103      	cbz	r3, 8012316 <_isatty_r+0x1a>
 8012314:	6023      	str	r3, [r4, #0]
 8012316:	bd38      	pop	{r3, r4, r5, pc}
 8012318:	20000ec0 	.word	0x20000ec0

0801231c <_lseek_r>:
 801231c:	b538      	push	{r3, r4, r5, lr}
 801231e:	4d07      	ldr	r5, [pc, #28]	; (801233c <_lseek_r+0x20>)
 8012320:	4604      	mov	r4, r0
 8012322:	4608      	mov	r0, r1
 8012324:	4611      	mov	r1, r2
 8012326:	2200      	movs	r2, #0
 8012328:	602a      	str	r2, [r5, #0]
 801232a:	461a      	mov	r2, r3
 801232c:	f7f1 fe26 	bl	8003f7c <_lseek>
 8012330:	1c43      	adds	r3, r0, #1
 8012332:	d102      	bne.n	801233a <_lseek_r+0x1e>
 8012334:	682b      	ldr	r3, [r5, #0]
 8012336:	b103      	cbz	r3, 801233a <_lseek_r+0x1e>
 8012338:	6023      	str	r3, [r4, #0]
 801233a:	bd38      	pop	{r3, r4, r5, pc}
 801233c:	20000ec0 	.word	0x20000ec0

08012340 <_malloc_usable_size_r>:
 8012340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012344:	1f18      	subs	r0, r3, #4
 8012346:	2b00      	cmp	r3, #0
 8012348:	bfbc      	itt	lt
 801234a:	580b      	ldrlt	r3, [r1, r0]
 801234c:	18c0      	addlt	r0, r0, r3
 801234e:	4770      	bx	lr

08012350 <_read_r>:
 8012350:	b538      	push	{r3, r4, r5, lr}
 8012352:	4d07      	ldr	r5, [pc, #28]	; (8012370 <_read_r+0x20>)
 8012354:	4604      	mov	r4, r0
 8012356:	4608      	mov	r0, r1
 8012358:	4611      	mov	r1, r2
 801235a:	2200      	movs	r2, #0
 801235c:	602a      	str	r2, [r5, #0]
 801235e:	461a      	mov	r2, r3
 8012360:	f7f1 fdac 	bl	8003ebc <_read>
 8012364:	1c43      	adds	r3, r0, #1
 8012366:	d102      	bne.n	801236e <_read_r+0x1e>
 8012368:	682b      	ldr	r3, [r5, #0]
 801236a:	b103      	cbz	r3, 801236e <_read_r+0x1e>
 801236c:	6023      	str	r3, [r4, #0]
 801236e:	bd38      	pop	{r3, r4, r5, pc}
 8012370:	20000ec0 	.word	0x20000ec0

08012374 <_init>:
 8012374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012376:	bf00      	nop
 8012378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801237a:	bc08      	pop	{r3}
 801237c:	469e      	mov	lr, r3
 801237e:	4770      	bx	lr

08012380 <_fini>:
 8012380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012382:	bf00      	nop
 8012384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012386:	bc08      	pop	{r3}
 8012388:	469e      	mov	lr, r3
 801238a:	4770      	bx	lr
