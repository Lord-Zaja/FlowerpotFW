
Flowerpot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f0  0800ef20  0800ef20  0001ef20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f810  0800f810  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800f810  0800f810  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f810  0800f810  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f810  0800f810  0001f810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f814  0800f814  0001f814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800f818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000bac  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000da0  20000da0  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f1df  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fc4  00000000  00000000  0003f403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001580  00000000  00000000  000433c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013e8  00000000  00000000  00044948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bf1  00000000  00000000  00045d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ebb6  00000000  00000000  00068921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5c93  00000000  00000000  000874d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014d16a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d00  00000000  00000000  0014d1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef08 	.word	0x0800ef08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800ef08 	.word	0x0800ef08

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <bcdToDec>:
uint8_t decToBcd(uint8_t val);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t bcdToDec(uint8_t val){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
	return RTC_Bcd2ToByte(val);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f005 fcff 	bl	80065d8 <RTC_Bcd2ToByte>
 8000bda:	4603      	mov	r3, r0
	return((val/10*10)+(val%16));
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <decToBcd>:
uint8_t decToBcd(uint8_t val){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	return RTC_ByteToBcd2(val);
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f005 fcd3 	bl	800659c <RTC_ByteToBcd2>
 8000bf6:	4603      	mov	r3, r0
	return ((val/10*10)+(val%10));
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <getLine>:
void getLine(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	if(huart1.RxState != HAL_UART_STATE_BUSY_RX){
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <getLine+0x2c>)
 8000c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c08:	2b22      	cmp	r3, #34	; 0x22
 8000c0a:	d00b      	beq.n	8000c24 <getLine+0x24>
		RXBuffer[0] = '\0';
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <getLine+0x30>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
		RXDone = false;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <getLine+0x34>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,&RXByte,1);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4907      	ldr	r1, [pc, #28]	; (8000c38 <getLine+0x38>)
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <getLine+0x2c>)
 8000c1e:	f006 f9fd 	bl	800701c <HAL_UART_Receive_IT>
		return;
 8000c22:	e002      	b.n	8000c2a <getLine+0x2a>
	}else{
		myprintf("UART is RX busy!");
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <getLine+0x3c>)
 8000c26:	f000 f855 	bl	8000cd4 <myprintf>
	}
}
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000464 	.word	0x20000464
 8000c30:	20000530 	.word	0x20000530
 8000c34:	20000410 	.word	0x20000410
 8000c38:	200004ec 	.word	0x200004ec
 8000c3c:	0800ef20 	.word	0x0800ef20

08000c40 <HAL_UART_RxCpltCallback>:
/*
void USART1_IRQHandler(void){
	HAL_UART_IRQHandler(&huart1);
}*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <HAL_UART_RxCpltCallback+0x78>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12e      	bne.n	8000cb0 <HAL_UART_RxCpltCallback+0x70>
		strcat(&RXBuffer,&RXByte);
 8000c52:	491a      	ldr	r1, [pc, #104]	; (8000cbc <HAL_UART_RxCpltCallback+0x7c>)
 8000c54:	481a      	ldr	r0, [pc, #104]	; (8000cc0 <HAL_UART_RxCpltCallback+0x80>)
 8000c56:	f00c f8a3 	bl	800cda0 <strcat>
		int index = strcspn(RXBuffer,"\n\r");// počet znaků před =
 8000c5a:	491a      	ldr	r1, [pc, #104]	; (8000cc4 <HAL_UART_RxCpltCallback+0x84>)
 8000c5c:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <HAL_UART_RxCpltCallback+0x80>)
 8000c5e:	f00c f8b6 	bl	800cdce <strcspn>
 8000c62:	4603      	mov	r3, r0
 8000c64:	60fb      	str	r3, [r7, #12]
		if(index != strlen(RXBuffer)){
 8000c66:	4816      	ldr	r0, [pc, #88]	; (8000cc0 <HAL_UART_RxCpltCallback+0x80>)
 8000c68:	f7ff fabc 	bl	80001e4 <strlen>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d003      	beq.n	8000c7c <HAL_UART_RxCpltCallback+0x3c>
			RXDone = true;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_UART_RxCpltCallback+0x88>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
			return;
 8000c7a:	e019      	b.n	8000cb0 <HAL_UART_RxCpltCallback+0x70>
		}
		if(strlen(RXBuffer) >= 32){
 8000c7c:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <HAL_UART_RxCpltCallback+0x80>)
 8000c7e:	f7ff fab1 	bl	80001e4 <strlen>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b1f      	cmp	r3, #31
 8000c86:	d90e      	bls.n	8000ca6 <HAL_UART_RxCpltCallback+0x66>
			RXBuffer[32] = '\n';
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_UART_RxCpltCallback+0x80>)
 8000c8a:	220a      	movs	r2, #10
 8000c8c:	f883 2020 	strb.w	r2, [r3, #32]
			RXBuffer[33] = '\0';
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_UART_RxCpltCallback+0x80>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			myprintf("Buffer přetekl\r\n");
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <HAL_UART_RxCpltCallback+0x8c>)
 8000c9a:	f000 f81b 	bl	8000cd4 <myprintf>
			RXDone = true;
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_UART_RxCpltCallback+0x88>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
			return;
 8000ca4:	e004      	b.n	8000cb0 <HAL_UART_RxCpltCallback+0x70>
			HAL_UART_AbortReceive(&huart1);
		}
		HAL_UART_Receive_IT(&huart1,&RXByte,1);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4904      	ldr	r1, [pc, #16]	; (8000cbc <HAL_UART_RxCpltCallback+0x7c>)
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <HAL_UART_RxCpltCallback+0x90>)
 8000cac:	f006 f9b6 	bl	800701c <HAL_UART_Receive_IT>

	}
}
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40013800 	.word	0x40013800
 8000cbc:	200004ec 	.word	0x200004ec
 8000cc0:	20000530 	.word	0x20000530
 8000cc4:	0800ef34 	.word	0x0800ef34
 8000cc8:	20000410 	.word	0x20000410
 8000ccc:	0800ef38 	.word	0x0800ef38
 8000cd0:	20000464 	.word	0x20000464

08000cd4 <myprintf>:

void myprintf(const char *fmt, ...) {
 8000cd4:	b40f      	push	{r0, r1, r2, r3}
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cea:	480b      	ldr	r0, [pc, #44]	; (8000d18 <myprintf+0x44>)
 8000cec:	f00c f94e 	bl	800cf8c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <myprintf+0x44>)
 8000cf2:	f7ff fa77 	bl	80001e4 <strlen>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d02:	4905      	ldr	r1, [pc, #20]	; (8000d18 <myprintf+0x44>)
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <myprintf+0x48>)
 8000d06:	f006 f8f5 	bl	8006ef4 <HAL_UART_Transmit>

}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr
 8000d18:	20000210 	.word	0x20000210
 8000d1c:	20000464 	.word	0x20000464

08000d20 <setupSHT>:
sht3x_handle_t setupSHT(){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	// Create the handle for the sensor.
	sht3x_handle_t handle = {
 8000d28:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <setupSHT+0x58>)
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d32:	e883 0003 	stmia.w	r3, {r0, r1}
	  .i2c_handle = &hi2c1,
	  .device_address = SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_HIGH
	};

	// Initialise sensor (tests connection by reading the status register).
	if (!sht3x_init(&handle)) {
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 f938 	bl	8001fb0 <sht3x_init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f083 0301 	eor.w	r3, r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d008      	beq.n	8000d5e <setupSHT+0x3e>
	  myprintf("SHT3x access failed.\n\r");
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <setupSHT+0x5c>)
 8000d4e:	f7ff ffc1 	bl	8000cd4 <myprintf>
	  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <setupSHT+0x60>)
 8000d5a:	f002 febb 	bl	8003ad4 <HAL_GPIO_WritePin>
	}
	return handle;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	461a      	mov	r2, r3
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d6a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	0800ef64 	.word	0x0800ef64
 8000d7c:	0800ef4c 	.word	0x0800ef4c
 8000d80:	48001000 	.word	0x48001000

08000d84 <readData>:
void readData(sht3x_handle_t *handle, float *temp, float *hum, uint8_t *wcup, uint8_t *wrez, uint16_t *soil1, uint16_t *soil2){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
	// teplota ve stupních, hum v %
	sht3x_read_temperature_and_humidity(handle, temp, hum);
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f001 f94a 	bl	8002030 <sht3x_read_temperature_and_humidity>
	*wcup = 1;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
	*wrez = 1;
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
	*soil1 = 0;
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	2200      	movs	r2, #0
 8000dac:	801a      	strh	r2, [r3, #0]
	*soil2 = 0;
 8000dae:	6a3b      	ldr	r3, [r7, #32]
 8000db0:	2200      	movs	r2, #0
 8000db2:	801a      	strh	r2, [r3, #0]
	/*
	// Enable heater for two seconds.
	sht3x_set_header_enable(&handle, true);
	HAL_Delay(2000);
	sht3x_set_header_enable(&handle, false);*/
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <removeSpaces>:
char* removeSpaces(char *str){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    int i =0,j=0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
    while(str[i]){
 8000dcc:	e013      	b.n	8000df6 <removeSpaces+0x3a>
        if(str[i] != ' '){
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b20      	cmp	r3, #32
 8000dd8:	d00a      	beq.n	8000df0 <removeSpaces+0x34>
            str[j++] = str[i];
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	441a      	add	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c59      	adds	r1, r3, #1
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	4619      	mov	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	440b      	add	r3, r1
 8000dec:	7812      	ldrb	r2, [r2, #0]
 8000dee:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3301      	adds	r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
    while(str[i]){
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1e5      	bne.n	8000dce <removeSpaces+0x12>
    }
    str[j] = '\0';
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
    return str;
 8000e0c:	687b      	ldr	r3, [r7, #4]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <openConfigFile>:
bool openConfigFile(uint8_t *mode, uint8_t *hum, uint8_t *temp){
 8000e1c:	b5b0      	push	{r4, r5, r7, lr}
 8000e1e:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	6018      	str	r0, [r3, #0]
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	6019      	str	r1, [r3, #0]
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	601a      	str	r2, [r3, #0]
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 8000e34:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8000e38:	2201      	movs	r2, #1
 8000e3a:	49d3      	ldr	r1, [pc, #844]	; (8001188 <openConfigFile+0x36c>)
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f009 fe83 	bl	800ab48 <f_mount>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
    if (fres != FR_OK) {
 8000e48:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d012      	beq.n	8000e76 <openConfigFile+0x5a>
		myprintf("f_mount error (%i)\r\n", fres);
 8000e50:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8000e54:	4619      	mov	r1, r3
 8000e56:	48cd      	ldr	r0, [pc, #820]	; (800118c <openConfigFile+0x370>)
 8000e58:	f7ff ff3c 	bl	8000cd4 <myprintf>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e62:	48cb      	ldr	r0, [pc, #812]	; (8001190 <openConfigFile+0x374>)
 8000e64:	f002 fe36 	bl	8003ad4 <HAL_GPIO_WritePin>
		f_mount(NULL, "", 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	49c7      	ldr	r1, [pc, #796]	; (8001188 <openConfigFile+0x36c>)
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f009 fe6b 	bl	800ab48 <f_mount>
		return false;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e183      	b.n	800117e <openConfigFile+0x362>
    }

    DWORD free_clusters, free_sectors, total_sectors;
    FATFS* getFreeFs;
    fres = f_getfree("", &free_clusters, &getFreeFs);
 8000e76:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e7e:	4619      	mov	r1, r3
 8000e80:	48c1      	ldr	r0, [pc, #772]	; (8001188 <openConfigFile+0x36c>)
 8000e82:	f00a ff0c 	bl	800bc9e <f_getfree>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
    if (fres != FR_OK) {
 8000e8c:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00d      	beq.n	8000eb0 <openConfigFile+0x94>
		myprintf("f_getfree error (%i)\r\n", fres);
 8000e94:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8000e98:	4619      	mov	r1, r3
 8000e9a:	48be      	ldr	r0, [pc, #760]	; (8001194 <openConfigFile+0x378>)
 8000e9c:	f7ff ff1a 	bl	8000cd4 <myprintf>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea6:	48ba      	ldr	r0, [pc, #744]	; (8001190 <openConfigFile+0x374>)
 8000ea8:	f002 fe14 	bl	8003ad4 <HAL_GPIO_WritePin>
  	  	return false;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e166      	b.n	800117e <openConfigFile+0x362>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000eb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000ec0:	6812      	ldr	r2, [r2, #0]
 8000ec2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8000ec6:	fb02 f303 	mul.w	r3, r2, r3
 8000eca:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
    free_sectors = free_clusters * getFreeFs->csize;
 8000ece:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	fb03 f302 	mul.w	r3, r3, r2
 8000ee4:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000ee8:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8000eec:	0859      	lsrs	r1, r3, #1
 8000eee:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 8000ef2:	085b      	lsrs	r3, r3, #1
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	48a8      	ldr	r0, [pc, #672]	; (8001198 <openConfigFile+0x37c>)
 8000ef8:	f7ff feec 	bl	8000cd4 <myprintf>

    fres = f_open(&fil, "config.txt", FA_READ);
 8000efc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f00:	2201      	movs	r2, #1
 8000f02:	49a6      	ldr	r1, [pc, #664]	; (800119c <openConfigFile+0x380>)
 8000f04:	4618      	mov	r0, r3
 8000f06:	f009 fe67 	bl	800abd8 <f_open>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
    if (fres != FR_OK) {
 8000f10:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d014      	beq.n	8000f42 <openConfigFile+0x126>
		myprintf("f_open error (%i)\r\n");
 8000f18:	48a1      	ldr	r0, [pc, #644]	; (80011a0 <openConfigFile+0x384>)
 8000f1a:	f7ff fedb 	bl	8000cd4 <myprintf>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f24:	489a      	ldr	r0, [pc, #616]	; (8001190 <openConfigFile+0x374>)
 8000f26:	f002 fdd5 	bl	8003ad4 <HAL_GPIO_WritePin>
		f_close(&fil);
 8000f2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f00a fc2f 	bl	800b792 <f_close>
		f_mount(NULL, "", 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	4994      	ldr	r1, [pc, #592]	; (8001188 <openConfigFile+0x36c>)
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f009 fe05 	bl	800ab48 <f_mount>
  	  	return false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e11d      	b.n	800117e <openConfigFile+0x362>
    }
    myprintf("I was able to open 'config.txt' for reading!\r\n");
 8000f42:	4898      	ldr	r0, [pc, #608]	; (80011a4 <openConfigFile+0x388>)
 8000f44:	f7ff fec6 	bl	8000cd4 <myprintf>

    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    for(int i = 0; i<3; i++){
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8000f4e:	e106      	b.n	800115e <openConfigFile+0x342>
    	TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);	// přečte celý řádek, pokud nezaplní buffer
 8000f50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	211e      	movs	r1, #30
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f00a ff6c 	bl	800be38 <f_gets>
 8000f60:	f8c7 04ac 	str.w	r0, [r7, #1196]	; 0x4ac
		if(rres != 0) {
 8000f64:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80e1 	beq.w	8001130 <openConfigFile+0x314>
 8000f6e:	466b      	mov	r3, sp
 8000f70:	461d      	mov	r5, r3
			myprintf("Read string from 'config.txt' contents: %s\n\r", readBuf);
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4619      	mov	r1, r3
 8000f78:	488b      	ldr	r0, [pc, #556]	; (80011a8 <openConfigFile+0x38c>)
 8000f7a:	f7ff feab 	bl	8000cd4 <myprintf>
			char *data = &readBuf[0];
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
			char d[strlen(data)];
 8000f86:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 8000f8a:	f7ff f92b 	bl	80001e4 <strlen>
 8000f8e:	4604      	mov	r4, r0
 8000f90:	4623      	mov	r3, r4
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8000f98:	4620      	mov	r0, r4
 8000f9a:	f04f 0100 	mov.w	r1, #0
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	00cb      	lsls	r3, r1, #3
 8000fa8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fac:	00c2      	lsls	r2, r0, #3
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f04f 0100 	mov.w	r1, #0
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	00cb      	lsls	r3, r1, #3
 8000fbe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fc2:	00c2      	lsls	r2, r0, #3
 8000fc4:	1de3      	adds	r3, r4, #7
 8000fc6:	08db      	lsrs	r3, r3, #3
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	ebad 0d03 	sub.w	sp, sp, r3
 8000fce:	466b      	mov	r3, sp
 8000fd0:	3300      	adds	r3, #0
 8000fd2:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
			strcpy(d,data);
 8000fd6:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8000fda:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00b feed 	bl	800cdbe <strcpy>
			data = removeSpaces(d);
 8000fe4:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fee7 	bl	8000dbc <removeSpaces>
 8000fee:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
			strcpy(d,data);
 8000ff2:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8000ff6:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00b fedf 	bl	800cdbe <strcpy>
			int delic = strcspn(d,"=");// počet znaků před =
 8001000:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001004:	4969      	ldr	r1, [pc, #420]	; (80011ac <openConfigFile+0x390>)
 8001006:	4618      	mov	r0, r3
 8001008:	f00b fee1 	bl	800cdce <strcspn>
 800100c:	4603      	mov	r3, r0
 800100e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c

			if (delic != sizeof(d)/sizeof(char)){	// příkaz rozeznán
 8001012:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001016:	429c      	cmp	r4, r3
 8001018:	d076      	beq.n	8001108 <openConfigFile+0x2ec>
				char *key = (char*)malloc(delic+1);	// na konci přidám jene znak pro ukončení strungu
 800101a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800101e:	3301      	adds	r3, #1
 8001020:	4618      	mov	r0, r3
 8001022:	f00b f801 	bl	800c028 <malloc>
 8001026:	4603      	mov	r3, r0
 8001028:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
				memcpy(key,&d,delic);
 800102c:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001030:	f8d7 249c 	ldr.w	r2, [r7, #1180]	; 0x49c
 8001034:	4619      	mov	r1, r3
 8001036:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 800103a:	f00a fffd 	bl	800c038 <memcpy>
				key[delic] = '\0';
 800103e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001042:	f8d7 2498 	ldr.w	r2, [r7, #1176]	; 0x498
 8001046:	4413      	add	r3, r2
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
				//strncpy(key,d,delic);
				char *value = (char*)malloc(sizeof(d)-delic+1);
 800104c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001050:	1ae3      	subs	r3, r4, r3
 8001052:	3301      	adds	r3, #1
 8001054:	4618      	mov	r0, r3
 8001056:	f00a ffe7 	bl	800c028 <malloc>
 800105a:	4603      	mov	r3, r0
 800105c:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
				memcpy(value,&d[delic+1],sizeof(d)-delic);
 8001060:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001064:	3301      	adds	r3, #1
 8001066:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 800106a:	18d1      	adds	r1, r2, r3
 800106c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001070:	1ae3      	subs	r3, r4, r3
 8001072:	461a      	mov	r2, r3
 8001074:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 8001078:	f00a ffde 	bl	800c038 <memcpy>
				value[sizeof(d)-delic] = '\0';
 800107c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001080:	1ae3      	subs	r3, r4, r3
 8001082:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8001086:	4413      	add	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
				//strcpy(value,d[delic+1]);
				if(strcmp(key,"mode") == 0){
 800108c:	4948      	ldr	r1, [pc, #288]	; (80011b0 <openConfigFile+0x394>)
 800108e:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8001092:	f7ff f89d 	bl	80001d0 <strcmp>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10a      	bne.n	80010b2 <openConfigFile+0x296>
					*mode = atoi(value);
 800109c:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 80010a0:	f00a ff82 	bl	800bfa8 <atoi>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e03c      	b.n	800112c <openConfigFile+0x310>
				}else if(strcmp(key, "humidity") == 0){
 80010b2:	4940      	ldr	r1, [pc, #256]	; (80011b4 <openConfigFile+0x398>)
 80010b4:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 80010b8:	f7ff f88a 	bl	80001d0 <strcmp>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10a      	bne.n	80010d8 <openConfigFile+0x2bc>
					*hum = atoi(value);
 80010c2:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 80010c6:	f00a ff6f 	bl	800bfa8 <atoi>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e029      	b.n	800112c <openConfigFile+0x310>
				}else if(strcmp(key, "temperature") == 0){
 80010d8:	4937      	ldr	r1, [pc, #220]	; (80011b8 <openConfigFile+0x39c>)
 80010da:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 80010de:	f7ff f877 	bl	80001d0 <strcmp>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d109      	bne.n	80010fc <openConfigFile+0x2e0>
					*temp = atoi(value);
 80010e8:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
 80010ec:	f00a ff5c 	bl	800bfa8 <atoi>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e017      	b.n	800112c <openConfigFile+0x310>
				}else{
					myprintf("\n\rKey \"%s\" not recognized!\n\r",key);
 80010fc:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8001100:	482e      	ldr	r0, [pc, #184]	; (80011bc <openConfigFile+0x3a0>)
 8001102:	f7ff fde7 	bl	8000cd4 <myprintf>
 8001106:	e011      	b.n	800112c <openConfigFile+0x310>
				}
			}else{
				myprintf("\n\rDidnt found \"=\" on line %i",i);
 8001108:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	; 0x4bc
 800110c:	482c      	ldr	r0, [pc, #176]	; (80011c0 <openConfigFile+0x3a4>)
 800110e:	f7ff fde1 	bl	8000cd4 <myprintf>
				f_close(&fil);
 8001112:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001116:	4618      	mov	r0, r3
 8001118:	f00a fb3b 	bl	800b792 <f_close>
				f_mount(NULL, "", 0);
 800111c:	2200      	movs	r2, #0
 800111e:	491a      	ldr	r1, [pc, #104]	; (8001188 <openConfigFile+0x36c>)
 8001120:	2000      	movs	r0, #0
 8001122:	f009 fd11 	bl	800ab48 <f_mount>
				return false;
 8001126:	2300      	movs	r3, #0
 8001128:	46ad      	mov	sp, r5
 800112a:	e028      	b.n	800117e <openConfigFile+0x362>
 800112c:	46ad      	mov	sp, r5
 800112e:	e011      	b.n	8001154 <openConfigFile+0x338>
			}
		} else {
			myprintf("f_gets error (%i)\r\n", fres);
 8001130:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8001134:	4619      	mov	r1, r3
 8001136:	4823      	ldr	r0, [pc, #140]	; (80011c4 <openConfigFile+0x3a8>)
 8001138:	f7ff fdcc 	bl	8000cd4 <myprintf>
			f_close(&fil);
 800113c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001140:	4618      	mov	r0, r3
 8001142:	f00a fb26 	bl	800b792 <f_close>
			f_mount(NULL, "", 0);
 8001146:	2200      	movs	r2, #0
 8001148:	490f      	ldr	r1, [pc, #60]	; (8001188 <openConfigFile+0x36c>)
 800114a:	2000      	movs	r0, #0
 800114c:	f009 fcfc 	bl	800ab48 <f_mount>
			return false;
 8001150:	2300      	movs	r3, #0
 8001152:	e014      	b.n	800117e <openConfigFile+0x362>
    for(int i = 0; i<3; i++){
 8001154:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8001158:	3301      	adds	r3, #1
 800115a:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800115e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8001162:	2b02      	cmp	r3, #2
 8001164:	f77f aef4 	ble.w	8000f50 <openConfigFile+0x134>
		}
    }
    f_close(&fil);
 8001168:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800116c:	4618      	mov	r0, r3
 800116e:	f00a fb10 	bl	800b792 <f_close>
    f_mount(NULL, "", 0);
 8001172:	2200      	movs	r2, #0
 8001174:	4904      	ldr	r1, [pc, #16]	; (8001188 <openConfigFile+0x36c>)
 8001176:	2000      	movs	r0, #0
 8001178:	f009 fce6 	bl	800ab48 <f_mount>
    return true;
 800117c:	2301      	movs	r3, #1
}
 800117e:	4618      	mov	r0, r3
 8001180:	f507 6798 	add.w	r7, r7, #1216	; 0x4c0
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}
 8001188:	0800ef6c 	.word	0x0800ef6c
 800118c:	0800ef70 	.word	0x0800ef70
 8001190:	48001000 	.word	0x48001000
 8001194:	0800ef88 	.word	0x0800ef88
 8001198:	0800efa0 	.word	0x0800efa0
 800119c:	0800efe8 	.word	0x0800efe8
 80011a0:	0800eff4 	.word	0x0800eff4
 80011a4:	0800f008 	.word	0x0800f008
 80011a8:	0800f038 	.word	0x0800f038
 80011ac:	0800f068 	.word	0x0800f068
 80011b0:	0800f06c 	.word	0x0800f06c
 80011b4:	0800f074 	.word	0x0800f074
 80011b8:	0800f080 	.word	0x0800f080
 80011bc:	0800f08c 	.word	0x0800f08c
 80011c0:	0800f0ac 	.word	0x0800f0ac
 80011c4:	0800f0cc 	.word	0x0800f0cc

080011c8 <writeToFile>:
bool writeToFile(float temp, float hum, uint8_t wcup, uint8_t wrez, uint16_t soil1, uint16_t soil2){
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	f2ad 5d2c 	subw	sp, sp, #1324	; 0x52c
 80011ce:	af02      	add	r7, sp, #8
 80011d0:	f107 040c 	add.w	r4, r7, #12
 80011d4:	ed84 0a00 	vstr	s0, [r4]
 80011d8:	f107 0408 	add.w	r4, r7, #8
 80011dc:	edc4 0a00 	vstr	s1, [r4]
 80011e0:	4605      	mov	r5, r0
 80011e2:	460c      	mov	r4, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	462a      	mov	r2, r5
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	1dbb      	adds	r3, r7, #6
 80011f0:	4622      	mov	r2, r4
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4602      	mov	r2, r0
 80011f8:	801a      	strh	r2, [r3, #0]
 80011fa:	1cbb      	adds	r3, r7, #2
 80011fc:	460a      	mov	r2, r1
 80011fe:	801a      	strh	r2, [r3, #0]
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8001200:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001204:	2201      	movs	r2, #1
 8001206:	49db      	ldr	r1, [pc, #876]	; (8001574 <writeToFile+0x3ac>)
 8001208:	4618      	mov	r0, r3
 800120a:	f009 fc9d 	bl	800ab48 <f_mount>
 800120e:	4603      	mov	r3, r0
 8001210:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
	if (fres != FR_OK) {
 8001214:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8001218:	2b00      	cmp	r3, #0
 800121a:	d012      	beq.n	8001242 <writeToFile+0x7a>
		myprintf("f_mount error (%i)\r\n", fres);
 800121c:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8001220:	4619      	mov	r1, r3
 8001222:	48d5      	ldr	r0, [pc, #852]	; (8001578 <writeToFile+0x3b0>)
 8001224:	f7ff fd56 	bl	8000cd4 <myprintf>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800122e:	48d3      	ldr	r0, [pc, #844]	; (800157c <writeToFile+0x3b4>)
 8001230:	f002 fc50 	bl	8003ad4 <HAL_GPIO_WritePin>
		f_mount(NULL, "", 0);
 8001234:	2200      	movs	r2, #0
 8001236:	49cf      	ldr	r1, [pc, #828]	; (8001574 <writeToFile+0x3ac>)
 8001238:	2000      	movs	r0, #0
 800123a:	f009 fc85 	bl	800ab48 <f_mount>
		return false;
 800123e:	2300      	movs	r3, #0
 8001240:	e1d1      	b.n	80015e6 <writeToFile+0x41e>
	}

	DWORD free_clusters, free_sectors, total_sectors;
	FATFS* getFreeFs;
	fres = f_getfree("", &free_clusters, &getFreeFs);
 8001242:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001246:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800124a:	4619      	mov	r1, r3
 800124c:	48c9      	ldr	r0, [pc, #804]	; (8001574 <writeToFile+0x3ac>)
 800124e:	f00a fd26 	bl	800bc9e <f_getfree>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
	if (fres != FR_OK) {
 8001258:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00d      	beq.n	800127c <writeToFile+0xb4>
		myprintf("f_getfree error (%i)\r\n", fres);
 8001260:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8001264:	4619      	mov	r1, r3
 8001266:	48c6      	ldr	r0, [pc, #792]	; (8001580 <writeToFile+0x3b8>)
 8001268:	f7ff fd34 	bl	8000cd4 <myprintf>
		HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001272:	48c2      	ldr	r0, [pc, #776]	; (800157c <writeToFile+0x3b4>)
 8001274:	f002 fc2e 	bl	8003ad4 <HAL_GPIO_WritePin>
		return false;
 8001278:	2300      	movs	r3, #0
 800127a:	e1b4      	b.n	80015e6 <writeToFile+0x41e>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800127c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001286:	3b02      	subs	r3, #2
 8001288:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
	free_sectors = free_clusters * getFreeFs->csize;
 800129a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80012a4:	461a      	mov	r2, r3
 80012a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	fb03 f302 	mul.w	r3, r3, r2
 80012b0:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
	myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80012b4:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80012b8:	0859      	lsrs	r1, r3, #1
 80012ba:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	461a      	mov	r2, r3
 80012c2:	48b0      	ldr	r0, [pc, #704]	; (8001584 <writeToFile+0x3bc>)
 80012c4:	f7ff fd06 	bl	8000cd4 <myprintf>

    fres = f_open(&fil, "data.txt", FA_WRITE | FA_OPEN_ALWAYS);
 80012c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012cc:	2212      	movs	r2, #18
 80012ce:	49ae      	ldr	r1, [pc, #696]	; (8001588 <writeToFile+0x3c0>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f009 fc81 	bl	800abd8 <f_open>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
    if(fres == FR_OK) {
 80012dc:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f040 811c 	bne.w	800151e <writeToFile+0x356>
    	fres = f_lseek(&fil,f_size(&fil));	// ukáže na konec souboru
 80012e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00a fa74 	bl	800b7e2 <f_lseek>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
    	if(fres != FR_OK){
 8001300:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00f      	beq.n	8001328 <writeToFile+0x160>
    		myprintf("f_lseek error (%i)\r\n", fres);
 8001308:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800130c:	4619      	mov	r1, r3
 800130e:	489f      	ldr	r0, [pc, #636]	; (800158c <writeToFile+0x3c4>)
 8001310:	f7ff fce0 	bl	8000cd4 <myprintf>
    		f_close(&fil);
 8001314:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001318:	4618      	mov	r0, r3
 800131a:	f00a fa3a 	bl	800b792 <f_close>
			f_mount(NULL, "", 0);
 800131e:	2200      	movs	r2, #0
 8001320:	4994      	ldr	r1, [pc, #592]	; (8001574 <writeToFile+0x3ac>)
 8001322:	2000      	movs	r0, #0
 8001324:	f009 fc10 	bl	800ab48 <f_mount>
    	}
    	myprintf("I was able to open 'data.txt' for writing\r\n");
 8001328:	4899      	ldr	r0, [pc, #612]	; (8001590 <writeToFile+0x3c8>)
 800132a:	f7ff fcd3 	bl	8000cd4 <myprintf>
		return false;
    }

    BYTE readBuf[128];
    RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BCD);
 800132e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001332:	2201      	movs	r2, #1
 8001334:	4619      	mov	r1, r3
 8001336:	4897      	ldr	r0, [pc, #604]	; (8001594 <writeToFile+0x3cc>)
 8001338:	f005 f88d 	bl	8006456 <HAL_RTC_GetDate>
    RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2201      	movs	r2, #1
 8001342:	4619      	mov	r1, r3
 8001344:	4893      	ldr	r0, [pc, #588]	; (8001594 <writeToFile+0x3cc>)
 8001346:	f004 ff81 	bl	800624c <HAL_RTC_GetTime>
    //float *temp, float *hum, uint8_t *wcup, uint8_t *wrez, uint16_t *soil1, uint16_t *soil2
	char *write_buffer = (char*)malloc(128);
 800134a:	2080      	movs	r0, #128	; 0x80
 800134c:	f00a fe6c 	bl	800c028 <malloc>
 8001350:	4603      	mov	r3, r0
 8001352:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
	*write_buffer = '\0';
 8001356:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
	sprintf(write_buffer+strlen(write_buffer),"\n");
 800135e:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 8001362:	f7fe ff3f 	bl	80001e4 <strlen>
 8001366:	4602      	mov	r2, r0
 8001368:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800136c:	4413      	add	r3, r2
 800136e:	498a      	ldr	r1, [pc, #552]	; (8001598 <writeToFile+0x3d0>)
 8001370:	4618      	mov	r0, r3
 8001372:	f00b fcf5 	bl	800cd60 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," %02d.%02d.%02d ;",bcdToDec(sDate.Date),bcdToDec(sDate.Month),bcdToDec(sDate.Year));
 8001376:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 800137a:	f7fe ff33 	bl	80001e4 <strlen>
 800137e:	4602      	mov	r2, r0
 8001380:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8001384:	189c      	adds	r4, r3, r2
 8001386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138a:	789b      	ldrb	r3, [r3, #2]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fc1b 	bl	8000bc8 <bcdToDec>
 8001392:	4603      	mov	r3, r0
 8001394:	461d      	mov	r5, r3
 8001396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139a:	785b      	ldrb	r3, [r3, #1]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fc13 	bl	8000bc8 <bcdToDec>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461e      	mov	r6, r3
 80013a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013aa:	78db      	ldrb	r3, [r3, #3]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fc0b 	bl	8000bc8 <bcdToDec>
 80013b2:	4603      	mov	r3, r0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	4633      	mov	r3, r6
 80013b8:	462a      	mov	r2, r5
 80013ba:	4978      	ldr	r1, [pc, #480]	; (800159c <writeToFile+0x3d4>)
 80013bc:	4620      	mov	r0, r4
 80013be:	f00b fccf 	bl	800cd60 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," %02d:%02d:%02d ;",bcdToDec(sTime.Hours),bcdToDec(sTime.Minutes),bcdToDec(sTime.Seconds));
 80013c2:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 80013c6:	f7fe ff0d 	bl	80001e4 <strlen>
 80013ca:	4602      	mov	r2, r0
 80013cc:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80013d0:	189c      	adds	r4, r3, r2
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fbf5 	bl	8000bc8 <bcdToDec>
 80013de:	4603      	mov	r3, r0
 80013e0:	461d      	mov	r5, r3
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	785b      	ldrb	r3, [r3, #1]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fbed 	bl	8000bc8 <bcdToDec>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461e      	mov	r6, r3
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	789b      	ldrb	r3, [r3, #2]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fbe5 	bl	8000bc8 <bcdToDec>
 80013fe:	4603      	mov	r3, r0
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4633      	mov	r3, r6
 8001404:	462a      	mov	r2, r5
 8001406:	4966      	ldr	r1, [pc, #408]	; (80015a0 <writeToFile+0x3d8>)
 8001408:	4620      	mov	r0, r4
 800140a:	f00b fca9 	bl	800cd60 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," %.2f ;",temp);
 800140e:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 8001412:	f7fe fee7 	bl	80001e4 <strlen>
 8001416:	4602      	mov	r2, r0
 8001418:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800141c:	189c      	adds	r4, r3, r2
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	f7ff f8a0 	bl	8000568 <__aeabi_f2d>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	495d      	ldr	r1, [pc, #372]	; (80015a4 <writeToFile+0x3dc>)
 800142e:	4620      	mov	r0, r4
 8001430:	f00b fc96 	bl	800cd60 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," %.2f ;",hum);
 8001434:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 8001438:	f7fe fed4 	bl	80001e4 <strlen>
 800143c:	4602      	mov	r2, r0
 800143e:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8001442:	189c      	adds	r4, r3, r2
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	f7ff f88d 	bl	8000568 <__aeabi_f2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4954      	ldr	r1, [pc, #336]	; (80015a4 <writeToFile+0x3dc>)
 8001454:	4620      	mov	r0, r4
 8001456:	f00b fc83 	bl	800cd60 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," %i ;",wcup);
 800145a:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 800145e:	f7fe fec1 	bl	80001e4 <strlen>
 8001462:	4602      	mov	r2, r0
 8001464:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8001468:	1898      	adds	r0, r3, r2
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	494d      	ldr	r1, [pc, #308]	; (80015a8 <writeToFile+0x3e0>)
 8001472:	f00b fc75 	bl	800cd60 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," %i ;",wrez);
 8001476:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 800147a:	f7fe feb3 	bl	80001e4 <strlen>
 800147e:	4602      	mov	r2, r0
 8001480:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8001484:	1898      	adds	r0, r3, r2
 8001486:	1dbb      	adds	r3, r7, #6
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	4946      	ldr	r1, [pc, #280]	; (80015a8 <writeToFile+0x3e0>)
 800148e:	f00b fc67 	bl	800cd60 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," %i ;",soil1);
 8001492:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 8001496:	f7fe fea5 	bl	80001e4 <strlen>
 800149a:	4602      	mov	r2, r0
 800149c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80014a0:	1898      	adds	r0, r3, r2
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	493f      	ldr	r1, [pc, #252]	; (80015a8 <writeToFile+0x3e0>)
 80014aa:	f00b fc59 	bl	800cd60 <siprintf>
	sprintf(write_buffer+strlen(write_buffer)," %i ;",soil2);
 80014ae:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 80014b2:	f7fe fe97 	bl	80001e4 <strlen>
 80014b6:	4602      	mov	r2, r0
 80014b8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80014bc:	1898      	adds	r0, r3, r2
 80014be:	1cbb      	adds	r3, r7, #2
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	4938      	ldr	r1, [pc, #224]	; (80015a8 <writeToFile+0x3e0>)
 80014c6:	f00b fc4b 	bl	800cd60 <siprintf>

    //Copy in a string
    strncpy((char*)readBuf, write_buffer, strlen(write_buffer));
 80014ca:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 80014ce:	f7fe fe89 	bl	80001e4 <strlen>
 80014d2:	4602      	mov	r2, r0
 80014d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d8:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 80014dc:	4618      	mov	r0, r3
 80014de:	f00b fc87 	bl	800cdf0 <strncpy>
    UINT bytesWrote;
    myprintf(readBuf);
 80014e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fbf4 	bl	8000cd4 <myprintf>
    myprintf("\n\r");
 80014ec:	482f      	ldr	r0, [pc, #188]	; (80015ac <writeToFile+0x3e4>)
 80014ee:	f7ff fbf1 	bl	8000cd4 <myprintf>
    fres = f_write(&fil, readBuf, strlen(readBuf), &bytesWrote);
 80014f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe fe74 	bl	80001e4 <strlen>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001506:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 800150a:	f009 fedb 	bl	800b2c4 <f_write>
 800150e:	4603      	mov	r3, r0
 8001510:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
    if(fres == FR_OK) {
 8001514:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8001518:	2b00      	cmp	r3, #0
 800151a:	d14d      	bne.n	80015b8 <writeToFile+0x3f0>
 800151c:	e017      	b.n	800154e <writeToFile+0x386>
    	myprintf("f_open error (%i)\r\n", fres);
 800151e:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8001522:	4619      	mov	r1, r3
 8001524:	4822      	ldr	r0, [pc, #136]	; (80015b0 <writeToFile+0x3e8>)
 8001526:	f7ff fbd5 	bl	8000cd4 <myprintf>
    	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001530:	4812      	ldr	r0, [pc, #72]	; (800157c <writeToFile+0x3b4>)
 8001532:	f002 facf 	bl	8003ad4 <HAL_GPIO_WritePin>
    	f_close(&fil);
 8001536:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800153a:	4618      	mov	r0, r3
 800153c:	f00a f929 	bl	800b792 <f_close>
		f_mount(NULL, "", 0);
 8001540:	2200      	movs	r2, #0
 8001542:	490c      	ldr	r1, [pc, #48]	; (8001574 <writeToFile+0x3ac>)
 8001544:	2000      	movs	r0, #0
 8001546:	f009 faff 	bl	800ab48 <f_mount>
		return false;
 800154a:	2300      	movs	r3, #0
 800154c:	e04b      	b.n	80015e6 <writeToFile+0x41e>
    	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	4817      	ldr	r0, [pc, #92]	; (80015b4 <writeToFile+0x3ec>)
 8001558:	f7ff fbbc 	bl	8000cd4 <myprintf>
    	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
    	f_close(&fil);
		f_mount(NULL, "", 0);
		return false;
    }
    f_close(&fil);
 800155c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001560:	4618      	mov	r0, r3
 8001562:	f00a f916 	bl	800b792 <f_close>
	f_mount(NULL, "", 0);
 8001566:	2200      	movs	r2, #0
 8001568:	4902      	ldr	r1, [pc, #8]	; (8001574 <writeToFile+0x3ac>)
 800156a:	2000      	movs	r0, #0
 800156c:	f009 faec 	bl	800ab48 <f_mount>
	return true;
 8001570:	2301      	movs	r3, #1
 8001572:	e038      	b.n	80015e6 <writeToFile+0x41e>
 8001574:	0800ef6c 	.word	0x0800ef6c
 8001578:	0800ef70 	.word	0x0800ef70
 800157c:	48001000 	.word	0x48001000
 8001580:	0800ef88 	.word	0x0800ef88
 8001584:	0800efa0 	.word	0x0800efa0
 8001588:	0800f0e0 	.word	0x0800f0e0
 800158c:	0800f0ec 	.word	0x0800f0ec
 8001590:	0800f104 	.word	0x0800f104
 8001594:	200004f0 	.word	0x200004f0
 8001598:	0800f130 	.word	0x0800f130
 800159c:	0800f134 	.word	0x0800f134
 80015a0:	0800f148 	.word	0x0800f148
 80015a4:	0800f15c 	.word	0x0800f15c
 80015a8:	0800f164 	.word	0x0800f164
 80015ac:	0800ef34 	.word	0x0800ef34
 80015b0:	0800eff4 	.word	0x0800eff4
 80015b4:	0800f16c 	.word	0x0800f16c
    	myprintf("f_write error (%i)\r\n",fres);
 80015b8:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80015bc:	4619      	mov	r1, r3
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <writeToFile+0x428>)
 80015c0:	f7ff fb88 	bl	8000cd4 <myprintf>
    	HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);// red led
 80015c4:	2201      	movs	r2, #1
 80015c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ca:	480a      	ldr	r0, [pc, #40]	; (80015f4 <writeToFile+0x42c>)
 80015cc:	f002 fa82 	bl	8003ad4 <HAL_GPIO_WritePin>
    	f_close(&fil);
 80015d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015d4:	4618      	mov	r0, r3
 80015d6:	f00a f8dc 	bl	800b792 <f_close>
		f_mount(NULL, "", 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <writeToFile+0x430>)
 80015de:	2000      	movs	r0, #0
 80015e0:	f009 fab2 	bl	800ab48 <f_mount>
		return false;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	f207 5724 	addw	r7, r7, #1316	; 0x524
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f0:	0800f190 	.word	0x0800f190
 80015f4:	48001000 	.word	0x48001000
 80015f8:	0800ef6c 	.word	0x0800ef6c

080015fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015fc:	b5b0      	push	{r4, r5, r7, lr}
 80015fe:	b08c      	sub	sp, #48	; 0x30
 8001600:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001602:	f001 f8b7 	bl	8002774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001606:	f000 f985 	bl	8001914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160a:	f000 fbc7 	bl	8001d9c <MX_GPIO_Init>
  MX_I2C1_Init();
 800160e:	f000 fa5d 	bl	8001acc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001612:	f000 faf5 	bl	8001c00 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8001616:	f000 fb9f 	bl	8001d58 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 800161a:	f000 f9e7 	bl	80019ec <MX_ADC1_Init>
  MX_RTC_Init();
 800161e:	f000 fa95 	bl	8001b4c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001622:	f000 fb69 	bl	8001cf8 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001626:	f006 fea7 	bl	8008378 <MX_FATFS_Init>
  MX_SPI2_Init();
 800162a:	f000 fb27 	bl	8001c7c <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 800162e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001632:	f001 f905 	bl	8002840 <HAL_Delay>

  sht3x_handle_t handle = setupSHT();
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fb70 	bl	8000d20 <setupSHT>

  myprintf("Flowerpot started\r\n");
 8001640:	48a3      	ldr	r0, [pc, #652]	; (80018d0 <main+0x2d4>)
 8001642:	f7ff fb47 	bl	8000cd4 <myprintf>
  // Read temperature and humidity.
  float temperature, humidity;
  uint8_t watter_cup, watter_rez;
  uint16_t soil1, soil2;
  readData(&handle, &temperature, &humidity, &watter_cup, &watter_rez, &soil1, &soil2);
 8001646:	f107 040b 	add.w	r4, r7, #11
 800164a:	f107 020c 	add.w	r2, r7, #12
 800164e:	f107 0110 	add.w	r1, r7, #16
 8001652:	f107 0014 	add.w	r0, r7, #20
 8001656:	1dbb      	adds	r3, r7, #6
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	f107 030a 	add.w	r3, r7, #10
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	4623      	mov	r3, r4
 8001668:	f7ff fb8c 	bl	8000d84 <readData>
  myprintf("Temperature: %.2fC, humidity: %.2f%%RH\n\r", temperature, humidity);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff7a 	bl	8000568 <__aeabi_f2d>
 8001674:	4604      	mov	r4, r0
 8001676:	460d      	mov	r5, r1
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff74 	bl	8000568 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9cd 2300 	strd	r2, r3, [sp]
 8001688:	4622      	mov	r2, r4
 800168a:	462b      	mov	r3, r5
 800168c:	4891      	ldr	r0, [pc, #580]	; (80018d4 <main+0x2d8>)
 800168e:	f7ff fb21 	bl	8000cd4 <myprintf>
    uint8_t *hum = (uint8_t *)malloc(sizeof(uint8_t));
    uint8_t *temp = (uint8_t *)malloc(sizeof(uint8_t));*/
    uint8_t modeset;
	uint8_t humset;
	uint8_t tempset;
    if(!openConfigFile(&modeset, &humset, &tempset)){
 8001692:	1cfa      	adds	r2, r7, #3
 8001694:	1d39      	adds	r1, r7, #4
 8001696:	1d7b      	adds	r3, r7, #5
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fbbf 	bl	8000e1c <openConfigFile>
 800169e:	4603      	mov	r3, r0
 80016a0:	f083 0301 	eor.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <main+0xb6>
    	myprintf("Something fucked up during opening of config file!\n\r");
 80016aa:	488b      	ldr	r0, [pc, #556]	; (80018d8 <main+0x2dc>)
 80016ac:	f7ff fb12 	bl	8000cd4 <myprintf>
 80016b0:	e007      	b.n	80016c2 <main+0xc6>
    }else{
    	myprintf("Modeset: %i, humset: %i, tempset: %i\n\r",modeset,humset,tempset);
 80016b2:	797b      	ldrb	r3, [r7, #5]
 80016b4:	4619      	mov	r1, r3
 80016b6:	793b      	ldrb	r3, [r7, #4]
 80016b8:	461a      	mov	r2, r3
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	4887      	ldr	r0, [pc, #540]	; (80018dc <main+0x2e0>)
 80016be:	f7ff fb09 	bl	8000cd4 <myprintf>
    HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BCD);*/

    //writeToFile(temperature, humidity, watter_cup, watter_rez, soil1, soil2);


    getLine();
 80016c2:	f7ff fa9d 	bl	8000c00 <getLine>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    int index;
    char tmp[2];
    bool timeset = false;
 80016c6:	2300      	movs	r3, #0
 80016c8:	77fb      	strb	r3, [r7, #31]
    myprintf("Waintig for time sequence: ");
 80016ca:	4885      	ldr	r0, [pc, #532]	; (80018e0 <main+0x2e4>)
 80016cc:	f7ff fb02 	bl	8000cd4 <myprintf>
    while (1)
    {
    /* USER CODE END WHILE */
    	while(!timeset){// wait to receive current date and time
 80016d0:	e0b0      	b.n	8001834 <main+0x238>

    		if(RXDone){
 80016d2:	4b84      	ldr	r3, [pc, #528]	; (80018e4 <main+0x2e8>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80ac 	beq.w	8001834 <main+0x238>
    			myprintf(RXBuffer);
 80016dc:	4882      	ldr	r0, [pc, #520]	; (80018e8 <main+0x2ec>)
 80016de:	f7ff faf9 	bl	8000cd4 <myprintf>
    			myprintf("\n\r");
 80016e2:	4882      	ldr	r0, [pc, #520]	; (80018ec <main+0x2f0>)
 80016e4:	f7ff faf6 	bl	8000cd4 <myprintf>
    			//030622
    			//205420
    			if(strlen(RXBuffer) != 13){// včetně ukončovacího znaku
 80016e8:	487f      	ldr	r0, [pc, #508]	; (80018e8 <main+0x2ec>)
 80016ea:	f7fe fd7b 	bl	80001e4 <strlen>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b0d      	cmp	r3, #13
 80016f2:	d005      	beq.n	8001700 <main+0x104>
    				myprintf("Wrong structure!\n\r");
 80016f4:	487e      	ldr	r0, [pc, #504]	; (80018f0 <main+0x2f4>)
 80016f6:	f7ff faed 	bl	8000cd4 <myprintf>
    				getLine();
 80016fa:	f7ff fa81 	bl	8000c00 <getLine>
 80016fe:	e099      	b.n	8001834 <main+0x238>
    			}else{
    				myprintf("Copying time to memory..");
 8001700:	487c      	ldr	r0, [pc, #496]	; (80018f4 <main+0x2f8>)
 8001702:	f7ff fae7 	bl	8000cd4 <myprintf>
 8001706:	4b78      	ldr	r3, [pc, #480]	; (80018e8 <main+0x2ec>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
    				memcpy(tmp,&RXBuffer[0],2);
 800170c:	803b      	strh	r3, [r7, #0]
    				sDate.Date = decToBcd(atoi(tmp));
 800170e:	463b      	mov	r3, r7
 8001710:	4618      	mov	r0, r3
 8001712:	f00a fc49 	bl	800bfa8 <atoi>
 8001716:	4603      	mov	r3, r0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fa62 	bl	8000be4 <decToBcd>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	4b74      	ldr	r3, [pc, #464]	; (80018f8 <main+0x2fc>)
 8001726:	709a      	strb	r2, [r3, #2]
 8001728:	4b6f      	ldr	r3, [pc, #444]	; (80018e8 <main+0x2ec>)
 800172a:	885b      	ldrh	r3, [r3, #2]
 800172c:	b29b      	uxth	r3, r3
    				memcpy(tmp,&RXBuffer[2],2);
 800172e:	803b      	strh	r3, [r7, #0]
    				sDate.Month = decToBcd(atoi(tmp));
 8001730:	463b      	mov	r3, r7
 8001732:	4618      	mov	r0, r3
 8001734:	f00a fc38 	bl	800bfa8 <atoi>
 8001738:	4603      	mov	r3, r0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fa51 	bl	8000be4 <decToBcd>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <main+0x2fc>)
 8001748:	705a      	strb	r2, [r3, #1]
 800174a:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <main+0x2ec>)
 800174c:	889b      	ldrh	r3, [r3, #4]
 800174e:	b29b      	uxth	r3, r3
    				memcpy(tmp,&RXBuffer[4],2);
 8001750:	803b      	strh	r3, [r7, #0]
    				sDate.Year = decToBcd(atoi(tmp));
 8001752:	463b      	mov	r3, r7
 8001754:	4618      	mov	r0, r3
 8001756:	f00a fc27 	bl	800bfa8 <atoi>
 800175a:	4603      	mov	r3, r0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fa40 	bl	8000be4 <decToBcd>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <main+0x2fc>)
 800176a:	70da      	strb	r2, [r3, #3]
 800176c:	4b5e      	ldr	r3, [pc, #376]	; (80018e8 <main+0x2ec>)
 800176e:	88db      	ldrh	r3, [r3, #6]
 8001770:	b29b      	uxth	r3, r3
    				memcpy(tmp,&RXBuffer[6],2);
 8001772:	803b      	strh	r3, [r7, #0]
					sTime.Hours = decToBcd(atoi(tmp));
 8001774:	463b      	mov	r3, r7
 8001776:	4618      	mov	r0, r3
 8001778:	f00a fc16 	bl	800bfa8 <atoi>
 800177c:	4603      	mov	r3, r0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fa2f 	bl	8000be4 <decToBcd>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	4b5c      	ldr	r3, [pc, #368]	; (80018fc <main+0x300>)
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <main+0x2ec>)
 8001790:	891b      	ldrh	r3, [r3, #8]
 8001792:	b29b      	uxth	r3, r3
					memcpy(tmp,&RXBuffer[8],2);
 8001794:	803b      	strh	r3, [r7, #0]
					sTime.Minutes = decToBcd(atoi(tmp));
 8001796:	463b      	mov	r3, r7
 8001798:	4618      	mov	r0, r3
 800179a:	f00a fc05 	bl	800bfa8 <atoi>
 800179e:	4603      	mov	r3, r0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fa1e 	bl	8000be4 <decToBcd>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <main+0x300>)
 80017ae:	705a      	strb	r2, [r3, #1]
 80017b0:	4b4d      	ldr	r3, [pc, #308]	; (80018e8 <main+0x2ec>)
 80017b2:	895b      	ldrh	r3, [r3, #10]
 80017b4:	b29b      	uxth	r3, r3
					memcpy(tmp,&RXBuffer[10],2);
 80017b6:	803b      	strh	r3, [r7, #0]
					sTime.Seconds = decToBcd(atoi(tmp));
 80017b8:	463b      	mov	r3, r7
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00a fbf4 	bl	800bfa8 <atoi>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fa0d 	bl	8000be4 <decToBcd>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <main+0x300>)
 80017d0:	709a      	strb	r2, [r3, #2]
					HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 80017d2:	2201      	movs	r2, #1
 80017d4:	4949      	ldr	r1, [pc, #292]	; (80018fc <main+0x300>)
 80017d6:	484a      	ldr	r0, [pc, #296]	; (8001900 <main+0x304>)
 80017d8:	f004 fc7b 	bl	80060d2 <HAL_RTC_SetTime>
					HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BCD);
 80017dc:	2201      	movs	r2, #1
 80017de:	4946      	ldr	r1, [pc, #280]	; (80018f8 <main+0x2fc>)
 80017e0:	4847      	ldr	r0, [pc, #284]	; (8001900 <main+0x304>)
 80017e2:	f004 fd91 	bl	8006308 <HAL_RTC_SetDate>
					readData(&handle, &temperature, &humidity, &watter_cup, &watter_rez, &soil1, &soil2);
 80017e6:	f107 040b 	add.w	r4, r7, #11
 80017ea:	f107 020c 	add.w	r2, r7, #12
 80017ee:	f107 0110 	add.w	r1, r7, #16
 80017f2:	f107 0014 	add.w	r0, r7, #20
 80017f6:	1dbb      	adds	r3, r7, #6
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	f107 030a 	add.w	r3, r7, #10
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	4623      	mov	r3, r4
 8001808:	f7ff fabc 	bl	8000d84 <readData>
					writeToFile(temperature, humidity, watter_cup, watter_rez, soil1, soil2);
 800180c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001810:	ed97 7a03 	vldr	s14, [r7, #12]
 8001814:	7af8      	ldrb	r0, [r7, #11]
 8001816:	7ab9      	ldrb	r1, [r7, #10]
 8001818:	893a      	ldrh	r2, [r7, #8]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	eef0 0a47 	vmov.f32	s1, s14
 8001820:	eeb0 0a67 	vmov.f32	s0, s15
 8001824:	f7ff fcd0 	bl	80011c8 <writeToFile>
					myprintf("Done!\n\r");
 8001828:	4836      	ldr	r0, [pc, #216]	; (8001904 <main+0x308>)
 800182a:	f7ff fa53 	bl	8000cd4 <myprintf>
					timeset = true;
 800182e:	2301      	movs	r3, #1
 8001830:	77fb      	strb	r3, [r7, #31]
					break;
 8001832:	e006      	b.n	8001842 <main+0x246>
    	while(!timeset){// wait to receive current date and time
 8001834:	7ffb      	ldrb	r3, [r7, #31]
 8001836:	f083 0301 	eor.w	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	f47f af48 	bne.w	80016d2 <main+0xd6>
    			}
			}
    	}
    	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001842:	2201      	movs	r2, #1
 8001844:	492d      	ldr	r1, [pc, #180]	; (80018fc <main+0x300>)
 8001846:	482e      	ldr	r0, [pc, #184]	; (8001900 <main+0x304>)
 8001848:	f004 fd00 	bl	800624c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800184c:	2201      	movs	r2, #1
 800184e:	492a      	ldr	r1, [pc, #168]	; (80018f8 <main+0x2fc>)
 8001850:	482b      	ldr	r0, [pc, #172]	; (8001900 <main+0x304>)
 8001852:	f004 fe00 	bl	8006456 <HAL_RTC_GetDate>
		myprintf("Date: %02d.%02d.%02d\t",bcdToDec(sDate.Date),bcdToDec(sDate.Month),bcdToDec(sDate.Year));
 8001856:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <main+0x2fc>)
 8001858:	789b      	ldrb	r3, [r3, #2]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff f9b4 	bl	8000bc8 <bcdToDec>
 8001860:	4603      	mov	r3, r0
 8001862:	461c      	mov	r4, r3
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <main+0x2fc>)
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff f9ad 	bl	8000bc8 <bcdToDec>
 800186e:	4603      	mov	r3, r0
 8001870:	461d      	mov	r5, r3
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <main+0x2fc>)
 8001874:	78db      	ldrb	r3, [r3, #3]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f9a6 	bl	8000bc8 <bcdToDec>
 800187c:	4603      	mov	r3, r0
 800187e:	462a      	mov	r2, r5
 8001880:	4621      	mov	r1, r4
 8001882:	4821      	ldr	r0, [pc, #132]	; (8001908 <main+0x30c>)
 8001884:	f7ff fa26 	bl	8000cd4 <myprintf>
		myprintf("Time: %02d:%02d:%02d\r\n",bcdToDec(sTime.Hours),bcdToDec(sTime.Minutes),bcdToDec(sTime.Seconds));
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <main+0x300>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff f99b 	bl	8000bc8 <bcdToDec>
 8001892:	4603      	mov	r3, r0
 8001894:	461c      	mov	r4, r3
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <main+0x300>)
 8001898:	785b      	ldrb	r3, [r3, #1]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f994 	bl	8000bc8 <bcdToDec>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461d      	mov	r5, r3
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <main+0x300>)
 80018a6:	789b      	ldrb	r3, [r3, #2]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff f98d 	bl	8000bc8 <bcdToDec>
 80018ae:	4603      	mov	r3, r0
 80018b0:	462a      	mov	r2, r5
 80018b2:	4621      	mov	r1, r4
 80018b4:	4815      	ldr	r0, [pc, #84]	; (800190c <main+0x310>)
 80018b6:	f7ff fa0d 	bl	8000cd4 <myprintf>

    /* USER CODE BEGIN 3 */
        //Blink the LED every second
  	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80018ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018be:	4814      	ldr	r0, [pc, #80]	; (8001910 <main+0x314>)
 80018c0:	f002 f920 	bl	8003b04 <HAL_GPIO_TogglePin>
  	  HAL_Delay(1000);
 80018c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c8:	f000 ffba 	bl	8002840 <HAL_Delay>
    	while(!timeset){// wait to receive current date and time
 80018cc:	e7b2      	b.n	8001834 <main+0x238>
 80018ce:	bf00      	nop
 80018d0:	0800f1a8 	.word	0x0800f1a8
 80018d4:	0800f1bc 	.word	0x0800f1bc
 80018d8:	0800f1e8 	.word	0x0800f1e8
 80018dc:	0800f220 	.word	0x0800f220
 80018e0:	0800f248 	.word	0x0800f248
 80018e4:	20000410 	.word	0x20000410
 80018e8:	20000530 	.word	0x20000530
 80018ec:	0800ef34 	.word	0x0800ef34
 80018f0:	0800f264 	.word	0x0800f264
 80018f4:	0800f278 	.word	0x0800f278
 80018f8:	200004e8 	.word	0x200004e8
 80018fc:	200003fc 	.word	0x200003fc
 8001900:	200004f0 	.word	0x200004f0
 8001904:	0800f294 	.word	0x0800f294
 8001908:	0800f29c 	.word	0x0800f29c
 800190c:	0800f2b4 	.word	0x0800f2b4
 8001910:	48001000 	.word	0x48001000

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b09e      	sub	sp, #120	; 0x78
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800191e:	2228      	movs	r2, #40	; 0x28
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f00a fb96 	bl	800c054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001938:	463b      	mov	r3, r7
 800193a:	223c      	movs	r2, #60	; 0x3c
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f00a fb88 	bl	800c054 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001944:	230b      	movs	r3, #11
 8001946:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001948:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800194c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001952:	2301      	movs	r3, #1
 8001954:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001956:	2310      	movs	r3, #16
 8001958:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800195a:	2301      	movs	r3, #1
 800195c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195e:	2302      	movs	r3, #2
 8001960:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001966:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001968:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800196c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001972:	4618      	mov	r0, r3
 8001974:	f003 f82e 	bl	80049d4 <HAL_RCC_OscConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800197e:	f000 faa1 	bl	8001ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001982:	230f      	movs	r3, #15
 8001984:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001986:	2302      	movs	r3, #2
 8001988:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800198e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001998:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800199c:	2101      	movs	r1, #1
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 ff20 	bl	80057e4 <HAL_RCC_ClockConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019aa:	f000 fa8b 	bl	8001ec4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <SystemClock_Config+0xd4>)
 80019b0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80019b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80019c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	4618      	mov	r0, r3
 80019d0:	f004 f93e 	bl	8005c50 <HAL_RCCEx_PeriphCLKConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80019da:	f000 fa73 	bl	8001ec4 <Error_Handler>
  }
}
 80019de:	bf00      	nop
 80019e0:	3778      	adds	r7, #120	; 0x78
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	000300a1 	.word	0x000300a1

080019ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
 8001a0c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a16:	4b2c      	ldr	r3, [pc, #176]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a48:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a58:	2204      	movs	r2, #4
 8001a5a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a68:	4817      	ldr	r0, [pc, #92]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a6a:	f000 ff0d 	bl	8002888 <HAL_ADC_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001a74:	f000 fa26 	bl	8001ec4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	4619      	mov	r1, r3
 8001a82:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001a84:	f001 fbcc 	bl	8003220 <HAL_ADCEx_MultiModeConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001a8e:	f000 fa19 	bl	8001ec4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a92:	2302      	movs	r3, #2
 8001a94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <MX_ADC1_Init+0xdc>)
 8001ab0:	f001 f8ca 	bl	8002c48 <HAL_ADC_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001aba:	f000 fa03 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	; 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000414 	.word	0x20000414

08001acc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <MX_I2C1_Init+0x78>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <MX_I2C1_Init+0x7c>)
 8001ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b06:	480e      	ldr	r0, [pc, #56]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001b08:	f002 f816 	bl	8003b38 <HAL_I2C_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b12:	f000 f9d7 	bl	8001ec4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b16:	2100      	movs	r1, #0
 8001b18:	4809      	ldr	r0, [pc, #36]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001b1a:	f002 fde5 	bl	80046e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b24:	f000 f9ce 	bl	8001ec4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001b2c:	f002 fe27 	bl	800477e <HAL_I2CEx_ConfigDigitalFilter>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b36:	f000 f9c5 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200003b0 	.word	0x200003b0
 8001b44:	40005400 	.word	0x40005400
 8001b48:	2000090e 	.word	0x2000090e

08001b4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b60:	2300      	movs	r3, #0
 8001b62:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <MX_RTC_Init+0xac>)
 8001b66:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <MX_RTC_Init+0xb0>)
 8001b68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b6a:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <MX_RTC_Init+0xac>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <MX_RTC_Init+0xac>)
 8001b72:	227f      	movs	r2, #127	; 0x7f
 8001b74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <MX_RTC_Init+0xac>)
 8001b78:	22ff      	movs	r2, #255	; 0xff
 8001b7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <MX_RTC_Init+0xac>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <MX_RTC_Init+0xac>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MX_RTC_Init+0xac>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b8e:	481a      	ldr	r0, [pc, #104]	; (8001bf8 <MX_RTC_Init+0xac>)
 8001b90:	f004 fa0e 	bl	8005fb0 <HAL_RTC_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001b9a:	f000 f993 	bl	8001ec4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	480f      	ldr	r0, [pc, #60]	; (8001bf8 <MX_RTC_Init+0xac>)
 8001bba:	f004 fa8a 	bl	80060d2 <HAL_RTC_SetTime>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001bc4:	f000 f97e 	bl	8001ec4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001bd8:	463b      	mov	r3, r7
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <MX_RTC_Init+0xac>)
 8001be0:	f004 fb92 	bl	8006308 <HAL_RTC_SetDate>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001bea:	f000 f96b 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200004f0 	.word	0x200004f0
 8001bfc:	40002800 	.word	0x40002800

08001c00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <MX_SPI1_Init+0x78>)
 8001c08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c36:	2230      	movs	r2, #48	; 0x30
 8001c38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c4e:	2207      	movs	r2, #7
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_SPI1_Init+0x74>)
 8001c60:	f004 fcd8 	bl	8006614 <HAL_SPI_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c6a:	f000 f92b 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200005b0 	.word	0x200005b0
 8001c78:	40013000 	.word	0x40013000

08001c7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001c82:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <MX_SPI2_Init+0x78>)
 8001c84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001c96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001cb2:	2238      	movs	r2, #56	; 0x38
 8001cb4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001cca:	2207      	movs	r2, #7
 8001ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_SPI2_Init+0x74>)
 8001cdc:	f004 fc9a 	bl	8006614 <HAL_SPI_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ce6:	f000 f8ed 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000034c 	.word	0x2000034c
 8001cf4:	40003800 	.word	0x40003800

08001cf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001cfe:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <MX_USART1_UART_Init+0x5c>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_USART1_UART_Init+0x58>)
 8001d3c:	f005 f88c 	bl	8006e58 <HAL_UART_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d46:	f000 f8bd 	bl	8001ec4 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */
  //HAL_NVIC_SetPriority(USART1_IRQn,0,0);
  //HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE END USART1_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000464 	.word	0x20000464
 8001d54:	40013800 	.word	0x40013800

08001d58 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <MX_USB_PCD_Init+0x3c>)
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <MX_USB_PCD_Init+0x40>)
 8001d60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <MX_USB_PCD_Init+0x3c>)
 8001d64:	2208      	movs	r2, #8
 8001d66:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <MX_USB_PCD_Init+0x3c>)
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_USB_PCD_Init+0x3c>)
 8001d70:	2202      	movs	r2, #2
 8001d72:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <MX_USB_PCD_Init+0x3c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <MX_USB_PCD_Init+0x3c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001d80:	4804      	ldr	r0, [pc, #16]	; (8001d94 <MX_USB_PCD_Init+0x3c>)
 8001d82:	f002 fd48 	bl	8004816 <HAL_PCD_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001d8c:	f000 f89a 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000634 	.word	0x20000634
 8001d98:	40005c00 	.word	0x40005c00

08001d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	4a40      	ldr	r2, [pc, #256]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001db8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dbc:	6153      	str	r3, [r2, #20]
 8001dbe:	4b3e      	ldr	r3, [pc, #248]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	4a3a      	ldr	r2, [pc, #232]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001dd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dd4:	6153      	str	r3, [r2, #20]
 8001dd6:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	4a34      	ldr	r2, [pc, #208]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dec:	6153      	str	r3, [r2, #20]
 8001dee:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	4a2e      	ldr	r2, [pc, #184]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	6153      	str	r3, [r2, #20]
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	4a28      	ldr	r2, [pc, #160]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e1c:	6153      	str	r3, [r2, #20]
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <MX_GPIO_Init+0x11c>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001e30:	4822      	ldr	r0, [pc, #136]	; (8001ebc <MX_GPIO_Init+0x120>)
 8001e32:	f001 fe4f 	bl	8003ad4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2102      	movs	r1, #2
 8001e3a:	4821      	ldr	r0, [pc, #132]	; (8001ec0 <MX_GPIO_Init+0x124>)
 8001e3c:	f001 fe4a 	bl	8003ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001e40:	2337      	movs	r3, #55	; 0x37
 8001e42:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e44:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	4819      	ldr	r0, [pc, #100]	; (8001ebc <MX_GPIO_Init+0x120>)
 8001e56:	f001 fcc3 	bl	80037e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001e5a:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001e5e:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	4812      	ldr	r0, [pc, #72]	; (8001ebc <MX_GPIO_Init+0x120>)
 8001e74:	f001 fcb4 	bl	80037e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8e:	f001 fca7 	bl	80037e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001e92:	2302      	movs	r3, #2
 8001e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <MX_GPIO_Init+0x124>)
 8001eaa:	f001 fc99 	bl	80037e0 <HAL_GPIO_Init>

}
 8001eae:	bf00      	nop
 8001eb0:	3728      	adds	r7, #40	; 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	48001000 	.word	0x48001000
 8001ec0:	48000400 	.word	0x48000400

08001ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec8:	b672      	cpsid	i
}
 8001eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <Error_Handler+0x8>

08001ece <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b087      	sub	sp, #28
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8001ed8:	23ff      	movs	r3, #255	; 0xff
 8001eda:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e020      	b.n	8001f24 <calculate_crc+0x56>
		crc ^= data[i];
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	4053      	eors	r3, r2
 8001eee:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e010      	b.n	8001f18 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8001ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	da06      	bge.n	8001f0c <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001f08:	75fb      	strb	r3, [r7, #23]
 8001f0a:	e002      	b.n	8001f12 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3301      	adds	r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b07      	cmp	r3, #7
 8001f1c:	d9eb      	bls.n	8001ef6 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	3301      	adds	r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d3da      	bcc.n	8001ee2 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af02      	add	r7, sp, #8
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	733b      	strb	r3, [r7, #12]
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	889b      	ldrh	r3, [r3, #4]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	b299      	uxth	r1, r3
 8001f62:	f107 020c 	add.w	r2, r7, #12
 8001f66:	231e      	movs	r3, #30
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f001 fe74 	bl	8003c58 <HAL_I2C_Master_Transmit>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <sht3x_send_command+0x42>
	}

	return true;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	4613      	mov	r3, r2
 8001f92:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	79bb      	ldrb	r3, [r7, #6]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af04      	add	r7, sp, #16
 8001fb6:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <sht3x_init+0x1e>
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <sht3x_init+0x74>)
 8001fc4:	4a18      	ldr	r2, [pc, #96]	; (8002028 <sht3x_init+0x78>)
 8001fc6:	213f      	movs	r1, #63	; 0x3f
 8001fc8:	4818      	ldr	r0, [pc, #96]	; (800202c <sht3x_init+0x7c>)
 8001fca:	f009 ffcf 	bl	800bf6c <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	889b      	ldrh	r3, [r3, #4]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	b299      	uxth	r1, r3
 8001fda:	231e      	movs	r3, #30
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	2303      	movs	r3, #3
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8001fee:	f002 f81d 	bl	800402c <HAL_I2C_Mem_Read>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e00e      	b.n	800201a <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	2102      	movs	r1, #2
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff63 	bl	8001ece <calculate_crc>
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 800200c:	7bbb      	ldrb	r3, [r7, #14]
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <sht3x_init+0x68>
		return false;
 8002014:	2300      	movs	r3, #0
 8002016:	e000      	b.n	800201a <sht3x_init+0x6a>
	}

	return true;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	0800f2cc 	.word	0x0800f2cc
 8002028:	0800f364 	.word	0x0800f364
 800202c:	0800f30c 	.word	0x0800f30c

08002030 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 800203c:	f642 4106 	movw	r1, #11270	; 0x2c06
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f7ff ff7a 	bl	8001f3a <sht3x_send_command>

	HAL_Delay(1);
 8002046:	2001      	movs	r0, #1
 8002048:	f000 fbfa 	bl	8002840 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	889b      	ldrh	r3, [r3, #4]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	b299      	uxth	r1, r3
 8002058:	f107 0214 	add.w	r2, r7, #20
 800205c:	231e      	movs	r3, #30
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2306      	movs	r3, #6
 8002062:	f001 feed 	bl	8003e40 <HAL_I2C_Master_Receive>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 800206c:	2300      	movs	r3, #0
 800206e:	e050      	b.n	8002112 <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	2102      	movs	r1, #2
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff29 	bl	8001ece <calculate_crc>
 800207c:	4603      	mov	r3, r0
 800207e:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	3303      	adds	r3, #3
 8002086:	2102      	movs	r1, #2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff20 	bl	8001ece <calculate_crc>
 800208e:	4603      	mov	r3, r0
 8002090:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8002092:	7dbb      	ldrb	r3, [r7, #22]
 8002094:	7ffa      	ldrb	r2, [r7, #31]
 8002096:	429a      	cmp	r2, r3
 8002098:	d103      	bne.n	80020a2 <sht3x_read_temperature_and_humidity+0x72>
 800209a:	7e7b      	ldrb	r3, [r7, #25]
 800209c:	7fba      	ldrb	r2, [r7, #30]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d001      	beq.n	80020a6 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e035      	b.n	8002112 <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 80020a6:	7d3b      	ldrb	r3, [r7, #20]
 80020a8:	7d7a      	ldrb	r2, [r7, #21]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff69 	bl	8001f84 <uint8_to_uint16>
 80020b2:	4603      	mov	r3, r0
 80020b4:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
 80020b8:	7e3a      	ldrb	r2, [r7, #24]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff61 	bl	8001f84 <uint8_to_uint16>
 80020c2:	4603      	mov	r3, r0
 80020c4:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 80020c6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800211c <sht3x_read_temperature_and_humidity+0xec>
 80020d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020da:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002120 <sht3x_read_temperature_and_humidity+0xf0>
 80020de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002124 <sht3x_read_temperature_and_humidity+0xf4>
 80020e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 80020f0:	8b7b      	ldrh	r3, [r7, #26]
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020fa:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002128 <sht3x_read_temperature_and_humidity+0xf8>
 80020fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002102:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002120 <sht3x_read_temperature_and_humidity+0xf0>
 8002106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	3720      	adds	r7, #32
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	432f0000 	.word	0x432f0000
 8002120:	477fff00 	.word	0x477fff00
 8002124:	42340000 	.word	0x42340000
 8002128:	42c80000 	.word	0x42c80000

0800212c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_MspInit+0x44>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_MspInit+0x44>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6193      	str	r3, [r2, #24]
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_MspInit+0x44>)
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_MspInit+0x44>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <HAL_MspInit+0x44>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	61d3      	str	r3, [r2, #28]
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_MspInit+0x44>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002162:	2007      	movs	r0, #7
 8002164:	f001 fa84 	bl	8003670 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002194:	d124      	bne.n	80021e0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_ADC_MspInit+0x74>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <HAL_ADC_MspInit+0x74>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6153      	str	r3, [r2, #20]
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_ADC_MspInit+0x74>)
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <HAL_ADC_MspInit+0x74>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <HAL_ADC_MspInit+0x74>)
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	6153      	str	r3, [r2, #20]
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_ADC_MspInit+0x74>)
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80021c6:	2306      	movs	r3, #6
 80021c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ca:	2303      	movs	r3, #3
 80021cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021dc:	f001 fb00 	bl	80037e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000

080021ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a17      	ldr	r2, [pc, #92]	; (8002268 <HAL_I2C_MspInit+0x7c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d127      	bne.n	800225e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_I2C_MspInit+0x80>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4a16      	ldr	r2, [pc, #88]	; (800226c <HAL_I2C_MspInit+0x80>)
 8002214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002218:	6153      	str	r3, [r2, #20]
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_I2C_MspInit+0x80>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002226:	23c0      	movs	r3, #192	; 0xc0
 8002228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222a:	2312      	movs	r3, #18
 800222c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800222e:	2301      	movs	r3, #1
 8002230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002236:	2304      	movs	r3, #4
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <HAL_I2C_MspInit+0x84>)
 8002242:	f001 facd 	bl	80037e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_I2C_MspInit+0x80>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a08      	ldr	r2, [pc, #32]	; (800226c <HAL_I2C_MspInit+0x80>)
 800224c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002250:	61d3      	str	r3, [r2, #28]
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_I2C_MspInit+0x80>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800225e:	bf00      	nop
 8002260:	3728      	adds	r7, #40	; 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40005400 	.word	0x40005400
 800226c:	40021000 	.word	0x40021000
 8002270:	48000400 	.word	0x48000400

08002274 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <HAL_RTC_MspInit+0x44>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d111      	bne.n	80022aa <HAL_RTC_MspInit+0x36>
 8002286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800228a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002294:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_RTC_MspInit+0x48>)
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	461a      	mov	r2, r3
 80022a6:	2301      	movs	r3, #1
 80022a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40002800 	.word	0x40002800
 80022bc:	10908100 	.word	0x10908100

080022c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08c      	sub	sp, #48	; 0x30
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a3d      	ldr	r2, [pc, #244]	; (80023d4 <HAL_SPI_MspInit+0x114>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d129      	bne.n	8002336 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	4a3c      	ldr	r2, [pc, #240]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 80022e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022ec:	6193      	str	r3, [r2, #24]
 80022ee:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	4a36      	ldr	r2, [pc, #216]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 8002300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002304:	6153      	str	r3, [r2, #20]
 8002306:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002312:	23e0      	movs	r3, #224	; 0xe0
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002322:	2305      	movs	r3, #5
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002330:	f001 fa56 	bl	80037e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002334:	e04a      	b.n	80023cc <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a28      	ldr	r2, [pc, #160]	; (80023dc <HAL_SPI_MspInit+0x11c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d145      	bne.n	80023cc <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 8002346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234a:	61d3      	str	r3, [r2, #28]
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 800235e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002362:	6153      	str	r3, [r2, #20]
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 8002376:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237a:	6153      	str	r3, [r2, #20]
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_SPI_MspInit+0x118>)
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800239a:	2305      	movs	r3, #5
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800239e:	f107 031c 	add.w	r3, r7, #28
 80023a2:	4619      	mov	r1, r3
 80023a4:	480e      	ldr	r0, [pc, #56]	; (80023e0 <HAL_SPI_MspInit+0x120>)
 80023a6:	f001 fa1b 	bl	80037e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80023aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023bc:	2305      	movs	r3, #5
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 031c 	add.w	r3, r7, #28
 80023c4:	4619      	mov	r1, r3
 80023c6:	4807      	ldr	r0, [pc, #28]	; (80023e4 <HAL_SPI_MspInit+0x124>)
 80023c8:	f001 fa0a 	bl	80037e0 <HAL_GPIO_Init>
}
 80023cc:	bf00      	nop
 80023ce:	3730      	adds	r7, #48	; 0x30
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40013000 	.word	0x40013000
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40003800 	.word	0x40003800
 80023e0:	48001400 	.word	0x48001400
 80023e4:	48000400 	.word	0x48000400

080023e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <HAL_UART_MspInit+0x8c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d12f      	bne.n	800246a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_UART_MspInit+0x90>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <HAL_UART_MspInit+0x90>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6193      	str	r3, [r2, #24]
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_UART_MspInit+0x90>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_UART_MspInit+0x90>)
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	4a14      	ldr	r2, [pc, #80]	; (8002478 <HAL_UART_MspInit+0x90>)
 8002428:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800242c:	6153      	str	r3, [r2, #20]
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_UART_MspInit+0x90>)
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800243a:	2330      	movs	r3, #48	; 0x30
 800243c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002446:	2303      	movs	r3, #3
 8002448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800244a:	2307      	movs	r3, #7
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	4619      	mov	r1, r3
 8002454:	4809      	ldr	r0, [pc, #36]	; (800247c <HAL_UART_MspInit+0x94>)
 8002456:	f001 f9c3 	bl	80037e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	2025      	movs	r0, #37	; 0x25
 8002460:	f001 f911 	bl	8003686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002464:	2025      	movs	r0, #37	; 0x25
 8002466:	f001 f92a 	bl	80036be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40013800 	.word	0x40013800
 8002478:	40021000 	.word	0x40021000
 800247c:	48000800 	.word	0x48000800

08002480 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a18      	ldr	r2, [pc, #96]	; (8002500 <HAL_PCD_MspInit+0x80>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d129      	bne.n	80024f6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_PCD_MspInit+0x84>)
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	4a17      	ldr	r2, [pc, #92]	; (8002504 <HAL_PCD_MspInit+0x84>)
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ac:	6153      	str	r3, [r2, #20]
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_PCD_MspInit+0x84>)
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80024ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80024cc:	230e      	movs	r3, #14
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4619      	mov	r1, r3
 80024d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024da:	f001 f981 	bl	80037e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_PCD_MspInit+0x84>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4a08      	ldr	r2, [pc, #32]	; (8002504 <HAL_PCD_MspInit+0x84>)
 80024e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024e8:	61d3      	str	r3, [r2, #28]
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_PCD_MspInit+0x84>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	; 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40005c00 	.word	0x40005c00
 8002504:	40021000 	.word	0x40021000

08002508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800250c:	e7fe      	b.n	800250c <NMI_Handler+0x4>

0800250e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <HardFault_Handler+0x4>

08002514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <MemManage_Handler+0x4>

0800251a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <BusFault_Handler+0x4>

08002520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <UsageFault_Handler+0x4>

08002526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002554:	f000 f954 	bl	8002800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <USART1_IRQHandler+0x10>)
 8002562:	f004 fda9 	bl	80070b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000464 	.word	0x20000464

08002570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
	return 1;
 8002574:	2301      	movs	r3, #1
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_kill>:

int _kill(int pid, int sig)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800258a:	f009 fd11 	bl	800bfb0 <__errno>
 800258e:	4603      	mov	r3, r0
 8002590:	2216      	movs	r2, #22
 8002592:	601a      	str	r2, [r3, #0]
	return -1;
 8002594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_exit>:

void _exit (int status)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ffe7 	bl	8002580 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025b2:	e7fe      	b.n	80025b2 <_exit+0x12>

080025b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e00a      	b.n	80025dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025c6:	f3af 8000 	nop.w
 80025ca:	4601      	mov	r1, r0
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	60ba      	str	r2, [r7, #8]
 80025d2:	b2ca      	uxtb	r2, r1
 80025d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	3301      	adds	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	dbf0      	blt.n	80025c6 <_read+0x12>
	}

return len;
 80025e4:	687b      	ldr	r3, [r7, #4]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e009      	b.n	8002614 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	60ba      	str	r2, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3301      	adds	r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	dbf1      	blt.n	8002600 <_write+0x12>
	}
	return len;
 800261c:	687b      	ldr	r3, [r7, #4]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <_close>:

int _close(int file)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
	return -1;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800264e:	605a      	str	r2, [r3, #4]
	return 0;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <_isatty>:

int _isatty(int file)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
	return 1;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
	return 0;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002698:	4a14      	ldr	r2, [pc, #80]	; (80026ec <_sbrk+0x5c>)
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <_sbrk+0x60>)
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <_sbrk+0x64>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <_sbrk+0x64>)
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <_sbrk+0x68>)
 80026b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <_sbrk+0x64>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d207      	bcs.n	80026d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c0:	f009 fc76 	bl	800bfb0 <__errno>
 80026c4:	4603      	mov	r3, r0
 80026c6:	220c      	movs	r2, #12
 80026c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ce:	e009      	b.n	80026e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <_sbrk+0x64>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <_sbrk+0x64>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	4a05      	ldr	r2, [pc, #20]	; (80026f4 <_sbrk+0x64>)
 80026e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026e2:	68fb      	ldr	r3, [r7, #12]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2000a000 	.word	0x2000a000
 80026f0:	00000400 	.word	0x00000400
 80026f4:	20000310 	.word	0x20000310
 80026f8:	20000da0 	.word	0x20000da0

080026fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <SystemInit+0x20>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <SystemInit+0x20>)
 8002708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800270c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002758 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002724:	480d      	ldr	r0, [pc, #52]	; (800275c <LoopForever+0x6>)
  ldr r1, =_edata
 8002726:	490e      	ldr	r1, [pc, #56]	; (8002760 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002728:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <LoopForever+0xe>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <LoopForever+0x12>)
  ldr r4, =_ebss
 800273c:	4c0b      	ldr	r4, [pc, #44]	; (800276c <LoopForever+0x16>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800274a:	f7ff ffd7 	bl	80026fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800274e:	f009 fc47 	bl	800bfe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002752:	f7fe ff53 	bl	80015fc <main>

08002756 <LoopForever>:

LoopForever:
    b LoopForever
 8002756:	e7fe      	b.n	8002756 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002758:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002760:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002764:	0800f818 	.word	0x0800f818
  ldr r2, =_sbss
 8002768:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800276c:	20000da0 	.word	0x20000da0

08002770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC1_2_IRQHandler>
	...

08002774 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_Init+0x28>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a07      	ldr	r2, [pc, #28]	; (800279c <HAL_Init+0x28>)
 800277e:	f043 0310 	orr.w	r3, r3, #16
 8002782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002784:	2003      	movs	r0, #3
 8002786:	f000 ff73 	bl	8003670 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800278a:	2000      	movs	r0, #0
 800278c:	f000 f808 	bl	80027a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002790:	f7ff fccc 	bl	800212c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40022000 	.word	0x40022000

080027a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_InitTick+0x54>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_InitTick+0x58>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 ff8b 	bl	80036da <HAL_SYSTICK_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00e      	b.n	80027ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b0f      	cmp	r3, #15
 80027d2:	d80a      	bhi.n	80027ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d4:	2200      	movs	r2, #0
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027dc:	f000 ff53 	bl	8003686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e0:	4a06      	ldr	r2, [pc, #24]	; (80027fc <HAL_InitTick+0x5c>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e000      	b.n	80027ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000008 	.word	0x20000008
 80027fc:	20000004 	.word	0x20000004

08002800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_IncTick+0x20>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_IncTick+0x24>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4413      	add	r3, r2
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <HAL_IncTick+0x24>)
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000008 	.word	0x20000008
 8002824:	20000920 	.word	0x20000920

08002828 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return uwTick;  
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_GetTick+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000920 	.word	0x20000920

08002840 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff ffee 	bl	8002828 <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002858:	d005      	beq.n	8002866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_Delay+0x44>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4413      	add	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002866:	bf00      	nop
 8002868:	f7ff ffde 	bl	8002828 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	429a      	cmp	r2, r3
 8002876:	d8f7      	bhi.n	8002868 <HAL_Delay+0x28>
  {
  }
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000008 	.word	0x20000008

08002888 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b09a      	sub	sp, #104	; 0x68
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e1c9      	b.n	8002c3c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d176      	bne.n	80029a8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d152      	bne.n	8002968 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff fc49 	bl	8002174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d13b      	bne.n	8002968 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fd87 	bl	8003404 <ADC_Disable>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	d12f      	bne.n	8002968 <HAL_ADC_Init+0xe0>
 8002908:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800290c:	2b00      	cmp	r3, #0
 800290e:	d12b      	bne.n	8002968 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002918:	f023 0302 	bic.w	r3, r3, #2
 800291c:	f043 0202 	orr.w	r2, r3, #2
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002932:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002942:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002944:	4b86      	ldr	r3, [pc, #536]	; (8002b60 <HAL_ADC_Init+0x2d8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a86      	ldr	r2, [pc, #536]	; (8002b64 <HAL_ADC_Init+0x2dc>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0c9a      	lsrs	r2, r3, #18
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800295a:	e002      	b.n	8002962 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	3b01      	subs	r3, #1
 8002960:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f9      	bne.n	800295c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002984:	d110      	bne.n	80029a8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f023 0312 	bic.w	r3, r3, #18
 800298e:	f043 0210 	orr.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f040 8136 	bne.w	8002c22 <HAL_ADC_Init+0x39a>
 80029b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 8131 	bne.w	8002c22 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 8129 	bne.w	8002c22 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029d8:	f043 0202 	orr.w	r2, r3, #2
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e8:	d004      	beq.n	80029f4 <HAL_ADC_Init+0x16c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a5e      	ldr	r2, [pc, #376]	; (8002b68 <HAL_ADC_Init+0x2e0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_Init+0x170>
 80029f4:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_ADC_Init+0x2e4>)
 80029f6:	e000      	b.n	80029fa <HAL_ADC_Init+0x172>
 80029f8:	4b5d      	ldr	r3, [pc, #372]	; (8002b70 <HAL_ADC_Init+0x2e8>)
 80029fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a04:	d102      	bne.n	8002a0c <HAL_ADC_Init+0x184>
 8002a06:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <HAL_ADC_Init+0x2e0>)
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e01a      	b.n	8002a42 <HAL_ADC_Init+0x1ba>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a55      	ldr	r2, [pc, #340]	; (8002b68 <HAL_ADC_Init+0x2e0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d103      	bne.n	8002a1e <HAL_ADC_Init+0x196>
 8002a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e011      	b.n	8002a42 <HAL_ADC_Init+0x1ba>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a54      	ldr	r2, [pc, #336]	; (8002b74 <HAL_ADC_Init+0x2ec>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d102      	bne.n	8002a2e <HAL_ADC_Init+0x1a6>
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_ADC_Init+0x2f0>)
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	e009      	b.n	8002a42 <HAL_ADC_Init+0x1ba>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a51      	ldr	r2, [pc, #324]	; (8002b78 <HAL_ADC_Init+0x2f0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d102      	bne.n	8002a3e <HAL_ADC_Init+0x1b6>
 8002a38:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <HAL_ADC_Init+0x2ec>)
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	e001      	b.n	8002a42 <HAL_ADC_Init+0x1ba>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d108      	bne.n	8002a62 <HAL_ADC_Init+0x1da>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_Init+0x1da>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_ADC_Init+0x1dc>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d11c      	bne.n	8002aa2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a68:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d010      	beq.n	8002a90 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_ADC_Init+0x202>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_Init+0x202>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_ADC_Init+0x204>
 8002a8a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d108      	bne.n	8002aa2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7e5b      	ldrb	r3, [r3, #25]
 8002aa6:	035b      	lsls	r3, r3, #13
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002aac:	2a01      	cmp	r2, #1
 8002aae:	d002      	beq.n	8002ab6 <HAL_ADC_Init+0x22e>
 8002ab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ab4:	e000      	b.n	8002ab8 <HAL_ADC_Init+0x230>
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d11b      	bne.n	8002b0e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7e5b      	ldrb	r3, [r3, #25]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	045a      	lsls	r2, r3, #17
 8002ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aee:	663b      	str	r3, [r7, #96]	; 0x60
 8002af0:	e00d      	b.n	8002b0e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002afa:	f043 0220 	orr.w	r2, r3, #32
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	f043 0201 	orr.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d03a      	beq.n	8002b8c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <HAL_ADC_Init+0x2ec>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_ADC_Init+0x2a2>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <HAL_ADC_Init+0x2f0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d128      	bne.n	8002b7c <HAL_ADC_Init+0x2f4>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002b32:	d012      	beq.n	8002b5a <HAL_ADC_Init+0x2d2>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3c:	d00a      	beq.n	8002b54 <HAL_ADC_Init+0x2cc>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002b46:	d002      	beq.n	8002b4e <HAL_ADC_Init+0x2c6>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	e018      	b.n	8002b80 <HAL_ADC_Init+0x2f8>
 8002b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b52:	e015      	b.n	8002b80 <HAL_ADC_Init+0x2f8>
 8002b54:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002b58:	e012      	b.n	8002b80 <HAL_ADC_Init+0x2f8>
 8002b5a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002b5e:	e00f      	b.n	8002b80 <HAL_ADC_Init+0x2f8>
 8002b60:	20000000 	.word	0x20000000
 8002b64:	431bde83 	.word	0x431bde83
 8002b68:	50000100 	.word	0x50000100
 8002b6c:	50000300 	.word	0x50000300
 8002b70:	50000700 	.word	0x50000700
 8002b74:	50000400 	.word	0x50000400
 8002b78:	50000500 	.word	0x50000500
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b84:	4313      	orrs	r3, r2
 8002b86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d114      	bne.n	8002bc4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba8:	f023 0302 	bic.w	r3, r3, #2
 8002bac:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7e1b      	ldrb	r3, [r3, #24]
 8002bb2:	039a      	lsls	r2, r3, #14
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <HAL_ADC_Init+0x3bc>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d10c      	bne.n	8002bfa <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f023 010f 	bic.w	r1, r3, #15
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	1e5a      	subs	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf8:	e007      	b.n	8002c0a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 020f 	bic.w	r2, r2, #15
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f023 0303 	bic.w	r3, r3, #3
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c20:	e00a      	b.n	8002c38 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f023 0312 	bic.w	r3, r3, #18
 8002c2a:	f043 0210 	orr.w	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002c38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3768      	adds	r7, #104	; 0x68
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	fff0c007 	.word	0xfff0c007

08002c48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b09b      	sub	sp, #108	; 0x6c
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x22>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e2cb      	b.n	8003202 <HAL_ADC_ConfigChannel+0x5ba>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f040 82af 	bne.w	80031e0 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d81c      	bhi.n	8002cc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	231f      	movs	r3, #31
 8002ca0:	4093      	lsls	r3, r2
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	4019      	ands	r1, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc2:	e063      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b09      	cmp	r3, #9
 8002cca:	d81e      	bhi.n	8002d0a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	3b1e      	subs	r3, #30
 8002ce0:	221f      	movs	r2, #31
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	4019      	ands	r1, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	3b1e      	subs	r3, #30
 8002cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	635a      	str	r2, [r3, #52]	; 0x34
 8002d08:	e040      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b0e      	cmp	r3, #14
 8002d10:	d81e      	bhi.n	8002d50 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	3b3c      	subs	r3, #60	; 0x3c
 8002d26:	221f      	movs	r2, #31
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	4019      	ands	r1, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	3b3c      	subs	r3, #60	; 0x3c
 8002d42:	fa00 f203 	lsl.w	r2, r0, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d4e:	e01d      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	3b5a      	subs	r3, #90	; 0x5a
 8002d64:	221f      	movs	r2, #31
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	4019      	ands	r1, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	3b5a      	subs	r3, #90	; 0x5a
 8002d80:	fa00 f203 	lsl.w	r2, r0, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 80e5 	bne.w	8002f66 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d91c      	bls.n	8002dde <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6999      	ldr	r1, [r3, #24]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	2207      	movs	r2, #7
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	4019      	ands	r1, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6898      	ldr	r0, [r3, #8]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	3b1e      	subs	r3, #30
 8002dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	619a      	str	r2, [r3, #24]
 8002ddc:	e019      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6959      	ldr	r1, [r3, #20]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	2207      	movs	r2, #7
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	4019      	ands	r1, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6898      	ldr	r0, [r3, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	08db      	lsrs	r3, r3, #3
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d84f      	bhi.n	8002ed4 <HAL_ADC_ConfigChannel+0x28c>
 8002e34:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <HAL_ADC_ConfigChannel+0x1f4>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08002e4d 	.word	0x08002e4d
 8002e40:	08002e6f 	.word	0x08002e6f
 8002e44:	08002e91 	.word	0x08002e91
 8002e48:	08002eb3 	.word	0x08002eb3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e52:	4b9f      	ldr	r3, [pc, #636]	; (80030d0 <HAL_ADC_ConfigChannel+0x488>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	0691      	lsls	r1, r2, #26
 8002e5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e6a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e6c:	e07e      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e74:	4b96      	ldr	r3, [pc, #600]	; (80030d0 <HAL_ADC_ConfigChannel+0x488>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	0691      	lsls	r1, r2, #26
 8002e7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e80:	430a      	orrs	r2, r1
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e8c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e8e:	e06d      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e96:	4b8e      	ldr	r3, [pc, #568]	; (80030d0 <HAL_ADC_ConfigChannel+0x488>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	0691      	lsls	r1, r2, #26
 8002ea0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002eae:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002eb0:	e05c      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002eb8:	4b85      	ldr	r3, [pc, #532]	; (80030d0 <HAL_ADC_ConfigChannel+0x488>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	0691      	lsls	r1, r2, #26
 8002ec2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ed0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ed2:	e04b      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	069b      	lsls	r3, r3, #26
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d107      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ef6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002efe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	069b      	lsls	r3, r3, #26
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d107      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f1a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	069b      	lsls	r3, r3, #26
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d107      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f3e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	069b      	lsls	r3, r3, #26
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d10a      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f62:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002f64:	e001      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x324>
      break;
 8002f6a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d108      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x344>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x344>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x346>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 8131 	bne.w	80031f6 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d00f      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002fba:	e049      	b.n	8003050 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b09      	cmp	r3, #9
 8002fdc:	d91c      	bls.n	8003018 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6999      	ldr	r1, [r3, #24]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	3b1b      	subs	r3, #27
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	4019      	ands	r1, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6898      	ldr	r0, [r3, #8]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	3b1b      	subs	r3, #27
 800300a:	fa00 f203 	lsl.w	r2, r0, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	619a      	str	r2, [r3, #24]
 8003016:	e01b      	b.n	8003050 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6959      	ldr	r1, [r3, #20]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	2207      	movs	r2, #7
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	4019      	ands	r1, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6898      	ldr	r0, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	fa00 f203 	lsl.w	r2, r0, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003058:	d004      	beq.n	8003064 <HAL_ADC_ConfigChannel+0x41c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1d      	ldr	r2, [pc, #116]	; (80030d4 <HAL_ADC_ConfigChannel+0x48c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x420>
 8003064:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <HAL_ADC_ConfigChannel+0x490>)
 8003066:	e000      	b.n	800306a <HAL_ADC_ConfigChannel+0x422>
 8003068:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <HAL_ADC_ConfigChannel+0x494>)
 800306a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b10      	cmp	r3, #16
 8003072:	d105      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800307c:	2b00      	cmp	r3, #0
 800307e:	d015      	beq.n	80030ac <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003084:	2b11      	cmp	r3, #17
 8003086:	d105      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003098:	2b12      	cmp	r3, #18
 800309a:	f040 80ac 	bne.w	80031f6 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800309e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 80a5 	bne.w	80031f6 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b4:	d102      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x474>
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <HAL_ADC_ConfigChannel+0x48c>)
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	e023      	b.n	8003104 <HAL_ADC_ConfigChannel+0x4bc>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_ADC_ConfigChannel+0x48c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10c      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x498>
 80030c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e01a      	b.n	8003104 <HAL_ADC_ConfigChannel+0x4bc>
 80030ce:	bf00      	nop
 80030d0:	83fff000 	.word	0x83fff000
 80030d4:	50000100 	.word	0x50000100
 80030d8:	50000300 	.word	0x50000300
 80030dc:	50000700 	.word	0x50000700
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a4a      	ldr	r2, [pc, #296]	; (8003210 <HAL_ADC_ConfigChannel+0x5c8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d102      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x4a8>
 80030ea:	4b4a      	ldr	r3, [pc, #296]	; (8003214 <HAL_ADC_ConfigChannel+0x5cc>)
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	e009      	b.n	8003104 <HAL_ADC_ConfigChannel+0x4bc>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a47      	ldr	r2, [pc, #284]	; (8003214 <HAL_ADC_ConfigChannel+0x5cc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d102      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x4b8>
 80030fa:	4b45      	ldr	r3, [pc, #276]	; (8003210 <HAL_ADC_ConfigChannel+0x5c8>)
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	e001      	b.n	8003104 <HAL_ADC_ConfigChannel+0x4bc>
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d108      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x4dc>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x4dc>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_ADC_ConfigChannel+0x4de>
 8003124:	2300      	movs	r3, #0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d150      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800312a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800312c:	2b00      	cmp	r3, #0
 800312e:	d010      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_ADC_ConfigChannel+0x504>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x504>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_ADC_ConfigChannel+0x506>
 800314c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800314e:	2b00      	cmp	r3, #0
 8003150:	d13c      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b10      	cmp	r3, #16
 8003158:	d11d      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x54e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003162:	d118      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800316c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800316e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003170:	4b29      	ldr	r3, [pc, #164]	; (8003218 <HAL_ADC_ConfigChannel+0x5d0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a29      	ldr	r2, [pc, #164]	; (800321c <HAL_ADC_ConfigChannel+0x5d4>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	0c9a      	lsrs	r2, r3, #18
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003186:	e002      	b.n	800318e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3b01      	subs	r3, #1
 800318c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f9      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003194:	e02e      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b11      	cmp	r3, #17
 800319c:	d10b      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x56e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a6:	d106      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80031a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80031b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031b4:	e01e      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b12      	cmp	r3, #18
 80031bc:	d11a      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80031be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031ca:	e013      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80031de:	e00a      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80031f2:	e000      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031f4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80031fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003202:	4618      	mov	r0, r3
 8003204:	376c      	adds	r7, #108	; 0x6c
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	50000400 	.word	0x50000400
 8003214:	50000500 	.word	0x50000500
 8003218:	20000000 	.word	0x20000000
 800321c:	431bde83 	.word	0x431bde83

08003220 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003220:	b480      	push	{r7}
 8003222:	b099      	sub	sp, #100	; 0x64
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003238:	d102      	bne.n	8003240 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800323a:	4b6d      	ldr	r3, [pc, #436]	; (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	e01a      	b.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a6a      	ldr	r2, [pc, #424]	; (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d103      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800324a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	e011      	b.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a67      	ldr	r2, [pc, #412]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d102      	bne.n	8003262 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800325c:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	e009      	b.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a64      	ldr	r2, [pc, #400]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d102      	bne.n	8003272 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800326c:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	e001      	b.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0b0      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800328a:	2302      	movs	r3, #2
 800328c:	e0a9      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f040 808d 	bne.w	80033c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f040 8086 	bne.w	80033c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032bc:	d004      	beq.n	80032c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a4b      	ldr	r2, [pc, #300]	; (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032c8:	4b4c      	ldr	r3, [pc, #304]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80032ca:	e000      	b.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032cc:	4b4c      	ldr	r3, [pc, #304]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80032ce:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d040      	beq.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ea:	035b      	lsls	r3, r3, #13
 80032ec:	430b      	orrs	r3, r1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032f2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d108      	bne.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003314:	2300      	movs	r3, #0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d15c      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003336:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003338:	2b00      	cmp	r3, #0
 800333a:	d14b      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800333c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003344:	f023 030f 	bic.w	r3, r3, #15
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	6811      	ldr	r1, [r2, #0]
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	6892      	ldr	r2, [r2, #8]
 8003350:	430a      	orrs	r2, r1
 8003352:	431a      	orrs	r2, r3
 8003354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003356:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003358:	e03c      	b.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800335a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003364:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d108      	bne.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d123      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d107      	bne.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80033a8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d112      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80033ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033b6:	f023 030f 	bic.w	r3, r3, #15
 80033ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033bc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033be:	e009      	b.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033d2:	e000      	b.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033d4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80033e2:	4618      	mov	r0, r3
 80033e4:	3764      	adds	r7, #100	; 0x64
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	50000100 	.word	0x50000100
 80033f4:	50000400 	.word	0x50000400
 80033f8:	50000500 	.word	0x50000500
 80033fc:	50000300 	.word	0x50000300
 8003400:	50000700 	.word	0x50000700

08003404 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d108      	bne.n	8003430 <ADC_Disable+0x2c>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <ADC_Disable+0x2c>
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <ADC_Disable+0x2e>
 8003430:	2300      	movs	r3, #0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d047      	beq.n	80034c6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 030d 	and.w	r3, r3, #13
 8003440:	2b01      	cmp	r3, #1
 8003442:	d10f      	bne.n	8003464 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0202 	orr.w	r2, r2, #2
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2203      	movs	r2, #3
 800345a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800345c:	f7ff f9e4 	bl	8002828 <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003462:	e029      	b.n	80034b8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f043 0210 	orr.w	r2, r3, #16
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	f043 0201 	orr.w	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e023      	b.n	80034c8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003480:	f7ff f9d2 	bl	8002828 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d914      	bls.n	80034b8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d10d      	bne.n	80034b8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f043 0210 	orr.w	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e007      	b.n	80034c8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d0dc      	beq.n	8003480 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <__NVIC_SetPriorityGrouping+0x44>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034ec:	4013      	ands	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003502:	4a04      	ldr	r2, [pc, #16]	; (8003514 <__NVIC_SetPriorityGrouping+0x44>)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	60d3      	str	r3, [r2, #12]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <__NVIC_GetPriorityGrouping+0x18>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	f003 0307 	and.w	r3, r3, #7
}
 8003526:	4618      	mov	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	2b00      	cmp	r3, #0
 8003544:	db0b      	blt.n	800355e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	4907      	ldr	r1, [pc, #28]	; (800356c <__NVIC_EnableIRQ+0x38>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2001      	movs	r0, #1
 8003556:	fa00 f202 	lsl.w	r2, r0, r2
 800355a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000e100 	.word	0xe000e100

08003570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	6039      	str	r1, [r7, #0]
 800357a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	2b00      	cmp	r3, #0
 8003582:	db0a      	blt.n	800359a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	490c      	ldr	r1, [pc, #48]	; (80035bc <__NVIC_SetPriority+0x4c>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	0112      	lsls	r2, r2, #4
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	440b      	add	r3, r1
 8003594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003598:	e00a      	b.n	80035b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	4908      	ldr	r1, [pc, #32]	; (80035c0 <__NVIC_SetPriority+0x50>)
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	3b04      	subs	r3, #4
 80035a8:	0112      	lsls	r2, r2, #4
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	440b      	add	r3, r1
 80035ae:	761a      	strb	r2, [r3, #24]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000e100 	.word	0xe000e100
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	; 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f1c3 0307 	rsb	r3, r3, #7
 80035de:	2b04      	cmp	r3, #4
 80035e0:	bf28      	it	cs
 80035e2:	2304      	movcs	r3, #4
 80035e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3304      	adds	r3, #4
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d902      	bls.n	80035f4 <NVIC_EncodePriority+0x30>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3b03      	subs	r3, #3
 80035f2:	e000      	b.n	80035f6 <NVIC_EncodePriority+0x32>
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43da      	mvns	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	401a      	ands	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800360c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	43d9      	mvns	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	4313      	orrs	r3, r2
         );
}
 800361e:	4618      	mov	r0, r3
 8003620:	3724      	adds	r7, #36	; 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800363c:	d301      	bcc.n	8003642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800363e:	2301      	movs	r3, #1
 8003640:	e00f      	b.n	8003662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003642:	4a0a      	ldr	r2, [pc, #40]	; (800366c <SysTick_Config+0x40>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3b01      	subs	r3, #1
 8003648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800364a:	210f      	movs	r1, #15
 800364c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003650:	f7ff ff8e 	bl	8003570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <SysTick_Config+0x40>)
 8003656:	2200      	movs	r2, #0
 8003658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800365a:	4b04      	ldr	r3, [pc, #16]	; (800366c <SysTick_Config+0x40>)
 800365c:	2207      	movs	r2, #7
 800365e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	e000e010 	.word	0xe000e010

08003670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff29 	bl	80034d0 <__NVIC_SetPriorityGrouping>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	4603      	mov	r3, r0
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003698:	f7ff ff3e 	bl	8003518 <__NVIC_GetPriorityGrouping>
 800369c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	6978      	ldr	r0, [r7, #20]
 80036a4:	f7ff ff8e 	bl	80035c4 <NVIC_EncodePriority>
 80036a8:	4602      	mov	r2, r0
 80036aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff5d 	bl	8003570 <__NVIC_SetPriority>
}
 80036b6:	bf00      	nop
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff31 	bl	8003534 <__NVIC_EnableIRQ>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ffa2 	bl	800362c <SysTick_Config>
 80036e8:	4603      	mov	r3, r0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003700:	2b02      	cmp	r3, #2
 8003702:	d008      	beq.n	8003716 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2204      	movs	r2, #4
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e020      	b.n	8003758 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 020e 	bic.w	r2, r2, #14
 8003724:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	2101      	movs	r1, #1
 8003740:	fa01 f202 	lsl.w	r2, r1, r2
 8003744:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003776:	2b02      	cmp	r3, #2
 8003778:	d005      	beq.n	8003786 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2204      	movs	r2, #4
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e027      	b.n	80037d6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 020e 	bic.w	r2, r2, #14
 8003794:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	4798      	blx	r3
    } 
  }
  return status;
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ee:	e154      	b.n	8003a9a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	2101      	movs	r1, #1
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	fa01 f303 	lsl.w	r3, r1, r3
 80037fc:	4013      	ands	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8146 	beq.w	8003a94 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d005      	beq.n	8003820 <HAL_GPIO_Init+0x40>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d130      	bne.n	8003882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003856:	2201      	movs	r2, #1
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	f003 0201 	and.w	r2, r3, #1
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b03      	cmp	r3, #3
 800388c:	d017      	beq.n	80038be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	2203      	movs	r2, #3
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d123      	bne.n	8003912 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	08da      	lsrs	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3208      	adds	r2, #8
 80038d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	220f      	movs	r2, #15
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4013      	ands	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	08da      	lsrs	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3208      	adds	r2, #8
 800390c:	6939      	ldr	r1, [r7, #16]
 800390e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	2203      	movs	r2, #3
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 0203 	and.w	r2, r3, #3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80a0 	beq.w	8003a94 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003954:	4b58      	ldr	r3, [pc, #352]	; (8003ab8 <HAL_GPIO_Init+0x2d8>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	4a57      	ldr	r2, [pc, #348]	; (8003ab8 <HAL_GPIO_Init+0x2d8>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6193      	str	r3, [r2, #24]
 8003960:	4b55      	ldr	r3, [pc, #340]	; (8003ab8 <HAL_GPIO_Init+0x2d8>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800396c:	4a53      	ldr	r2, [pc, #332]	; (8003abc <HAL_GPIO_Init+0x2dc>)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	3302      	adds	r3, #2
 8003974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003978:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	220f      	movs	r2, #15
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4013      	ands	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003996:	d019      	beq.n	80039cc <HAL_GPIO_Init+0x1ec>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a49      	ldr	r2, [pc, #292]	; (8003ac0 <HAL_GPIO_Init+0x2e0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d013      	beq.n	80039c8 <HAL_GPIO_Init+0x1e8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a48      	ldr	r2, [pc, #288]	; (8003ac4 <HAL_GPIO_Init+0x2e4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00d      	beq.n	80039c4 <HAL_GPIO_Init+0x1e4>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a47      	ldr	r2, [pc, #284]	; (8003ac8 <HAL_GPIO_Init+0x2e8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <HAL_GPIO_Init+0x1e0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a46      	ldr	r2, [pc, #280]	; (8003acc <HAL_GPIO_Init+0x2ec>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_GPIO_Init+0x1dc>
 80039b8:	2304      	movs	r3, #4
 80039ba:	e008      	b.n	80039ce <HAL_GPIO_Init+0x1ee>
 80039bc:	2305      	movs	r3, #5
 80039be:	e006      	b.n	80039ce <HAL_GPIO_Init+0x1ee>
 80039c0:	2303      	movs	r3, #3
 80039c2:	e004      	b.n	80039ce <HAL_GPIO_Init+0x1ee>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e002      	b.n	80039ce <HAL_GPIO_Init+0x1ee>
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_GPIO_Init+0x1ee>
 80039cc:	2300      	movs	r3, #0
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	f002 0203 	and.w	r2, r2, #3
 80039d4:	0092      	lsls	r2, r2, #2
 80039d6:	4093      	lsls	r3, r2
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039de:	4937      	ldr	r1, [pc, #220]	; (8003abc <HAL_GPIO_Init+0x2dc>)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	089b      	lsrs	r3, r3, #2
 80039e4:	3302      	adds	r3, #2
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ec:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <HAL_GPIO_Init+0x2f0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a10:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <HAL_GPIO_Init+0x2f0>)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a16:	4b2e      	ldr	r3, [pc, #184]	; (8003ad0 <HAL_GPIO_Init+0x2f0>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4013      	ands	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a3a:	4a25      	ldr	r2, [pc, #148]	; (8003ad0 <HAL_GPIO_Init+0x2f0>)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a40:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_GPIO_Init+0x2f0>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a64:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <HAL_GPIO_Init+0x2f0>)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a6a:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_GPIO_Init+0x2f0>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a8e:	4a10      	ldr	r2, [pc, #64]	; (8003ad0 <HAL_GPIO_Init+0x2f0>)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	3301      	adds	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f47f aea3 	bne.w	80037f0 <HAL_GPIO_Init+0x10>
  }
}
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	48000400 	.word	0x48000400
 8003ac4:	48000800 	.word	0x48000800
 8003ac8:	48000c00 	.word	0x48000c00
 8003acc:	48001000 	.word	0x48001000
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae4:	787b      	ldrb	r3, [r7, #1]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003af0:	e002      	b.n	8003af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b16:	887a      	ldrh	r2, [r7, #2]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	041a      	lsls	r2, r3, #16
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	43d9      	mvns	r1, r3
 8003b22:	887b      	ldrh	r3, [r7, #2]
 8003b24:	400b      	ands	r3, r1
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e081      	b.n	8003c4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fe fb44 	bl	80021ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2224      	movs	r2, #36	; 0x24
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d107      	bne.n	8003bb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	e006      	b.n	8003bc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003bbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d104      	bne.n	8003bd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69d9      	ldr	r1, [r3, #28]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	461a      	mov	r2, r3
 8003c64:	460b      	mov	r3, r1
 8003c66:	817b      	strh	r3, [r7, #10]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	f040 80da 	bne.w	8003e2e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_I2C_Master_Transmit+0x30>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e0d3      	b.n	8003e30 <HAL_I2C_Master_Transmit+0x1d8>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c90:	f7fe fdca 	bl	8002828 <HAL_GetTick>
 8003c94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	2319      	movs	r3, #25
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fb54 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e0be      	b.n	8003e30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2221      	movs	r2, #33	; 0x21
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	893a      	ldrh	r2, [r7, #8]
 8003cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2bff      	cmp	r3, #255	; 0xff
 8003ce2:	d90e      	bls.n	8003d02 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	22ff      	movs	r2, #255	; 0xff
 8003ce8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	8979      	ldrh	r1, [r7, #10]
 8003cf2:	4b51      	ldr	r3, [pc, #324]	; (8003e38 <HAL_I2C_Master_Transmit+0x1e0>)
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fcc6 	bl	800468c <I2C_TransferConfig>
 8003d00:	e06c      	b.n	8003ddc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	8979      	ldrh	r1, [r7, #10]
 8003d14:	4b48      	ldr	r3, [pc, #288]	; (8003e38 <HAL_I2C_Master_Transmit+0x1e0>)
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fcb5 	bl	800468c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d22:	e05b      	b.n	8003ddc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	6a39      	ldr	r1, [r7, #32]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fb51 	bl	80043d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e07b      	b.n	8003e30 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d034      	beq.n	8003ddc <HAL_I2C_Master_Transmit+0x184>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d130      	bne.n	8003ddc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2180      	movs	r1, #128	; 0x80
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fae3 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e04d      	b.n	8003e30 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2bff      	cmp	r3, #255	; 0xff
 8003d9c:	d90e      	bls.n	8003dbc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	22ff      	movs	r2, #255	; 0xff
 8003da2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	8979      	ldrh	r1, [r7, #10]
 8003dac:	2300      	movs	r3, #0
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fc69 	bl	800468c <I2C_TransferConfig>
 8003dba:	e00f      	b.n	8003ddc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	8979      	ldrh	r1, [r7, #10]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fc58 	bl	800468c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d19e      	bne.n	8003d24 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	6a39      	ldr	r1, [r7, #32]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fb30 	bl	8004450 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e01a      	b.n	8003e30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6859      	ldr	r1, [r3, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_I2C_Master_Transmit+0x1e4>)
 8003e0e:	400b      	ands	r3, r1
 8003e10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e000      	b.n	8003e30 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	80002000 	.word	0x80002000
 8003e3c:	fe00e800 	.word	0xfe00e800

08003e40 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	817b      	strh	r3, [r7, #10]
 8003e50:	4613      	mov	r3, r2
 8003e52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	f040 80db 	bne.w	8004018 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_I2C_Master_Receive+0x30>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e0d4      	b.n	800401a <HAL_I2C_Master_Receive+0x1da>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e78:	f7fe fcd6 	bl	8002828 <HAL_GetTick>
 8003e7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2319      	movs	r3, #25
 8003e84:	2201      	movs	r2, #1
 8003e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fa60 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0bf      	b.n	800401a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2222      	movs	r2, #34	; 0x22
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	893a      	ldrh	r2, [r7, #8]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2bff      	cmp	r3, #255	; 0xff
 8003eca:	d90e      	bls.n	8003eea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	22ff      	movs	r2, #255	; 0xff
 8003ed0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	8979      	ldrh	r1, [r7, #10]
 8003eda:	4b52      	ldr	r3, [pc, #328]	; (8004024 <HAL_I2C_Master_Receive+0x1e4>)
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fbd2 	bl	800468c <I2C_TransferConfig>
 8003ee8:	e06d      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	8979      	ldrh	r1, [r7, #10]
 8003efc:	4b49      	ldr	r3, [pc, #292]	; (8004024 <HAL_I2C_Master_Receive+0x1e4>)
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fbc1 	bl	800468c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003f0a:	e05c      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	6a39      	ldr	r1, [r7, #32]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fad9 	bl	80044c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e07c      	b.n	800401a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d034      	beq.n	8003fc6 <HAL_I2C_Master_Receive+0x186>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d130      	bne.n	8003fc6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2180      	movs	r1, #128	; 0x80
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f9ee 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e04d      	b.n	800401a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2bff      	cmp	r3, #255	; 0xff
 8003f86:	d90e      	bls.n	8003fa6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	22ff      	movs	r2, #255	; 0xff
 8003f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	8979      	ldrh	r1, [r7, #10]
 8003f96:	2300      	movs	r3, #0
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fb74 	bl	800468c <I2C_TransferConfig>
 8003fa4:	e00f      	b.n	8003fc6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	8979      	ldrh	r1, [r7, #10]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fb63 	bl	800468c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d19d      	bne.n	8003f0c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	6a39      	ldr	r1, [r7, #32]
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fa3b 	bl	8004450 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e01a      	b.n	800401a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <HAL_I2C_Master_Receive+0x1e8>)
 8003ff8:	400b      	ands	r3, r1
 8003ffa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e000      	b.n	800401a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004018:	2302      	movs	r3, #2
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	80002400 	.word	0x80002400
 8004028:	fe00e800 	.word	0xfe00e800

0800402c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	4608      	mov	r0, r1
 8004036:	4611      	mov	r1, r2
 8004038:	461a      	mov	r2, r3
 800403a:	4603      	mov	r3, r0
 800403c:	817b      	strh	r3, [r7, #10]
 800403e:	460b      	mov	r3, r1
 8004040:	813b      	strh	r3, [r7, #8]
 8004042:	4613      	mov	r3, r2
 8004044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b20      	cmp	r3, #32
 8004050:	f040 80fd 	bne.w	800424e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_I2C_Mem_Read+0x34>
 800405a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004066:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0f1      	b.n	8004250 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_I2C_Mem_Read+0x4e>
 8004076:	2302      	movs	r3, #2
 8004078:	e0ea      	b.n	8004250 <HAL_I2C_Mem_Read+0x224>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004082:	f7fe fbd1 	bl	8002828 <HAL_GetTick>
 8004086:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	2319      	movs	r3, #25
 800408e:	2201      	movs	r2, #1
 8004090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f95b 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0d5      	b.n	8004250 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2222      	movs	r2, #34	; 0x22
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2240      	movs	r2, #64	; 0x40
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a3a      	ldr	r2, [r7, #32]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040cc:	88f8      	ldrh	r0, [r7, #6]
 80040ce:	893a      	ldrh	r2, [r7, #8]
 80040d0:	8979      	ldrh	r1, [r7, #10]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	4603      	mov	r3, r0
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f8bf 	bl	8004260 <I2C_RequestMemoryRead>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0ad      	b.n	8004250 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2bff      	cmp	r3, #255	; 0xff
 80040fc:	d90e      	bls.n	800411c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	22ff      	movs	r2, #255	; 0xff
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004108:	b2da      	uxtb	r2, r3
 800410a:	8979      	ldrh	r1, [r7, #10]
 800410c:	4b52      	ldr	r3, [pc, #328]	; (8004258 <HAL_I2C_Mem_Read+0x22c>)
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fab9 	bl	800468c <I2C_TransferConfig>
 800411a:	e00f      	b.n	800413c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	b2da      	uxtb	r2, r3
 800412c:	8979      	ldrh	r1, [r7, #10]
 800412e:	4b4a      	ldr	r3, [pc, #296]	; (8004258 <HAL_I2C_Mem_Read+0x22c>)
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 faa8 	bl	800468c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	2200      	movs	r2, #0
 8004144:	2104      	movs	r1, #4
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f902 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07c      	b.n	8004250 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d034      	beq.n	80041fc <HAL_I2C_Mem_Read+0x1d0>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004196:	2b00      	cmp	r3, #0
 8004198:	d130      	bne.n	80041fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	2200      	movs	r2, #0
 80041a2:	2180      	movs	r1, #128	; 0x80
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f8d3 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e04d      	b.n	8004250 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2bff      	cmp	r3, #255	; 0xff
 80041bc:	d90e      	bls.n	80041dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	22ff      	movs	r2, #255	; 0xff
 80041c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	8979      	ldrh	r1, [r7, #10]
 80041cc:	2300      	movs	r3, #0
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fa59 	bl	800468c <I2C_TransferConfig>
 80041da:	e00f      	b.n	80041fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	8979      	ldrh	r1, [r7, #10]
 80041ee:	2300      	movs	r3, #0
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fa48 	bl	800468c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d19a      	bne.n	800413c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f920 	bl	8004450 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e01a      	b.n	8004250 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2220      	movs	r2, #32
 8004220:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_I2C_Mem_Read+0x230>)
 800422e:	400b      	ands	r3, r1
 8004230:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e000      	b.n	8004250 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800424e:	2302      	movs	r3, #2
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	80002400 	.word	0x80002400
 800425c:	fe00e800 	.word	0xfe00e800

08004260 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	4608      	mov	r0, r1
 800426a:	4611      	mov	r1, r2
 800426c:	461a      	mov	r2, r3
 800426e:	4603      	mov	r3, r0
 8004270:	817b      	strh	r3, [r7, #10]
 8004272:	460b      	mov	r3, r1
 8004274:	813b      	strh	r3, [r7, #8]
 8004276:	4613      	mov	r3, r2
 8004278:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	8979      	ldrh	r1, [r7, #10]
 8004280:	4b20      	ldr	r3, [pc, #128]	; (8004304 <I2C_RequestMemoryRead+0xa4>)
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2300      	movs	r3, #0
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fa00 	bl	800468c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	69b9      	ldr	r1, [r7, #24]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f89d 	bl	80043d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e02c      	b.n	80042fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d105      	bne.n	80042b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042a6:	893b      	ldrh	r3, [r7, #8]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28
 80042b0:	e015      	b.n	80042de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042b2:	893b      	ldrh	r3, [r7, #8]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	69b9      	ldr	r1, [r7, #24]
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f883 	bl	80043d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e012      	b.n	80042fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042d4:	893b      	ldrh	r3, [r7, #8]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2200      	movs	r2, #0
 80042e6:	2140      	movs	r1, #64	; 0x40
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f831 	bl	8004350 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	80002000 	.word	0x80002000

08004308 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	d103      	bne.n	8004326 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b01      	cmp	r3, #1
 8004332:	d007      	beq.n	8004344 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	619a      	str	r2, [r3, #24]
  }
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004360:	e022      	b.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004368:	d01e      	beq.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436a:	f7fe fa5d 	bl	8002828 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d302      	bcc.n	8004380 <I2C_WaitOnFlagUntilTimeout+0x30>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d113      	bne.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e00f      	b.n	80043c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4013      	ands	r3, r2
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d0cd      	beq.n	8004362 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043dc:	e02c      	b.n	8004438 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f8dc 	bl	80045a0 <I2C_IsAcknowledgeFailed>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e02a      	b.n	8004448 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f8:	d01e      	beq.n	8004438 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fa:	f7fe fa15 	bl	8002828 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	429a      	cmp	r2, r3
 8004408:	d302      	bcc.n	8004410 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d113      	bne.n	8004438 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	f043 0220 	orr.w	r2, r3, #32
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e007      	b.n	8004448 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b02      	cmp	r3, #2
 8004444:	d1cb      	bne.n	80043de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800445c:	e028      	b.n	80044b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f89c 	bl	80045a0 <I2C_IsAcknowledgeFailed>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e026      	b.n	80044c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004472:	f7fe f9d9 	bl	8002828 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	429a      	cmp	r2, r3
 8004480:	d302      	bcc.n	8004488 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d113      	bne.n	80044b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e007      	b.n	80044c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d1cf      	bne.n	800445e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044d4:	e055      	b.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f860 	bl	80045a0 <I2C_IsAcknowledgeFailed>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e053      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d129      	bne.n	800454c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b04      	cmp	r3, #4
 8004504:	d105      	bne.n	8004512 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e03f      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2220      	movs	r2, #32
 8004518:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4b1d      	ldr	r3, [pc, #116]	; (800459c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004526:	400b      	ands	r3, r1
 8004528:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e022      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454c:	f7fe f96c 	bl	8002828 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	429a      	cmp	r2, r3
 800455a:	d302      	bcc.n	8004562 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	f043 0220 	orr.w	r2, r3, #32
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e007      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b04      	cmp	r3, #4
 800458e:	d1a2      	bne.n	80044d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	fe00e800 	.word	0xfe00e800

080045a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	d161      	bne.n	800467e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045c8:	d02b      	beq.n	8004622 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045d8:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045da:	e022      	b.n	8004622 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e2:	d01e      	beq.n	8004622 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e4:	f7fe f920 	bl	8002828 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d302      	bcc.n	80045fa <I2C_IsAcknowledgeFailed+0x5a>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d113      	bne.n	8004622 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	f043 0220 	orr.w	r2, r3, #32
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e02e      	b.n	8004680 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b20      	cmp	r3, #32
 800462e:	d1d5      	bne.n	80045dc <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2210      	movs	r2, #16
 8004636:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2220      	movs	r2, #32
 800463e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7ff fe61 	bl	8004308 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <I2C_IsAcknowledgeFailed+0xe8>)
 8004652:	400b      	ands	r3, r1
 8004654:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	f043 0204 	orr.w	r2, r3, #4
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	fe00e800 	.word	0xfe00e800

0800468c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	817b      	strh	r3, [r7, #10]
 800469a:	4613      	mov	r3, r2
 800469c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	0d5b      	lsrs	r3, r3, #21
 80046a8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80046ac:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <I2C_TransferConfig+0x58>)
 80046ae:	430b      	orrs	r3, r1
 80046b0:	43db      	mvns	r3, r3
 80046b2:	ea02 0103 	and.w	r1, r2, r3
 80046b6:	897b      	ldrh	r3, [r7, #10]
 80046b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80046bc:	7a7b      	ldrb	r3, [r7, #9]
 80046be:	041b      	lsls	r3, r3, #16
 80046c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	03ff63ff 	.word	0x03ff63ff

080046e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d138      	bne.n	8004770 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004708:	2302      	movs	r3, #2
 800470a:	e032      	b.n	8004772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	; 0x24
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800473a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b20      	cmp	r3, #32
 8004792:	d139      	bne.n	8004808 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800479e:	2302      	movs	r3, #2
 80047a0:	e033      	b.n	800480a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2224      	movs	r2, #36	; 0x24
 80047ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004818:	b08b      	sub	sp, #44	; 0x2c
 800481a:	af06      	add	r7, sp, #24
 800481c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0d0      	b.n	80049ca <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7fd fe1f 	bl	8002480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2203      	movs	r2, #3
 8004846:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f003 fd55 	bl	80082fe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
 8004858:	e04c      	b.n	80048f4 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	440b      	add	r3, r1
 800486a:	3301      	adds	r3, #1
 800486c:	2201      	movs	r2, #1
 800486e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	440b      	add	r3, r1
 8004880:	7bfa      	ldrb	r2, [r7, #15]
 8004882:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004884:	7bfa      	ldrb	r2, [r7, #15]
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	b298      	uxth	r0, r3
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	440b      	add	r3, r1
 8004896:	3336      	adds	r3, #54	; 0x36
 8004898:	4602      	mov	r2, r0
 800489a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	440b      	add	r3, r1
 80048ac:	3303      	adds	r3, #3
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048b2:	7bfa      	ldrb	r2, [r7, #15]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	440b      	add	r3, r1
 80048c0:	3338      	adds	r3, #56	; 0x38
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048c6:	7bfa      	ldrb	r2, [r7, #15]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	333c      	adds	r3, #60	; 0x3c
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048da:	7bfa      	ldrb	r2, [r7, #15]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	440b      	add	r3, r1
 80048e8:	3340      	adds	r3, #64	; 0x40
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	3301      	adds	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	7bfa      	ldrb	r2, [r7, #15]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3ad      	bcc.n	800485a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
 8004902:	e044      	b.n	800498e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004904:	7bfa      	ldrb	r2, [r7, #15]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	440b      	add	r3, r1
 8004912:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800491a:	7bfa      	ldrb	r2, [r7, #15]
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	440b      	add	r3, r1
 8004928:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800492c:	7bfa      	ldrb	r2, [r7, #15]
 800492e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004930:	7bfa      	ldrb	r2, [r7, #15]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	440b      	add	r3, r1
 800493e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004946:	7bfa      	ldrb	r2, [r7, #15]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	440b      	add	r3, r1
 8004954:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800495c:	7bfa      	ldrb	r2, [r7, #15]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	440b      	add	r3, r1
 800496a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004972:	7bfa      	ldrb	r2, [r7, #15]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	440b      	add	r3, r1
 8004980:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	3301      	adds	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d3b5      	bcc.n	8004904 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	687e      	ldr	r6, [r7, #4]
 80049a0:	466d      	mov	r5, sp
 80049a2:	f106 0410 	add.w	r4, r6, #16
 80049a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	602b      	str	r3, [r5, #0]
 80049ae:	1d33      	adds	r3, r6, #4
 80049b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049b2:	6838      	ldr	r0, [r7, #0]
 80049b4:	f003 fcbe 	bl	8008334 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080049d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80049da:	af00      	add	r7, sp, #0
 80049dc:	1d3b      	adds	r3, r7, #4
 80049de:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e0:	1d3b      	adds	r3, r7, #4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f000 bef4 	b.w	80057d6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ee:	1d3b      	adds	r3, r7, #4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 816a 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80049fe:	4bb3      	ldr	r3, [pc, #716]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d00c      	beq.n	8004a24 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a0a:	4bb0      	ldr	r3, [pc, #704]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d159      	bne.n	8004aca <HAL_RCC_OscConfig+0xf6>
 8004a16:	4bad      	ldr	r3, [pc, #692]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a22:	d152      	bne.n	8004aca <HAL_RCC_OscConfig+0xf6>
 8004a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a28:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004a30:	fa93 f3a3 	rbit	r3, r3
 8004a34:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8004a38:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3c:	fab3 f383 	clz	r3, r3
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d102      	bne.n	8004a56 <HAL_RCC_OscConfig+0x82>
 8004a50:	4b9e      	ldr	r3, [pc, #632]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	e015      	b.n	8004a82 <HAL_RCC_OscConfig+0xae>
 8004a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a5a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004a62:	fa93 f3a3 	rbit	r3, r3
 8004a66:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a6e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a72:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004a7e:	4b93      	ldr	r3, [pc, #588]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a86:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004a8a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004a8e:	fa92 f2a2 	rbit	r2, r2
 8004a92:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004a96:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004a9a:	fab2 f282 	clz	r2, r2
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	f042 0220 	orr.w	r2, r2, #32
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	f002 021f 	and.w	r2, r2, #31
 8004aaa:	2101      	movs	r1, #1
 8004aac:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 810c 	beq.w	8004cd0 <HAL_RCC_OscConfig+0x2fc>
 8004ab8:	1d3b      	adds	r3, r7, #4
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 8106 	bne.w	8004cd0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	f000 be86 	b.w	80057d6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aca:	1d3b      	adds	r3, r7, #4
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad4:	d106      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x110>
 8004ad6:	4b7d      	ldr	r3, [pc, #500]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a7c      	ldr	r2, [pc, #496]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e030      	b.n	8004b46 <HAL_RCC_OscConfig+0x172>
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x134>
 8004aee:	4b77      	ldr	r3, [pc, #476]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a76      	ldr	r2, [pc, #472]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4b74      	ldr	r3, [pc, #464]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a73      	ldr	r2, [pc, #460]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	e01e      	b.n	8004b46 <HAL_RCC_OscConfig+0x172>
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b12:	d10c      	bne.n	8004b2e <HAL_RCC_OscConfig+0x15a>
 8004b14:	4b6d      	ldr	r3, [pc, #436]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a6c      	ldr	r2, [pc, #432]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	4b6a      	ldr	r3, [pc, #424]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a69      	ldr	r2, [pc, #420]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	e00b      	b.n	8004b46 <HAL_RCC_OscConfig+0x172>
 8004b2e:	4b67      	ldr	r3, [pc, #412]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a66      	ldr	r2, [pc, #408]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4b64      	ldr	r3, [pc, #400]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a63      	ldr	r2, [pc, #396]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b44:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b46:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	f023 020f 	bic.w	r2, r3, #15
 8004b4e:	1d3b      	adds	r3, r7, #4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	495d      	ldr	r1, [pc, #372]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b5a:	1d3b      	adds	r3, r7, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d059      	beq.n	8004c18 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fd fe60 	bl	8002828 <HAL_GetTick>
 8004b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6c:	e00a      	b.n	8004b84 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b6e:	f7fd fe5b 	bl	8002828 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	; 0x64
 8004b7c:	d902      	bls.n	8004b84 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	f000 be29 	b.w	80057d6 <HAL_RCC_OscConfig+0xe02>
 8004b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b88:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004b90:	fa93 f3a3 	rbit	r3, r3
 8004b94:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004b98:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9c:	fab3 f383 	clz	r3, r3
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d102      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x1e2>
 8004bb0:	4b46      	ldr	r3, [pc, #280]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	e015      	b.n	8004be2 <HAL_RCC_OscConfig+0x20e>
 8004bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004bc2:	fa93 f3a3 	rbit	r3, r3
 8004bc6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004bd2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004bd6:	fa93 f3a3 	rbit	r3, r3
 8004bda:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004bde:	4b3b      	ldr	r3, [pc, #236]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004be6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004bea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004bee:	fa92 f2a2 	rbit	r2, r2
 8004bf2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004bf6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004bfa:	fab2 f282 	clz	r2, r2
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	f042 0220 	orr.w	r2, r2, #32
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	f002 021f 	and.w	r2, r2, #31
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0ab      	beq.n	8004b6e <HAL_RCC_OscConfig+0x19a>
 8004c16:	e05c      	b.n	8004cd2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fd fe06 	bl	8002828 <HAL_GetTick>
 8004c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c20:	e00a      	b.n	8004c38 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c22:	f7fd fe01 	bl	8002828 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b64      	cmp	r3, #100	; 0x64
 8004c30:	d902      	bls.n	8004c38 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	f000 bdcf 	b.w	80057d6 <HAL_RCC_OscConfig+0xe02>
 8004c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c3c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004c4c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c50:	fab3 f383 	clz	r3, r3
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d102      	bne.n	8004c6a <HAL_RCC_OscConfig+0x296>
 8004c64:	4b19      	ldr	r3, [pc, #100]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	e015      	b.n	8004c96 <HAL_RCC_OscConfig+0x2c2>
 8004c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c6e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c72:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004c7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c82:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004c86:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004c8a:	fa93 f3a3 	rbit	r3, r3
 8004c8e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004c92:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <HAL_RCC_OscConfig+0x2f8>)
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c9a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004c9e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004ca2:	fa92 f2a2 	rbit	r2, r2
 8004ca6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004caa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004cae:	fab2 f282 	clz	r2, r2
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	f042 0220 	orr.w	r2, r2, #32
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	f002 021f 	and.w	r2, r2, #31
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1ab      	bne.n	8004c22 <HAL_RCC_OscConfig+0x24e>
 8004cca:	e002      	b.n	8004cd2 <HAL_RCC_OscConfig+0x2fe>
 8004ccc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd2:	1d3b      	adds	r3, r7, #4
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 816f 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ce2:	4bd0      	ldr	r3, [pc, #832]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004cee:	4bcd      	ldr	r3, [pc, #820]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d16c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x400>
 8004cfa:	4bca      	ldr	r3, [pc, #808]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d166      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x400>
 8004d06:	2302      	movs	r3, #2
 8004d08:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004d18:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1c:	fab3 f383 	clz	r3, r3
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d102      	bne.n	8004d36 <HAL_RCC_OscConfig+0x362>
 8004d30:	4bbc      	ldr	r3, [pc, #752]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	e013      	b.n	8004d5e <HAL_RCC_OscConfig+0x38a>
 8004d36:	2302      	movs	r3, #2
 8004d38:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004d40:	fa93 f3a3 	rbit	r3, r3
 8004d44:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004d48:	2302      	movs	r3, #2
 8004d4a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004d4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004d52:	fa93 f3a3 	rbit	r3, r3
 8004d56:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004d5a:	4bb2      	ldr	r3, [pc, #712]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004d64:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d68:	fa92 f2a2 	rbit	r2, r2
 8004d6c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004d70:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004d74:	fab2 f282 	clz	r2, r2
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	f042 0220 	orr.w	r2, r2, #32
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	f002 021f 	and.w	r2, r2, #31
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f202 	lsl.w	r2, r1, r2
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_RCC_OscConfig+0x3cc>
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d002      	beq.n	8004da0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f000 bd1b 	b.w	80057d6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da0:	4ba0      	ldr	r3, [pc, #640]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da8:	1d3b      	adds	r3, r7, #4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	21f8      	movs	r1, #248	; 0xf8
 8004db0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004db8:	fa91 f1a1 	rbit	r1, r1
 8004dbc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004dc0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004dc4:	fab1 f181 	clz	r1, r1
 8004dc8:	b2c9      	uxtb	r1, r1
 8004dca:	408b      	lsls	r3, r1
 8004dcc:	4995      	ldr	r1, [pc, #596]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd2:	e0f5      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8085 	beq.w	8004eea <HAL_RCC_OscConfig+0x516>
 8004de0:	2301      	movs	r3, #1
 8004de2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004dea:	fa93 f3a3 	rbit	r3, r3
 8004dee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004df2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df6:	fab3 f383 	clz	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	461a      	mov	r2, r3
 8004e08:	2301      	movs	r3, #1
 8004e0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fd fd0c 	bl	8002828 <HAL_GetTick>
 8004e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e14:	e00a      	b.n	8004e2c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e16:	f7fd fd07 	bl	8002828 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d902      	bls.n	8004e2c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	f000 bcd5 	b.w	80057d6 <HAL_RCC_OscConfig+0xe02>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004e36:	fa93 f3a3 	rbit	r3, r3
 8004e3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004e3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e42:	fab3 f383 	clz	r3, r3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d102      	bne.n	8004e5c <HAL_RCC_OscConfig+0x488>
 8004e56:	4b73      	ldr	r3, [pc, #460]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	e013      	b.n	8004e84 <HAL_RCC_OscConfig+0x4b0>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004e66:	fa93 f3a3 	rbit	r3, r3
 8004e6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e6e:	2302      	movs	r3, #2
 8004e70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004e74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e78:	fa93 f3a3 	rbit	r3, r3
 8004e7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004e80:	4b68      	ldr	r3, [pc, #416]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	2202      	movs	r2, #2
 8004e86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004e8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e8e:	fa92 f2a2 	rbit	r2, r2
 8004e92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004e96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004e9a:	fab2 f282 	clz	r2, r2
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	f042 0220 	orr.w	r2, r2, #32
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	f002 021f 	and.w	r2, r2, #31
 8004eaa:	2101      	movs	r1, #1
 8004eac:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0af      	beq.n	8004e16 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb6:	4b5b      	ldr	r3, [pc, #364]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	21f8      	movs	r1, #248	; 0xf8
 8004ec6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004ece:	fa91 f1a1 	rbit	r1, r1
 8004ed2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004ed6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004eda:	fab1 f181 	clz	r1, r1
 8004ede:	b2c9      	uxtb	r1, r1
 8004ee0:	408b      	lsls	r3, r1
 8004ee2:	4950      	ldr	r1, [pc, #320]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	600b      	str	r3, [r1, #0]
 8004ee8:	e06a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x5ec>
 8004eea:	2301      	movs	r3, #1
 8004eec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ef4:	fa93 f3a3 	rbit	r3, r3
 8004ef8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004efc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f00:	fab3 f383 	clz	r3, r3
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	461a      	mov	r2, r3
 8004f12:	2300      	movs	r3, #0
 8004f14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f16:	f7fd fc87 	bl	8002828 <HAL_GetTick>
 8004f1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f20:	f7fd fc82 	bl	8002828 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d902      	bls.n	8004f36 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	f000 bc50 	b.w	80057d6 <HAL_RCC_OscConfig+0xe02>
 8004f36:	2302      	movs	r3, #2
 8004f38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f40:	fa93 f3a3 	rbit	r3, r3
 8004f44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4c:	fab3 f383 	clz	r3, r3
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d102      	bne.n	8004f66 <HAL_RCC_OscConfig+0x592>
 8004f60:	4b30      	ldr	r3, [pc, #192]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	e013      	b.n	8004f8e <HAL_RCC_OscConfig+0x5ba>
 8004f66:	2302      	movs	r3, #2
 8004f68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f70:	fa93 f3a3 	rbit	r3, r3
 8004f74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f78:	2302      	movs	r3, #2
 8004f7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f82:	fa93 f3a3 	rbit	r3, r3
 8004f86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f8a:	4b26      	ldr	r3, [pc, #152]	; (8005024 <HAL_RCC_OscConfig+0x650>)
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004f94:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004f98:	fa92 f2a2 	rbit	r2, r2
 8004f9c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004fa0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004fa4:	fab2 f282 	clz	r2, r2
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	f042 0220 	orr.w	r2, r2, #32
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	f002 021f 	and.w	r2, r2, #31
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1af      	bne.n	8004f20 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc0:	1d3b      	adds	r3, r7, #4
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80da 	beq.w	8005184 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fd0:	1d3b      	adds	r3, r7, #4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d069      	beq.n	80050ae <HAL_RCC_OscConfig+0x6da>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004fe4:	fa93 f3a3 	rbit	r3, r3
 8004fe8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff0:	fab3 f383 	clz	r3, r3
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_OscConfig+0x654>)
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	461a      	mov	r2, r3
 8005000:	2301      	movs	r3, #1
 8005002:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005004:	f7fd fc10 	bl	8002828 <HAL_GetTick>
 8005008:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500c:	e00e      	b.n	800502c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800500e:	f7fd fc0b 	bl	8002828 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d906      	bls.n	800502c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e3d9      	b.n	80057d6 <HAL_RCC_OscConfig+0xe02>
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000
 8005028:	10908120 	.word	0x10908120
 800502c:	2302      	movs	r3, #2
 800502e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005032:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005036:	fa93 f3a3 	rbit	r3, r3
 800503a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800503e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005042:	2202      	movs	r2, #2
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	fa93 f2a3 	rbit	r2, r3
 8005050:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800505a:	2202      	movs	r2, #2
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	fa93 f2a3 	rbit	r2, r3
 8005068:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800506c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506e:	4ba5      	ldr	r3, [pc, #660]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 8005070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005072:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005076:	2102      	movs	r1, #2
 8005078:	6019      	str	r1, [r3, #0]
 800507a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	fa93 f1a3 	rbit	r1, r3
 8005084:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005088:	6019      	str	r1, [r3, #0]
  return result;
 800508a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	fab3 f383 	clz	r3, r3
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800509a:	b2db      	uxtb	r3, r3
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	2101      	movs	r1, #1
 80050a2:	fa01 f303 	lsl.w	r3, r1, r3
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0b0      	beq.n	800500e <HAL_RCC_OscConfig+0x63a>
 80050ac:	e06a      	b.n	8005184 <HAL_RCC_OscConfig+0x7b0>
 80050ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	fa93 f2a3 	rbit	r2, r3
 80050c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80050c4:	601a      	str	r2, [r3, #0]
  return result;
 80050c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80050ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050cc:	fab3 f383 	clz	r3, r3
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	4b8c      	ldr	r3, [pc, #560]	; (8005308 <HAL_RCC_OscConfig+0x934>)
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	461a      	mov	r2, r3
 80050dc:	2300      	movs	r3, #0
 80050de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e0:	f7fd fba2 	bl	8002828 <HAL_GetTick>
 80050e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e8:	e009      	b.n	80050fe <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ea:	f7fd fb9d 	bl	8002828 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e36b      	b.n	80057d6 <HAL_RCC_OscConfig+0xe02>
 80050fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005102:	2202      	movs	r2, #2
 8005104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005106:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	fa93 f2a3 	rbit	r2, r3
 8005110:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800511a:	2202      	movs	r2, #2
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	fa93 f2a3 	rbit	r2, r3
 8005128:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005132:	2202      	movs	r2, #2
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	fa93 f2a3 	rbit	r2, r3
 8005140:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005144:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005146:	4b6f      	ldr	r3, [pc, #444]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 8005148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800514a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800514e:	2102      	movs	r1, #2
 8005150:	6019      	str	r1, [r3, #0]
 8005152:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	fa93 f1a3 	rbit	r1, r3
 800515c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005160:	6019      	str	r1, [r3, #0]
  return result;
 8005162:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	fab3 f383 	clz	r3, r3
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	2101      	movs	r1, #1
 800517a:	fa01 f303 	lsl.w	r3, r1, r3
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1b2      	bne.n	80050ea <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 8158 	beq.w	8005444 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005194:	2300      	movs	r3, #0
 8005196:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800519a:	4b5a      	ldr	r3, [pc, #360]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d112      	bne.n	80051cc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a6:	4b57      	ldr	r3, [pc, #348]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	4a56      	ldr	r2, [pc, #344]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 80051ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b0:	61d3      	str	r3, [r2, #28]
 80051b2:	4b54      	ldr	r3, [pc, #336]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80051ba:	f107 0308 	add.w	r3, r7, #8
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f107 0308 	add.w	r3, r7, #8
 80051c4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051cc:	4b4f      	ldr	r3, [pc, #316]	; (800530c <HAL_RCC_OscConfig+0x938>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d11a      	bne.n	800520e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051d8:	4b4c      	ldr	r3, [pc, #304]	; (800530c <HAL_RCC_OscConfig+0x938>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a4b      	ldr	r2, [pc, #300]	; (800530c <HAL_RCC_OscConfig+0x938>)
 80051de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e4:	f7fd fb20 	bl	8002828 <HAL_GetTick>
 80051e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ec:	e009      	b.n	8005202 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ee:	f7fd fb1b 	bl	8002828 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b64      	cmp	r3, #100	; 0x64
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e2e9      	b.n	80057d6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005202:	4b42      	ldr	r3, [pc, #264]	; (800530c <HAL_RCC_OscConfig+0x938>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0ef      	beq.n	80051ee <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800520e:	1d3b      	adds	r3, r7, #4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d106      	bne.n	8005226 <HAL_RCC_OscConfig+0x852>
 8005218:	4b3a      	ldr	r3, [pc, #232]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	4a39      	ldr	r2, [pc, #228]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 800521e:	f043 0301 	orr.w	r3, r3, #1
 8005222:	6213      	str	r3, [r2, #32]
 8005224:	e02f      	b.n	8005286 <HAL_RCC_OscConfig+0x8b2>
 8005226:	1d3b      	adds	r3, r7, #4
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10c      	bne.n	800524a <HAL_RCC_OscConfig+0x876>
 8005230:	4b34      	ldr	r3, [pc, #208]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	4a33      	ldr	r2, [pc, #204]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	6213      	str	r3, [r2, #32]
 800523c:	4b31      	ldr	r3, [pc, #196]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	4a30      	ldr	r2, [pc, #192]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 8005242:	f023 0304 	bic.w	r3, r3, #4
 8005246:	6213      	str	r3, [r2, #32]
 8005248:	e01d      	b.n	8005286 <HAL_RCC_OscConfig+0x8b2>
 800524a:	1d3b      	adds	r3, r7, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	2b05      	cmp	r3, #5
 8005252:	d10c      	bne.n	800526e <HAL_RCC_OscConfig+0x89a>
 8005254:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	4a2a      	ldr	r2, [pc, #168]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 800525a:	f043 0304 	orr.w	r3, r3, #4
 800525e:	6213      	str	r3, [r2, #32]
 8005260:	4b28      	ldr	r3, [pc, #160]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	4a27      	ldr	r2, [pc, #156]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	6213      	str	r3, [r2, #32]
 800526c:	e00b      	b.n	8005286 <HAL_RCC_OscConfig+0x8b2>
 800526e:	4b25      	ldr	r3, [pc, #148]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	4a24      	ldr	r2, [pc, #144]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 8005274:	f023 0301 	bic.w	r3, r3, #1
 8005278:	6213      	str	r3, [r2, #32]
 800527a:	4b22      	ldr	r3, [pc, #136]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	4a21      	ldr	r2, [pc, #132]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 8005280:	f023 0304 	bic.w	r3, r3, #4
 8005284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d06b      	beq.n	8005368 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005290:	f7fd faca 	bl	8002828 <HAL_GetTick>
 8005294:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005298:	e00b      	b.n	80052b2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800529a:	f7fd fac5 	bl	8002828 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e291      	b.n	80057d6 <HAL_RCC_OscConfig+0xe02>
 80052b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80052b6:	2202      	movs	r2, #2
 80052b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	fa93 f2a3 	rbit	r2, r3
 80052c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80052ce:	2202      	movs	r2, #2
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	fa93 f2a3 	rbit	r2, r3
 80052dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80052e0:	601a      	str	r2, [r3, #0]
  return result;
 80052e2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80052e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e8:	fab3 f383 	clz	r3, r3
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f043 0302 	orr.w	r3, r3, #2
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d109      	bne.n	8005310 <HAL_RCC_OscConfig+0x93c>
 80052fc:	4b01      	ldr	r3, [pc, #4]	; (8005304 <HAL_RCC_OscConfig+0x930>)
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	e014      	b.n	800532c <HAL_RCC_OscConfig+0x958>
 8005302:	bf00      	nop
 8005304:	40021000 	.word	0x40021000
 8005308:	10908120 	.word	0x10908120
 800530c:	40007000 	.word	0x40007000
 8005310:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005314:	2202      	movs	r2, #2
 8005316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005318:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	fa93 f2a3 	rbit	r2, r3
 8005322:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	4bbb      	ldr	r3, [pc, #748]	; (8005618 <HAL_RCC_OscConfig+0xc44>)
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005330:	2102      	movs	r1, #2
 8005332:	6011      	str	r1, [r2, #0]
 8005334:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	fa92 f1a2 	rbit	r1, r2
 800533e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005342:	6011      	str	r1, [r2, #0]
  return result;
 8005344:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005348:	6812      	ldr	r2, [r2, #0]
 800534a:	fab2 f282 	clz	r2, r2
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	f002 021f 	and.w	r2, r2, #31
 800535a:	2101      	movs	r1, #1
 800535c:	fa01 f202 	lsl.w	r2, r1, r2
 8005360:	4013      	ands	r3, r2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d099      	beq.n	800529a <HAL_RCC_OscConfig+0x8c6>
 8005366:	e063      	b.n	8005430 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005368:	f7fd fa5e 	bl	8002828 <HAL_GetTick>
 800536c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005370:	e00b      	b.n	800538a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7fd fa59 	bl	8002828 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e225      	b.n	80057d6 <HAL_RCC_OscConfig+0xe02>
 800538a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800538e:	2202      	movs	r2, #2
 8005390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	fa93 f2a3 	rbit	r2, r3
 800539c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80053a6:	2202      	movs	r2, #2
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	fa93 f2a3 	rbit	r2, r3
 80053b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80053b8:	601a      	str	r2, [r3, #0]
  return result;
 80053ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80053be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c0:	fab3 f383 	clz	r3, r3
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f043 0302 	orr.w	r3, r3, #2
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d102      	bne.n	80053da <HAL_RCC_OscConfig+0xa06>
 80053d4:	4b90      	ldr	r3, [pc, #576]	; (8005618 <HAL_RCC_OscConfig+0xc44>)
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	e00d      	b.n	80053f6 <HAL_RCC_OscConfig+0xa22>
 80053da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80053de:	2202      	movs	r2, #2
 80053e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	fa93 f2a3 	rbit	r2, r3
 80053ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	4b89      	ldr	r3, [pc, #548]	; (8005618 <HAL_RCC_OscConfig+0xc44>)
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80053fa:	2102      	movs	r1, #2
 80053fc:	6011      	str	r1, [r2, #0]
 80053fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	fa92 f1a2 	rbit	r1, r2
 8005408:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800540c:	6011      	str	r1, [r2, #0]
  return result;
 800540e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	fab2 f282 	clz	r2, r2
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	f002 021f 	and.w	r2, r2, #31
 8005424:	2101      	movs	r1, #1
 8005426:	fa01 f202 	lsl.w	r2, r1, r2
 800542a:	4013      	ands	r3, r2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1a0      	bne.n	8005372 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005430:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005434:	2b01      	cmp	r3, #1
 8005436:	d105      	bne.n	8005444 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005438:	4b77      	ldr	r3, [pc, #476]	; (8005618 <HAL_RCC_OscConfig+0xc44>)
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	4a76      	ldr	r2, [pc, #472]	; (8005618 <HAL_RCC_OscConfig+0xc44>)
 800543e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005442:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005444:	1d3b      	adds	r3, r7, #4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 81c2 	beq.w	80057d4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005450:	4b71      	ldr	r3, [pc, #452]	; (8005618 <HAL_RCC_OscConfig+0xc44>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f003 030c 	and.w	r3, r3, #12
 8005458:	2b08      	cmp	r3, #8
 800545a:	f000 819c 	beq.w	8005796 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800545e:	1d3b      	adds	r3, r7, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	2b02      	cmp	r3, #2
 8005466:	f040 8114 	bne.w	8005692 <HAL_RCC_OscConfig+0xcbe>
 800546a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800546e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005474:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	fa93 f2a3 	rbit	r2, r3
 800547e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005482:	601a      	str	r2, [r3, #0]
  return result;
 8005484:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005488:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548a:	fab3 f383 	clz	r3, r3
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005494:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	461a      	mov	r2, r3
 800549c:	2300      	movs	r3, #0
 800549e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a0:	f7fd f9c2 	bl	8002828 <HAL_GetTick>
 80054a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054a8:	e009      	b.n	80054be <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054aa:	f7fd f9bd 	bl	8002828 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e18b      	b.n	80057d6 <HAL_RCC_OscConfig+0xe02>
 80054be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80054c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	fa93 f2a3 	rbit	r2, r3
 80054d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80054d6:	601a      	str	r2, [r3, #0]
  return result;
 80054d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80054dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054de:	fab3 f383 	clz	r3, r3
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d102      	bne.n	80054f8 <HAL_RCC_OscConfig+0xb24>
 80054f2:	4b49      	ldr	r3, [pc, #292]	; (8005618 <HAL_RCC_OscConfig+0xc44>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	e01b      	b.n	8005530 <HAL_RCC_OscConfig+0xb5c>
 80054f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80054fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005502:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	fa93 f2a3 	rbit	r2, r3
 800550c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	fa93 f2a3 	rbit	r2, r3
 8005526:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	4b3a      	ldr	r3, [pc, #232]	; (8005618 <HAL_RCC_OscConfig+0xc44>)
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005534:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005538:	6011      	str	r1, [r2, #0]
 800553a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	fa92 f1a2 	rbit	r1, r2
 8005544:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005548:	6011      	str	r1, [r2, #0]
  return result;
 800554a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	fab2 f282 	clz	r2, r2
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	f042 0220 	orr.w	r2, r2, #32
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	f002 021f 	and.w	r2, r2, #31
 8005560:	2101      	movs	r1, #1
 8005562:	fa01 f202 	lsl.w	r2, r1, r2
 8005566:	4013      	ands	r3, r2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d19e      	bne.n	80054aa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800556c:	4b2a      	ldr	r3, [pc, #168]	; (8005618 <HAL_RCC_OscConfig+0xc44>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800557a:	1d3b      	adds	r3, r7, #4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	430b      	orrs	r3, r1
 8005582:	4925      	ldr	r1, [pc, #148]	; (8005618 <HAL_RCC_OscConfig+0xc44>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]
 8005588:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800558c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005592:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	fa93 f2a3 	rbit	r2, r3
 800559c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055a0:	601a      	str	r2, [r3, #0]
  return result;
 80055a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055a6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a8:	fab3 f383 	clz	r3, r3
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	461a      	mov	r2, r3
 80055ba:	2301      	movs	r3, #1
 80055bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055be:	f7fd f933 	bl	8002828 <HAL_GetTick>
 80055c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055c6:	e009      	b.n	80055dc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c8:	f7fd f92e 	bl	8002828 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e0fc      	b.n	80057d6 <HAL_RCC_OscConfig+0xe02>
 80055dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	fa93 f2a3 	rbit	r2, r3
 80055f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80055f4:	601a      	str	r2, [r3, #0]
  return result;
 80055f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80055fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055fc:	fab3 f383 	clz	r3, r3
 8005600:	b2db      	uxtb	r3, r3
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	d105      	bne.n	800561c <HAL_RCC_OscConfig+0xc48>
 8005610:	4b01      	ldr	r3, [pc, #4]	; (8005618 <HAL_RCC_OscConfig+0xc44>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	e01e      	b.n	8005654 <HAL_RCC_OscConfig+0xc80>
 8005616:	bf00      	nop
 8005618:	40021000 	.word	0x40021000
 800561c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005620:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005626:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	fa93 f2a3 	rbit	r2, r3
 8005630:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800563a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	fa93 f2a3 	rbit	r2, r3
 800564a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	4b63      	ldr	r3, [pc, #396]	; (80057e0 <HAL_RCC_OscConfig+0xe0c>)
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005658:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800565c:	6011      	str	r1, [r2, #0]
 800565e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	fa92 f1a2 	rbit	r1, r2
 8005668:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800566c:	6011      	str	r1, [r2, #0]
  return result;
 800566e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	fab2 f282 	clz	r2, r2
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	f042 0220 	orr.w	r2, r2, #32
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	f002 021f 	and.w	r2, r2, #31
 8005684:	2101      	movs	r1, #1
 8005686:	fa01 f202 	lsl.w	r2, r1, r2
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d09b      	beq.n	80055c8 <HAL_RCC_OscConfig+0xbf4>
 8005690:	e0a0      	b.n	80057d4 <HAL_RCC_OscConfig+0xe00>
 8005692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005696:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800569a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	fa93 f2a3 	rbit	r2, r3
 80056a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056aa:	601a      	str	r2, [r3, #0]
  return result;
 80056ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b2:	fab3 f383 	clz	r3, r3
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	461a      	mov	r2, r3
 80056c4:	2300      	movs	r3, #0
 80056c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c8:	f7fd f8ae 	bl	8002828 <HAL_GetTick>
 80056cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056d0:	e009      	b.n	80056e6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d2:	f7fd f8a9 	bl	8002828 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e077      	b.n	80057d6 <HAL_RCC_OscConfig+0xe02>
 80056e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	fa93 f2a3 	rbit	r2, r3
 80056fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056fe:	601a      	str	r2, [r3, #0]
  return result;
 8005700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005704:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005706:	fab3 f383 	clz	r3, r3
 800570a:	b2db      	uxtb	r3, r3
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b01      	cmp	r3, #1
 8005718:	d102      	bne.n	8005720 <HAL_RCC_OscConfig+0xd4c>
 800571a:	4b31      	ldr	r3, [pc, #196]	; (80057e0 <HAL_RCC_OscConfig+0xe0c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	e01b      	b.n	8005758 <HAL_RCC_OscConfig+0xd84>
 8005720:	f107 0320 	add.w	r3, r7, #32
 8005724:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572a:	f107 0320 	add.w	r3, r7, #32
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	fa93 f2a3 	rbit	r2, r3
 8005734:	f107 031c 	add.w	r3, r7, #28
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	f107 0318 	add.w	r3, r7, #24
 800573e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	f107 0318 	add.w	r3, r7, #24
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	fa93 f2a3 	rbit	r2, r3
 800574e:	f107 0314 	add.w	r3, r7, #20
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	4b22      	ldr	r3, [pc, #136]	; (80057e0 <HAL_RCC_OscConfig+0xe0c>)
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	f107 0210 	add.w	r2, r7, #16
 800575c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005760:	6011      	str	r1, [r2, #0]
 8005762:	f107 0210 	add.w	r2, r7, #16
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	fa92 f1a2 	rbit	r1, r2
 800576c:	f107 020c 	add.w	r2, r7, #12
 8005770:	6011      	str	r1, [r2, #0]
  return result;
 8005772:	f107 020c 	add.w	r2, r7, #12
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	fab2 f282 	clz	r2, r2
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	f042 0220 	orr.w	r2, r2, #32
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	f002 021f 	and.w	r2, r2, #31
 8005788:	2101      	movs	r1, #1
 800578a:	fa01 f202 	lsl.w	r2, r1, r2
 800578e:	4013      	ands	r3, r2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d19e      	bne.n	80056d2 <HAL_RCC_OscConfig+0xcfe>
 8005794:	e01e      	b.n	80057d4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005796:	1d3b      	adds	r3, r7, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e018      	b.n	80057d6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057a4:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <HAL_RCC_OscConfig+0xe0c>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057b4:	1d3b      	adds	r3, r7, #4
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d108      	bne.n	80057d0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80057be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057c6:	1d3b      	adds	r3, r7, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d001      	beq.n	80057d4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e000      	b.n	80057d6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40021000 	.word	0x40021000

080057e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b09e      	sub	sp, #120	; 0x78
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e162      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057fc:	4b90      	ldr	r3, [pc, #576]	; (8005a40 <HAL_RCC_ClockConfig+0x25c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d910      	bls.n	800582c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580a:	4b8d      	ldr	r3, [pc, #564]	; (8005a40 <HAL_RCC_ClockConfig+0x25c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f023 0207 	bic.w	r2, r3, #7
 8005812:	498b      	ldr	r1, [pc, #556]	; (8005a40 <HAL_RCC_ClockConfig+0x25c>)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	4313      	orrs	r3, r2
 8005818:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800581a:	4b89      	ldr	r3, [pc, #548]	; (8005a40 <HAL_RCC_ClockConfig+0x25c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d001      	beq.n	800582c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e14a      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005838:	4b82      	ldr	r3, [pc, #520]	; (8005a44 <HAL_RCC_ClockConfig+0x260>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	497f      	ldr	r1, [pc, #508]	; (8005a44 <HAL_RCC_ClockConfig+0x260>)
 8005846:	4313      	orrs	r3, r2
 8005848:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 80dc 	beq.w	8005a10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d13c      	bne.n	80058da <HAL_RCC_ClockConfig+0xf6>
 8005860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005864:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005868:	fa93 f3a3 	rbit	r3, r3
 800586c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800586e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005870:	fab3 f383 	clz	r3, r3
 8005874:	b2db      	uxtb	r3, r3
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	b2db      	uxtb	r3, r3
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	d102      	bne.n	800588a <HAL_RCC_ClockConfig+0xa6>
 8005884:	4b6f      	ldr	r3, [pc, #444]	; (8005a44 <HAL_RCC_ClockConfig+0x260>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	e00f      	b.n	80058aa <HAL_RCC_ClockConfig+0xc6>
 800588a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800588e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005892:	fa93 f3a3 	rbit	r3, r3
 8005896:	667b      	str	r3, [r7, #100]	; 0x64
 8005898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800589c:	663b      	str	r3, [r7, #96]	; 0x60
 800589e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a0:	fa93 f3a3 	rbit	r3, r3
 80058a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058a6:	4b67      	ldr	r3, [pc, #412]	; (8005a44 <HAL_RCC_ClockConfig+0x260>)
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80058b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058b2:	fa92 f2a2 	rbit	r2, r2
 80058b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80058b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058ba:	fab2 f282 	clz	r2, r2
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	f042 0220 	orr.w	r2, r2, #32
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	f002 021f 	and.w	r2, r2, #31
 80058ca:	2101      	movs	r1, #1
 80058cc:	fa01 f202 	lsl.w	r2, r1, r2
 80058d0:	4013      	ands	r3, r2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d17b      	bne.n	80059ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e0f3      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d13c      	bne.n	800595c <HAL_RCC_ClockConfig+0x178>
 80058e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ea:	fa93 f3a3 	rbit	r3, r3
 80058ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80058f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f2:	fab3 f383 	clz	r3, r3
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b01      	cmp	r3, #1
 8005904:	d102      	bne.n	800590c <HAL_RCC_ClockConfig+0x128>
 8005906:	4b4f      	ldr	r3, [pc, #316]	; (8005a44 <HAL_RCC_ClockConfig+0x260>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	e00f      	b.n	800592c <HAL_RCC_ClockConfig+0x148>
 800590c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005910:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005914:	fa93 f3a3 	rbit	r3, r3
 8005918:	647b      	str	r3, [r7, #68]	; 0x44
 800591a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800591e:	643b      	str	r3, [r7, #64]	; 0x40
 8005920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005922:	fa93 f3a3 	rbit	r3, r3
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005928:	4b46      	ldr	r3, [pc, #280]	; (8005a44 <HAL_RCC_ClockConfig+0x260>)
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005930:	63ba      	str	r2, [r7, #56]	; 0x38
 8005932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005934:	fa92 f2a2 	rbit	r2, r2
 8005938:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800593a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800593c:	fab2 f282 	clz	r2, r2
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	f042 0220 	orr.w	r2, r2, #32
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	f002 021f 	and.w	r2, r2, #31
 800594c:	2101      	movs	r1, #1
 800594e:	fa01 f202 	lsl.w	r2, r1, r2
 8005952:	4013      	ands	r3, r2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d13a      	bne.n	80059ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0b2      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x2de>
 800595c:	2302      	movs	r3, #2
 800595e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	fa93 f3a3 	rbit	r3, r3
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800596a:	fab3 f383 	clz	r3, r3
 800596e:	b2db      	uxtb	r3, r3
 8005970:	095b      	lsrs	r3, r3, #5
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b01      	cmp	r3, #1
 800597c:	d102      	bne.n	8005984 <HAL_RCC_ClockConfig+0x1a0>
 800597e:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <HAL_RCC_ClockConfig+0x260>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	e00d      	b.n	80059a0 <HAL_RCC_ClockConfig+0x1bc>
 8005984:	2302      	movs	r3, #2
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	fa93 f3a3 	rbit	r3, r3
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
 8005990:	2302      	movs	r3, #2
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	fa93 f3a3 	rbit	r3, r3
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	4b29      	ldr	r3, [pc, #164]	; (8005a44 <HAL_RCC_ClockConfig+0x260>)
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	2202      	movs	r2, #2
 80059a2:	61ba      	str	r2, [r7, #24]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	fa92 f2a2 	rbit	r2, r2
 80059aa:	617a      	str	r2, [r7, #20]
  return result;
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	fab2 f282 	clz	r2, r2
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	f042 0220 	orr.w	r2, r2, #32
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	f002 021f 	and.w	r2, r2, #31
 80059be:	2101      	movs	r1, #1
 80059c0:	fa01 f202 	lsl.w	r2, r1, r2
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e079      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ce:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <HAL_RCC_ClockConfig+0x260>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f023 0203 	bic.w	r2, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	491a      	ldr	r1, [pc, #104]	; (8005a44 <HAL_RCC_ClockConfig+0x260>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059e0:	f7fc ff22 	bl	8002828 <HAL_GetTick>
 80059e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e6:	e00a      	b.n	80059fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e8:	f7fc ff1e 	bl	8002828 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e061      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fe:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <HAL_RCC_ClockConfig+0x260>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f003 020c 	and.w	r2, r3, #12
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d1eb      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCC_ClockConfig+0x25c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d214      	bcs.n	8005a48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1e:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <HAL_RCC_ClockConfig+0x25c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f023 0207 	bic.w	r2, r3, #7
 8005a26:	4906      	ldr	r1, [pc, #24]	; (8005a40 <HAL_RCC_ClockConfig+0x25c>)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2e:	4b04      	ldr	r3, [pc, #16]	; (8005a40 <HAL_RCC_ClockConfig+0x25c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d005      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e040      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x2de>
 8005a40:	40022000 	.word	0x40022000
 8005a44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a54:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <HAL_RCC_ClockConfig+0x2e8>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	491a      	ldr	r1, [pc, #104]	; (8005acc <HAL_RCC_ClockConfig+0x2e8>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d009      	beq.n	8005a86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a72:	4b16      	ldr	r3, [pc, #88]	; (8005acc <HAL_RCC_ClockConfig+0x2e8>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4912      	ldr	r1, [pc, #72]	; (8005acc <HAL_RCC_ClockConfig+0x2e8>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a86:	f000 f829 	bl	8005adc <HAL_RCC_GetSysClockFreq>
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <HAL_RCC_ClockConfig+0x2e8>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a94:	22f0      	movs	r2, #240	; 0xf0
 8005a96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	fa92 f2a2 	rbit	r2, r2
 8005a9e:	60fa      	str	r2, [r7, #12]
  return result;
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	fab2 f282 	clz	r2, r2
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	40d3      	lsrs	r3, r2
 8005aaa:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <HAL_RCC_ClockConfig+0x2ec>)
 8005aac:	5cd3      	ldrb	r3, [r2, r3]
 8005aae:	fa21 f303 	lsr.w	r3, r1, r3
 8005ab2:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <HAL_RCC_ClockConfig+0x2f0>)
 8005ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005ab6:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <HAL_RCC_ClockConfig+0x2f4>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fc fe70 	bl	80027a0 <HAL_InitTick>
  
  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3778      	adds	r7, #120	; 0x78
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	0800f370 	.word	0x0800f370
 8005ad4:	20000000 	.word	0x20000000
 8005ad8:	20000004 	.word	0x20000004

08005adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b08b      	sub	sp, #44	; 0x2c
 8005ae0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	2300      	movs	r3, #0
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005af6:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f003 030c 	and.w	r3, r3, #12
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d002      	beq.n	8005b0c <HAL_RCC_GetSysClockFreq+0x30>
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d003      	beq.n	8005b12 <HAL_RCC_GetSysClockFreq+0x36>
 8005b0a:	e03c      	b.n	8005b86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b0c:	4b24      	ldr	r3, [pc, #144]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b0e:	623b      	str	r3, [r7, #32]
      break;
 8005b10:	e03c      	b.n	8005b8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005b1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	fa92 f2a2 	rbit	r2, r2
 8005b24:	607a      	str	r2, [r7, #4]
  return result;
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	fab2 f282 	clz	r2, r2
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	40d3      	lsrs	r3, r2
 8005b30:	4a1c      	ldr	r2, [pc, #112]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b32:	5cd3      	ldrb	r3, [r2, r3]
 8005b34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005b36:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	220f      	movs	r2, #15
 8005b40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	fa92 f2a2 	rbit	r2, r2
 8005b48:	60fa      	str	r2, [r7, #12]
  return result;
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	fab2 f282 	clz	r2, r2
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	40d3      	lsrs	r3, r2
 8005b54:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b56:	5cd3      	ldrb	r3, [r2, r3]
 8005b58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b64:	4a0e      	ldr	r2, [pc, #56]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	fb02 f303 	mul.w	r3, r2, r3
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
 8005b74:	e004      	b.n	8005b80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	4a0c      	ldr	r2, [pc, #48]	; (8005bac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	623b      	str	r3, [r7, #32]
      break;
 8005b84:	e002      	b.n	8005b8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b86:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b88:	623b      	str	r3, [r7, #32]
      break;
 8005b8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	372c      	adds	r7, #44	; 0x2c
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	007a1200 	.word	0x007a1200
 8005ba4:	0800f388 	.word	0x0800f388
 8005ba8:	0800f398 	.word	0x0800f398
 8005bac:	003d0900 	.word	0x003d0900

08005bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb4:	4b03      	ldr	r3, [pc, #12]	; (8005bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000000 	.word	0x20000000

08005bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005bce:	f7ff ffef 	bl	8005bb0 <HAL_RCC_GetHCLKFreq>
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bdc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005be0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	fa92 f2a2 	rbit	r2, r2
 8005be8:	603a      	str	r2, [r7, #0]
  return result;
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	fab2 f282 	clz	r2, r2
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	40d3      	lsrs	r3, r2
 8005bf4:	4a04      	ldr	r2, [pc, #16]	; (8005c08 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005bf6:	5cd3      	ldrb	r3, [r2, r3]
 8005bf8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40021000 	.word	0x40021000
 8005c08:	0800f380 	.word	0x0800f380

08005c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c12:	f7ff ffcd 	bl	8005bb0 <HAL_RCC_GetHCLKFreq>
 8005c16:	4601      	mov	r1, r0
 8005c18:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005c20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005c24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	fa92 f2a2 	rbit	r2, r2
 8005c2c:	603a      	str	r2, [r7, #0]
  return result;
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	fab2 f282 	clz	r2, r2
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	40d3      	lsrs	r3, r2
 8005c38:	4a04      	ldr	r2, [pc, #16]	; (8005c4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8005c3a:	5cd3      	ldrb	r3, [r2, r3]
 8005c3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	0800f380 	.word	0x0800f380

08005c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b092      	sub	sp, #72	; 0x48
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c60:	2300      	movs	r3, #0
 8005c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80d4 	beq.w	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c74:	4b4e      	ldr	r3, [pc, #312]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10e      	bne.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c80:	4b4b      	ldr	r3, [pc, #300]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	4a4a      	ldr	r2, [pc, #296]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	61d3      	str	r3, [r2, #28]
 8005c8c:	4b48      	ldr	r3, [pc, #288]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9e:	4b45      	ldr	r3, [pc, #276]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d118      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005caa:	4b42      	ldr	r3, [pc, #264]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a41      	ldr	r2, [pc, #260]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cb6:	f7fc fdb7 	bl	8002828 <HAL_GetTick>
 8005cba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cbe:	f7fc fdb3 	bl	8002828 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b64      	cmp	r3, #100	; 0x64
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e169      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd0:	4b38      	ldr	r3, [pc, #224]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0f0      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cdc:	4b34      	ldr	r3, [pc, #208]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8084 	beq.w	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d07c      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cfc:	4b2c      	ldr	r3, [pc, #176]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	fa93 f3a3 	rbit	r3, r3
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d16:	fab3 f383 	clz	r3, r3
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4b26      	ldr	r3, [pc, #152]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d20:	4413      	add	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	461a      	mov	r2, r3
 8005d26:	2301      	movs	r3, #1
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	fa93 f3a3 	rbit	r3, r3
 8005d36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d3a:	fab3 f383 	clz	r3, r3
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d4e:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d04b      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5e:	f7fc fd63 	bl	8002828 <HAL_GetTick>
 8005d62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d64:	e00a      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d66:	f7fc fd5f 	bl	8002828 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e113      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	fa93 f3a3 	rbit	r3, r3
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
 8005d88:	2302      	movs	r3, #2
 8005d8a:	623b      	str	r3, [r7, #32]
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	fa93 f3a3 	rbit	r3, r3
 8005d92:	61fb      	str	r3, [r7, #28]
  return result;
 8005d94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d96:	fab3 f383 	clz	r3, r3
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f043 0302 	orr.w	r3, r3, #2
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d108      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005daa:	4b01      	ldr	r3, [pc, #4]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	e00d      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005db0:	40021000 	.word	0x40021000
 8005db4:	40007000 	.word	0x40007000
 8005db8:	10908100 	.word	0x10908100
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	fa93 f3a3 	rbit	r3, r3
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	4b78      	ldr	r3, [pc, #480]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	2202      	movs	r2, #2
 8005dce:	613a      	str	r2, [r7, #16]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	fa92 f2a2 	rbit	r2, r2
 8005dd6:	60fa      	str	r2, [r7, #12]
  return result;
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	fab2 f282 	clz	r2, r2
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	f002 021f 	and.w	r2, r2, #31
 8005dea:	2101      	movs	r1, #1
 8005dec:	fa01 f202 	lsl.w	r2, r1, r2
 8005df0:	4013      	ands	r3, r2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0b7      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005df6:	4b6d      	ldr	r3, [pc, #436]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	496a      	ldr	r1, [pc, #424]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d105      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e10:	4b66      	ldr	r3, [pc, #408]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	4a65      	ldr	r2, [pc, #404]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d008      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e28:	4b60      	ldr	r3, [pc, #384]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	f023 0203 	bic.w	r2, r3, #3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	495d      	ldr	r1, [pc, #372]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d008      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e46:	4b59      	ldr	r3, [pc, #356]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	4956      	ldr	r1, [pc, #344]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d008      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e64:	4b51      	ldr	r3, [pc, #324]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	494e      	ldr	r1, [pc, #312]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d008      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e82:	4b4a      	ldr	r3, [pc, #296]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	f023 0210 	bic.w	r2, r3, #16
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	4947      	ldr	r1, [pc, #284]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d008      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005ea0:	4b42      	ldr	r3, [pc, #264]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	493f      	ldr	r1, [pc, #252]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ebe:	4b3b      	ldr	r3, [pc, #236]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	f023 0220 	bic.w	r2, r3, #32
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	4938      	ldr	r1, [pc, #224]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d008      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005edc:	4b33      	ldr	r3, [pc, #204]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	4930      	ldr	r1, [pc, #192]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0310 	and.w	r3, r3, #16
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d008      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005efa:	4b2c      	ldr	r3, [pc, #176]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	4929      	ldr	r1, [pc, #164]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d008      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f18:	4b24      	ldr	r3, [pc, #144]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	4921      	ldr	r1, [pc, #132]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d008      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f36:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	491a      	ldr	r1, [pc, #104]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005f54:	4b15      	ldr	r3, [pc, #84]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	4912      	ldr	r1, [pc, #72]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d008      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f72:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	490b      	ldr	r1, [pc, #44]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d008      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9c:	4903      	ldr	r1, [pc, #12]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3748      	adds	r7, #72	; 0x48
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40021000 	.word	0x40021000

08005fb0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e083      	b.n	80060ca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7f5b      	ldrb	r3, [r3, #29]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fc f94e 	bl	8002274 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	22ca      	movs	r2, #202	; 0xca
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2253      	movs	r2, #83	; 0x53
 8005fec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 faa8 	bl	8006544 <RTC_EnterInitMode>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	22ff      	movs	r2, #255	; 0xff
 8006000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2204      	movs	r2, #4
 8006006:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e05e      	b.n	80060ca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800601a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6899      	ldr	r1, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	68d2      	ldr	r2, [r2, #12]
 8006046:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6919      	ldr	r1, [r3, #16]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	041a      	lsls	r2, r3, #16
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800606a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10e      	bne.n	8006098 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa3a 	bl	80064f4 <HAL_RTC_WaitForSynchro>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d008      	beq.n	8006098 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	22ff      	movs	r2, #255	; 0xff
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2204      	movs	r2, #4
 8006092:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e018      	b.n	80060ca <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699a      	ldr	r2, [r3, #24]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	22ff      	movs	r2, #255	; 0xff
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80060c8:	2300      	movs	r3, #0
  }
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060d2:	b590      	push	{r4, r7, lr}
 80060d4:	b087      	sub	sp, #28
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	7f1b      	ldrb	r3, [r3, #28]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_RTC_SetTime+0x1c>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e0aa      	b.n	8006244 <HAL_RTC_SetTime+0x172>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2202      	movs	r2, #2
 80060f8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d126      	bne.n	800614e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d102      	bne.n	8006114 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2200      	movs	r2, #0
 8006112:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fa3f 	bl	800659c <RTC_ByteToBcd2>
 800611e:	4603      	mov	r3, r0
 8006120:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fa38 	bl	800659c <RTC_ByteToBcd2>
 800612c:	4603      	mov	r3, r0
 800612e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006130:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	789b      	ldrb	r3, [r3, #2]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fa30 	bl	800659c <RTC_ByteToBcd2>
 800613c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800613e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	78db      	ldrb	r3, [r3, #3]
 8006146:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e018      	b.n	8006180 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2200      	movs	r2, #0
 8006160:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800616e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006174:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	78db      	ldrb	r3, [r3, #3]
 800617a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	22ca      	movs	r2, #202	; 0xca
 8006186:	625a      	str	r2, [r3, #36]	; 0x24
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2253      	movs	r2, #83	; 0x53
 800618e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f9d7 	bl	8006544 <RTC_EnterInitMode>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00b      	beq.n	80061b4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	22ff      	movs	r2, #255	; 0xff
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2204      	movs	r2, #4
 80061a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e047      	b.n	8006244 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80061be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6899      	ldr	r1, [r3, #8]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061fa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 0320 	and.w	r3, r3, #32
 8006206:	2b00      	cmp	r3, #0
 8006208:	d111      	bne.n	800622e <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 f972 	bl	80064f4 <HAL_RTC_WaitForSynchro>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00b      	beq.n	800622e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	22ff      	movs	r2, #255	; 0xff
 800621c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2204      	movs	r2, #4
 8006222:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e00a      	b.n	8006244 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	22ff      	movs	r2, #255	; 0xff
 8006234:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006242:	2300      	movs	r3, #0
  }
}
 8006244:	4618      	mov	r0, r3
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	bd90      	pop	{r4, r7, pc}

0800624c <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800627e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006282:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	0c1b      	lsrs	r3, r3, #16
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800628e:	b2da      	uxtb	r2, r3
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	0a1b      	lsrs	r3, r3, #8
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	0c1b      	lsrs	r3, r3, #16
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d11a      	bne.n	80062fe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 f983 	bl	80065d8 <RTC_Bcd2ToByte>
 80062d2:	4603      	mov	r3, r0
 80062d4:	461a      	mov	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 f97a 	bl	80065d8 <RTC_Bcd2ToByte>
 80062e4:	4603      	mov	r3, r0
 80062e6:	461a      	mov	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	789b      	ldrb	r3, [r3, #2]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 f971 	bl	80065d8 <RTC_Bcd2ToByte>
 80062f6:	4603      	mov	r3, r0
 80062f8:	461a      	mov	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006308:	b590      	push	{r4, r7, lr}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	7f1b      	ldrb	r3, [r3, #28]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_RTC_SetDate+0x1c>
 8006320:	2302      	movs	r3, #2
 8006322:	e094      	b.n	800644e <HAL_RTC_SetDate+0x146>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2202      	movs	r2, #2
 800632e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10e      	bne.n	8006354 <HAL_RTC_SetDate+0x4c>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	785b      	ldrb	r3, [r3, #1]
 800633a:	f003 0310 	and.w	r3, r3, #16
 800633e:	2b00      	cmp	r3, #0
 8006340:	d008      	beq.n	8006354 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	f023 0310 	bic.w	r3, r3, #16
 800634a:	b2db      	uxtb	r3, r3
 800634c:	330a      	adds	r3, #10
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d11c      	bne.n	8006394 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	78db      	ldrb	r3, [r3, #3]
 800635e:	4618      	mov	r0, r3
 8006360:	f000 f91c 	bl	800659c <RTC_ByteToBcd2>
 8006364:	4603      	mov	r3, r0
 8006366:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	4618      	mov	r0, r3
 800636e:	f000 f915 	bl	800659c <RTC_ByteToBcd2>
 8006372:	4603      	mov	r3, r0
 8006374:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006376:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	789b      	ldrb	r3, [r3, #2]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 f90d 	bl	800659c <RTC_ByteToBcd2>
 8006382:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006384:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e00e      	b.n	80063b2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063a0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80063a6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	22ca      	movs	r2, #202	; 0xca
 80063b8:	625a      	str	r2, [r3, #36]	; 0x24
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2253      	movs	r2, #83	; 0x53
 80063c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 f8be 	bl	8006544 <RTC_EnterInitMode>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00b      	beq.n	80063e6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	22ff      	movs	r2, #255	; 0xff
 80063d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2204      	movs	r2, #4
 80063da:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e033      	b.n	800644e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006404:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d111      	bne.n	8006438 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f86d 	bl	80064f4 <HAL_RTC_WaitForSynchro>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00b      	beq.n	8006438 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	22ff      	movs	r2, #255	; 0xff
 8006426:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2204      	movs	r2, #4
 800642c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e00a      	b.n	800644e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	22ff      	movs	r2, #255	; 0xff
 800643e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800644c:	2300      	movs	r3, #0
  }
}
 800644e:	4618      	mov	r0, r3
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	bd90      	pop	{r4, r7, pc}

08006456 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b086      	sub	sp, #24
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006470:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006474:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	0c1b      	lsrs	r3, r3, #16
 800647a:	b2da      	uxtb	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	0a1b      	lsrs	r3, r3, #8
 8006484:	b2db      	uxtb	r3, r3
 8006486:	f003 031f 	and.w	r3, r3, #31
 800648a:	b2da      	uxtb	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006498:	b2da      	uxtb	r2, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	0b5b      	lsrs	r3, r3, #13
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d11a      	bne.n	80064ea <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	78db      	ldrb	r3, [r3, #3]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 f88d 	bl	80065d8 <RTC_Bcd2ToByte>
 80064be:	4603      	mov	r3, r0
 80064c0:	461a      	mov	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	785b      	ldrb	r3, [r3, #1]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 f884 	bl	80065d8 <RTC_Bcd2ToByte>
 80064d0:	4603      	mov	r3, r0
 80064d2:	461a      	mov	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	789b      	ldrb	r3, [r3, #2]
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 f87b 	bl	80065d8 <RTC_Bcd2ToByte>
 80064e2:	4603      	mov	r3, r0
 80064e4:	461a      	mov	r2, r3
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800650e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006510:	f7fc f98a 	bl	8002828 <HAL_GetTick>
 8006514:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006516:	e009      	b.n	800652c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006518:	f7fc f986 	bl	8002828 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006526:	d901      	bls.n	800652c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e007      	b.n	800653c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0ee      	beq.n	8006518 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d119      	bne.n	8006592 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006566:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006568:	f7fc f95e 	bl	8002828 <HAL_GetTick>
 800656c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800656e:	e009      	b.n	8006584 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006570:	f7fc f95a 	bl	8002828 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800657e:	d901      	bls.n	8006584 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e007      	b.n	8006594 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0ee      	beq.n	8006570 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80065aa:	e005      	b.n	80065b8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	3b0a      	subs	r3, #10
 80065b6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80065b8:	79fb      	ldrb	r3, [r7, #7]
 80065ba:	2b09      	cmp	r3, #9
 80065bc:	d8f6      	bhi.n	80065ac <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	b2db      	uxtb	r3, r3
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	4413      	add	r3, r2
 8006606:	b2db      	uxtb	r3, r3
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e09d      	b.n	8006762 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	2b00      	cmp	r3, #0
 800662c:	d108      	bne.n	8006640 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006636:	d009      	beq.n	800664c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	61da      	str	r2, [r3, #28]
 800663e:	e005      	b.n	800664c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7fb fe2a 	bl	80022c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006682:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800668c:	d902      	bls.n	8006694 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	e002      	b.n	800669a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006698:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066a2:	d007      	beq.n	80066b4 <HAL_SPI_Init+0xa0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066ac:	d002      	beq.n	80066b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f6:	ea42 0103 	orr.w	r1, r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	0c1b      	lsrs	r3, r3, #16
 8006710:	f003 0204 	and.w	r2, r3, #4
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006730:	ea42 0103 	orr.w	r1, r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006750:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b08a      	sub	sp, #40	; 0x28
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
 8006776:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006778:	2301      	movs	r3, #1
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_SPI_TransmitReceive+0x26>
 800678c:	2302      	movs	r3, #2
 800678e:	e1fb      	b.n	8006b88 <HAL_SPI_TransmitReceive+0x41e>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006798:	f7fc f846 	bl	8002828 <HAL_GetTick>
 800679c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067a4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80067ac:	887b      	ldrh	r3, [r7, #2]
 80067ae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80067b0:	887b      	ldrh	r3, [r7, #2]
 80067b2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067b4:	7efb      	ldrb	r3, [r7, #27]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d00e      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x6e>
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067c0:	d106      	bne.n	80067d0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <HAL_SPI_TransmitReceive+0x66>
 80067ca:	7efb      	ldrb	r3, [r7, #27]
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d003      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80067d0:	2302      	movs	r3, #2
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80067d6:	e1cd      	b.n	8006b74 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x80>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x80>
 80067e4:	887b      	ldrh	r3, [r7, #2]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d103      	bne.n	80067f2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80067f0:	e1c0      	b.n	8006b74 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d003      	beq.n	8006806 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2205      	movs	r2, #5
 8006802:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	887a      	ldrh	r2, [r7, #2]
 8006816:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	887a      	ldrh	r2, [r7, #2]
 800681e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	887a      	ldrh	r2, [r7, #2]
 800682c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	887a      	ldrh	r2, [r7, #2]
 8006832:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006848:	d802      	bhi.n	8006850 <HAL_SPI_TransmitReceive+0xe6>
 800684a:	8a3b      	ldrh	r3, [r7, #16]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d908      	bls.n	8006862 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800685e:	605a      	str	r2, [r3, #4]
 8006860:	e007      	b.n	8006872 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006870:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687c:	2b40      	cmp	r3, #64	; 0x40
 800687e:	d007      	beq.n	8006890 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800688e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006898:	d97c      	bls.n	8006994 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <HAL_SPI_TransmitReceive+0x13e>
 80068a2:	8a7b      	ldrh	r3, [r7, #18]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d169      	bne.n	800697c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	881a      	ldrh	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	1c9a      	adds	r2, r3, #2
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068cc:	e056      	b.n	800697c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d11b      	bne.n	8006914 <HAL_SPI_TransmitReceive+0x1aa>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d016      	beq.n	8006914 <HAL_SPI_TransmitReceive+0x1aa>
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d113      	bne.n	8006914 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	881a      	ldrh	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	1c9a      	adds	r2, r3, #2
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b01      	cmp	r3, #1
 8006920:	d11c      	bne.n	800695c <HAL_SPI_TransmitReceive+0x1f2>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d016      	beq.n	800695c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68da      	ldr	r2, [r3, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	b292      	uxth	r2, r2
 800693a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	1c9a      	adds	r2, r3, #2
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006958:	2301      	movs	r3, #1
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800695c:	f7fb ff64 	bl	8002828 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006968:	429a      	cmp	r2, r3
 800696a:	d807      	bhi.n	800697c <HAL_SPI_TransmitReceive+0x212>
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006972:	d003      	beq.n	800697c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800697a:	e0fb      	b.n	8006b74 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1a3      	bne.n	80068ce <HAL_SPI_TransmitReceive+0x164>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d19d      	bne.n	80068ce <HAL_SPI_TransmitReceive+0x164>
 8006992:	e0df      	b.n	8006b54 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_SPI_TransmitReceive+0x23a>
 800699c:	8a7b      	ldrh	r3, [r7, #18]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	f040 80cb 	bne.w	8006b3a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d912      	bls.n	80069d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	881a      	ldrh	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	1c9a      	adds	r2, r3, #2
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b02      	subs	r3, #2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069d2:	e0b2      	b.n	8006b3a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	330c      	adds	r3, #12
 80069de:	7812      	ldrb	r2, [r2, #0]
 80069e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069fa:	e09e      	b.n	8006b3a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d134      	bne.n	8006a74 <HAL_SPI_TransmitReceive+0x30a>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d02f      	beq.n	8006a74 <HAL_SPI_TransmitReceive+0x30a>
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d12c      	bne.n	8006a74 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d912      	bls.n	8006a4a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	881a      	ldrh	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	1c9a      	adds	r2, r3, #2
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b02      	subs	r3, #2
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a48:	e012      	b.n	8006a70 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	330c      	adds	r3, #12
 8006a54:	7812      	ldrb	r2, [r2, #0]
 8006a56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d148      	bne.n	8006b14 <HAL_SPI_TransmitReceive+0x3aa>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d042      	beq.n	8006b14 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d923      	bls.n	8006ae2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	b292      	uxth	r2, r2
 8006aa6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	1c9a      	adds	r2, r3, #2
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b02      	subs	r3, #2
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d81f      	bhi.n	8006b10 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ade:	605a      	str	r2, [r3, #4]
 8006ae0:	e016      	b.n	8006b10 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f103 020c 	add.w	r2, r3, #12
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	7812      	ldrb	r2, [r2, #0]
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b10:	2301      	movs	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b14:	f7fb fe88 	bl	8002828 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d803      	bhi.n	8006b2c <HAL_SPI_TransmitReceive+0x3c2>
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b2a:	d102      	bne.n	8006b32 <HAL_SPI_TransmitReceive+0x3c8>
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d103      	bne.n	8006b3a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006b38:	e01c      	b.n	8006b74 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f47f af5b 	bne.w	80069fc <HAL_SPI_TransmitReceive+0x292>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f47f af54 	bne.w	80069fc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b54:	69fa      	ldr	r2, [r7, #28]
 8006b56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f937 	bl	8006dcc <SPI_EndRxTxTransaction>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d006      	beq.n	8006b72 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	661a      	str	r2, [r3, #96]	; 0x60
 8006b70:	e000      	b.n	8006b74 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006b72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3728      	adds	r7, #40	; 0x28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ba0:	f7fb fe42 	bl	8002828 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	4413      	add	r3, r2
 8006bae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bb0:	f7fb fe3a 	bl	8002828 <HAL_GetTick>
 8006bb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bb6:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	015b      	lsls	r3, r3, #5
 8006bbc:	0d1b      	lsrs	r3, r3, #20
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	fb02 f303 	mul.w	r3, r2, r3
 8006bc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bc6:	e054      	b.n	8006c72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bce:	d050      	beq.n	8006c72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bd0:	f7fb fe2a 	bl	8002828 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	69fa      	ldr	r2, [r7, #28]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d902      	bls.n	8006be6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d13d      	bne.n	8006c62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bfe:	d111      	bne.n	8006c24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c08:	d004      	beq.n	8006c14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c12:	d107      	bne.n	8006c24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c2c:	d10f      	bne.n	8006c4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e017      	b.n	8006c92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	bf0c      	ite	eq
 8006c82:	2301      	moveq	r3, #1
 8006c84:	2300      	movne	r3, #0
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	461a      	mov	r2, r3
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d19b      	bne.n	8006bc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3720      	adds	r7, #32
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000000 	.word	0x20000000

08006ca0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08a      	sub	sp, #40	; 0x28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006cb2:	f7fb fdb9 	bl	8002828 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	1a9b      	subs	r3, r3, r2
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006cc2:	f7fb fdb1 	bl	8002828 <HAL_GetTick>
 8006cc6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006cd0:	4b3d      	ldr	r3, [pc, #244]	; (8006dc8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	00da      	lsls	r2, r3, #3
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	0d1b      	lsrs	r3, r3, #20
 8006ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce2:	fb02 f303 	mul.w	r3, r2, r3
 8006ce6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ce8:	e060      	b.n	8006dac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cf0:	d107      	bne.n	8006d02 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d104      	bne.n	8006d02 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d08:	d050      	beq.n	8006dac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d0a:	f7fb fd8d 	bl	8002828 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d902      	bls.n	8006d20 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d13d      	bne.n	8006d9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d38:	d111      	bne.n	8006d5e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d42:	d004      	beq.n	8006d4e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d4c:	d107      	bne.n	8006d5e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d66:	d10f      	bne.n	8006d88 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e010      	b.n	8006dbe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689a      	ldr	r2, [r3, #8]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	4013      	ands	r3, r2
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d196      	bne.n	8006cea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3728      	adds	r7, #40	; 0x28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000000 	.word	0x20000000

08006dcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af02      	add	r7, sp, #8
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff ff5b 	bl	8006ca0 <SPI_WaitFifoStateUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df4:	f043 0220 	orr.w	r2, r3, #32
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e027      	b.n	8006e50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2200      	movs	r2, #0
 8006e08:	2180      	movs	r1, #128	; 0x80
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f7ff fec0 	bl	8006b90 <SPI_WaitFlagStateUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e1a:	f043 0220 	orr.w	r2, r3, #32
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e014      	b.n	8006e50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f7ff ff34 	bl	8006ca0 <SPI_WaitFifoStateUntilTimeout>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d007      	beq.n	8006e4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e42:	f043 0220 	orr.w	r2, r3, #32
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e000      	b.n	8006e50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e040      	b.n	8006eec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d106      	bne.n	8006e80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7fb fab4 	bl	80023e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2224      	movs	r2, #36	; 0x24
 8006e84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0201 	bic.w	r2, r2, #1
 8006e94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fc0c 	bl	80076b4 <UART_SetConfig>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d101      	bne.n	8006ea6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e022      	b.n	8006eec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fdd4 	bl	8007a5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0201 	orr.w	r2, r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fe5b 	bl	8007ba0 <UART_CheckIdleState>
 8006eea:	4603      	mov	r3, r0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08a      	sub	sp, #40	; 0x28
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	4613      	mov	r3, r2
 8006f02:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	f040 8082 	bne.w	8007012 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_UART_Transmit+0x26>
 8006f14:	88fb      	ldrh	r3, [r7, #6]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e07a      	b.n	8007014 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_UART_Transmit+0x38>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e073      	b.n	8007014 <HAL_UART_Transmit+0x120>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2221      	movs	r2, #33	; 0x21
 8006f40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f42:	f7fb fc71 	bl	8002828 <HAL_GetTick>
 8006f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	88fa      	ldrh	r2, [r7, #6]
 8006f4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	88fa      	ldrh	r2, [r7, #6]
 8006f54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f60:	d108      	bne.n	8006f74 <HAL_UART_Transmit+0x80>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d104      	bne.n	8006f74 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	61bb      	str	r3, [r7, #24]
 8006f72:	e003      	b.n	8006f7c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006f84:	e02d      	b.n	8006fe2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	2180      	movs	r1, #128	; 0x80
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 fe4e 	bl	8007c32 <UART_WaitOnFlagUntilTimeout>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e039      	b.n	8007014 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	881a      	ldrh	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fb2:	b292      	uxth	r2, r2
 8006fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	3302      	adds	r3, #2
 8006fba:	61bb      	str	r3, [r7, #24]
 8006fbc:	e008      	b.n	8006fd0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	781a      	ldrb	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	b292      	uxth	r2, r2
 8006fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1cb      	bne.n	8006f86 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2140      	movs	r1, #64	; 0x40
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 fe1a 	bl	8007c32 <UART_WaitOnFlagUntilTimeout>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e005      	b.n	8007014 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2220      	movs	r2, #32
 800700c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	e000      	b.n	8007014 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007012:	2302      	movs	r3, #2
  }
}
 8007014:	4618      	mov	r0, r3
 8007016:	3720      	adds	r7, #32
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	; 0x28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	4613      	mov	r3, r2
 8007028:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702e:	2b20      	cmp	r3, #32
 8007030:	d13d      	bne.n	80070ae <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <HAL_UART_Receive_IT+0x22>
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e036      	b.n	80070b0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_UART_Receive_IT+0x34>
 800704c:	2302      	movs	r3, #2
 800704e:	e02f      	b.n	80070b0 <HAL_UART_Receive_IT+0x94>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d018      	beq.n	800709e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	613b      	str	r3, [r7, #16]
   return(result);
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	623b      	str	r3, [r7, #32]
 800708c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	69f9      	ldr	r1, [r7, #28]
 8007090:	6a3a      	ldr	r2, [r7, #32]
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	61bb      	str	r3, [r7, #24]
   return(result);
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e6      	bne.n	800706c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	461a      	mov	r2, r3
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 fe89 	bl	8007dbc <UART_Start_Receive_IT>
 80070aa:	4603      	mov	r3, r0
 80070ac:	e000      	b.n	80070b0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070ae:	2302      	movs	r3, #2
  }
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3728      	adds	r7, #40	; 0x28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b0ba      	sub	sp, #232	; 0xe8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80070e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80070e6:	4013      	ands	r3, r2
 80070e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80070ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d115      	bne.n	8007120 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00f      	beq.n	8007120 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b00      	cmp	r3, #0
 800710a:	d009      	beq.n	8007120 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 82a3 	beq.w	800765c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
      }
      return;
 800711e:	e29d      	b.n	800765c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 8117 	beq.w	8007358 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800712a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007136:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800713a:	4b85      	ldr	r3, [pc, #532]	; (8007350 <HAL_UART_IRQHandler+0x298>)
 800713c:	4013      	ands	r3, r2
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 810a 	beq.w	8007358 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d011      	beq.n	8007174 <HAL_UART_IRQHandler+0xbc>
 8007150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2201      	movs	r2, #1
 8007162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800716a:	f043 0201 	orr.w	r2, r3, #1
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d011      	beq.n	80071a4 <HAL_UART_IRQHandler+0xec>
 8007180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2202      	movs	r2, #2
 8007192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800719a:	f043 0204 	orr.w	r2, r3, #4
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d011      	beq.n	80071d4 <HAL_UART_IRQHandler+0x11c>
 80071b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2204      	movs	r2, #4
 80071c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ca:	f043 0202 	orr.w	r2, r3, #2
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d8:	f003 0308 	and.w	r3, r3, #8
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d017      	beq.n	8007210 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d105      	bne.n	80071f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2208      	movs	r2, #8
 80071fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007206:	f043 0208 	orr.w	r2, r3, #8
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007218:	2b00      	cmp	r3, #0
 800721a:	d012      	beq.n	8007242 <HAL_UART_IRQHandler+0x18a>
 800721c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00c      	beq.n	8007242 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007230:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007238:	f043 0220 	orr.w	r2, r3, #32
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8209 	beq.w	8007660 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800724e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00d      	beq.n	8007276 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800725a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d007      	beq.n	8007276 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800727c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d005      	beq.n	800729a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800728e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007292:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007296:	2b00      	cmp	r3, #0
 8007298:	d04f      	beq.n	800733a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fe26 	bl	8007eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d141      	bne.n	8007332 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3308      	adds	r3, #8
 80072b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3308      	adds	r3, #8
 80072d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1d9      	bne.n	80072ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d013      	beq.n	800732a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007306:	4a13      	ldr	r2, [pc, #76]	; (8007354 <HAL_UART_IRQHandler+0x29c>)
 8007308:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730e:	4618      	mov	r0, r3
 8007310:	f7fc fa28 	bl	8003764 <HAL_DMA_Abort_IT>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d017      	beq.n	800734a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007324:	4610      	mov	r0, r2
 8007326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	e00f      	b.n	800734a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f9ac 	bl	8007688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007330:	e00b      	b.n	800734a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f9a8 	bl	8007688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007338:	e007      	b.n	800734a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f9a4 	bl	8007688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007348:	e18a      	b.n	8007660 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800734a:	bf00      	nop
    return;
 800734c:	e188      	b.n	8007660 <HAL_UART_IRQHandler+0x5a8>
 800734e:	bf00      	nop
 8007350:	04000120 	.word	0x04000120
 8007354:	08007fb3 	.word	0x08007fb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800735c:	2b01      	cmp	r3, #1
 800735e:	f040 8143 	bne.w	80075e8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007366:	f003 0310 	and.w	r3, r3, #16
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 813c 	beq.w	80075e8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007374:	f003 0310 	and.w	r3, r3, #16
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8135 	beq.w	80075e8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2210      	movs	r2, #16
 8007384:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007390:	2b40      	cmp	r3, #64	; 0x40
 8007392:	f040 80b1 	bne.w	80074f8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 815c 	beq.w	8007664 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073b6:	429a      	cmp	r2, r3
 80073b8:	f080 8154 	bcs.w	8007664 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	f000 8085 	beq.w	80074dc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007400:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007408:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007414:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1da      	bne.n	80073d2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3308      	adds	r3, #8
 8007422:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800742c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800742e:	f023 0301 	bic.w	r3, r3, #1
 8007432:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007440:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007444:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007448:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e1      	bne.n	800741c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3308      	adds	r3, #8
 800745e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800746a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800746e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3308      	adds	r3, #8
 8007478:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800747c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800747e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007482:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800748a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e3      	bne.n	8007458 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2220      	movs	r2, #32
 8007494:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ac:	f023 0310 	bic.w	r3, r3, #16
 80074b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074be:	65bb      	str	r3, [r7, #88]	; 0x58
 80074c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e4      	bne.n	800749c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fc f90b 	bl	80036f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f8d3 	bl	800769c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074f6:	e0b5      	b.n	8007664 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007504:	b29b      	uxth	r3, r3
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007512:	b29b      	uxth	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 80a7 	beq.w	8007668 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800751a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 80a2 	beq.w	8007668 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007534:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007538:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007546:	647b      	str	r3, [r7, #68]	; 0x44
 8007548:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800754c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e4      	bne.n	8007524 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3308      	adds	r3, #8
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	623b      	str	r3, [r7, #32]
   return(result);
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	f023 0301 	bic.w	r3, r3, #1
 8007570:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3308      	adds	r3, #8
 800757a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800757e:	633a      	str	r2, [r7, #48]	; 0x30
 8007580:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e3      	bne.n	800755a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2220      	movs	r2, #32
 8007596:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f023 0310 	bic.w	r3, r3, #16
 80075b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075c6:	61fb      	str	r3, [r7, #28]
 80075c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	69b9      	ldr	r1, [r7, #24]
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	617b      	str	r3, [r7, #20]
   return(result);
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e4      	bne.n	80075a4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f85b 	bl	800769c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075e6:	e03f      	b.n	8007668 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00e      	beq.n	8007612 <HAL_UART_IRQHandler+0x55a>
 80075f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007608:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fe6d 	bl	80082ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007610:	e02d      	b.n	800766e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00e      	beq.n	800763c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800761e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007626:	2b00      	cmp	r3, #0
 8007628:	d008      	beq.n	800763c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800762e:	2b00      	cmp	r3, #0
 8007630:	d01c      	beq.n	800766c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	4798      	blx	r3
    }
    return;
 800763a:	e017      	b.n	800766c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800763c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d012      	beq.n	800766e <HAL_UART_IRQHandler+0x5b6>
 8007648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00c      	beq.n	800766e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fcc2 	bl	8007fde <UART_EndTransmit_IT>
    return;
 800765a:	e008      	b.n	800766e <HAL_UART_IRQHandler+0x5b6>
      return;
 800765c:	bf00      	nop
 800765e:	e006      	b.n	800766e <HAL_UART_IRQHandler+0x5b6>
    return;
 8007660:	bf00      	nop
 8007662:	e004      	b.n	800766e <HAL_UART_IRQHandler+0x5b6>
      return;
 8007664:	bf00      	nop
 8007666:	e002      	b.n	800766e <HAL_UART_IRQHandler+0x5b6>
      return;
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <HAL_UART_IRQHandler+0x5b6>
    return;
 800766c:	bf00      	nop
  }

}
 800766e:	37e8      	adds	r7, #232	; 0xe8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80076e2:	f023 030c 	bic.w	r3, r3, #12
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	6812      	ldr	r2, [r2, #0]
 80076ea:	6979      	ldr	r1, [r7, #20]
 80076ec:	430b      	orrs	r3, r1
 80076ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68da      	ldr	r2, [r3, #12]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	430a      	orrs	r2, r1
 8007728:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4aae      	ldr	r2, [pc, #696]	; (80079e8 <UART_SetConfig+0x334>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d120      	bne.n	8007776 <UART_SetConfig+0xc2>
 8007734:	4bad      	ldr	r3, [pc, #692]	; (80079ec <UART_SetConfig+0x338>)
 8007736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	2b03      	cmp	r3, #3
 800773e:	d817      	bhi.n	8007770 <UART_SetConfig+0xbc>
 8007740:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <UART_SetConfig+0x94>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	08007759 	.word	0x08007759
 800774c:	08007765 	.word	0x08007765
 8007750:	0800776b 	.word	0x0800776b
 8007754:	0800775f 	.word	0x0800775f
 8007758:	2301      	movs	r3, #1
 800775a:	77fb      	strb	r3, [r7, #31]
 800775c:	e0b5      	b.n	80078ca <UART_SetConfig+0x216>
 800775e:	2302      	movs	r3, #2
 8007760:	77fb      	strb	r3, [r7, #31]
 8007762:	e0b2      	b.n	80078ca <UART_SetConfig+0x216>
 8007764:	2304      	movs	r3, #4
 8007766:	77fb      	strb	r3, [r7, #31]
 8007768:	e0af      	b.n	80078ca <UART_SetConfig+0x216>
 800776a:	2308      	movs	r3, #8
 800776c:	77fb      	strb	r3, [r7, #31]
 800776e:	e0ac      	b.n	80078ca <UART_SetConfig+0x216>
 8007770:	2310      	movs	r3, #16
 8007772:	77fb      	strb	r3, [r7, #31]
 8007774:	e0a9      	b.n	80078ca <UART_SetConfig+0x216>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a9d      	ldr	r2, [pc, #628]	; (80079f0 <UART_SetConfig+0x33c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d124      	bne.n	80077ca <UART_SetConfig+0x116>
 8007780:	4b9a      	ldr	r3, [pc, #616]	; (80079ec <UART_SetConfig+0x338>)
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007788:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800778c:	d011      	beq.n	80077b2 <UART_SetConfig+0xfe>
 800778e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007792:	d817      	bhi.n	80077c4 <UART_SetConfig+0x110>
 8007794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007798:	d011      	beq.n	80077be <UART_SetConfig+0x10a>
 800779a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800779e:	d811      	bhi.n	80077c4 <UART_SetConfig+0x110>
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <UART_SetConfig+0xf8>
 80077a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a8:	d006      	beq.n	80077b8 <UART_SetConfig+0x104>
 80077aa:	e00b      	b.n	80077c4 <UART_SetConfig+0x110>
 80077ac:	2300      	movs	r3, #0
 80077ae:	77fb      	strb	r3, [r7, #31]
 80077b0:	e08b      	b.n	80078ca <UART_SetConfig+0x216>
 80077b2:	2302      	movs	r3, #2
 80077b4:	77fb      	strb	r3, [r7, #31]
 80077b6:	e088      	b.n	80078ca <UART_SetConfig+0x216>
 80077b8:	2304      	movs	r3, #4
 80077ba:	77fb      	strb	r3, [r7, #31]
 80077bc:	e085      	b.n	80078ca <UART_SetConfig+0x216>
 80077be:	2308      	movs	r3, #8
 80077c0:	77fb      	strb	r3, [r7, #31]
 80077c2:	e082      	b.n	80078ca <UART_SetConfig+0x216>
 80077c4:	2310      	movs	r3, #16
 80077c6:	77fb      	strb	r3, [r7, #31]
 80077c8:	e07f      	b.n	80078ca <UART_SetConfig+0x216>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a89      	ldr	r2, [pc, #548]	; (80079f4 <UART_SetConfig+0x340>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d124      	bne.n	800781e <UART_SetConfig+0x16a>
 80077d4:	4b85      	ldr	r3, [pc, #532]	; (80079ec <UART_SetConfig+0x338>)
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80077dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80077e0:	d011      	beq.n	8007806 <UART_SetConfig+0x152>
 80077e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80077e6:	d817      	bhi.n	8007818 <UART_SetConfig+0x164>
 80077e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80077ec:	d011      	beq.n	8007812 <UART_SetConfig+0x15e>
 80077ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80077f2:	d811      	bhi.n	8007818 <UART_SetConfig+0x164>
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <UART_SetConfig+0x14c>
 80077f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077fc:	d006      	beq.n	800780c <UART_SetConfig+0x158>
 80077fe:	e00b      	b.n	8007818 <UART_SetConfig+0x164>
 8007800:	2300      	movs	r3, #0
 8007802:	77fb      	strb	r3, [r7, #31]
 8007804:	e061      	b.n	80078ca <UART_SetConfig+0x216>
 8007806:	2302      	movs	r3, #2
 8007808:	77fb      	strb	r3, [r7, #31]
 800780a:	e05e      	b.n	80078ca <UART_SetConfig+0x216>
 800780c:	2304      	movs	r3, #4
 800780e:	77fb      	strb	r3, [r7, #31]
 8007810:	e05b      	b.n	80078ca <UART_SetConfig+0x216>
 8007812:	2308      	movs	r3, #8
 8007814:	77fb      	strb	r3, [r7, #31]
 8007816:	e058      	b.n	80078ca <UART_SetConfig+0x216>
 8007818:	2310      	movs	r3, #16
 800781a:	77fb      	strb	r3, [r7, #31]
 800781c:	e055      	b.n	80078ca <UART_SetConfig+0x216>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a75      	ldr	r2, [pc, #468]	; (80079f8 <UART_SetConfig+0x344>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d124      	bne.n	8007872 <UART_SetConfig+0x1be>
 8007828:	4b70      	ldr	r3, [pc, #448]	; (80079ec <UART_SetConfig+0x338>)
 800782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007830:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007834:	d011      	beq.n	800785a <UART_SetConfig+0x1a6>
 8007836:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800783a:	d817      	bhi.n	800786c <UART_SetConfig+0x1b8>
 800783c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007840:	d011      	beq.n	8007866 <UART_SetConfig+0x1b2>
 8007842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007846:	d811      	bhi.n	800786c <UART_SetConfig+0x1b8>
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <UART_SetConfig+0x1a0>
 800784c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007850:	d006      	beq.n	8007860 <UART_SetConfig+0x1ac>
 8007852:	e00b      	b.n	800786c <UART_SetConfig+0x1b8>
 8007854:	2300      	movs	r3, #0
 8007856:	77fb      	strb	r3, [r7, #31]
 8007858:	e037      	b.n	80078ca <UART_SetConfig+0x216>
 800785a:	2302      	movs	r3, #2
 800785c:	77fb      	strb	r3, [r7, #31]
 800785e:	e034      	b.n	80078ca <UART_SetConfig+0x216>
 8007860:	2304      	movs	r3, #4
 8007862:	77fb      	strb	r3, [r7, #31]
 8007864:	e031      	b.n	80078ca <UART_SetConfig+0x216>
 8007866:	2308      	movs	r3, #8
 8007868:	77fb      	strb	r3, [r7, #31]
 800786a:	e02e      	b.n	80078ca <UART_SetConfig+0x216>
 800786c:	2310      	movs	r3, #16
 800786e:	77fb      	strb	r3, [r7, #31]
 8007870:	e02b      	b.n	80078ca <UART_SetConfig+0x216>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a61      	ldr	r2, [pc, #388]	; (80079fc <UART_SetConfig+0x348>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d124      	bne.n	80078c6 <UART_SetConfig+0x212>
 800787c:	4b5b      	ldr	r3, [pc, #364]	; (80079ec <UART_SetConfig+0x338>)
 800787e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007880:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007884:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007888:	d011      	beq.n	80078ae <UART_SetConfig+0x1fa>
 800788a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800788e:	d817      	bhi.n	80078c0 <UART_SetConfig+0x20c>
 8007890:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007894:	d011      	beq.n	80078ba <UART_SetConfig+0x206>
 8007896:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800789a:	d811      	bhi.n	80078c0 <UART_SetConfig+0x20c>
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <UART_SetConfig+0x1f4>
 80078a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078a4:	d006      	beq.n	80078b4 <UART_SetConfig+0x200>
 80078a6:	e00b      	b.n	80078c0 <UART_SetConfig+0x20c>
 80078a8:	2300      	movs	r3, #0
 80078aa:	77fb      	strb	r3, [r7, #31]
 80078ac:	e00d      	b.n	80078ca <UART_SetConfig+0x216>
 80078ae:	2302      	movs	r3, #2
 80078b0:	77fb      	strb	r3, [r7, #31]
 80078b2:	e00a      	b.n	80078ca <UART_SetConfig+0x216>
 80078b4:	2304      	movs	r3, #4
 80078b6:	77fb      	strb	r3, [r7, #31]
 80078b8:	e007      	b.n	80078ca <UART_SetConfig+0x216>
 80078ba:	2308      	movs	r3, #8
 80078bc:	77fb      	strb	r3, [r7, #31]
 80078be:	e004      	b.n	80078ca <UART_SetConfig+0x216>
 80078c0:	2310      	movs	r3, #16
 80078c2:	77fb      	strb	r3, [r7, #31]
 80078c4:	e001      	b.n	80078ca <UART_SetConfig+0x216>
 80078c6:	2310      	movs	r3, #16
 80078c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d2:	d15c      	bne.n	800798e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80078d4:	7ffb      	ldrb	r3, [r7, #31]
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d827      	bhi.n	800792a <UART_SetConfig+0x276>
 80078da:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <UART_SetConfig+0x22c>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	08007905 	.word	0x08007905
 80078e4:	0800790d 	.word	0x0800790d
 80078e8:	08007915 	.word	0x08007915
 80078ec:	0800792b 	.word	0x0800792b
 80078f0:	0800791b 	.word	0x0800791b
 80078f4:	0800792b 	.word	0x0800792b
 80078f8:	0800792b 	.word	0x0800792b
 80078fc:	0800792b 	.word	0x0800792b
 8007900:	08007923 	.word	0x08007923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007904:	f7fe f960 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 8007908:	61b8      	str	r0, [r7, #24]
        break;
 800790a:	e013      	b.n	8007934 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800790c:	f7fe f97e 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 8007910:	61b8      	str	r0, [r7, #24]
        break;
 8007912:	e00f      	b.n	8007934 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007914:	4b3a      	ldr	r3, [pc, #232]	; (8007a00 <UART_SetConfig+0x34c>)
 8007916:	61bb      	str	r3, [r7, #24]
        break;
 8007918:	e00c      	b.n	8007934 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800791a:	f7fe f8df 	bl	8005adc <HAL_RCC_GetSysClockFreq>
 800791e:	61b8      	str	r0, [r7, #24]
        break;
 8007920:	e008      	b.n	8007934 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007926:	61bb      	str	r3, [r7, #24]
        break;
 8007928:	e004      	b.n	8007934 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	77bb      	strb	r3, [r7, #30]
        break;
 8007932:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 8085 	beq.w	8007a46 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	005a      	lsls	r2, r3, #1
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	085b      	lsrs	r3, r3, #1
 8007946:	441a      	add	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007950:	b29b      	uxth	r3, r3
 8007952:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	2b0f      	cmp	r3, #15
 8007958:	d916      	bls.n	8007988 <UART_SetConfig+0x2d4>
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007960:	d212      	bcs.n	8007988 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	b29b      	uxth	r3, r3
 8007966:	f023 030f 	bic.w	r3, r3, #15
 800796a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	b29b      	uxth	r3, r3
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	b29a      	uxth	r2, r3
 8007978:	89fb      	ldrh	r3, [r7, #14]
 800797a:	4313      	orrs	r3, r2
 800797c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	89fa      	ldrh	r2, [r7, #14]
 8007984:	60da      	str	r2, [r3, #12]
 8007986:	e05e      	b.n	8007a46 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	77bb      	strb	r3, [r7, #30]
 800798c:	e05b      	b.n	8007a46 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 800798e:	7ffb      	ldrb	r3, [r7, #31]
 8007990:	2b08      	cmp	r3, #8
 8007992:	d837      	bhi.n	8007a04 <UART_SetConfig+0x350>
 8007994:	a201      	add	r2, pc, #4	; (adr r2, 800799c <UART_SetConfig+0x2e8>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	080079c1 	.word	0x080079c1
 80079a0:	080079c9 	.word	0x080079c9
 80079a4:	080079d1 	.word	0x080079d1
 80079a8:	08007a05 	.word	0x08007a05
 80079ac:	080079d7 	.word	0x080079d7
 80079b0:	08007a05 	.word	0x08007a05
 80079b4:	08007a05 	.word	0x08007a05
 80079b8:	08007a05 	.word	0x08007a05
 80079bc:	080079df 	.word	0x080079df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079c0:	f7fe f902 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 80079c4:	61b8      	str	r0, [r7, #24]
        break;
 80079c6:	e022      	b.n	8007a0e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079c8:	f7fe f920 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 80079cc:	61b8      	str	r0, [r7, #24]
        break;
 80079ce:	e01e      	b.n	8007a0e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079d0:	4b0b      	ldr	r3, [pc, #44]	; (8007a00 <UART_SetConfig+0x34c>)
 80079d2:	61bb      	str	r3, [r7, #24]
        break;
 80079d4:	e01b      	b.n	8007a0e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079d6:	f7fe f881 	bl	8005adc <HAL_RCC_GetSysClockFreq>
 80079da:	61b8      	str	r0, [r7, #24]
        break;
 80079dc:	e017      	b.n	8007a0e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079e2:	61bb      	str	r3, [r7, #24]
        break;
 80079e4:	e013      	b.n	8007a0e <UART_SetConfig+0x35a>
 80079e6:	bf00      	nop
 80079e8:	40013800 	.word	0x40013800
 80079ec:	40021000 	.word	0x40021000
 80079f0:	40004400 	.word	0x40004400
 80079f4:	40004800 	.word	0x40004800
 80079f8:	40004c00 	.word	0x40004c00
 80079fc:	40005000 	.word	0x40005000
 8007a00:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	77bb      	strb	r3, [r7, #30]
        break;
 8007a0c:	bf00      	nop
    }

    if (pclk != 0U)
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d018      	beq.n	8007a46 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	085a      	lsrs	r2, r3, #1
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	441a      	add	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	2b0f      	cmp	r3, #15
 8007a2e:	d908      	bls.n	8007a42 <UART_SetConfig+0x38e>
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a36:	d204      	bcs.n	8007a42 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	60da      	str	r2, [r3, #12]
 8007a40:	e001      	b.n	8007a46 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007a52:	7fbb      	ldrb	r3, [r7, #30]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3720      	adds	r7, #32
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00a      	beq.n	8007aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	f003 0310 	and.w	r3, r3, #16
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01a      	beq.n	8007b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b5a:	d10a      	bne.n	8007b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	605a      	str	r2, [r3, #4]
  }
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bb0:	f7fa fe3a 	bl	8002828 <HAL_GetTick>
 8007bb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0308 	and.w	r3, r3, #8
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d10e      	bne.n	8007be2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f82d 	bl	8007c32 <UART_WaitOnFlagUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e023      	b.n	8007c2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d10e      	bne.n	8007c0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f817 	bl	8007c32 <UART_WaitOnFlagUntilTimeout>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e00d      	b.n	8007c2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b09c      	sub	sp, #112	; 0x70
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	603b      	str	r3, [r7, #0]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c42:	e0a5      	b.n	8007d90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c4a:	f000 80a1 	beq.w	8007d90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c4e:	f7fa fdeb 	bl	8002828 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d302      	bcc.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x32>
 8007c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d13e      	bne.n	8007ce2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c78:	667b      	str	r3, [r7, #100]	; 0x64
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c84:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e6      	bne.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3308      	adds	r3, #8
 8007c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	663b      	str	r3, [r7, #96]	; 0x60
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3308      	adds	r3, #8
 8007cb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e5      	bne.n	8007c96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e067      	b.n	8007db2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d04f      	beq.n	8007d90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cfe:	d147      	bne.n	8007d90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	e853 3f00 	ldrex	r3, [r3]
 8007d16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	461a      	mov	r2, r3
 8007d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d28:	637b      	str	r3, [r7, #52]	; 0x34
 8007d2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d30:	e841 2300 	strex	r3, r2, [r1]
 8007d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e6      	bne.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3308      	adds	r3, #8
 8007d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f023 0301 	bic.w	r3, r3, #1
 8007d52:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3308      	adds	r3, #8
 8007d5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d5c:	623a      	str	r2, [r7, #32]
 8007d5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	69f9      	ldr	r1, [r7, #28]
 8007d62:	6a3a      	ldr	r2, [r7, #32]
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e5      	bne.n	8007d3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2220      	movs	r2, #32
 8007d74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e010      	b.n	8007db2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	69da      	ldr	r2, [r3, #28]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	4013      	ands	r3, r2
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	bf0c      	ite	eq
 8007da0:	2301      	moveq	r3, #1
 8007da2:	2300      	movne	r3, #0
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	461a      	mov	r2, r3
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	f43f af4a 	beq.w	8007c44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3770      	adds	r7, #112	; 0x70
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b091      	sub	sp, #68	; 0x44
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	88fa      	ldrh	r2, [r7, #6]
 8007dd4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	88fa      	ldrh	r2, [r7, #6]
 8007ddc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dee:	d10e      	bne.n	8007e0e <UART_Start_Receive_IT+0x52>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d105      	bne.n	8007e04 <UART_Start_Receive_IT+0x48>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007dfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e02:	e01a      	b.n	8007e3a <UART_Start_Receive_IT+0x7e>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	22ff      	movs	r2, #255	; 0xff
 8007e08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e0c:	e015      	b.n	8007e3a <UART_Start_Receive_IT+0x7e>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10d      	bne.n	8007e32 <UART_Start_Receive_IT+0x76>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d104      	bne.n	8007e28 <UART_Start_Receive_IT+0x6c>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	22ff      	movs	r2, #255	; 0xff
 8007e22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e26:	e008      	b.n	8007e3a <UART_Start_Receive_IT+0x7e>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	227f      	movs	r2, #127	; 0x7f
 8007e2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e30:	e003      	b.n	8007e3a <UART_Start_Receive_IT+0x7e>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2222      	movs	r2, #34	; 0x22
 8007e46:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3308      	adds	r3, #8
 8007e66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e68:	637a      	str	r2, [r7, #52]	; 0x34
 8007e6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e5      	bne.n	8007e48 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e84:	d107      	bne.n	8007e96 <UART_Start_Receive_IT+0xda>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d103      	bne.n	8007e96 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4a14      	ldr	r2, [pc, #80]	; (8007ee4 <UART_Start_Receive_IT+0x128>)
 8007e92:	665a      	str	r2, [r3, #100]	; 0x64
 8007e94:	e002      	b.n	8007e9c <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4a13      	ldr	r2, [pc, #76]	; (8007ee8 <UART_Start_Receive_IT+0x12c>)
 8007e9a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	e853 3f00 	ldrex	r3, [r3]
 8007eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec2:	623b      	str	r3, [r7, #32]
 8007ec4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	69f9      	ldr	r1, [r7, #28]
 8007ec8:	6a3a      	ldr	r2, [r7, #32]
 8007eca:	e841 2300 	strex	r3, r2, [r1]
 8007ece:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e6      	bne.n	8007ea4 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3744      	adds	r7, #68	; 0x44
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	0800818f 	.word	0x0800818f
 8007ee8:	08008033 	.word	0x08008033

08007eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b095      	sub	sp, #84	; 0x54
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f12:	643b      	str	r3, [r7, #64]	; 0x40
 8007f14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e6      	bne.n	8007ef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	f023 0301 	bic.w	r3, r3, #1
 8007f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3308      	adds	r3, #8
 8007f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f4e:	e841 2300 	strex	r3, r2, [r1]
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e5      	bne.n	8007f26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d118      	bne.n	8007f94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	e853 3f00 	ldrex	r3, [r3]
 8007f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f023 0310 	bic.w	r3, r3, #16
 8007f76:	647b      	str	r3, [r7, #68]	; 0x44
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f80:	61bb      	str	r3, [r7, #24]
 8007f82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	6979      	ldr	r1, [r7, #20]
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	e841 2300 	strex	r3, r2, [r1]
 8007f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e6      	bne.n	8007f62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2220      	movs	r2, #32
 8007f98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007fa6:	bf00      	nop
 8007fa8:	3754      	adds	r7, #84	; 0x54
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff fb59 	bl	8007688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b088      	sub	sp, #32
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ffa:	61fb      	str	r3, [r7, #28]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	61bb      	str	r3, [r7, #24]
 8008006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	6979      	ldr	r1, [r7, #20]
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	613b      	str	r3, [r7, #16]
   return(result);
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e6      	bne.n	8007fe6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7ff fb25 	bl	8007674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800802a:	bf00      	nop
 800802c:	3720      	adds	r7, #32
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b096      	sub	sp, #88	; 0x58
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008040:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008048:	2b22      	cmp	r3, #34	; 0x22
 800804a:	f040 8094 	bne.w	8008176 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008054:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008058:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800805c:	b2d9      	uxtb	r1, r3
 800805e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008062:	b2da      	uxtb	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008068:	400a      	ands	r2, r1
 800806a:	b2d2      	uxtb	r2, r2
 800806c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800807e:	b29b      	uxth	r3, r3
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008090:	b29b      	uxth	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d177      	bne.n	8008186 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	e853 3f00 	ldrex	r3, [r3]
 80080a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080aa:	653b      	str	r3, [r7, #80]	; 0x50
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080b4:	647b      	str	r3, [r7, #68]	; 0x44
 80080b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080bc:	e841 2300 	strex	r3, r2, [r1]
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1e6      	bne.n	8008096 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3308      	adds	r3, #8
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	623b      	str	r3, [r7, #32]
   return(result);
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	f023 0301 	bic.w	r3, r3, #1
 80080de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3308      	adds	r3, #8
 80080e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080e8:	633a      	str	r2, [r7, #48]	; 0x30
 80080ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e5      	bne.n	80080c8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800810c:	2b01      	cmp	r3, #1
 800810e:	d12e      	bne.n	800816e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	e853 3f00 	ldrex	r3, [r3]
 8008122:	60fb      	str	r3, [r7, #12]
   return(result);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f023 0310 	bic.w	r3, r3, #16
 800812a:	64bb      	str	r3, [r7, #72]	; 0x48
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008134:	61fb      	str	r3, [r7, #28]
 8008136:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	69b9      	ldr	r1, [r7, #24]
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	617b      	str	r3, [r7, #20]
   return(result);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e6      	bne.n	8008116 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	f003 0310 	and.w	r3, r3, #16
 8008152:	2b10      	cmp	r3, #16
 8008154:	d103      	bne.n	800815e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2210      	movs	r2, #16
 800815c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff fa98 	bl	800769c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800816c:	e00b      	b.n	8008186 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7f8 fd66 	bl	8000c40 <HAL_UART_RxCpltCallback>
}
 8008174:	e007      	b.n	8008186 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	699a      	ldr	r2, [r3, #24]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f042 0208 	orr.w	r2, r2, #8
 8008184:	619a      	str	r2, [r3, #24]
}
 8008186:	bf00      	nop
 8008188:	3758      	adds	r7, #88	; 0x58
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b096      	sub	sp, #88	; 0x58
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800819c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081a4:	2b22      	cmp	r3, #34	; 0x22
 80081a6:	f040 8094 	bne.w	80082d2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081b0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80081ba:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80081be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081c2:	4013      	ands	r3, r2
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ce:	1c9a      	adds	r2, r3, #2
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d177      	bne.n	80082e2 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fa:	e853 3f00 	ldrex	r3, [r3]
 80081fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008210:	643b      	str	r3, [r7, #64]	; 0x40
 8008212:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008218:	e841 2300 	strex	r3, r2, [r1]
 800821c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e6      	bne.n	80081f2 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3308      	adds	r3, #8
 800822a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	e853 3f00 	ldrex	r3, [r3]
 8008232:	61fb      	str	r3, [r7, #28]
   return(result);
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	f023 0301 	bic.w	r3, r3, #1
 800823a:	64bb      	str	r3, [r7, #72]	; 0x48
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3308      	adds	r3, #8
 8008242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008244:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800824a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800824c:	e841 2300 	strex	r3, r2, [r1]
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e5      	bne.n	8008224 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2220      	movs	r2, #32
 800825c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008268:	2b01      	cmp	r3, #1
 800826a:	d12e      	bne.n	80082ca <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f023 0310 	bic.w	r3, r3, #16
 8008286:	647b      	str	r3, [r7, #68]	; 0x44
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008290:	61bb      	str	r3, [r7, #24]
 8008292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	6979      	ldr	r1, [r7, #20]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	613b      	str	r3, [r7, #16]
   return(result);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e6      	bne.n	8008272 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f003 0310 	and.w	r3, r3, #16
 80082ae:	2b10      	cmp	r3, #16
 80082b0:	d103      	bne.n	80082ba <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2210      	movs	r2, #16
 80082b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff f9ea 	bl	800769c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082c8:	e00b      	b.n	80082e2 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7f8 fcb8 	bl	8000c40 <HAL_UART_RxCpltCallback>
}
 80082d0:	e007      	b.n	80082e2 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	699a      	ldr	r2, [r3, #24]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f042 0208 	orr.w	r2, r2, #8
 80082e0:	619a      	str	r2, [r3, #24]
}
 80082e2:	bf00      	nop
 80082e4:	3758      	adds	r7, #88	; 0x58
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b083      	sub	sp, #12
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008306:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800830a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	b29b      	uxth	r3, r3
 8008318:	43db      	mvns	r3, r3
 800831a:	b29b      	uxth	r3, r3
 800831c:	4013      	ands	r3, r2
 800831e:	b29a      	uxth	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008334:	b084      	sub	sp, #16
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	f107 0014 	add.w	r0, r7, #20
 8008342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	b004      	add	sp, #16
 8008374:	4770      	bx	lr
	...

08008378 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800837c:	4904      	ldr	r1, [pc, #16]	; (8008390 <MX_FATFS_Init+0x18>)
 800837e:	4805      	ldr	r0, [pc, #20]	; (8008394 <MX_FATFS_Init+0x1c>)
 8008380:	f003 fde4 	bl	800bf4c <FATFS_LinkDriver>
 8008384:	4603      	mov	r3, r0
 8008386:	461a      	mov	r2, r3
 8008388:	4b03      	ldr	r3, [pc, #12]	; (8008398 <MX_FATFS_Init+0x20>)
 800838a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800838c:	bf00      	nop
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20000924 	.word	0x20000924
 8008394:	2000000c 	.word	0x2000000c
 8008398:	20000928 	.word	0x20000928

0800839c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80083a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    /*Stat = STA_NOINIT;
    return Stat;
    */
	return USER_SPI_initialize(pdrv);
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 f9d9 	bl	8008770 <USER_SPI_initialize>
 80083be:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	/*
    Stat = STA_NOINIT;
    return Stat;
    */
	return USER_SPI_status(pdrv);
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fab7 	bl	8008948 <USER_SPI_status>
 80083da:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	607a      	str	r2, [r7, #4]
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 80083f4:	7bf8      	ldrb	r0, [r7, #15]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	68b9      	ldr	r1, [r7, #8]
 80083fc:	f000 faba 	bl	8008974 <USER_SPI_read>
 8008400:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	603b      	str	r3, [r7, #0]
 8008416:	4603      	mov	r3, r0
 8008418:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 800841a:	7bf8      	ldrb	r0, [r7, #15]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	f000 fb0d 	bl	8008a40 <USER_SPI_write>
 8008426:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	603a      	str	r2, [r7, #0]
 800843a:	71fb      	strb	r3, [r7, #7]
 800843c:	460b      	mov	r3, r1
 800843e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	/*
    DRESULT res = RES_ERROR;
    return res;
	*/
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8008440:	79b9      	ldrb	r1, [r7, #6]
 8008442:	79fb      	ldrb	r3, [r7, #7]
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fb76 	bl	8008b38 <USER_SPI_ioctl>
 800844c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008460:	f7fa f9e2 	bl	8002828 <HAL_GetTick>
 8008464:	4603      	mov	r3, r0
 8008466:	4a04      	ldr	r2, [pc, #16]	; (8008478 <SPI_Timer_On+0x20>)
 8008468:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800846a:	4a04      	ldr	r2, [pc, #16]	; (800847c <SPI_Timer_On+0x24>)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6013      	str	r3, [r2, #0]
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000d88 	.word	0x20000d88
 800847c:	20000d8c 	.word	0x20000d8c

08008480 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008484:	f7fa f9d0 	bl	8002828 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <SPI_Timer_Status+0x24>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	1ad2      	subs	r2, r2, r3
 8008490:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <SPI_Timer_Status+0x28>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	bf34      	ite	cc
 8008498:	2301      	movcc	r3, #1
 800849a:	2300      	movcs	r3, #0
 800849c:	b2db      	uxtb	r3, r3
}
 800849e:	4618      	mov	r0, r3
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000d88 	.word	0x20000d88
 80084a8:	20000d8c 	.word	0x20000d8c

080084ac <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	4603      	mov	r3, r0
 80084b4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80084b6:	f107 020f 	add.w	r2, r7, #15
 80084ba:	1df9      	adds	r1, r7, #7
 80084bc:	2332      	movs	r3, #50	; 0x32
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	2301      	movs	r3, #1
 80084c2:	4804      	ldr	r0, [pc, #16]	; (80084d4 <xchg_spi+0x28>)
 80084c4:	f7fe f951 	bl	800676a <HAL_SPI_TransmitReceive>
    return rxDat;
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	2000034c 	.word	0x2000034c

080084d8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80084d8:	b590      	push	{r4, r7, lr}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80084e2:	2300      	movs	r3, #0
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	e00a      	b.n	80084fe <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	18d4      	adds	r4, r2, r3
 80084ee:	20ff      	movs	r0, #255	; 0xff
 80084f0:	f7ff ffdc 	bl	80084ac <xchg_spi>
 80084f4:	4603      	mov	r3, r0
 80084f6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3301      	adds	r3, #1
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d3f0      	bcc.n	80084e8 <rcvr_spi_multi+0x10>
	}
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	bd90      	pop	{r4, r7, pc}

08008510 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e009      	b.n	8008534 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4413      	add	r3, r2
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	4618      	mov	r0, r3
 800852a:	f7ff ffbf 	bl	80084ac <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3301      	adds	r3, #1
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d3f1      	bcc.n	8008520 <xmit_spi_multi+0x10>
	}
}
 800853c:	bf00      	nop
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b086      	sub	sp, #24
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800854e:	f7fa f96b 	bl	8002828 <HAL_GetTick>
 8008552:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008558:	20ff      	movs	r0, #255	; 0xff
 800855a:	f7ff ffa7 	bl	80084ac <xchg_spi>
 800855e:	4603      	mov	r3, r0
 8008560:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	2bff      	cmp	r3, #255	; 0xff
 8008566:	d007      	beq.n	8008578 <wait_ready+0x32>
 8008568:	f7fa f95e 	bl	8002828 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	429a      	cmp	r2, r3
 8008576:	d8ef      	bhi.n	8008558 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	2bff      	cmp	r3, #255	; 0xff
 800857c:	bf0c      	ite	eq
 800857e:	2301      	moveq	r3, #1
 8008580:	2300      	movne	r3, #0
 8008582:	b2db      	uxtb	r3, r3
}
 8008584:	4618      	mov	r0, r3
 8008586:	3718      	adds	r7, #24
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008590:	2201      	movs	r2, #1
 8008592:	2102      	movs	r1, #2
 8008594:	4803      	ldr	r0, [pc, #12]	; (80085a4 <despiselect+0x18>)
 8008596:	f7fb fa9d 	bl	8003ad4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800859a:	20ff      	movs	r0, #255	; 0xff
 800859c:	f7ff ff86 	bl	80084ac <xchg_spi>

}
 80085a0:	bf00      	nop
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	48000400 	.word	0x48000400

080085a8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80085ac:	2200      	movs	r2, #0
 80085ae:	2102      	movs	r1, #2
 80085b0:	4809      	ldr	r0, [pc, #36]	; (80085d8 <spiselect+0x30>)
 80085b2:	f7fb fa8f 	bl	8003ad4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80085b6:	20ff      	movs	r0, #255	; 0xff
 80085b8:	f7ff ff78 	bl	80084ac <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80085bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085c0:	f7ff ffc1 	bl	8008546 <wait_ready>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <spiselect+0x26>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e002      	b.n	80085d4 <spiselect+0x2c>

	despiselect();
 80085ce:	f7ff ffdd 	bl	800858c <despiselect>
	return 0;	/* Timeout */
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	48000400 	.word	0x48000400

080085dc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80085e6:	20c8      	movs	r0, #200	; 0xc8
 80085e8:	f7ff ff36 	bl	8008458 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80085ec:	20ff      	movs	r0, #255	; 0xff
 80085ee:	f7ff ff5d 	bl	80084ac <xchg_spi>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	2bff      	cmp	r3, #255	; 0xff
 80085fa:	d104      	bne.n	8008606 <rcvr_datablock+0x2a>
 80085fc:	f7ff ff40 	bl	8008480 <SPI_Timer_Status>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1f2      	bne.n	80085ec <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	2bfe      	cmp	r3, #254	; 0xfe
 800860a:	d001      	beq.n	8008610 <rcvr_datablock+0x34>
 800860c:	2300      	movs	r3, #0
 800860e:	e00a      	b.n	8008626 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff ff60 	bl	80084d8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008618:	20ff      	movs	r0, #255	; 0xff
 800861a:	f7ff ff47 	bl	80084ac <xchg_spi>
 800861e:	20ff      	movs	r0, #255	; 0xff
 8008620:	f7ff ff44 	bl	80084ac <xchg_spi>

	return 1;						/* Function succeeded */
 8008624:	2301      	movs	r3, #1
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800863a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800863e:	f7ff ff82 	bl	8008546 <wait_ready>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <xmit_datablock+0x1e>
 8008648:	2300      	movs	r3, #0
 800864a:	e01e      	b.n	800868a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff ff2c 	bl	80084ac <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	2bfd      	cmp	r3, #253	; 0xfd
 8008658:	d016      	beq.n	8008688 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800865a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7ff ff56 	bl	8008510 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008664:	20ff      	movs	r0, #255	; 0xff
 8008666:	f7ff ff21 	bl	80084ac <xchg_spi>
 800866a:	20ff      	movs	r0, #255	; 0xff
 800866c:	f7ff ff1e 	bl	80084ac <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008670:	20ff      	movs	r0, #255	; 0xff
 8008672:	f7ff ff1b 	bl	80084ac <xchg_spi>
 8008676:	4603      	mov	r3, r0
 8008678:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	f003 031f 	and.w	r3, r3, #31
 8008680:	2b05      	cmp	r3, #5
 8008682:	d001      	beq.n	8008688 <xmit_datablock+0x5a>
 8008684:	2300      	movs	r3, #0
 8008686:	e000      	b.n	800868a <xmit_datablock+0x5c>
	}
	return 1;
 8008688:	2301      	movs	r3, #1
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	4603      	mov	r3, r0
 800869a:	6039      	str	r1, [r7, #0]
 800869c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800869e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	da0e      	bge.n	80086c4 <send_cmd+0x32>
		cmd &= 0x7F;
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ac:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80086ae:	2100      	movs	r1, #0
 80086b0:	2037      	movs	r0, #55	; 0x37
 80086b2:	f7ff ffee 	bl	8008692 <send_cmd>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d901      	bls.n	80086c4 <send_cmd+0x32>
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	e051      	b.n	8008768 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	2b0c      	cmp	r3, #12
 80086c8:	d008      	beq.n	80086dc <send_cmd+0x4a>
		despiselect();
 80086ca:	f7ff ff5f 	bl	800858c <despiselect>
		if (!spiselect()) return 0xFF;
 80086ce:	f7ff ff6b 	bl	80085a8 <spiselect>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <send_cmd+0x4a>
 80086d8:	23ff      	movs	r3, #255	; 0xff
 80086da:	e045      	b.n	8008768 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff fee1 	bl	80084ac <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	0e1b      	lsrs	r3, r3, #24
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7ff fedb 	bl	80084ac <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	0c1b      	lsrs	r3, r3, #16
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff fed5 	bl	80084ac <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	0a1b      	lsrs	r3, r3, #8
 8008706:	b2db      	uxtb	r3, r3
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff fecf 	bl	80084ac <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	b2db      	uxtb	r3, r3
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff feca 	bl	80084ac <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008718:	2301      	movs	r3, #1
 800871a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d101      	bne.n	8008726 <send_cmd+0x94>
 8008722:	2395      	movs	r3, #149	; 0x95
 8008724:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	2b08      	cmp	r3, #8
 800872a:	d101      	bne.n	8008730 <send_cmd+0x9e>
 800872c:	2387      	movs	r3, #135	; 0x87
 800872e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff feba 	bl	80084ac <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	2b0c      	cmp	r3, #12
 800873c:	d102      	bne.n	8008744 <send_cmd+0xb2>
 800873e:	20ff      	movs	r0, #255	; 0xff
 8008740:	f7ff feb4 	bl	80084ac <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008744:	230a      	movs	r3, #10
 8008746:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008748:	20ff      	movs	r0, #255	; 0xff
 800874a:	f7ff feaf 	bl	80084ac <xchg_spi>
 800874e:	4603      	mov	r3, r0
 8008750:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008752:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008756:	2b00      	cmp	r3, #0
 8008758:	da05      	bge.n	8008766 <send_cmd+0xd4>
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	3b01      	subs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1f0      	bne.n	8008748 <send_cmd+0xb6>

	return res;							/* Return received response */
 8008766:	7bbb      	ldrb	r3, [r7, #14]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008770:	b590      	push	{r4, r7, lr}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <USER_SPI_initialize+0x14>
 8008780:	2301      	movs	r3, #1
 8008782:	e0d6      	b.n	8008932 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008784:	4b6d      	ldr	r3, [pc, #436]	; (800893c <USER_SPI_initialize+0x1cc>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	b2db      	uxtb	r3, r3
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <USER_SPI_initialize+0x2a>
 8008792:	4b6a      	ldr	r3, [pc, #424]	; (800893c <USER_SPI_initialize+0x1cc>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	e0cb      	b.n	8008932 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800879a:	4b69      	ldr	r3, [pc, #420]	; (8008940 <USER_SPI_initialize+0x1d0>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80087a4:	4b66      	ldr	r3, [pc, #408]	; (8008940 <USER_SPI_initialize+0x1d0>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80087ac:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80087ae:	230a      	movs	r3, #10
 80087b0:	73fb      	strb	r3, [r7, #15]
 80087b2:	e005      	b.n	80087c0 <USER_SPI_initialize+0x50>
 80087b4:	20ff      	movs	r0, #255	; 0xff
 80087b6:	f7ff fe79 	bl	80084ac <xchg_spi>
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
 80087bc:	3b01      	subs	r3, #1
 80087be:	73fb      	strb	r3, [r7, #15]
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1f6      	bne.n	80087b4 <USER_SPI_initialize+0x44>

	ty = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80087ca:	2100      	movs	r1, #0
 80087cc:	2000      	movs	r0, #0
 80087ce:	f7ff ff60 	bl	8008692 <send_cmd>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	f040 808b 	bne.w	80088f0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80087da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087de:	f7ff fe3b 	bl	8008458 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80087e2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80087e6:	2008      	movs	r0, #8
 80087e8:	f7ff ff53 	bl	8008692 <send_cmd>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d151      	bne.n	8008896 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]
 80087f6:	e00d      	b.n	8008814 <USER_SPI_initialize+0xa4>
 80087f8:	7bfc      	ldrb	r4, [r7, #15]
 80087fa:	20ff      	movs	r0, #255	; 0xff
 80087fc:	f7ff fe56 	bl	80084ac <xchg_spi>
 8008800:	4603      	mov	r3, r0
 8008802:	461a      	mov	r2, r3
 8008804:	f107 0310 	add.w	r3, r7, #16
 8008808:	4423      	add	r3, r4
 800880a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	3301      	adds	r3, #1
 8008812:	73fb      	strb	r3, [r7, #15]
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	2b03      	cmp	r3, #3
 8008818:	d9ee      	bls.n	80087f8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800881a:	7abb      	ldrb	r3, [r7, #10]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d167      	bne.n	80088f0 <USER_SPI_initialize+0x180>
 8008820:	7afb      	ldrb	r3, [r7, #11]
 8008822:	2baa      	cmp	r3, #170	; 0xaa
 8008824:	d164      	bne.n	80088f0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008826:	bf00      	nop
 8008828:	f7ff fe2a 	bl	8008480 <SPI_Timer_Status>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d007      	beq.n	8008842 <USER_SPI_initialize+0xd2>
 8008832:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008836:	20a9      	movs	r0, #169	; 0xa9
 8008838:	f7ff ff2b 	bl	8008692 <send_cmd>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f2      	bne.n	8008828 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008842:	f7ff fe1d 	bl	8008480 <SPI_Timer_Status>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d051      	beq.n	80088f0 <USER_SPI_initialize+0x180>
 800884c:	2100      	movs	r1, #0
 800884e:	203a      	movs	r0, #58	; 0x3a
 8008850:	f7ff ff1f 	bl	8008692 <send_cmd>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d14a      	bne.n	80088f0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]
 800885e:	e00d      	b.n	800887c <USER_SPI_initialize+0x10c>
 8008860:	7bfc      	ldrb	r4, [r7, #15]
 8008862:	20ff      	movs	r0, #255	; 0xff
 8008864:	f7ff fe22 	bl	80084ac <xchg_spi>
 8008868:	4603      	mov	r3, r0
 800886a:	461a      	mov	r2, r3
 800886c:	f107 0310 	add.w	r3, r7, #16
 8008870:	4423      	add	r3, r4
 8008872:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	3301      	adds	r3, #1
 800887a:	73fb      	strb	r3, [r7, #15]
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	2b03      	cmp	r3, #3
 8008880:	d9ee      	bls.n	8008860 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008882:	7a3b      	ldrb	r3, [r7, #8]
 8008884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <USER_SPI_initialize+0x120>
 800888c:	230c      	movs	r3, #12
 800888e:	e000      	b.n	8008892 <USER_SPI_initialize+0x122>
 8008890:	2304      	movs	r3, #4
 8008892:	737b      	strb	r3, [r7, #13]
 8008894:	e02c      	b.n	80088f0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008896:	2100      	movs	r1, #0
 8008898:	20a9      	movs	r0, #169	; 0xa9
 800889a:	f7ff fefa 	bl	8008692 <send_cmd>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d804      	bhi.n	80088ae <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80088a4:	2302      	movs	r3, #2
 80088a6:	737b      	strb	r3, [r7, #13]
 80088a8:	23a9      	movs	r3, #169	; 0xa9
 80088aa:	73bb      	strb	r3, [r7, #14]
 80088ac:	e003      	b.n	80088b6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80088ae:	2301      	movs	r3, #1
 80088b0:	737b      	strb	r3, [r7, #13]
 80088b2:	2301      	movs	r3, #1
 80088b4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80088b6:	bf00      	nop
 80088b8:	f7ff fde2 	bl	8008480 <SPI_Timer_Status>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d007      	beq.n	80088d2 <USER_SPI_initialize+0x162>
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	2100      	movs	r1, #0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fee3 	bl	8008692 <send_cmd>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1f2      	bne.n	80088b8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80088d2:	f7ff fdd5 	bl	8008480 <SPI_Timer_Status>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d007      	beq.n	80088ec <USER_SPI_initialize+0x17c>
 80088dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088e0:	2010      	movs	r0, #16
 80088e2:	f7ff fed6 	bl	8008692 <send_cmd>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <USER_SPI_initialize+0x180>
				ty = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80088f0:	4a14      	ldr	r2, [pc, #80]	; (8008944 <USER_SPI_initialize+0x1d4>)
 80088f2:	7b7b      	ldrb	r3, [r7, #13]
 80088f4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80088f6:	f7ff fe49 	bl	800858c <despiselect>

	if (ty) {			/* OK */
 80088fa:	7b7b      	ldrb	r3, [r7, #13]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d012      	beq.n	8008926 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8008900:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <USER_SPI_initialize+0x1d0>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800890a:	4b0d      	ldr	r3, [pc, #52]	; (8008940 <USER_SPI_initialize+0x1d0>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f042 0210 	orr.w	r2, r2, #16
 8008912:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008914:	4b09      	ldr	r3, [pc, #36]	; (800893c <USER_SPI_initialize+0x1cc>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	f023 0301 	bic.w	r3, r3, #1
 800891e:	b2da      	uxtb	r2, r3
 8008920:	4b06      	ldr	r3, [pc, #24]	; (800893c <USER_SPI_initialize+0x1cc>)
 8008922:	701a      	strb	r2, [r3, #0]
 8008924:	e002      	b.n	800892c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8008926:	4b05      	ldr	r3, [pc, #20]	; (800893c <USER_SPI_initialize+0x1cc>)
 8008928:	2201      	movs	r2, #1
 800892a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800892c:	4b03      	ldr	r3, [pc, #12]	; (800893c <USER_SPI_initialize+0x1cc>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	b2db      	uxtb	r3, r3
}
 8008932:	4618      	mov	r0, r3
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	bd90      	pop	{r4, r7, pc}
 800893a:	bf00      	nop
 800893c:	20000020 	.word	0x20000020
 8008940:	2000034c 	.word	0x2000034c
 8008944:	20000314 	.word	0x20000314

08008948 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	4603      	mov	r3, r0
 8008950:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <USER_SPI_status+0x14>
 8008958:	2301      	movs	r3, #1
 800895a:	e002      	b.n	8008962 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800895c:	4b04      	ldr	r3, [pc, #16]	; (8008970 <USER_SPI_status+0x28>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	b2db      	uxtb	r3, r3
}
 8008962:	4618      	mov	r0, r3
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	20000020 	.word	0x20000020

08008974 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	607a      	str	r2, [r7, #4]
 800897e:	603b      	str	r3, [r7, #0]
 8008980:	4603      	mov	r3, r0
 8008982:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d102      	bne.n	8008990 <USER_SPI_read+0x1c>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <USER_SPI_read+0x20>
 8008990:	2304      	movs	r3, #4
 8008992:	e04d      	b.n	8008a30 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008994:	4b28      	ldr	r3, [pc, #160]	; (8008a38 <USER_SPI_read+0xc4>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <USER_SPI_read+0x32>
 80089a2:	2303      	movs	r3, #3
 80089a4:	e044      	b.n	8008a30 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80089a6:	4b25      	ldr	r3, [pc, #148]	; (8008a3c <USER_SPI_read+0xc8>)
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	f003 0308 	and.w	r3, r3, #8
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d102      	bne.n	80089b8 <USER_SPI_read+0x44>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	025b      	lsls	r3, r3, #9
 80089b6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d111      	bne.n	80089e2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	2011      	movs	r0, #17
 80089c2:	f7ff fe66 	bl	8008692 <send_cmd>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d129      	bne.n	8008a20 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80089cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089d0:	68b8      	ldr	r0, [r7, #8]
 80089d2:	f7ff fe03 	bl	80085dc <rcvr_datablock>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d021      	beq.n	8008a20 <USER_SPI_read+0xac>
			count = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	e01e      	b.n	8008a20 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	2012      	movs	r0, #18
 80089e6:	f7ff fe54 	bl	8008692 <send_cmd>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d117      	bne.n	8008a20 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80089f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089f4:	68b8      	ldr	r0, [r7, #8]
 80089f6:	f7ff fdf1 	bl	80085dc <rcvr_datablock>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00a      	beq.n	8008a16 <USER_SPI_read+0xa2>
				buff += 512;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008a06:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	603b      	str	r3, [r7, #0]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1ed      	bne.n	80089f0 <USER_SPI_read+0x7c>
 8008a14:	e000      	b.n	8008a18 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8008a16:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8008a18:	2100      	movs	r1, #0
 8008a1a:	200c      	movs	r0, #12
 8008a1c:	f7ff fe39 	bl	8008692 <send_cmd>
		}
	}
	despiselect();
 8008a20:	f7ff fdb4 	bl	800858c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bf14      	ite	ne
 8008a2a:	2301      	movne	r3, #1
 8008a2c:	2300      	moveq	r3, #0
 8008a2e:	b2db      	uxtb	r3, r3
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	20000020 	.word	0x20000020
 8008a3c:	20000314 	.word	0x20000314

08008a40 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <USER_SPI_write+0x1c>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <USER_SPI_write+0x20>
 8008a5c:	2304      	movs	r3, #4
 8008a5e:	e063      	b.n	8008b28 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008a60:	4b33      	ldr	r3, [pc, #204]	; (8008b30 <USER_SPI_write+0xf0>)
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <USER_SPI_write+0x32>
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e05a      	b.n	8008b28 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8008a72:	4b2f      	ldr	r3, [pc, #188]	; (8008b30 <USER_SPI_write+0xf0>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	f003 0304 	and.w	r3, r3, #4
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <USER_SPI_write+0x44>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e051      	b.n	8008b28 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008a84:	4b2b      	ldr	r3, [pc, #172]	; (8008b34 <USER_SPI_write+0xf4>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	f003 0308 	and.w	r3, r3, #8
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d102      	bne.n	8008a96 <USER_SPI_write+0x56>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	025b      	lsls	r3, r3, #9
 8008a94:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d110      	bne.n	8008abe <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	2018      	movs	r0, #24
 8008aa0:	f7ff fdf7 	bl	8008692 <send_cmd>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d136      	bne.n	8008b18 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8008aaa:	21fe      	movs	r1, #254	; 0xfe
 8008aac:	68b8      	ldr	r0, [r7, #8]
 8008aae:	f7ff fdbe 	bl	800862e <xmit_datablock>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d02f      	beq.n	8008b18 <USER_SPI_write+0xd8>
			count = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	e02c      	b.n	8008b18 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8008abe:	4b1d      	ldr	r3, [pc, #116]	; (8008b34 <USER_SPI_write+0xf4>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	f003 0306 	and.w	r3, r3, #6
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <USER_SPI_write+0x92>
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	2097      	movs	r0, #151	; 0x97
 8008ace:	f7ff fde0 	bl	8008692 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	2019      	movs	r0, #25
 8008ad6:	f7ff fddc 	bl	8008692 <send_cmd>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d11b      	bne.n	8008b18 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8008ae0:	21fc      	movs	r1, #252	; 0xfc
 8008ae2:	68b8      	ldr	r0, [r7, #8]
 8008ae4:	f7ff fda3 	bl	800862e <xmit_datablock>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <USER_SPI_write+0xc4>
				buff += 512;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008af4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	603b      	str	r3, [r7, #0]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1ee      	bne.n	8008ae0 <USER_SPI_write+0xa0>
 8008b02:	e000      	b.n	8008b06 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8008b04:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8008b06:	21fd      	movs	r1, #253	; 0xfd
 8008b08:	2000      	movs	r0, #0
 8008b0a:	f7ff fd90 	bl	800862e <xmit_datablock>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <USER_SPI_write+0xd8>
 8008b14:	2301      	movs	r3, #1
 8008b16:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8008b18:	f7ff fd38 	bl	800858c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	bf14      	ite	ne
 8008b22:	2301      	movne	r3, #1
 8008b24:	2300      	moveq	r3, #0
 8008b26:	b2db      	uxtb	r3, r3
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	20000020 	.word	0x20000020
 8008b34:	20000314 	.word	0x20000314

08008b38 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08c      	sub	sp, #48	; 0x30
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	603a      	str	r2, [r7, #0]
 8008b42:	71fb      	strb	r3, [r7, #7]
 8008b44:	460b      	mov	r3, r1
 8008b46:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <USER_SPI_ioctl+0x1a>
 8008b4e:	2304      	movs	r3, #4
 8008b50:	e15a      	b.n	8008e08 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008b52:	4baf      	ldr	r3, [pc, #700]	; (8008e10 <USER_SPI_ioctl+0x2d8>)
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <USER_SPI_ioctl+0x2c>
 8008b60:	2303      	movs	r3, #3
 8008b62:	e151      	b.n	8008e08 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8008b6a:	79bb      	ldrb	r3, [r7, #6]
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	f200 8136 	bhi.w	8008dde <USER_SPI_ioctl+0x2a6>
 8008b72:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <USER_SPI_ioctl+0x40>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008b8d 	.word	0x08008b8d
 8008b7c:	08008ba1 	.word	0x08008ba1
 8008b80:	08008ddf 	.word	0x08008ddf
 8008b84:	08008c4d 	.word	0x08008c4d
 8008b88:	08008d43 	.word	0x08008d43
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008b8c:	f7ff fd0c 	bl	80085a8 <spiselect>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 8127 	beq.w	8008de6 <USER_SPI_ioctl+0x2ae>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008b9e:	e122      	b.n	8008de6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	2009      	movs	r0, #9
 8008ba4:	f7ff fd75 	bl	8008692 <send_cmd>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f040 811d 	bne.w	8008dea <USER_SPI_ioctl+0x2b2>
 8008bb0:	f107 030c 	add.w	r3, r7, #12
 8008bb4:	2110      	movs	r1, #16
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7ff fd10 	bl	80085dc <rcvr_datablock>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f000 8113 	beq.w	8008dea <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008bc4:	7b3b      	ldrb	r3, [r7, #12]
 8008bc6:	099b      	lsrs	r3, r3, #6
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d111      	bne.n	8008bf2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8008bce:	7d7b      	ldrb	r3, [r7, #21]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	7d3b      	ldrb	r3, [r7, #20]
 8008bd4:	021b      	lsls	r3, r3, #8
 8008bd6:	4413      	add	r3, r2
 8008bd8:	461a      	mov	r2, r3
 8008bda:	7cfb      	ldrb	r3, [r7, #19]
 8008bdc:	041b      	lsls	r3, r3, #16
 8008bde:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8008be2:	4413      	add	r3, r2
 8008be4:	3301      	adds	r3, #1
 8008be6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	029a      	lsls	r2, r3, #10
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	e028      	b.n	8008c44 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008bf2:	7c7b      	ldrb	r3, [r7, #17]
 8008bf4:	f003 030f 	and.w	r3, r3, #15
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	7dbb      	ldrb	r3, [r7, #22]
 8008bfc:	09db      	lsrs	r3, r3, #7
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	4413      	add	r3, r2
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	7d7b      	ldrb	r3, [r7, #21]
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	f003 0306 	and.w	r3, r3, #6
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	4413      	add	r3, r2
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	3302      	adds	r3, #2
 8008c16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8008c1a:	7d3b      	ldrb	r3, [r7, #20]
 8008c1c:	099b      	lsrs	r3, r3, #6
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	461a      	mov	r2, r3
 8008c22:	7cfb      	ldrb	r3, [r7, #19]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	441a      	add	r2, r3
 8008c28:	7cbb      	ldrb	r3, [r7, #18]
 8008c2a:	029b      	lsls	r3, r3, #10
 8008c2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c30:	4413      	add	r3, r2
 8008c32:	3301      	adds	r3, #1
 8008c34:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8008c36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008c3a:	3b09      	subs	r3, #9
 8008c3c:	69fa      	ldr	r2, [r7, #28]
 8008c3e:	409a      	lsls	r2, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8008c4a:	e0ce      	b.n	8008dea <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008c4c:	4b71      	ldr	r3, [pc, #452]	; (8008e14 <USER_SPI_ioctl+0x2dc>)
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d031      	beq.n	8008cbc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008c58:	2100      	movs	r1, #0
 8008c5a:	208d      	movs	r0, #141	; 0x8d
 8008c5c:	f7ff fd19 	bl	8008692 <send_cmd>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f040 80c3 	bne.w	8008dee <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008c68:	20ff      	movs	r0, #255	; 0xff
 8008c6a:	f7ff fc1f 	bl	80084ac <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008c6e:	f107 030c 	add.w	r3, r7, #12
 8008c72:	2110      	movs	r1, #16
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff fcb1 	bl	80085dc <rcvr_datablock>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80b6 	beq.w	8008dee <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008c82:	2330      	movs	r3, #48	; 0x30
 8008c84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008c88:	e007      	b.n	8008c9a <USER_SPI_ioctl+0x162>
 8008c8a:	20ff      	movs	r0, #255	; 0xff
 8008c8c:	f7ff fc0e 	bl	80084ac <xchg_spi>
 8008c90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008c94:	3b01      	subs	r3, #1
 8008c96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008c9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1f3      	bne.n	8008c8a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008ca2:	7dbb      	ldrb	r3, [r7, #22]
 8008ca4:	091b      	lsrs	r3, r3, #4
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	461a      	mov	r2, r3
 8008caa:	2310      	movs	r3, #16
 8008cac:	fa03 f202 	lsl.w	r2, r3, r2
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008cba:	e098      	b.n	8008dee <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	2009      	movs	r0, #9
 8008cc0:	f7ff fce7 	bl	8008692 <send_cmd>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f040 8091 	bne.w	8008dee <USER_SPI_ioctl+0x2b6>
 8008ccc:	f107 030c 	add.w	r3, r7, #12
 8008cd0:	2110      	movs	r1, #16
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff fc82 	bl	80085dc <rcvr_datablock>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 8087 	beq.w	8008dee <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008ce0:	4b4c      	ldr	r3, [pc, #304]	; (8008e14 <USER_SPI_ioctl+0x2dc>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d012      	beq.n	8008d12 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8008cec:	7dbb      	ldrb	r3, [r7, #22]
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8008cf4:	7dfa      	ldrb	r2, [r7, #23]
 8008cf6:	09d2      	lsrs	r2, r2, #7
 8008cf8:	b2d2      	uxtb	r2, r2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	7e7b      	ldrb	r3, [r7, #25]
 8008d00:	099b      	lsrs	r3, r3, #6
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	3b01      	subs	r3, #1
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	e013      	b.n	8008d3a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8008d12:	7dbb      	ldrb	r3, [r7, #22]
 8008d14:	109b      	asrs	r3, r3, #2
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	f003 031f 	and.w	r3, r3, #31
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	7dfa      	ldrb	r2, [r7, #23]
 8008d20:	00d2      	lsls	r2, r2, #3
 8008d22:	f002 0218 	and.w	r2, r2, #24
 8008d26:	7df9      	ldrb	r1, [r7, #23]
 8008d28:	0949      	lsrs	r1, r1, #5
 8008d2a:	b2c9      	uxtb	r1, r1
 8008d2c:	440a      	add	r2, r1
 8008d2e:	3201      	adds	r2, #1
 8008d30:	fb02 f303 	mul.w	r3, r2, r3
 8008d34:	461a      	mov	r2, r3
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008d40:	e055      	b.n	8008dee <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008d42:	4b34      	ldr	r3, [pc, #208]	; (8008e14 <USER_SPI_ioctl+0x2dc>)
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	f003 0306 	and.w	r3, r3, #6
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d051      	beq.n	8008df2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008d4e:	f107 020c 	add.w	r2, r7, #12
 8008d52:	79fb      	ldrb	r3, [r7, #7]
 8008d54:	210b      	movs	r1, #11
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7ff feee 	bl	8008b38 <USER_SPI_ioctl>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d149      	bne.n	8008df6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008d62:	7b3b      	ldrb	r3, [r7, #12]
 8008d64:	099b      	lsrs	r3, r3, #6
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d104      	bne.n	8008d76 <USER_SPI_ioctl+0x23e>
 8008d6c:	7dbb      	ldrb	r3, [r7, #22]
 8008d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d041      	beq.n	8008dfa <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	623b      	str	r3, [r7, #32]
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8008d86:	4b23      	ldr	r3, [pc, #140]	; (8008e14 <USER_SPI_ioctl+0x2dc>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	f003 0308 	and.w	r3, r3, #8
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d105      	bne.n	8008d9e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	025b      	lsls	r3, r3, #9
 8008d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	025b      	lsls	r3, r3, #9
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8008d9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008da0:	2020      	movs	r0, #32
 8008da2:	f7ff fc76 	bl	8008692 <send_cmd>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d128      	bne.n	8008dfe <USER_SPI_ioctl+0x2c6>
 8008dac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dae:	2021      	movs	r0, #33	; 0x21
 8008db0:	f7ff fc6f 	bl	8008692 <send_cmd>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d121      	bne.n	8008dfe <USER_SPI_ioctl+0x2c6>
 8008dba:	2100      	movs	r1, #0
 8008dbc:	2026      	movs	r0, #38	; 0x26
 8008dbe:	f7ff fc68 	bl	8008692 <send_cmd>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d11a      	bne.n	8008dfe <USER_SPI_ioctl+0x2c6>
 8008dc8:	f247 5030 	movw	r0, #30000	; 0x7530
 8008dcc:	f7ff fbbb 	bl	8008546 <wait_ready>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d013      	beq.n	8008dfe <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8008ddc:	e00f      	b.n	8008dfe <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8008dde:	2304      	movs	r3, #4
 8008de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008de4:	e00c      	b.n	8008e00 <USER_SPI_ioctl+0x2c8>
		break;
 8008de6:	bf00      	nop
 8008de8:	e00a      	b.n	8008e00 <USER_SPI_ioctl+0x2c8>
		break;
 8008dea:	bf00      	nop
 8008dec:	e008      	b.n	8008e00 <USER_SPI_ioctl+0x2c8>
		break;
 8008dee:	bf00      	nop
 8008df0:	e006      	b.n	8008e00 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008df2:	bf00      	nop
 8008df4:	e004      	b.n	8008e00 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008df6:	bf00      	nop
 8008df8:	e002      	b.n	8008e00 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008dfa:	bf00      	nop
 8008dfc:	e000      	b.n	8008e00 <USER_SPI_ioctl+0x2c8>
		break;
 8008dfe:	bf00      	nop
	}

	despiselect();
 8008e00:	f7ff fbc4 	bl	800858c <despiselect>

	return res;
 8008e04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3730      	adds	r7, #48	; 0x30
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	20000020 	.word	0x20000020
 8008e14:	20000314 	.word	0x20000314

08008e18 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	4a08      	ldr	r2, [pc, #32]	; (8008e48 <disk_status+0x30>)
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	79fa      	ldrb	r2, [r7, #7]
 8008e30:	4905      	ldr	r1, [pc, #20]	; (8008e48 <disk_status+0x30>)
 8008e32:	440a      	add	r2, r1
 8008e34:	7a12      	ldrb	r2, [r2, #8]
 8008e36:	4610      	mov	r0, r2
 8008e38:	4798      	blx	r3
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	20000338 	.word	0x20000338

08008e4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8008e5a:	79fb      	ldrb	r3, [r7, #7]
 8008e5c:	4a0d      	ldr	r2, [pc, #52]	; (8008e94 <disk_initialize+0x48>)
 8008e5e:	5cd3      	ldrb	r3, [r2, r3]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d111      	bne.n	8008e88 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	4a0b      	ldr	r2, [pc, #44]	; (8008e94 <disk_initialize+0x48>)
 8008e68:	2101      	movs	r1, #1
 8008e6a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	4a09      	ldr	r2, [pc, #36]	; (8008e94 <disk_initialize+0x48>)
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	79fa      	ldrb	r2, [r7, #7]
 8008e7a:	4906      	ldr	r1, [pc, #24]	; (8008e94 <disk_initialize+0x48>)
 8008e7c:	440a      	add	r2, r1
 8008e7e:	7a12      	ldrb	r2, [r2, #8]
 8008e80:	4610      	mov	r0, r2
 8008e82:	4798      	blx	r3
 8008e84:	4603      	mov	r3, r0
 8008e86:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	20000338 	.word	0x20000338

08008e98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008e98:	b590      	push	{r4, r7, lr}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60b9      	str	r1, [r7, #8]
 8008ea0:	607a      	str	r2, [r7, #4]
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
 8008eaa:	4a0a      	ldr	r2, [pc, #40]	; (8008ed4 <disk_read+0x3c>)
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	689c      	ldr	r4, [r3, #8]
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	4a07      	ldr	r2, [pc, #28]	; (8008ed4 <disk_read+0x3c>)
 8008eb8:	4413      	add	r3, r2
 8008eba:	7a18      	ldrb	r0, [r3, #8]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	47a0      	blx	r4
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	371c      	adds	r7, #28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd90      	pop	{r4, r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20000338 	.word	0x20000338

08008ed8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008ed8:	b590      	push	{r4, r7, lr}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60b9      	str	r1, [r7, #8]
 8008ee0:	607a      	str	r2, [r7, #4]
 8008ee2:	603b      	str	r3, [r7, #0]
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	4a0a      	ldr	r2, [pc, #40]	; (8008f14 <disk_write+0x3c>)
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	68dc      	ldr	r4, [r3, #12]
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	4a07      	ldr	r2, [pc, #28]	; (8008f14 <disk_write+0x3c>)
 8008ef8:	4413      	add	r3, r2
 8008efa:	7a18      	ldrb	r0, [r3, #8]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	68b9      	ldr	r1, [r7, #8]
 8008f02:	47a0      	blx	r4
 8008f04:	4603      	mov	r3, r0
 8008f06:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	371c      	adds	r7, #28
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd90      	pop	{r4, r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000338 	.word	0x20000338

08008f18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	603a      	str	r2, [r7, #0]
 8008f22:	71fb      	strb	r3, [r7, #7]
 8008f24:	460b      	mov	r3, r1
 8008f26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	4a09      	ldr	r2, [pc, #36]	; (8008f50 <disk_ioctl+0x38>)
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	79fa      	ldrb	r2, [r7, #7]
 8008f36:	4906      	ldr	r1, [pc, #24]	; (8008f50 <disk_ioctl+0x38>)
 8008f38:	440a      	add	r2, r1
 8008f3a:	7a10      	ldrb	r0, [r2, #8]
 8008f3c:	79b9      	ldrb	r1, [r7, #6]
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	4798      	blx	r3
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]
  return res;
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20000338 	.word	0x20000338

08008f54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008f68:	e007      	b.n	8008f7a <mem_cpy+0x26>
		*d++ = *s++;
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	1c53      	adds	r3, r2, #1
 8008f6e:	613b      	str	r3, [r7, #16]
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	1c59      	adds	r1, r3, #1
 8008f74:	6179      	str	r1, [r7, #20]
 8008f76:	7812      	ldrb	r2, [r2, #0]
 8008f78:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	1e5a      	subs	r2, r3, #1
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1f2      	bne.n	8008f6a <mem_cpy+0x16>
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008f92:	b480      	push	{r7}
 8008f94:	b087      	sub	sp, #28
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8008fa2:	e005      	b.n	8008fb0 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	617a      	str	r2, [r7, #20]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	b2d2      	uxtb	r2, r2
 8008fae:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	1e5a      	subs	r2, r3, #1
 8008fb4:	607a      	str	r2, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1f4      	bne.n	8008fa4 <mem_set+0x12>
}
 8008fba:	bf00      	nop
 8008fbc:	bf00      	nop
 8008fbe:	371c      	adds	r7, #28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8008fc8:	b480      	push	{r7}
 8008fca:	b089      	sub	sp, #36	; 0x24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	61fb      	str	r3, [r7, #28]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8008fe0:	bf00      	nop
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	1e5a      	subs	r2, r3, #1
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00d      	beq.n	8009008 <mem_cmp+0x40>
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	61fa      	str	r2, [r7, #28]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	61ba      	str	r2, [r7, #24]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	1acb      	subs	r3, r1, r3
 8009000:	617b      	str	r3, [r7, #20]
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0ec      	beq.n	8008fe2 <mem_cmp+0x1a>
	return r;
 8009008:	697b      	ldr	r3, [r7, #20]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3724      	adds	r7, #36	; 0x24
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009020:	e002      	b.n	8009028 <chk_chr+0x12>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3301      	adds	r3, #1
 8009026:	607b      	str	r3, [r7, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d005      	beq.n	800903c <chk_chr+0x26>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	4293      	cmp	r3, r2
 800903a:	d1f2      	bne.n	8009022 <chk_chr+0xc>
	return *str;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	781b      	ldrb	r3, [r3, #0]
}
 8009040:	4618      	mov	r0, r3
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009056:	2300      	movs	r3, #0
 8009058:	60bb      	str	r3, [r7, #8]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	e038      	b.n	80090d2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8009060:	4930      	ldr	r1, [pc, #192]	; (8009124 <chk_lock+0xd8>)
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	4613      	mov	r3, r2
 8009066:	005b      	lsls	r3, r3, #1
 8009068:	4413      	add	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	440b      	add	r3, r1
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d029      	beq.n	80090c8 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009074:	492b      	ldr	r1, [pc, #172]	; (8009124 <chk_lock+0xd8>)
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4613      	mov	r3, r2
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	4413      	add	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	440b      	add	r3, r1
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800908a:	429a      	cmp	r2, r3
 800908c:	d11e      	bne.n	80090cc <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800908e:	4925      	ldr	r1, [pc, #148]	; (8009124 <chk_lock+0xd8>)
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	4613      	mov	r3, r2
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	440b      	add	r3, r1
 800909c:	3304      	adds	r3, #4
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d110      	bne.n	80090cc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80090aa:	491e      	ldr	r1, [pc, #120]	; (8009124 <chk_lock+0xd8>)
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	4613      	mov	r3, r2
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	3308      	adds	r3, #8
 80090ba:	881a      	ldrh	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d102      	bne.n	80090cc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80090c6:	e007      	b.n	80090d8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80090c8:	2301      	movs	r3, #1
 80090ca:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d9c3      	bls.n	8009060 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d109      	bne.n	80090f2 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d102      	bne.n	80090ea <chk_lock+0x9e>
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d101      	bne.n	80090ee <chk_lock+0xa2>
 80090ea:	2300      	movs	r3, #0
 80090ec:	e013      	b.n	8009116 <chk_lock+0xca>
 80090ee:	2312      	movs	r3, #18
 80090f0:	e011      	b.n	8009116 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <chk_lock+0xc4>
 80090f8:	490a      	ldr	r1, [pc, #40]	; (8009124 <chk_lock+0xd8>)
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	4613      	mov	r3, r2
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	440b      	add	r3, r1
 8009106:	330a      	adds	r3, #10
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800910e:	d101      	bne.n	8009114 <chk_lock+0xc8>
 8009110:	2310      	movs	r3, #16
 8009112:	e000      	b.n	8009116 <chk_lock+0xca>
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	20000320 	.word	0x20000320

08009128 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800912e:	2300      	movs	r3, #0
 8009130:	607b      	str	r3, [r7, #4]
 8009132:	e002      	b.n	800913a <enq_lock+0x12>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3301      	adds	r3, #1
 8009138:	607b      	str	r3, [r7, #4]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d809      	bhi.n	8009154 <enq_lock+0x2c>
 8009140:	490a      	ldr	r1, [pc, #40]	; (800916c <enq_lock+0x44>)
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	4613      	mov	r3, r2
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1ef      	bne.n	8009134 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b02      	cmp	r3, #2
 8009158:	bf14      	ite	ne
 800915a:	2301      	movne	r3, #1
 800915c:	2300      	moveq	r3, #0
 800915e:	b2db      	uxtb	r3, r3
}
 8009160:	4618      	mov	r0, r3
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	20000320 	.word	0x20000320

08009170 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	e02b      	b.n	80091d8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8009180:	4956      	ldr	r1, [pc, #344]	; (80092dc <inc_lock+0x16c>)
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	4613      	mov	r3, r2
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	440b      	add	r3, r1
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009196:	429a      	cmp	r2, r3
 8009198:	d11b      	bne.n	80091d2 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800919a:	4950      	ldr	r1, [pc, #320]	; (80092dc <inc_lock+0x16c>)
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4613      	mov	r3, r2
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	440b      	add	r3, r1
 80091a8:	3304      	adds	r3, #4
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d10d      	bne.n	80091d2 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80091b6:	4949      	ldr	r1, [pc, #292]	; (80092dc <inc_lock+0x16c>)
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4613      	mov	r3, r2
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	4413      	add	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	440b      	add	r3, r1
 80091c4:	3308      	adds	r3, #8
 80091c6:	881a      	ldrh	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d006      	beq.n	80091e0 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3301      	adds	r3, #1
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d9d0      	bls.n	8009180 <inc_lock+0x10>
 80091de:	e000      	b.n	80091e2 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80091e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d145      	bne.n	8009274 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	e002      	b.n	80091f4 <inc_lock+0x84>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3301      	adds	r3, #1
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d809      	bhi.n	800920e <inc_lock+0x9e>
 80091fa:	4938      	ldr	r1, [pc, #224]	; (80092dc <inc_lock+0x16c>)
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4613      	mov	r3, r2
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	4413      	add	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	440b      	add	r3, r1
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1ef      	bne.n	80091ee <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b02      	cmp	r3, #2
 8009212:	d101      	bne.n	8009218 <inc_lock+0xa8>
 8009214:	2300      	movs	r3, #0
 8009216:	e05a      	b.n	80092ce <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800921e:	482f      	ldr	r0, [pc, #188]	; (80092dc <inc_lock+0x16c>)
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4613      	mov	r3, r2
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4403      	add	r3, r0
 800922c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009234:	4829      	ldr	r0, [pc, #164]	; (80092dc <inc_lock+0x16c>)
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	4613      	mov	r3, r2
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	4413      	add	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4403      	add	r3, r0
 8009242:	3304      	adds	r3, #4
 8009244:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800924c:	4923      	ldr	r1, [pc, #140]	; (80092dc <inc_lock+0x16c>)
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	4613      	mov	r3, r2
 8009252:	005b      	lsls	r3, r3, #1
 8009254:	4413      	add	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	440b      	add	r3, r1
 800925a:	3308      	adds	r3, #8
 800925c:	4602      	mov	r2, r0
 800925e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009260:	491e      	ldr	r1, [pc, #120]	; (80092dc <inc_lock+0x16c>)
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	4613      	mov	r3, r2
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	4413      	add	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	440b      	add	r3, r1
 800926e:	330a      	adds	r3, #10
 8009270:	2200      	movs	r2, #0
 8009272:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00c      	beq.n	8009294 <inc_lock+0x124>
 800927a:	4918      	ldr	r1, [pc, #96]	; (80092dc <inc_lock+0x16c>)
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	4613      	mov	r3, r2
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	4413      	add	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	440b      	add	r3, r1
 8009288:	330a      	adds	r3, #10
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <inc_lock+0x124>
 8009290:	2300      	movs	r3, #0
 8009292:	e01c      	b.n	80092ce <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10b      	bne.n	80092b2 <inc_lock+0x142>
 800929a:	4910      	ldr	r1, [pc, #64]	; (80092dc <inc_lock+0x16c>)
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	4613      	mov	r3, r2
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	4413      	add	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	440b      	add	r3, r1
 80092a8:	330a      	adds	r3, #10
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	3301      	adds	r3, #1
 80092ae:	b299      	uxth	r1, r3
 80092b0:	e001      	b.n	80092b6 <inc_lock+0x146>
 80092b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80092b6:	4809      	ldr	r0, [pc, #36]	; (80092dc <inc_lock+0x16c>)
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	4613      	mov	r3, r2
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	4413      	add	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4403      	add	r3, r0
 80092c4:	330a      	adds	r3, #10
 80092c6:	460a      	mov	r2, r1
 80092c8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3301      	adds	r3, #1
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	20000320 	.word	0x20000320

080092e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	607b      	str	r3, [r7, #4]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d82e      	bhi.n	8009352 <dec_lock+0x72>
		n = Files[i].ctr;
 80092f4:	491b      	ldr	r1, [pc, #108]	; (8009364 <dec_lock+0x84>)
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	4613      	mov	r3, r2
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	4413      	add	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	440b      	add	r3, r1
 8009302:	330a      	adds	r3, #10
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009308:	89fb      	ldrh	r3, [r7, #14]
 800930a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800930e:	d101      	bne.n	8009314 <dec_lock+0x34>
 8009310:	2300      	movs	r3, #0
 8009312:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009314:	89fb      	ldrh	r3, [r7, #14]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <dec_lock+0x40>
 800931a:	89fb      	ldrh	r3, [r7, #14]
 800931c:	3b01      	subs	r3, #1
 800931e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009320:	4910      	ldr	r1, [pc, #64]	; (8009364 <dec_lock+0x84>)
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	4613      	mov	r3, r2
 8009326:	005b      	lsls	r3, r3, #1
 8009328:	4413      	add	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	440b      	add	r3, r1
 800932e:	330a      	adds	r3, #10
 8009330:	89fa      	ldrh	r2, [r7, #14]
 8009332:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009334:	89fb      	ldrh	r3, [r7, #14]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d108      	bne.n	800934c <dec_lock+0x6c>
 800933a:	490a      	ldr	r1, [pc, #40]	; (8009364 <dec_lock+0x84>)
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	4613      	mov	r3, r2
 8009340:	005b      	lsls	r3, r3, #1
 8009342:	4413      	add	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	440b      	add	r3, r1
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	737b      	strb	r3, [r7, #13]
 8009350:	e001      	b.n	8009356 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009352:	2302      	movs	r3, #2
 8009354:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009356:	7b7b      	ldrb	r3, [r7, #13]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	20000320 	.word	0x20000320

08009368 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009370:	2300      	movs	r3, #0
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	e016      	b.n	80093a4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009376:	4910      	ldr	r1, [pc, #64]	; (80093b8 <clear_lock+0x50>)
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4613      	mov	r3, r2
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	440b      	add	r3, r1
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	429a      	cmp	r2, r3
 800938a:	d108      	bne.n	800939e <clear_lock+0x36>
 800938c:	490a      	ldr	r1, [pc, #40]	; (80093b8 <clear_lock+0x50>)
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	4613      	mov	r3, r2
 8009392:	005b      	lsls	r3, r3, #1
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	440b      	add	r3, r1
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3301      	adds	r3, #1
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d9e5      	bls.n	8009376 <clear_lock+0xe>
	}
}
 80093aa:	bf00      	nop
 80093ac:	bf00      	nop
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	20000320 	.word	0x20000320

080093bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d038      	beq.n	8009444 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80093d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	2301      	movs	r3, #1
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	f7ff fd77 	bl	8008ed8 <disk_write>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <sync_window+0x3a>
			res = FR_DISK_ERR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	73fb      	strb	r3, [r7, #15]
 80093f4:	e026      	b.n	8009444 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	1ad2      	subs	r2, r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800940e:	429a      	cmp	r2, r3
 8009410:	d218      	bcs.n	8009444 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8009418:	613b      	str	r3, [r7, #16]
 800941a:	e010      	b.n	800943e <sync_window+0x82>
					wsect += fs->fsize;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	4413      	add	r3, r2
 8009426:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	2301      	movs	r3, #1
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	f7ff fd50 	bl	8008ed8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	3b01      	subs	r3, #1
 800943c:	613b      	str	r3, [r7, #16]
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d8eb      	bhi.n	800941c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8009444:	7bfb      	ldrb	r3, [r7, #15]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	429a      	cmp	r2, r3
 8009466:	d01b      	beq.n	80094a0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7ff ffa7 	bl	80093bc <sync_window>
 800946e:	4603      	mov	r3, r0
 8009470:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009472:	7bfb      	ldrb	r3, [r7, #15]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d113      	bne.n	80094a0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	2301      	movs	r3, #1
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	f7ff fd08 	bl	8008e98 <disk_read>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d004      	beq.n	8009498 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800948e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009492:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009494:	2301      	movs	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7ff ff82 	bl	80093bc <sync_window>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f040 809b 	bne.w	80095fa <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	f040 8088 	bne.w	80095e0 <sync_fs+0x136>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	f040 8082 	bne.w	80095e0 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094e2:	2100      	movs	r1, #0
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff fd54 	bl	8008f92 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2255      	movs	r2, #85	; 0x55
 80094ee:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	22aa      	movs	r2, #170	; 0xaa
 80094f6:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2252      	movs	r2, #82	; 0x52
 80094fe:	701a      	strb	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2252      	movs	r2, #82	; 0x52
 8009504:	705a      	strb	r2, [r3, #1]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2261      	movs	r2, #97	; 0x61
 800950a:	709a      	strb	r2, [r3, #2]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2241      	movs	r2, #65	; 0x41
 8009510:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2272      	movs	r2, #114	; 0x72
 8009516:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2272      	movs	r2, #114	; 0x72
 800951e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2241      	movs	r2, #65	; 0x41
 8009526:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2261      	movs	r2, #97	; 0x61
 800952e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009538:	b2da      	uxtb	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009546:	b29b      	uxth	r3, r3
 8009548:	0a1b      	lsrs	r3, r3, #8
 800954a:	b29b      	uxth	r3, r3
 800954c:	b2da      	uxtb	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800955a:	0c1b      	lsrs	r3, r3, #16
 800955c:	b2da      	uxtb	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800956a:	0e1b      	lsrs	r3, r3, #24
 800956c:	b2da      	uxtb	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800957a:	b2da      	uxtb	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009588:	b29b      	uxth	r3, r3
 800958a:	0a1b      	lsrs	r3, r3, #8
 800958c:	b29b      	uxth	r3, r3
 800958e:	b2da      	uxtb	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800959c:	0c1b      	lsrs	r3, r3, #16
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80095ac:	0e1b      	lsrs	r3, r3, #24
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80095ca:	6879      	ldr	r1, [r7, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80095d2:	2301      	movs	r3, #1
 80095d4:	f7ff fc80 	bl	8008ed8 <disk_write>
			fs->fsi_flag = 0;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80095e6:	2200      	movs	r2, #0
 80095e8:	2100      	movs	r1, #0
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7ff fc94 	bl	8008f18 <disk_ioctl>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <sync_fs+0x150>
			res = FR_DISK_ERR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	3b02      	subs	r3, #2
 8009612:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800961a:	3b02      	subs	r3, #2
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d301      	bcc.n	8009626 <clust2sect+0x22>
 8009622:	2300      	movs	r3, #0
 8009624:	e00a      	b.n	800963c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800962c:	461a      	mov	r2, r3
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	fb03 f202 	mul.w	r2, r3, r2
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800963a:	4413      	add	r3, r2
}
 800963c:	4618      	mov	r0, r3
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d905      	bls.n	8009664 <get_fat+0x1c>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	429a      	cmp	r2, r3
 8009662:	d302      	bcc.n	800966a <get_fat+0x22>
		val = 1;	/* Internal error */
 8009664:	2301      	movs	r3, #1
 8009666:	617b      	str	r3, [r7, #20]
 8009668:	e0a3      	b.n	80097b2 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800966a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800966e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009676:	2b03      	cmp	r3, #3
 8009678:	d068      	beq.n	800974c <get_fat+0x104>
 800967a:	2b03      	cmp	r3, #3
 800967c:	f300 808f 	bgt.w	800979e <get_fat+0x156>
 8009680:	2b01      	cmp	r3, #1
 8009682:	d002      	beq.n	800968a <get_fat+0x42>
 8009684:	2b02      	cmp	r3, #2
 8009686:	d040      	beq.n	800970a <get_fat+0xc2>
 8009688:	e089      	b.n	800979e <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	60fb      	str	r3, [r7, #12]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	085b      	lsrs	r3, r3, #1
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	4413      	add	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	0a5b      	lsrs	r3, r3, #9
 80096a2:	4413      	add	r3, r2
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7ff fed1 	bl	800944e <move_window>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d178      	bne.n	80097a4 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	60fa      	str	r2, [r7, #12]
 80096b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	5cd3      	ldrb	r3, [r2, r3]
 80096c0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	0a5b      	lsrs	r3, r3, #9
 80096cc:	4413      	add	r3, r2
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7ff febc 	bl	800944e <move_window>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d165      	bne.n	80097a8 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	5cd3      	ldrb	r3, [r2, r3]
 80096e6:	021b      	lsls	r3, r3, #8
 80096e8:	461a      	mov	r2, r3
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <get_fat+0xb8>
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	091b      	lsrs	r3, r3, #4
 80096fe:	e002      	b.n	8009706 <get_fat+0xbe>
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009706:	617b      	str	r3, [r7, #20]
			break;
 8009708:	e053      	b.n	80097b2 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	0a1b      	lsrs	r3, r3, #8
 8009714:	4413      	add	r3, r2
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff fe98 	bl	800944e <move_window>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d143      	bne.n	80097ac <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	4413      	add	r3, r2
 8009730:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	3301      	adds	r3, #1
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	021b      	lsls	r3, r3, #8
 800973a:	b21a      	sxth	r2, r3
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	b21b      	sxth	r3, r3
 8009742:	4313      	orrs	r3, r2
 8009744:	b21b      	sxth	r3, r3
 8009746:	b29b      	uxth	r3, r3
 8009748:	617b      	str	r3, [r7, #20]
			break;
 800974a:	e032      	b.n	80097b2 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	09db      	lsrs	r3, r3, #7
 8009756:	4413      	add	r3, r2
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff fe77 	bl	800944e <move_window>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d124      	bne.n	80097b0 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	4413      	add	r3, r2
 8009772:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	3303      	adds	r3, #3
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	061a      	lsls	r2, r3, #24
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	3302      	adds	r3, #2
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	041b      	lsls	r3, r3, #16
 8009784:	4313      	orrs	r3, r2
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	3201      	adds	r2, #1
 800978a:	7812      	ldrb	r2, [r2, #0]
 800978c:	0212      	lsls	r2, r2, #8
 800978e:	4313      	orrs	r3, r2
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	7812      	ldrb	r2, [r2, #0]
 8009794:	4313      	orrs	r3, r2
 8009796:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800979a:	617b      	str	r3, [r7, #20]
			break;
 800979c:	e009      	b.n	80097b2 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800979e:	2301      	movs	r3, #1
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	e006      	b.n	80097b2 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097a4:	bf00      	nop
 80097a6:	e004      	b.n	80097b2 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097a8:	bf00      	nop
 80097aa:	e002      	b.n	80097b2 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80097ac:	bf00      	nop
 80097ae:	e000      	b.n	80097b2 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80097b0:	bf00      	nop
		}
	}

	return val;
 80097b2:	697b      	ldr	r3, [r7, #20]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3718      	adds	r7, #24
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b088      	sub	sp, #32
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d905      	bls.n	80097da <put_fat+0x1e>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d302      	bcc.n	80097e0 <put_fat+0x24>
		res = FR_INT_ERR;
 80097da:	2302      	movs	r3, #2
 80097dc:	77fb      	strb	r3, [r7, #31]
 80097de:	e0f6      	b.n	80099ce <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	f000 809e 	beq.w	8009928 <put_fat+0x16c>
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	f300 80e4 	bgt.w	80099ba <put_fat+0x1fe>
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d002      	beq.n	80097fc <put_fat+0x40>
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d06f      	beq.n	80098da <put_fat+0x11e>
 80097fa:	e0de      	b.n	80099ba <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	617b      	str	r3, [r7, #20]
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	085b      	lsrs	r3, r3, #1
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	4413      	add	r3, r2
 8009808:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	0a5b      	lsrs	r3, r3, #9
 8009814:	4413      	add	r3, r2
 8009816:	4619      	mov	r1, r3
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f7ff fe18 	bl	800944e <move_window>
 800981e:	4603      	mov	r3, r0
 8009820:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009822:	7ffb      	ldrb	r3, [r7, #31]
 8009824:	2b00      	cmp	r3, #0
 8009826:	f040 80cb 	bne.w	80099c0 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	1c5a      	adds	r2, r3, #1
 800982e:	617a      	str	r2, [r7, #20]
 8009830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4413      	add	r3, r2
 8009838:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00d      	beq.n	8009860 <put_fat+0xa4>
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	b25b      	sxtb	r3, r3
 800984a:	f003 030f 	and.w	r3, r3, #15
 800984e:	b25a      	sxtb	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	011b      	lsls	r3, r3, #4
 8009856:	b25b      	sxtb	r3, r3
 8009858:	4313      	orrs	r3, r2
 800985a:	b25b      	sxtb	r3, r3
 800985c:	b2db      	uxtb	r3, r3
 800985e:	e001      	b.n	8009864 <put_fat+0xa8>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	69ba      	ldr	r2, [r7, #24]
 8009866:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	0a5b      	lsrs	r3, r3, #9
 800987a:	4413      	add	r3, r2
 800987c:	4619      	mov	r1, r3
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7ff fde5 	bl	800944e <move_window>
 8009884:	4603      	mov	r3, r0
 8009886:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009888:	7ffb      	ldrb	r3, [r7, #31]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f040 809a 	bne.w	80099c4 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	4413      	add	r3, r2
 800989a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <put_fat+0xf2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	091b      	lsrs	r3, r3, #4
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	e00e      	b.n	80098cc <put_fat+0x110>
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	b25b      	sxtb	r3, r3
 80098b4:	f023 030f 	bic.w	r3, r3, #15
 80098b8:	b25a      	sxtb	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	0a1b      	lsrs	r3, r3, #8
 80098be:	b25b      	sxtb	r3, r3
 80098c0:	f003 030f 	and.w	r3, r3, #15
 80098c4:	b25b      	sxtb	r3, r3
 80098c6:	4313      	orrs	r3, r2
 80098c8:	b25b      	sxtb	r3, r3
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	69ba      	ldr	r2, [r7, #24]
 80098ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80098d8:	e079      	b.n	80099ce <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	0a1b      	lsrs	r3, r3, #8
 80098e4:	4413      	add	r3, r2
 80098e6:	4619      	mov	r1, r3
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f7ff fdb0 	bl	800944e <move_window>
 80098ee:	4603      	mov	r3, r0
 80098f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098f2:	7ffb      	ldrb	r3, [r7, #31]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d167      	bne.n	80099c8 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	005b      	lsls	r3, r3, #1
 80098fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	4413      	add	r3, r2
 8009904:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	b2da      	uxtb	r2, r3
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	701a      	strb	r2, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	b29b      	uxth	r3, r3
 8009912:	0a1b      	lsrs	r3, r3, #8
 8009914:	b29a      	uxth	r2, r3
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	3301      	adds	r3, #1
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8009926:	e052      	b.n	80099ce <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	09db      	lsrs	r3, r3, #7
 8009932:	4413      	add	r3, r2
 8009934:	4619      	mov	r1, r3
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f7ff fd89 	bl	800944e <move_window>
 800993c:	4603      	mov	r3, r0
 800993e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009940:	7ffb      	ldrb	r3, [r7, #31]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d142      	bne.n	80099cc <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	4413      	add	r3, r2
 8009952:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	3303      	adds	r3, #3
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	061a      	lsls	r2, r3, #24
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	3302      	adds	r3, #2
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	041b      	lsls	r3, r3, #16
 8009964:	4313      	orrs	r3, r2
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	3201      	adds	r2, #1
 800996a:	7812      	ldrb	r2, [r2, #0]
 800996c:	0212      	lsls	r2, r2, #8
 800996e:	4313      	orrs	r3, r2
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	7812      	ldrb	r2, [r2, #0]
 8009974:	4313      	orrs	r3, r2
 8009976:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	4313      	orrs	r3, r2
 800997e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	b2da      	uxtb	r2, r3
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	701a      	strb	r2, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	b29b      	uxth	r3, r3
 800998c:	0a1b      	lsrs	r3, r3, #8
 800998e:	b29a      	uxth	r2, r3
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	3301      	adds	r3, #1
 8009994:	b2d2      	uxtb	r2, r2
 8009996:	701a      	strb	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	0c1a      	lsrs	r2, r3, #16
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	3302      	adds	r3, #2
 80099a0:	b2d2      	uxtb	r2, r2
 80099a2:	701a      	strb	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	0e1a      	lsrs	r2, r3, #24
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	3303      	adds	r3, #3
 80099ac:	b2d2      	uxtb	r2, r2
 80099ae:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80099b8:	e009      	b.n	80099ce <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 80099ba:	2302      	movs	r3, #2
 80099bc:	77fb      	strb	r3, [r7, #31]
 80099be:	e006      	b.n	80099ce <put_fat+0x212>
			if (res != FR_OK) break;
 80099c0:	bf00      	nop
 80099c2:	e004      	b.n	80099ce <put_fat+0x212>
			if (res != FR_OK) break;
 80099c4:	bf00      	nop
 80099c6:	e002      	b.n	80099ce <put_fat+0x212>
			if (res != FR_OK) break;
 80099c8:	bf00      	nop
 80099ca:	e000      	b.n	80099ce <put_fat+0x212>
			if (res != FR_OK) break;
 80099cc:	bf00      	nop
		}
	}

	return res;
 80099ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3720      	adds	r7, #32
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d905      	bls.n	80099f4 <remove_chain+0x1c>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80099ee:	683a      	ldr	r2, [r7, #0]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d302      	bcc.n	80099fa <remove_chain+0x22>
		res = FR_INT_ERR;
 80099f4:	2302      	movs	r3, #2
 80099f6:	73fb      	strb	r3, [r7, #15]
 80099f8:	e043      	b.n	8009a82 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80099fe:	e036      	b.n	8009a6e <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff fe20 	bl	8009648 <get_fat>
 8009a08:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d035      	beq.n	8009a7c <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d102      	bne.n	8009a1c <remove_chain+0x44>
 8009a16:	2302      	movs	r3, #2
 8009a18:	73fb      	strb	r3, [r7, #15]
 8009a1a:	e032      	b.n	8009a82 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a22:	d102      	bne.n	8009a2a <remove_chain+0x52>
 8009a24:	2301      	movs	r3, #1
 8009a26:	73fb      	strb	r3, [r7, #15]
 8009a28:	e02b      	b.n	8009a82 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff fec4 	bl	80097bc <put_fat>
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d120      	bne.n	8009a80 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a48:	d00f      	beq.n	8009a6a <remove_chain+0x92>
				fs->free_clust++;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009a50:	1c5a      	adds	r2, r3, #1
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8009a5e:	f043 0301 	orr.w	r3, r3, #1
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d3c2      	bcc.n	8009a00 <remove_chain+0x28>
 8009a7a:	e002      	b.n	8009a82 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8009a7c:	bf00      	nop
 8009a7e:	e000      	b.n	8009a82 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8009a80:	bf00      	nop
		}
	}

	return res;
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10f      	bne.n	8009abc <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009aa2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d005      	beq.n	8009ab6 <create_chain+0x2a>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d31c      	bcc.n	8009af0 <create_chain+0x64>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	613b      	str	r3, [r7, #16]
 8009aba:	e019      	b.n	8009af0 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7ff fdc2 	bl	8009648 <get_fat>
 8009ac4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d801      	bhi.n	8009ad0 <create_chain+0x44>
 8009acc:	2301      	movs	r3, #1
 8009ace:	e076      	b.n	8009bbe <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ad6:	d101      	bne.n	8009adc <create_chain+0x50>
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	e070      	b.n	8009bbe <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d201      	bcs.n	8009aec <create_chain+0x60>
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	e068      	b.n	8009bbe <create_chain+0x132>
		scl = clst;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	3301      	adds	r3, #1
 8009af8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d307      	bcc.n	8009b16 <create_chain+0x8a>
			ncl = 2;
 8009b06:	2302      	movs	r3, #2
 8009b08:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d901      	bls.n	8009b16 <create_chain+0x8a>
 8009b12:	2300      	movs	r3, #0
 8009b14:	e053      	b.n	8009bbe <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8009b16:	6979      	ldr	r1, [r7, #20]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff fd95 	bl	8009648 <get_fat>
 8009b1e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00e      	beq.n	8009b44 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b2c:	d002      	beq.n	8009b34 <create_chain+0xa8>
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d101      	bne.n	8009b38 <create_chain+0xac>
			return cs;
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	e042      	b.n	8009bbe <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d1d9      	bne.n	8009af4 <create_chain+0x68>
 8009b40:	2300      	movs	r3, #0
 8009b42:	e03c      	b.n	8009bbe <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8009b44:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8009b46:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8009b4a:	6979      	ldr	r1, [r7, #20]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff fe35 	bl	80097bc <put_fat>
 8009b52:	4603      	mov	r3, r0
 8009b54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d109      	bne.n	8009b70 <create_chain+0xe4>
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d006      	beq.n	8009b70 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7ff fe28 	bl	80097bc <put_fat>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d11a      	bne.n	8009bac <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	697a      	ldr	r2, [r7, #20]
 8009b7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b88:	d018      	beq.n	8009bbc <create_chain+0x130>
			fs->free_clust--;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009b90:	1e5a      	subs	r2, r3, #1
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8009b9e:	f043 0301 	orr.w	r3, r3, #1
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8009baa:	e007      	b.n	8009bbc <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d102      	bne.n	8009bb8 <create_chain+0x12c>
 8009bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bb6:	e000      	b.n	8009bba <create_chain+0x12e>
 8009bb8:	2301      	movs	r3, #1
 8009bba:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8009bbc:	697b      	ldr	r3, [r7, #20]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3718      	adds	r7, #24
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b087      	sub	sp, #28
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	0a5b      	lsrs	r3, r3, #9
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8009be4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	1d1a      	adds	r2, r3, #4
 8009bf2:	613a      	str	r2, [r7, #16]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <clmt_clust+0x3c>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	e010      	b.n	8009c24 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d307      	bcc.n	8009c1a <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	617b      	str	r3, [r7, #20]
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	3304      	adds	r3, #4
 8009c16:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009c18:	e7e9      	b.n	8009bee <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8009c1a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	4413      	add	r3, r2
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	371c      	adds	r7, #28
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009c4a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d007      	beq.n	8009c62 <dir_sdi+0x32>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d301      	bcc.n	8009c66 <dir_sdi+0x36>
		return FR_INT_ERR;
 8009c62:	2302      	movs	r3, #2
 8009c64:	e074      	b.n	8009d50 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10c      	bne.n	8009c86 <dir_sdi+0x56>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d105      	bne.n	8009c86 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c80:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009c84:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d111      	bne.n	8009cb0 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009c92:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009c96:	461a      	mov	r2, r3
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d301      	bcc.n	8009ca2 <dir_sdi+0x72>
			return FR_INT_ERR;
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	e056      	b.n	8009d50 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ca8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009cac:	613b      	str	r3, [r7, #16]
 8009cae:	e032      	b.n	8009d16 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009cb6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009cba:	011b      	lsls	r3, r3, #4
 8009cbc:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8009cbe:	e01e      	b.n	8009cfe <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009cc6:	6979      	ldr	r1, [r7, #20]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7ff fcbd 	bl	8009648 <get_fat>
 8009cce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cd6:	d101      	bne.n	8009cdc <dir_sdi+0xac>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e039      	b.n	8009d50 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d907      	bls.n	8009cf2 <dir_sdi+0xc2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ce8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d301      	bcc.n	8009cf6 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	e02c      	b.n	8009d50 <dir_sdi+0x120>
			idx -= ic;
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d2dc      	bcs.n	8009cc0 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d0c:	6979      	ldr	r1, [r7, #20]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff fc78 	bl	8009604 <clust2sect>
 8009d14:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <dir_sdi+0xf8>
 8009d24:	2302      	movs	r3, #2
 8009d26:	e013      	b.n	8009d50 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	091a      	lsrs	r2, r3, #4
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	441a      	add	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	f003 030f 	and.w	r3, r3, #15
 8009d44:	015b      	lsls	r3, r3, #5
 8009d46:	441a      	add	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3718      	adds	r7, #24
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009d58:	b590      	push	{r4, r7, lr}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8009d68:	3301      	adds	r3, #1
 8009d6a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d004      	beq.n	8009d7e <dir_next+0x26>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d101      	bne.n	8009d82 <dir_next+0x2a>
		return FR_NO_FILE;
 8009d7e:	2304      	movs	r3, #4
 8009d80:	e0dd      	b.n	8009f3e <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f003 030f 	and.w	r3, r3, #15
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f040 80c6 	bne.w	8009f1a <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10b      	bne.n	8009dbe <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009dac:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009db0:	461a      	mov	r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	4293      	cmp	r3, r2
 8009db6:	f0c0 80b0 	bcc.w	8009f1a <dir_next+0x1c2>
				return FR_NO_FILE;
 8009dba:	2304      	movs	r3, #4
 8009dbc:	e0bf      	b.n	8009f3e <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	091b      	lsrs	r3, r3, #4
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8009dc8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009dcc:	3a01      	subs	r2, #1
 8009dce:	4013      	ands	r3, r2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f040 80a2 	bne.w	8009f1a <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009de2:	4619      	mov	r1, r3
 8009de4:	4610      	mov	r0, r2
 8009de6:	f7ff fc2f 	bl	8009648 <get_fat>
 8009dea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d801      	bhi.n	8009df6 <dir_next+0x9e>
 8009df2:	2302      	movs	r3, #2
 8009df4:	e0a3      	b.n	8009f3e <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dfc:	d101      	bne.n	8009e02 <dir_next+0xaa>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e09d      	b.n	8009f3e <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009e08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d374      	bcc.n	8009efc <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <dir_next+0xc4>
 8009e18:	2304      	movs	r3, #4
 8009e1a:	e090      	b.n	8009f3e <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f7ff fe2e 	bl	8009a8c <create_chain>
 8009e30:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <dir_next+0xe4>
 8009e38:	2307      	movs	r3, #7
 8009e3a:	e080      	b.n	8009f3e <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d101      	bne.n	8009e46 <dir_next+0xee>
 8009e42:	2302      	movs	r3, #2
 8009e44:	e07b      	b.n	8009f3e <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e4c:	d101      	bne.n	8009e52 <dir_next+0xfa>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e075      	b.n	8009f3e <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7ff faaf 	bl	80093bc <sync_window>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <dir_next+0x110>
 8009e64:	2301      	movs	r3, #1
 8009e66:	e06a      	b.n	8009f3e <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e72:	2100      	movs	r1, #0
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7ff f88c 	bl	8008f92 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8009e86:	6979      	ldr	r1, [r7, #20]
 8009e88:	4610      	mov	r0, r2
 8009e8a:	f7ff fbbb 	bl	8009604 <clust2sect>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009e94:	2300      	movs	r3, #0
 8009e96:	613b      	str	r3, [r7, #16]
 8009e98:	e01b      	b.n	8009ed2 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7ff fa85 	bl	80093bc <sync_window>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <dir_next+0x164>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e040      	b.n	8009f3e <dir_next+0x1e6>
						dp->fs->winsect++;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ec2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009ec6:	3201      	adds	r2, #1
 8009ec8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	613b      	str	r3, [r7, #16]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ed8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009edc:	461a      	mov	r2, r3
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d3da      	bcc.n	8009e9a <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009eea:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ef4:	693a      	ldr	r2, [r7, #16]
 8009ef6:	1a8a      	subs	r2, r1, r2
 8009ef8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009f0a:	6979      	ldr	r1, [r7, #20]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7ff fb79 	bl	8009604 <clust2sect>
 8009f12:	4602      	mov	r2, r0
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f003 030f 	and.w	r3, r3, #15
 8009f32:	015b      	lsls	r3, r3, #5
 8009f34:	441a      	add	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	371c      	adds	r7, #28
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd90      	pop	{r4, r7, pc}

08009f46 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8009f50:	2100      	movs	r1, #0
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7ff fe6c 	bl	8009c30 <dir_sdi>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d131      	bne.n	8009fc6 <dir_alloc+0x80>
		n = 0;
 8009f62:	2300      	movs	r3, #0
 8009f64:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009f72:	4619      	mov	r1, r3
 8009f74:	4610      	mov	r0, r2
 8009f76:	f7ff fa6a 	bl	800944e <move_window>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d11f      	bne.n	8009fc4 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2be5      	cmp	r3, #229	; 0xe5
 8009f8e:	d005      	beq.n	8009f9c <dir_alloc+0x56>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d107      	bne.n	8009fac <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	60bb      	str	r3, [r7, #8]
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d102      	bne.n	8009fb0 <dir_alloc+0x6a>
 8009faa:	e00c      	b.n	8009fc6 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009fac:	2300      	movs	r3, #0
 8009fae:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff fed0 	bl	8009d58 <dir_next>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0d1      	beq.n	8009f66 <dir_alloc+0x20>
 8009fc2:	e000      	b.n	8009fc6 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8009fc4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	2b04      	cmp	r3, #4
 8009fca:	d101      	bne.n	8009fd0 <dir_alloc+0x8a>
 8009fcc:	2307      	movs	r3, #7
 8009fce:	73fb      	strb	r3, [r7, #15]
	return res;
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b085      	sub	sp, #20
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	331b      	adds	r3, #27
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	021b      	lsls	r3, r3, #8
 8009fec:	b21a      	sxth	r2, r3
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	331a      	adds	r3, #26
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	b21b      	sxth	r3, r3
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	b21b      	sxth	r3, r3
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a004:	2b03      	cmp	r3, #3
 800a006:	d10f      	bne.n	800a028 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	3315      	adds	r3, #21
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	021b      	lsls	r3, r3, #8
 800a010:	b21a      	sxth	r2, r3
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	3314      	adds	r3, #20
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	b21b      	sxth	r3, r3
 800a01a:	4313      	orrs	r3, r2
 800a01c:	b21b      	sxth	r3, r3
 800a01e:	b29b      	uxth	r3, r3
 800a020:	041b      	lsls	r3, r3, #16
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	4313      	orrs	r3, r2
 800a026:	60fb      	str	r3, [r7, #12]

	return cl;
 800a028:	68fb      	ldr	r3, [r7, #12]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a036:	b480      	push	{r7}
 800a038:	b083      	sub	sp, #12
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	331a      	adds	r3, #26
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	0a1b      	lsrs	r3, r3, #8
 800a050:	b29a      	uxth	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	331b      	adds	r3, #27
 800a056:	b2d2      	uxtb	r2, r2
 800a058:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	0c1a      	lsrs	r2, r3, #16
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3314      	adds	r3, #20
 800a062:	b2d2      	uxtb	r2, r2
 800a064:	701a      	strb	r2, [r3, #0]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	0c1b      	lsrs	r3, r3, #16
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	0a1b      	lsrs	r3, r3, #8
 800a06e:	b29a      	uxth	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3315      	adds	r3, #21
 800a074:	b2d2      	uxtb	r2, r2
 800a076:	701a      	strb	r2, [r3, #0]
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a08c:	2100      	movs	r1, #0
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7ff fdce 	bl	8009c30 <dir_sdi>
 800a094:	4603      	mov	r3, r0
 800a096:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d001      	beq.n	800a0a2 <dir_find+0x1e>
 800a09e:	7dfb      	ldrb	r3, [r7, #23]
 800a0a0:	e03b      	b.n	800a11a <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f7ff f9cc 	bl	800944e <move_window>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d128      	bne.n	800a112 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a0c6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <dir_find+0x56>
 800a0d4:	2304      	movs	r3, #4
 800a0d6:	75fb      	strb	r3, [r7, #23]
 800a0d8:	e01e      	b.n	800a118 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	330b      	adds	r3, #11
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	f003 0308 	and.w	r3, r3, #8
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <dir_find+0x7a>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a0ee:	220b      	movs	r2, #11
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6938      	ldr	r0, [r7, #16]
 800a0f4:	f7fe ff68 	bl	8008fc8 <mem_cmp>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00b      	beq.n	800a116 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800a0fe:	2100      	movs	r1, #0
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff fe29 	bl	8009d58 <dir_next>
 800a106:	4603      	mov	r3, r0
 800a108:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a10a:	7dfb      	ldrb	r3, [r7, #23]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d0c8      	beq.n	800a0a2 <dir_find+0x1e>
 800a110:	e002      	b.n	800a118 <dir_find+0x94>
		if (res != FR_OK) break;
 800a112:	bf00      	nop
 800a114:	e000      	b.n	800a118 <dir_find+0x94>
			break;
 800a116:	bf00      	nop

	return res;
 800a118:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3718      	adds	r7, #24
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a12a:	2101      	movs	r1, #1
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff ff0a 	bl	8009f46 <dir_alloc>
 800a132:	4603      	mov	r3, r0
 800a134:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d126      	bne.n	800a18a <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a148:	4619      	mov	r1, r3
 800a14a:	4610      	mov	r0, r2
 800a14c:	f7ff f97f 	bl	800944e <move_window>
 800a150:	4603      	mov	r3, r0
 800a152:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d117      	bne.n	800a18a <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a160:	2220      	movs	r2, #32
 800a162:	2100      	movs	r1, #0
 800a164:	4618      	mov	r0, r3
 800a166:	f7fe ff14 	bl	8008f92 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a176:	220b      	movs	r2, #11
 800a178:	4619      	mov	r1, r3
 800a17a:	f7fe feeb 	bl	8008f54 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b088      	sub	sp, #32
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	e002      	b.n	800a1ac <create_name+0x18>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	2b2f      	cmp	r3, #47	; 0x2f
 800a1b2:	d0f8      	beq.n	800a1a6 <create_name+0x12>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	2b5c      	cmp	r3, #92	; 0x5c
 800a1ba:	d0f4      	beq.n	800a1a6 <create_name+0x12>
	sfn = dp->fn;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a1c2:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a1c4:	220b      	movs	r2, #11
 800a1c6:	2120      	movs	r1, #32
 800a1c8:	68b8      	ldr	r0, [r7, #8]
 800a1ca:	f7fe fee2 	bl	8008f92 <mem_set>
	si = i = b = 0; ni = 8;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	77fb      	strb	r3, [r7, #31]
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	613b      	str	r3, [r7, #16]
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	617b      	str	r3, [r7, #20]
 800a1da:	2308      	movs	r3, #8
 800a1dc:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	1c5a      	adds	r2, r3, #1
 800a1e2:	617a      	str	r2, [r7, #20]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800a1ec:	7fbb      	ldrb	r3, [r7, #30]
 800a1ee:	2b20      	cmp	r3, #32
 800a1f0:	d953      	bls.n	800a29a <create_name+0x106>
 800a1f2:	7fbb      	ldrb	r3, [r7, #30]
 800a1f4:	2b2f      	cmp	r3, #47	; 0x2f
 800a1f6:	d050      	beq.n	800a29a <create_name+0x106>
 800a1f8:	7fbb      	ldrb	r3, [r7, #30]
 800a1fa:	2b5c      	cmp	r3, #92	; 0x5c
 800a1fc:	d04d      	beq.n	800a29a <create_name+0x106>
		if (c == '.' || i >= ni) {
 800a1fe:	7fbb      	ldrb	r3, [r7, #30]
 800a200:	2b2e      	cmp	r3, #46	; 0x2e
 800a202:	d003      	beq.n	800a20c <create_name+0x78>
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d30f      	bcc.n	800a22c <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	2b08      	cmp	r3, #8
 800a210:	d102      	bne.n	800a218 <create_name+0x84>
 800a212:	7fbb      	ldrb	r3, [r7, #30]
 800a214:	2b2e      	cmp	r3, #46	; 0x2e
 800a216:	d001      	beq.n	800a21c <create_name+0x88>
 800a218:	2306      	movs	r3, #6
 800a21a:	e073      	b.n	800a304 <create_name+0x170>
			i = 8; ni = 11;
 800a21c:	2308      	movs	r3, #8
 800a21e:	613b      	str	r3, [r7, #16]
 800a220:	230b      	movs	r3, #11
 800a222:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800a224:	7ffb      	ldrb	r3, [r7, #31]
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	77fb      	strb	r3, [r7, #31]
 800a22a:	e035      	b.n	800a298 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a22c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a230:	2b00      	cmp	r3, #0
 800a232:	da08      	bge.n	800a246 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800a234:	7ffb      	ldrb	r3, [r7, #31]
 800a236:	f043 0303 	orr.w	r3, r3, #3
 800a23a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a23c:	7fbb      	ldrb	r3, [r7, #30]
 800a23e:	3b80      	subs	r3, #128	; 0x80
 800a240:	4a32      	ldr	r2, [pc, #200]	; (800a30c <create_name+0x178>)
 800a242:	5cd3      	ldrb	r3, [r2, r3]
 800a244:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800a246:	7fbb      	ldrb	r3, [r7, #30]
 800a248:	4619      	mov	r1, r3
 800a24a:	4831      	ldr	r0, [pc, #196]	; (800a310 <create_name+0x17c>)
 800a24c:	f7fe fee3 	bl	8009016 <chk_chr>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <create_name+0xc6>
				return FR_INVALID_NAME;
 800a256:	2306      	movs	r3, #6
 800a258:	e054      	b.n	800a304 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800a25a:	7fbb      	ldrb	r3, [r7, #30]
 800a25c:	2b40      	cmp	r3, #64	; 0x40
 800a25e:	d907      	bls.n	800a270 <create_name+0xdc>
 800a260:	7fbb      	ldrb	r3, [r7, #30]
 800a262:	2b5a      	cmp	r3, #90	; 0x5a
 800a264:	d804      	bhi.n	800a270 <create_name+0xdc>
				b |= 2;
 800a266:	7ffb      	ldrb	r3, [r7, #31]
 800a268:	f043 0302 	orr.w	r3, r3, #2
 800a26c:	77fb      	strb	r3, [r7, #31]
 800a26e:	e00c      	b.n	800a28a <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800a270:	7fbb      	ldrb	r3, [r7, #30]
 800a272:	2b60      	cmp	r3, #96	; 0x60
 800a274:	d909      	bls.n	800a28a <create_name+0xf6>
 800a276:	7fbb      	ldrb	r3, [r7, #30]
 800a278:	2b7a      	cmp	r3, #122	; 0x7a
 800a27a:	d806      	bhi.n	800a28a <create_name+0xf6>
					b |= 1; c -= 0x20;
 800a27c:	7ffb      	ldrb	r3, [r7, #31]
 800a27e:	f043 0301 	orr.w	r3, r3, #1
 800a282:	77fb      	strb	r3, [r7, #31]
 800a284:	7fbb      	ldrb	r3, [r7, #30]
 800a286:	3b20      	subs	r3, #32
 800a288:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1c5a      	adds	r2, r3, #1
 800a28e:	613a      	str	r2, [r7, #16]
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	4413      	add	r3, r2
 800a294:	7fba      	ldrb	r2, [r7, #30]
 800a296:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a298:	e7a1      	b.n	800a1de <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	441a      	add	r2, r3
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a2a4:	7fbb      	ldrb	r3, [r7, #30]
 800a2a6:	2b20      	cmp	r3, #32
 800a2a8:	d801      	bhi.n	800a2ae <create_name+0x11a>
 800a2aa:	2304      	movs	r3, #4
 800a2ac:	e000      	b.n	800a2b0 <create_name+0x11c>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <create_name+0x128>
 800a2b8:	2306      	movs	r3, #6
 800a2ba:	e023      	b.n	800a304 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	2be5      	cmp	r3, #229	; 0xe5
 800a2c2:	d102      	bne.n	800a2ca <create_name+0x136>
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2205      	movs	r2, #5
 800a2c8:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d102      	bne.n	800a2d6 <create_name+0x142>
 800a2d0:	7ffb      	ldrb	r3, [r7, #31]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800a2d6:	7ffb      	ldrb	r3, [r7, #31]
 800a2d8:	f003 0303 	and.w	r3, r3, #3
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d103      	bne.n	800a2e8 <create_name+0x154>
 800a2e0:	7fbb      	ldrb	r3, [r7, #30]
 800a2e2:	f043 0310 	orr.w	r3, r3, #16
 800a2e6:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800a2e8:	7ffb      	ldrb	r3, [r7, #31]
 800a2ea:	f003 030c 	and.w	r3, r3, #12
 800a2ee:	2b04      	cmp	r3, #4
 800a2f0:	d103      	bne.n	800a2fa <create_name+0x166>
 800a2f2:	7fbb      	ldrb	r3, [r7, #30]
 800a2f4:	f043 0308 	orr.w	r3, r3, #8
 800a2f8:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	330b      	adds	r3, #11
 800a2fe:	7fba      	ldrb	r2, [r7, #30]
 800a300:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a302:	2300      	movs	r3, #0
#endif
}
 800a304:	4618      	mov	r0, r3
 800a306:	3720      	adds	r7, #32
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	0800f3a8 	.word	0x0800f3a8
 800a310:	0800f320 	.word	0x0800f320

0800a314 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	2b2f      	cmp	r3, #47	; 0x2f
 800a324:	d003      	beq.n	800a32e <follow_path+0x1a>
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b5c      	cmp	r3, #92	; 0x5c
 800a32c:	d102      	bne.n	800a334 <follow_path+0x20>
		path++;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	3301      	adds	r3, #1
 800a332:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	2b1f      	cmp	r3, #31
 800a342:	d80a      	bhi.n	800a35a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800a344:	2100      	movs	r1, #0
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7ff fc72 	bl	8009c30 <dir_sdi>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800a358:	e045      	b.n	800a3e6 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a35a:	463b      	mov	r3, r7
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7ff ff18 	bl	800a194 <create_name>
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d136      	bne.n	800a3dc <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7ff fe88 	bl	800a084 <dir_find>
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a37e:	7adb      	ldrb	r3, [r3, #11]
 800a380:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800a382:	7bfb      	ldrb	r3, [r7, #15]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00a      	beq.n	800a39e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a388:	7bfb      	ldrb	r3, [r7, #15]
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	d128      	bne.n	800a3e0 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b00      	cmp	r3, #0
 800a396:	d123      	bne.n	800a3e0 <follow_path+0xcc>
 800a398:	2305      	movs	r3, #5
 800a39a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800a39c:	e020      	b.n	800a3e0 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
 800a3a0:	f003 0304 	and.w	r3, r3, #4
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d11d      	bne.n	800a3e4 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3ae:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	330b      	adds	r3, #11
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	f003 0310 	and.w	r3, r3, #16
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d102      	bne.n	800a3c4 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800a3be:	2305      	movs	r3, #5
 800a3c0:	73fb      	strb	r3, [r7, #15]
 800a3c2:	e010      	b.n	800a3e6 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a3ca:	68b9      	ldr	r1, [r7, #8]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff fe04 	bl	8009fda <ld_clust>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a3da:	e7be      	b.n	800a35a <follow_path+0x46>
			if (res != FR_OK) break;
 800a3dc:	bf00      	nop
 800a3de:	e002      	b.n	800a3e6 <follow_path+0xd2>
				break;
 800a3e0:	bf00      	nop
 800a3e2:	e000      	b.n	800a3e6 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a3e4:	bf00      	nop
		}
	}

	return res;
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a3f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3fc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d031      	beq.n	800a46a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	617b      	str	r3, [r7, #20]
 800a40c:	e002      	b.n	800a414 <get_ldnumber+0x24>
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	3301      	adds	r3, #1
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2b20      	cmp	r3, #32
 800a41a:	d903      	bls.n	800a424 <get_ldnumber+0x34>
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	2b3a      	cmp	r3, #58	; 0x3a
 800a422:	d1f4      	bne.n	800a40e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b3a      	cmp	r3, #58	; 0x3a
 800a42a:	d11c      	bne.n	800a466 <get_ldnumber+0x76>
			tp = *path;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	60fa      	str	r2, [r7, #12]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	3b30      	subs	r3, #48	; 0x30
 800a43c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2b09      	cmp	r3, #9
 800a442:	d80e      	bhi.n	800a462 <get_ldnumber+0x72>
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d10a      	bne.n	800a462 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d107      	bne.n	800a462 <get_ldnumber+0x72>
					vol = (int)i;
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	3301      	adds	r3, #1
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	e002      	b.n	800a46c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a466:	2300      	movs	r3, #0
 800a468:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a46a:	693b      	ldr	r3, [r7, #16]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	371c      	adds	r7, #28
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a490:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800a494:	6839      	ldr	r1, [r7, #0]
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7fe ffd9 	bl	800944e <move_window>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <check_fs+0x2e>
		return 3;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e04a      	b.n	800a53c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	021b      	lsls	r3, r3, #8
 800a4b2:	b21a      	sxth	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800a4ba:	b21b      	sxth	r3, r3
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	b21b      	sxth	r3, r3
 800a4c0:	4a20      	ldr	r2, [pc, #128]	; (800a544 <check_fs+0xcc>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d001      	beq.n	800a4ca <check_fs+0x52>
		return 2;
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	e038      	b.n	800a53c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3336      	adds	r3, #54	; 0x36
 800a4ce:	3303      	adds	r3, #3
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	061a      	lsls	r2, r3, #24
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3336      	adds	r3, #54	; 0x36
 800a4d8:	3302      	adds	r3, #2
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	041b      	lsls	r3, r3, #16
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	3236      	adds	r2, #54	; 0x36
 800a4e4:	3201      	adds	r2, #1
 800a4e6:	7812      	ldrb	r2, [r2, #0]
 800a4e8:	0212      	lsls	r2, r2, #8
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a4f8:	4a13      	ldr	r2, [pc, #76]	; (800a548 <check_fs+0xd0>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d101      	bne.n	800a502 <check_fs+0x8a>
		return 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	e01c      	b.n	800a53c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	3352      	adds	r3, #82	; 0x52
 800a506:	3303      	adds	r3, #3
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	061a      	lsls	r2, r3, #24
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	3352      	adds	r3, #82	; 0x52
 800a510:	3302      	adds	r3, #2
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	041b      	lsls	r3, r3, #16
 800a516:	4313      	orrs	r3, r2
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	3252      	adds	r2, #82	; 0x52
 800a51c:	3201      	adds	r2, #1
 800a51e:	7812      	ldrb	r2, [r2, #0]
 800a520:	0212      	lsls	r2, r2, #8
 800a522:	4313      	orrs	r3, r2
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800a52a:	4313      	orrs	r3, r2
 800a52c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a530:	4a05      	ldr	r2, [pc, #20]	; (800a548 <check_fs+0xd0>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d101      	bne.n	800a53a <check_fs+0xc2>
		return 0;
 800a536:	2300      	movs	r3, #0
 800a538:	e000      	b.n	800a53c <check_fs+0xc4>

	return 1;
 800a53a:	2301      	movs	r3, #1
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	ffffaa55 	.word	0xffffaa55
 800a548:	00544146 	.word	0x00544146

0800a54c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b096      	sub	sp, #88	; 0x58
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	4613      	mov	r3, r2
 800a558:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a560:	68b8      	ldr	r0, [r7, #8]
 800a562:	f7ff ff45 	bl	800a3f0 <get_ldnumber>
 800a566:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	da01      	bge.n	800a572 <find_volume+0x26>
 800a56e:	230b      	movs	r3, #11
 800a570:	e2aa      	b.n	800aac8 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a572:	4a9e      	ldr	r2, [pc, #632]	; (800a7ec <find_volume+0x2a0>)
 800a574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a57a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <find_volume+0x3a>
 800a582:	230c      	movs	r3, #12
 800a584:	e2a0      	b.n	800aac8 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a58a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a592:	2b00      	cmp	r3, #0
 800a594:	d01b      	beq.n	800a5ce <find_volume+0x82>
		stat = disk_status(fs->drv);
 800a596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a598:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fe fc3b 	bl	8008e18 <disk_status>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a5a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5ac:	f003 0301 	and.w	r3, r3, #1
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10c      	bne.n	800a5ce <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800a5b4:	79fb      	ldrb	r3, [r7, #7]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d007      	beq.n	800a5ca <find_volume+0x7e>
 800a5ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5be:	f003 0304 	and.w	r3, r3, #4
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800a5c6:	230a      	movs	r3, #10
 800a5c8:	e27e      	b.n	800aac8 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e27c      	b.n	800aac8 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fe fc30 	bl	8008e4c <disk_initialize>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800a5f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a5fe:	2303      	movs	r3, #3
 800a600:	e262      	b.n	800aac8 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800a602:	79fb      	ldrb	r3, [r7, #7]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d007      	beq.n	800a618 <find_volume+0xcc>
 800a608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b00      	cmp	r3, #0
 800a612:	d001      	beq.n	800a618 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800a614:	230a      	movs	r3, #10
 800a616:	e257      	b.n	800aac8 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800a61c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a61e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a620:	f7ff ff2a 	bl	800a478 <check_fs>
 800a624:	4603      	mov	r3, r0
 800a626:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800a62a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d155      	bne.n	800a6de <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a632:	2300      	movs	r3, #0
 800a634:	643b      	str	r3, [r7, #64]	; 0x40
 800a636:	e029      	b.n	800a68c <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800a638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a63c:	011b      	lsls	r3, r3, #4
 800a63e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a642:	4413      	add	r3, r2
 800a644:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	3304      	adds	r3, #4
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d012      	beq.n	800a676 <find_volume+0x12a>
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	330b      	adds	r3, #11
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	061a      	lsls	r2, r3, #24
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	330a      	adds	r3, #10
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	041b      	lsls	r3, r3, #16
 800a660:	4313      	orrs	r3, r2
 800a662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a664:	3209      	adds	r2, #9
 800a666:	7812      	ldrb	r2, [r2, #0]
 800a668:	0212      	lsls	r2, r2, #8
 800a66a:	4313      	orrs	r3, r2
 800a66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a66e:	3208      	adds	r2, #8
 800a670:	7812      	ldrb	r2, [r2, #0]
 800a672:	431a      	orrs	r2, r3
 800a674:	e000      	b.n	800a678 <find_volume+0x12c>
 800a676:	2200      	movs	r2, #0
 800a678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a680:	440b      	add	r3, r1
 800a682:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a688:	3301      	adds	r3, #1
 800a68a:	643b      	str	r3, [r7, #64]	; 0x40
 800a68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a68e:	2b03      	cmp	r3, #3
 800a690:	d9d2      	bls.n	800a638 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800a692:	2300      	movs	r3, #0
 800a694:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <find_volume+0x156>
 800a69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800a6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a6b0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d005      	beq.n	800a6c4 <find_volume+0x178>
 800a6b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6bc:	f7ff fedc 	bl	800a478 <check_fs>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	e000      	b.n	800a6c6 <find_volume+0x17a>
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a6ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d005      	beq.n	800a6de <find_volume+0x192>
 800a6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	643b      	str	r3, [r7, #64]	; 0x40
 800a6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d9e1      	bls.n	800a6a2 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a6de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d101      	bne.n	800a6ea <find_volume+0x19e>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e1ee      	b.n	800aac8 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800a6ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <find_volume+0x1aa>
 800a6f2:	230d      	movs	r3, #13
 800a6f4:	e1e8      	b.n	800aac8 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	7b1b      	ldrb	r3, [r3, #12]
 800a6fa:	021b      	lsls	r3, r3, #8
 800a6fc:	b21a      	sxth	r2, r3
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	7adb      	ldrb	r3, [r3, #11]
 800a702:	b21b      	sxth	r3, r3
 800a704:	4313      	orrs	r3, r2
 800a706:	b21b      	sxth	r3, r3
 800a708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a70c:	d001      	beq.n	800a712 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 800a70e:	230d      	movs	r3, #13
 800a710:	e1da      	b.n	800aac8 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a714:	7ddb      	ldrb	r3, [r3, #23]
 800a716:	021b      	lsls	r3, r3, #8
 800a718:	b21a      	sxth	r2, r3
 800a71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71c:	7d9b      	ldrb	r3, [r3, #22]
 800a71e:	b21b      	sxth	r3, r3
 800a720:	4313      	orrs	r3, r2
 800a722:	b21b      	sxth	r3, r3
 800a724:	b29b      	uxth	r3, r3
 800a726:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d112      	bne.n	800a754 <find_volume+0x208>
 800a72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a730:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a734:	061a      	lsls	r2, r3, #24
 800a736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a738:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a73c:	041b      	lsls	r3, r3, #16
 800a73e:	4313      	orrs	r3, r2
 800a740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a742:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800a746:	0212      	lsls	r2, r2, #8
 800a748:	4313      	orrs	r3, r2
 800a74a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a74c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a750:	4313      	orrs	r3, r2
 800a752:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800a754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a756:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a758:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75e:	7c1a      	ldrb	r2, [r3, #16]
 800a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a762:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a768:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d006      	beq.n	800a77e <find_volume+0x232>
 800a770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a772:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800a776:	2b02      	cmp	r3, #2
 800a778:	d001      	beq.n	800a77e <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800a77a:	230d      	movs	r3, #13
 800a77c:	e1a4      	b.n	800aac8 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800a784:	461a      	mov	r2, r3
 800a786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a788:	fb02 f303 	mul.w	r3, r2, r3
 800a78c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800a78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a790:	7b5a      	ldrb	r2, [r3, #13]
 800a792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a794:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00a      	beq.n	800a7b8 <find_volume+0x26c>
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800a7b8:	230d      	movs	r3, #13
 800a7ba:	e185      	b.n	800aac8 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	7c9b      	ldrb	r3, [r3, #18]
 800a7c0:	021b      	lsls	r3, r3, #8
 800a7c2:	b21a      	sxth	r2, r3
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	7c5b      	ldrb	r3, [r3, #17]
 800a7c8:	b21b      	sxth	r3, r3
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	b21b      	sxth	r3, r3
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a7dc:	f003 030f 	and.w	r3, r3, #15
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d004      	beq.n	800a7f0 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800a7e6:	230d      	movs	r3, #13
 800a7e8:	e16e      	b.n	800aac8 <find_volume+0x57c>
 800a7ea:	bf00      	nop
 800a7ec:	20000318 	.word	0x20000318

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f2:	7d1b      	ldrb	r3, [r3, #20]
 800a7f4:	021b      	lsls	r3, r3, #8
 800a7f6:	b21a      	sxth	r2, r3
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fa:	7cdb      	ldrb	r3, [r3, #19]
 800a7fc:	b21b      	sxth	r3, r3
 800a7fe:	4313      	orrs	r3, r2
 800a800:	b21b      	sxth	r3, r3
 800a802:	b29b      	uxth	r3, r3
 800a804:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d112      	bne.n	800a832 <find_volume+0x2e6>
 800a80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a812:	061a      	lsls	r2, r3, #24
 800a814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a816:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a81a:	041b      	lsls	r3, r3, #16
 800a81c:	4313      	orrs	r3, r2
 800a81e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a820:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800a824:	0212      	lsls	r2, r2, #8
 800a826:	4313      	orrs	r3, r2
 800a828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a82a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a82e:	4313      	orrs	r3, r2
 800a830:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a834:	7bdb      	ldrb	r3, [r3, #15]
 800a836:	021b      	lsls	r3, r3, #8
 800a838:	b21a      	sxth	r2, r3
 800a83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83c:	7b9b      	ldrb	r3, [r3, #14]
 800a83e:	b21b      	sxth	r3, r3
 800a840:	4313      	orrs	r3, r2
 800a842:	b21b      	sxth	r3, r3
 800a844:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800a846:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <find_volume+0x304>
 800a84c:	230d      	movs	r3, #13
 800a84e:	e13b      	b.n	800aac8 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800a850:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a854:	4413      	add	r3, r2
 800a856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a858:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800a85c:	0912      	lsrs	r2, r2, #4
 800a85e:	b292      	uxth	r2, r2
 800a860:	4413      	add	r3, r2
 800a862:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a868:	429a      	cmp	r2, r3
 800a86a:	d201      	bcs.n	800a870 <find_volume+0x324>
 800a86c:	230d      	movs	r3, #13
 800a86e:	e12b      	b.n	800aac8 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800a870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a878:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a87c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a880:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <find_volume+0x340>
 800a888:	230d      	movs	r3, #13
 800a88a:	e11d      	b.n	800aac8 <find_volume+0x57c>
	fmt = FS_FAT12;
 800a88c:	2301      	movs	r3, #1
 800a88e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a898:	4293      	cmp	r3, r2
 800a89a:	d902      	bls.n	800a8a2 <find_volume+0x356>
 800a89c:	2302      	movs	r3, #2
 800a89e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d902      	bls.n	800a8b2 <find_volume+0x366>
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	1c9a      	adds	r2, r3, #2
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800a8c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8c8:	441a      	add	r2, r3
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800a8d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d4:	441a      	add	r2, r3
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800a8dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8e0:	2b03      	cmp	r3, #3
 800a8e2:	d121      	bne.n	800a928 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <find_volume+0x3a6>
 800a8ee:	230d      	movs	r3, #13
 800a8f0:	e0ea      	b.n	800aac8 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800a8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a8f8:	061a      	lsls	r2, r3, #24
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a900:	041b      	lsls	r3, r3, #16
 800a902:	4313      	orrs	r3, r2
 800a904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a906:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800a90a:	0212      	lsls	r2, r2, #8
 800a90c:	4313      	orrs	r3, r2
 800a90e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a910:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800a914:	431a      	orrs	r2, r3
 800a916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a918:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	647b      	str	r3, [r7, #68]	; 0x44
 800a926:	e025      	b.n	800a974 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <find_volume+0x3ea>
 800a932:	230d      	movs	r3, #13
 800a934:	e0c8      	b.n	800aac8 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a93e:	441a      	add	r2, r3
 800a940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a942:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a946:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d104      	bne.n	800a958 <find_volume+0x40c>
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a954:	005b      	lsls	r3, r3, #1
 800a956:	e00c      	b.n	800a972 <find_volume+0x426>
 800a958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a95e:	4613      	mov	r3, r2
 800a960:	005b      	lsls	r3, r3, #1
 800a962:	4413      	add	r3, r2
 800a964:	085a      	lsrs	r2, r3, #1
 800a966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a968:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800a972:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800a974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a976:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a97a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a97c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a980:	0a5b      	lsrs	r3, r3, #9
 800a982:	429a      	cmp	r2, r3
 800a984:	d201      	bcs.n	800a98a <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800a986:	230d      	movs	r3, #13
 800a988:	e09e      	b.n	800aac8 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800a98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a990:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800a994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a996:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a2:	2280      	movs	r2, #128	; 0x80
 800a9a4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a9a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9ac:	2b03      	cmp	r3, #3
 800a9ae:	d177      	bne.n	800aaa0 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a9b6:	021b      	lsls	r3, r3, #8
 800a9b8:	b21a      	sxth	r2, r3
 800a9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a9c0:	b21b      	sxth	r3, r3
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	b21b      	sxth	r3, r3
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d16a      	bne.n	800aaa0 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800a9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9d2:	f7fe fd3c 	bl	800944e <move_window>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d161      	bne.n	800aaa0 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 800a9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800a9ea:	021b      	lsls	r3, r3, #8
 800a9ec:	b21a      	sxth	r2, r3
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800a9f4:	b21b      	sxth	r3, r3
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	b21b      	sxth	r3, r3
 800a9fa:	4a35      	ldr	r2, [pc, #212]	; (800aad0 <find_volume+0x584>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d14f      	bne.n	800aaa0 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa02:	78db      	ldrb	r3, [r3, #3]
 800aa04:	061a      	lsls	r2, r3, #24
 800aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa08:	789b      	ldrb	r3, [r3, #2]
 800aa0a:	041b      	lsls	r3, r3, #16
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa10:	7852      	ldrb	r2, [r2, #1]
 800aa12:	0212      	lsls	r2, r2, #8
 800aa14:	4313      	orrs	r3, r2
 800aa16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa18:	7812      	ldrb	r2, [r2, #0]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	4a2d      	ldr	r2, [pc, #180]	; (800aad4 <find_volume+0x588>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d13e      	bne.n	800aaa0 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa24:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800aa28:	061a      	lsls	r2, r3, #24
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800aa30:	041b      	lsls	r3, r3, #16
 800aa32:	4313      	orrs	r3, r2
 800aa34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa36:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800aa3a:	0212      	lsls	r2, r2, #8
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa40:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800aa44:	4313      	orrs	r3, r2
 800aa46:	4a24      	ldr	r2, [pc, #144]	; (800aad8 <find_volume+0x58c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d129      	bne.n	800aaa0 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800aa52:	061a      	lsls	r2, r3, #24
 800aa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa56:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800aa5a:	041b      	lsls	r3, r3, #16
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa60:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800aa64:	0212      	lsls	r2, r2, #8
 800aa66:	4313      	orrs	r3, r2
 800aa68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa6a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800aa6e:	431a      	orrs	r2, r3
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800aa76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa78:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800aa7c:	061a      	lsls	r2, r3, #24
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa80:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800aa84:	041b      	lsls	r3, r3, #16
 800aa86:	4313      	orrs	r3, r2
 800aa88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa8a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800aa8e:	0212      	lsls	r2, r2, #8
 800aa90:	4313      	orrs	r3, r2
 800aa92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa94:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800aa98:	431a      	orrs	r2, r3
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aaa6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800aaaa:	4b0c      	ldr	r3, [pc, #48]	; (800aadc <find_volume+0x590>)
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	3301      	adds	r3, #1
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <find_volume+0x590>)
 800aab4:	801a      	strh	r2, [r3, #0]
 800aab6:	4b09      	ldr	r3, [pc, #36]	; (800aadc <find_volume+0x590>)
 800aab8:	881a      	ldrh	r2, [r3, #0]
 800aaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800aac0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aac2:	f7fe fc51 	bl	8009368 <clear_lock>
#endif

	return FR_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3758      	adds	r7, #88	; 0x58
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	ffffaa55 	.word	0xffffaa55
 800aad4:	41615252 	.word	0x41615252
 800aad8:	61417272 	.word	0x61417272
 800aadc:	2000031c 	.word	0x2000031c

0800aae0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d022      	beq.n	800ab38 <validate+0x58>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d01d      	beq.n	800ab38 <validate+0x58>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab02:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d016      	beq.n	800ab38 <validate+0x58>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab10:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d10c      	bne.n	800ab38 <validate+0x58>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab24:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fe f975 	bl	8008e18 <disk_status>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <validate+0x5c>
		return FR_INVALID_OBJECT;
 800ab38:	2309      	movs	r3, #9
 800ab3a:	e000      	b.n	800ab3e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	4613      	mov	r3, r2
 800ab54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800ab5a:	f107 0310 	add.w	r3, r7, #16
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fc46 	bl	800a3f0 <get_ldnumber>
 800ab64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	da01      	bge.n	800ab70 <f_mount+0x28>
 800ab6c:	230b      	movs	r3, #11
 800ab6e:	e02d      	b.n	800abcc <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ab70:	4a18      	ldr	r2, [pc, #96]	; (800abd4 <f_mount+0x8c>)
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d006      	beq.n	800ab8e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800ab80:	69b8      	ldr	r0, [r7, #24]
 800ab82:	f7fe fbf1 	bl	8009368 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d003      	beq.n	800ab9c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	490d      	ldr	r1, [pc, #52]	; (800abd4 <f_mount+0x8c>)
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <f_mount+0x6a>
 800abac:	79fb      	ldrb	r3, [r7, #7]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d001      	beq.n	800abb6 <f_mount+0x6e>
 800abb2:	2300      	movs	r3, #0
 800abb4:	e00a      	b.n	800abcc <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800abb6:	f107 0108 	add.w	r1, r7, #8
 800abba:	f107 030c 	add.w	r3, r7, #12
 800abbe:	2200      	movs	r2, #0
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff fcc3 	bl	800a54c <find_volume>
 800abc6:	4603      	mov	r3, r0
 800abc8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800abca:	7dfb      	ldrb	r3, [r7, #23]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3720      	adds	r7, #32
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	20000318 	.word	0x20000318

0800abd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800abde:	af00      	add	r7, sp, #0
 800abe0:	f107 030c 	add.w	r3, r7, #12
 800abe4:	6018      	str	r0, [r3, #0]
 800abe6:	f107 0308 	add.w	r3, r7, #8
 800abea:	6019      	str	r1, [r3, #0]
 800abec:	1dfb      	adds	r3, r7, #7
 800abee:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800abf0:	f107 030c 	add.w	r3, r7, #12
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <f_open+0x26>
 800abfa:	2309      	movs	r3, #9
 800abfc:	e1f2      	b.n	800afe4 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 800abfe:	f107 030c 	add.w	r3, r7, #12
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800ac0a:	1dfb      	adds	r3, r7, #7
 800ac0c:	1dfa      	adds	r2, r7, #7
 800ac0e:	7812      	ldrb	r2, [r2, #0]
 800ac10:	f002 021f 	and.w	r2, r2, #31
 800ac14:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800ac16:	1dfb      	adds	r3, r7, #7
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	f023 0301 	bic.w	r3, r3, #1
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	f107 0108 	add.w	r1, r7, #8
 800ac24:	f107 0320 	add.w	r3, r7, #32
 800ac28:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff fc8d 	bl	800a54c <find_volume>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800ac38:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 81cf 	bne.w	800afe0 <f_open+0x408>
		INIT_BUF(dj);
 800ac42:	f107 0320 	add.w	r3, r7, #32
 800ac46:	f107 0214 	add.w	r2, r7, #20
 800ac4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800ac4e:	f107 0308 	add.w	r3, r7, #8
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	f107 0320 	add.w	r3, r7, #32
 800ac58:	4611      	mov	r1, r2
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7ff fb5a 	bl	800a314 <follow_path>
 800ac60:	4603      	mov	r3, r0
 800ac62:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800ac66:	f107 0320 	add.w	r3, r7, #32
 800ac6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac6e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ac72:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d11a      	bne.n	800acb0 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 800ac7a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d103      	bne.n	800ac8a <f_open+0xb2>
				res = FR_INVALID_NAME;
 800ac82:	2306      	movs	r3, #6
 800ac84:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800ac88:	e012      	b.n	800acb0 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ac8a:	1dfb      	adds	r3, r7, #7
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	f023 0301 	bic.w	r3, r3, #1
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	bf14      	ite	ne
 800ac96:	2301      	movne	r3, #1
 800ac98:	2300      	moveq	r3, #0
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	f107 0320 	add.w	r3, r7, #32
 800aca2:	4611      	mov	r1, r2
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fe f9d1 	bl	800904c <chk_lock>
 800acaa:	4603      	mov	r3, r0
 800acac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800acb0:	1dfb      	adds	r3, r7, #7
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	f003 031c 	and.w	r3, r3, #28
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f000 80cc 	beq.w	800ae56 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 800acbe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d01f      	beq.n	800ad06 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800acc6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800acca:	2b04      	cmp	r3, #4
 800accc:	d10e      	bne.n	800acec <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800acce:	f7fe fa2b 	bl	8009128 <enq_lock>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d006      	beq.n	800ace6 <f_open+0x10e>
 800acd8:	f107 0320 	add.w	r3, r7, #32
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff fa20 	bl	800a122 <dir_register>
 800ace2:	4603      	mov	r3, r0
 800ace4:	e000      	b.n	800ace8 <f_open+0x110>
 800ace6:	2312      	movs	r3, #18
 800ace8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800acec:	1dfb      	adds	r3, r7, #7
 800acee:	1dfa      	adds	r2, r7, #7
 800acf0:	7812      	ldrb	r2, [r2, #0]
 800acf2:	f042 0208 	orr.w	r2, r2, #8
 800acf6:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800acf8:	f107 0320 	add.w	r3, r7, #32
 800acfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ad00:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800ad04:	e014      	b.n	800ad30 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ad06:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ad0a:	330b      	adds	r3, #11
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	f003 0311 	and.w	r3, r3, #17
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <f_open+0x146>
					res = FR_DENIED;
 800ad16:	2307      	movs	r3, #7
 800ad18:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800ad1c:	e008      	b.n	800ad30 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800ad1e:	1dfb      	adds	r3, r7, #7
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	f003 0304 	and.w	r3, r3, #4
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <f_open+0x158>
						res = FR_EXIST;
 800ad2a:	2308      	movs	r3, #8
 800ad2c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ad30:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f040 80af 	bne.w	800ae98 <f_open+0x2c0>
 800ad3a:	1dfb      	adds	r3, r7, #7
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	f003 0308 	and.w	r3, r3, #8
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f000 80a8 	beq.w	800ae98 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 800ad48:	f7fd fb28 	bl	800839c <get_fattime>
 800ad4c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800ad50:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ad54:	330e      	adds	r3, #14
 800ad56:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	701a      	strb	r2, [r3, #0]
 800ad5e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	0a1b      	lsrs	r3, r3, #8
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ad6c:	330f      	adds	r3, #15
 800ad6e:	b2d2      	uxtb	r2, r2
 800ad70:	701a      	strb	r2, [r3, #0]
 800ad72:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800ad76:	0c1a      	lsrs	r2, r3, #16
 800ad78:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ad7c:	3310      	adds	r3, #16
 800ad7e:	b2d2      	uxtb	r2, r2
 800ad80:	701a      	strb	r2, [r3, #0]
 800ad82:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800ad86:	0e1a      	lsrs	r2, r3, #24
 800ad88:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ad8c:	3311      	adds	r3, #17
 800ad8e:	b2d2      	uxtb	r2, r2
 800ad90:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800ad92:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ad96:	330b      	adds	r3, #11
 800ad98:	2200      	movs	r2, #0
 800ad9a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800ad9c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ada0:	331c      	adds	r3, #28
 800ada2:	2200      	movs	r2, #0
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800adaa:	331d      	adds	r3, #29
 800adac:	2200      	movs	r2, #0
 800adae:	701a      	strb	r2, [r3, #0]
 800adb0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800adb4:	331e      	adds	r3, #30
 800adb6:	2200      	movs	r2, #0
 800adb8:	701a      	strb	r2, [r3, #0]
 800adba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800adbe:	331f      	adds	r3, #31
 800adc0:	2200      	movs	r2, #0
 800adc2:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800adc4:	f107 0320 	add.w	r3, r7, #32
 800adc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800adcc:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800add0:	4618      	mov	r0, r3
 800add2:	f7ff f902 	bl	8009fda <ld_clust>
 800add6:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800adda:	2100      	movs	r1, #0
 800addc:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800ade0:	f7ff f929 	bl	800a036 <st_clust>
				dj.fs->wflag = 1;
 800ade4:	f107 0320 	add.w	r3, r7, #32
 800ade8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800adf2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d04e      	beq.n	800ae98 <f_open+0x2c0>
					dw = dj.fs->winsect;
 800adfa:	f107 0320 	add.w	r3, r7, #32
 800adfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ae02:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800ae06:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800ae0a:	f107 0320 	add.w	r3, r7, #32
 800ae0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ae12:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fe fdde 	bl	80099d8 <remove_chain>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800ae22:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d136      	bne.n	800ae98 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800ae2a:	f107 0320 	add.w	r3, r7, #32
 800ae2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ae32:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800ae36:	3a01      	subs	r2, #1
 800ae38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800ae3c:	f107 0320 	add.w	r3, r7, #32
 800ae40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ae44:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fe fb00 	bl	800944e <move_window>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800ae54:	e020      	b.n	800ae98 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800ae56:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d11c      	bne.n	800ae98 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800ae5e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ae62:	330b      	adds	r3, #11
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	f003 0310 	and.w	r3, r3, #16
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d003      	beq.n	800ae76 <f_open+0x29e>
					res = FR_NO_FILE;
 800ae6e:	2304      	movs	r3, #4
 800ae70:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800ae74:	e010      	b.n	800ae98 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800ae76:	1dfb      	adds	r3, r7, #7
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	f003 0302 	and.w	r3, r3, #2
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00a      	beq.n	800ae98 <f_open+0x2c0>
 800ae82:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ae86:	330b      	adds	r3, #11
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d002      	beq.n	800ae98 <f_open+0x2c0>
						res = FR_DENIED;
 800ae92:	2307      	movs	r3, #7
 800ae94:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800ae98:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d13d      	bne.n	800af1c <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aea0:	1dfb      	adds	r3, r7, #7
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	f003 0308 	and.w	r3, r3, #8
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d005      	beq.n	800aeb8 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 800aeac:	1dfb      	adds	r3, r7, #7
 800aeae:	1dfa      	adds	r2, r7, #7
 800aeb0:	7812      	ldrb	r2, [r2, #0]
 800aeb2:	f042 0220 	orr.w	r2, r2, #32
 800aeb6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800aeb8:	f107 0320 	add.w	r3, r7, #32
 800aebc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aec0:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800aec4:	f107 030c 	add.w	r3, r7, #12
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800aece:	f107 030c 	add.w	r3, r7, #12
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800aed8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aedc:	1dfb      	adds	r3, r7, #7
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	f023 0301 	bic.w	r3, r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	bf14      	ite	ne
 800aee8:	2301      	movne	r3, #1
 800aeea:	2300      	moveq	r3, #0
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	461a      	mov	r2, r3
 800aef0:	f107 0320 	add.w	r3, r7, #32
 800aef4:	4611      	mov	r1, r2
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fe f93a 	bl	8009170 <inc_lock>
 800aefc:	4602      	mov	r2, r0
 800aefe:	f107 030c 	add.w	r3, r7, #12
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800af08:	f107 030c 	add.w	r3, r7, #12
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800af12:	2b00      	cmp	r3, #0
 800af14:	d102      	bne.n	800af1c <f_open+0x344>
 800af16:	2302      	movs	r3, #2
 800af18:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800af1c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800af20:	2b00      	cmp	r3, #0
 800af22:	d15d      	bne.n	800afe0 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 800af24:	f107 030c 	add.w	r3, r7, #12
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	1dfa      	adds	r2, r7, #7
 800af2c:	7812      	ldrb	r2, [r2, #0]
 800af2e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800af32:	f107 030c 	add.w	r3, r7, #12
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800af3e:	f107 0320 	add.w	r3, r7, #32
 800af42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800af46:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff f845 	bl	8009fda <ld_clust>
 800af50:	4602      	mov	r2, r0
 800af52:	f107 030c 	add.w	r3, r7, #12
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800af5c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800af60:	331f      	adds	r3, #31
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	061a      	lsls	r2, r3, #24
 800af66:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800af6a:	331e      	adds	r3, #30
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	4313      	orrs	r3, r2
 800af72:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800af76:	321d      	adds	r2, #29
 800af78:	7812      	ldrb	r2, [r2, #0]
 800af7a:	0212      	lsls	r2, r2, #8
 800af7c:	4313      	orrs	r3, r2
 800af7e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800af82:	321c      	adds	r2, #28
 800af84:	7812      	ldrb	r2, [r2, #0]
 800af86:	431a      	orrs	r2, r3
 800af88:	f107 030c 	add.w	r3, r7, #12
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800af92:	f107 030c 	add.w	r3, r7, #12
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2200      	movs	r2, #0
 800af9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800af9e:	f107 030c 	add.w	r3, r7, #12
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800afaa:	f107 030c 	add.w	r3, r7, #12
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800afb6:	f107 0320 	add.w	r3, r7, #32
 800afba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800afbe:	f107 030c 	add.w	r3, r7, #12
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800afc8:	f107 030c 	add.w	r3, r7, #12
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800afd2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800afd6:	f107 030c 	add.w	r3, r7, #12
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800afe0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b08c      	sub	sp, #48	; 0x30
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	60b9      	str	r1, [r7, #8]
 800aff8:	607a      	str	r2, [r7, #4]
 800affa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f7ff fd6a 	bl	800aae0 <validate>
 800b00c:	4603      	mov	r3, r0
 800b00e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b010:	7ffb      	ldrb	r3, [r7, #31]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <f_read+0x2c>
 800b016:	7ffb      	ldrb	r3, [r7, #31]
 800b018:	e150      	b.n	800b2bc <f_read+0x2ce>
	if (fp->err)								/* Check error */
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800b020:	2b00      	cmp	r3, #0
 800b022:	d003      	beq.n	800b02c <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800b02a:	e147      	b.n	800b2bc <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	2b00      	cmp	r3, #0
 800b038:	d101      	bne.n	800b03e <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800b03a:	2307      	movs	r3, #7
 800b03c:	e13e      	b.n	800b2bc <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	429a      	cmp	r2, r3
 800b054:	f240 812d 	bls.w	800b2b2 <f_read+0x2c4>
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b05c:	e129      	b.n	800b2b2 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f040 80f2 	bne.w	800b252 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b074:	0a5b      	lsrs	r3, r3, #9
 800b076:	b2da      	uxtb	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b07e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b082:	3b01      	subs	r3, #1
 800b084:	b2db      	uxtb	r3, r3
 800b086:	4013      	ands	r3, r2
 800b088:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d139      	bne.n	800b104 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b096:	2b00      	cmp	r3, #0
 800b098:	d104      	bne.n	800b0a4 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0a2:	e018      	b.n	800b0d6 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d008      	beq.n	800b0c0 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f7fe fd85 	bl	8009bc6 <clmt_clust>
 800b0bc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b0be:	e00a      	b.n	800b0d6 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	f7fe faba 	bl	8009648 <get_fat>
 800b0d4:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800b0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d805      	bhi.n	800b0e8 <f_read+0xfa>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2202      	movs	r2, #2
 800b0e0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	e0e9      	b.n	800b2bc <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0ee:	d105      	bne.n	800b0fc <f_read+0x10e>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e0df      	b.n	800b2bc <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b100:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b110:	4619      	mov	r1, r3
 800b112:	4610      	mov	r0, r2
 800b114:	f7fe fa76 	bl	8009604 <clust2sect>
 800b118:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d105      	bne.n	800b12c <f_read+0x13e>
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2202      	movs	r2, #2
 800b124:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b128:	2302      	movs	r3, #2
 800b12a:	e0c7      	b.n	800b2bc <f_read+0x2ce>
			sect += csect;
 800b12c:	7dfb      	ldrb	r3, [r7, #23]
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	4413      	add	r3, r2
 800b132:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	0a5b      	lsrs	r3, r3, #9
 800b138:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d046      	beq.n	800b1ce <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800b140:	7dfa      	ldrb	r2, [r7, #23]
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	4413      	add	r3, r2
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800b14c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b150:	4293      	cmp	r3, r2
 800b152:	d908      	bls.n	800b166 <f_read+0x178>
					cc = fp->fs->csize - csect;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b15a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b15e:	461a      	mov	r2, r3
 800b160:	7dfb      	ldrb	r3, [r7, #23]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b16c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	6a39      	ldr	r1, [r7, #32]
 800b176:	f7fd fe8f 	bl	8008e98 <disk_read>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d005      	beq.n	800b18c <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b188:	2301      	movs	r3, #1
 800b18a:	e097      	b.n	800b2bc <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b196:	2b00      	cmp	r3, #0
 800b198:	d015      	beq.n	800b1c6 <f_read+0x1d8>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d90d      	bls.n	800b1c6 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	025b      	lsls	r3, r3, #9
 800b1b6:	6a3a      	ldr	r2, [r7, #32]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fd fec7 	bl	8008f54 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c8:	025b      	lsls	r3, r3, #9
 800b1ca:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800b1cc:	e05b      	b.n	800b286 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d037      	beq.n	800b24a <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d01d      	beq.n	800b224 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b1ee:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b1f2:	68f9      	ldr	r1, [r7, #12]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	f7fd fe6c 	bl	8008ed8 <disk_write>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d005      	beq.n	800b212 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b20e:	2301      	movs	r3, #1
 800b210:	e054      	b.n	800b2bc <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b21c:	b2da      	uxtb	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b22a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b22e:	68f9      	ldr	r1, [r7, #12]
 800b230:	2301      	movs	r3, #1
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	f7fd fe30 	bl	8008e98 <disk_read>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d005      	beq.n	800b24a <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b246:	2301      	movs	r3, #1
 800b248:	e038      	b.n	800b2bc <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	693a      	ldr	r2, [r7, #16]
 800b24e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b25c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b260:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800b262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	429a      	cmp	r2, r3
 800b268:	d901      	bls.n	800b26e <f_read+0x280>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	4413      	add	r3, r2
 800b27c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b27e:	4619      	mov	r1, r3
 800b280:	6a38      	ldr	r0, [r7, #32]
 800b282:	f7fd fe67 	bl	8008f54 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b286:	6a3a      	ldr	r2, [r7, #32]
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	4413      	add	r3, r2
 800b28c:	623b      	str	r3, [r7, #32]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	441a      	add	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	441a      	add	r2, r3
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f47f aed2 	bne.w	800b05e <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3730      	adds	r7, #48	; 0x30
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b08a      	sub	sp, #40	; 0x28
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
 800b2d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f7ff fbff 	bl	800aae0 <validate>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b2e6:	7dfb      	ldrb	r3, [r7, #23]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <f_write+0x2c>
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	e192      	b.n	800b616 <f_write+0x352>
	if (fp->err)							/* Check error */
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800b300:	e189      	b.n	800b616 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b308:	f003 0302 	and.w	r3, r3, #2
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800b310:	2307      	movs	r3, #7
 800b312:	e180      	b.n	800b616 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	441a      	add	r2, r3
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b324:	429a      	cmp	r2, r3
 800b326:	f080 8158 	bcs.w	800b5da <f_write+0x316>
 800b32a:	2300      	movs	r3, #0
 800b32c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800b32e:	e154      	b.n	800b5da <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f040 8114 	bne.w	800b568 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b346:	0a5b      	lsrs	r3, r3, #9
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b350:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b354:	3b01      	subs	r3, #1
 800b356:	b2db      	uxtb	r3, r3
 800b358:	4013      	ands	r3, r2
 800b35a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800b35c:	7dbb      	ldrb	r3, [r7, #22]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d151      	bne.n	800b406 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d10f      	bne.n	800b38c <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b372:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	2b00      	cmp	r3, #0
 800b378:	d121      	bne.n	800b3be <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b380:	2100      	movs	r1, #0
 800b382:	4618      	mov	r0, r3
 800b384:	f7fe fb82 	bl	8009a8c <create_chain>
 800b388:	6278      	str	r0, [r7, #36]	; 0x24
 800b38a:	e018      	b.n	800b3be <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800b392:	2b00      	cmp	r3, #0
 800b394:	d008      	beq.n	800b3a8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b39c:	4619      	mov	r1, r3
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f7fe fc11 	bl	8009bc6 <clmt_clust>
 800b3a4:	6278      	str	r0, [r7, #36]	; 0x24
 800b3a6:	e00a      	b.n	800b3be <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	4610      	mov	r0, r2
 800b3b8:	f7fe fb68 	bl	8009a8c <create_chain>
 800b3bc:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 810f 	beq.w	800b5e4 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d105      	bne.n	800b3d8 <f_write+0x114>
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2202      	movs	r2, #2
 800b3d0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	e11e      	b.n	800b616 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3de:	d105      	bne.n	800b3ec <f_write+0x128>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e114      	b.n	800b616 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d103      	bne.n	800b406 <f_write+0x142>
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b402:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b410:	2b00      	cmp	r3, #0
 800b412:	d01d      	beq.n	800b450 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b41a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b41e:	68f9      	ldr	r1, [r7, #12]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b426:	2301      	movs	r3, #1
 800b428:	f7fd fd56 	bl	8008ed8 <disk_write>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d005      	beq.n	800b43e <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b43a:	2301      	movs	r3, #1
 800b43c:	e0eb      	b.n	800b616 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b45c:	4619      	mov	r1, r3
 800b45e:	4610      	mov	r0, r2
 800b460:	f7fe f8d0 	bl	8009604 <clust2sect>
 800b464:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d105      	bne.n	800b478 <f_write+0x1b4>
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2202      	movs	r2, #2
 800b470:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b474:	2302      	movs	r3, #2
 800b476:	e0ce      	b.n	800b616 <f_write+0x352>
			sect += csect;
 800b478:	7dbb      	ldrb	r3, [r7, #22]
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	4413      	add	r3, r2
 800b47e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	0a5b      	lsrs	r3, r3, #9
 800b484:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d048      	beq.n	800b51e <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800b48c:	7dba      	ldrb	r2, [r7, #22]
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	4413      	add	r3, r2
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800b498:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d908      	bls.n	800b4b2 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b4a6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	7dbb      	ldrb	r3, [r7, #22]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b4b8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	69b9      	ldr	r1, [r7, #24]
 800b4c2:	f7fd fd09 	bl	8008ed8 <disk_write>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d005      	beq.n	800b4d8 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e09e      	b.n	800b616 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	69fa      	ldr	r2, [r7, #28]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d916      	bls.n	800b516 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	025b      	lsls	r3, r3, #9
 800b4f6:	69ba      	ldr	r2, [r7, #24]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4fe:	4619      	mov	r1, r3
 800b500:	f7fd fd28 	bl	8008f54 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b50a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	025b      	lsls	r3, r3, #9
 800b51a:	623b      	str	r3, [r7, #32]
				continue;
 800b51c:	e047      	b.n	800b5ae <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	429a      	cmp	r2, r3
 800b528:	d01a      	beq.n	800b560 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b536:	429a      	cmp	r2, r3
 800b538:	d212      	bcs.n	800b560 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b540:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b544:	68f9      	ldr	r1, [r7, #12]
 800b546:	2301      	movs	r3, #1
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	f7fd fca5 	bl	8008e98 <disk_read>
 800b54e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800b550:	2b00      	cmp	r3, #0
 800b552:	d005      	beq.n	800b560 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2201      	movs	r2, #1
 800b558:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b55c:	2301      	movs	r3, #1
 800b55e:	e05a      	b.n	800b616 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b572:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b576:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800b578:	6a3a      	ldr	r2, [r7, #32]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d901      	bls.n	800b584 <f_write+0x2c0>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b58a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	4413      	add	r3, r2
 800b592:	6a3a      	ldr	r2, [r7, #32]
 800b594:	69b9      	ldr	r1, [r7, #24]
 800b596:	4618      	mov	r0, r3
 800b598:	f7fd fcdc 	bl	8008f54 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b5a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800b5ae:	69ba      	ldr	r2, [r7, #24]
 800b5b0:	6a3b      	ldr	r3, [r7, #32]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	61bb      	str	r3, [r7, #24]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	441a      	add	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	6a3b      	ldr	r3, [r7, #32]
 800b5cc:	441a      	add	r2, r3
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	6a3b      	ldr	r3, [r7, #32]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f47f aea7 	bne.w	800b330 <f_write+0x6c>
 800b5e2:	e000      	b.n	800b5e6 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b5e4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d905      	bls.n	800b602 <f_write+0x33e>
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b608:	f043 0320 	orr.w	r3, r3, #32
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3728      	adds	r7, #40	; 0x28
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b086      	sub	sp, #24
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7ff fa5a 	bl	800aae0 <validate>
 800b62c:	4603      	mov	r3, r0
 800b62e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b630:	7dfb      	ldrb	r3, [r7, #23]
 800b632:	2b00      	cmp	r3, #0
 800b634:	f040 80a8 	bne.w	800b788 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b63e:	f003 0320 	and.w	r3, r3, #32
 800b642:	2b00      	cmp	r3, #0
 800b644:	f000 80a0 	beq.w	800b788 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b652:	2b00      	cmp	r3, #0
 800b654:	d019      	beq.n	800b68a <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b65c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b660:	6879      	ldr	r1, [r7, #4]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b668:	2301      	movs	r3, #1
 800b66a:	f7fd fc35 	bl	8008ed8 <disk_write>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800b674:	2301      	movs	r3, #1
 800b676:	e088      	b.n	800b78a <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b67e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b682:	b2da      	uxtb	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b696:	4619      	mov	r1, r3
 800b698:	4610      	mov	r0, r2
 800b69a:	f7fd fed8 	bl	800944e <move_window>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d16f      	bne.n	800b788 <f_sync+0x16a>
				dir = fp->dir_ptr;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b6ae:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	330b      	adds	r3, #11
 800b6b4:	781a      	ldrb	r2, [r3, #0]
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	330b      	adds	r3, #11
 800b6ba:	f042 0220 	orr.w	r2, r2, #32
 800b6be:	b2d2      	uxtb	r2, r2
 800b6c0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	331c      	adds	r3, #28
 800b6cc:	b2d2      	uxtb	r2, r2
 800b6ce:	701a      	strb	r2, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	0a1b      	lsrs	r3, r3, #8
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	331d      	adds	r3, #29
 800b6e0:	b2d2      	uxtb	r2, r2
 800b6e2:	701a      	strb	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b6ea:	0c1a      	lsrs	r2, r3, #16
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	331e      	adds	r3, #30
 800b6f0:	b2d2      	uxtb	r2, r2
 800b6f2:	701a      	strb	r2, [r3, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b6fa:	0e1a      	lsrs	r2, r3, #24
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	331f      	adds	r3, #31
 800b700:	b2d2      	uxtb	r2, r2
 800b702:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b70a:	4619      	mov	r1, r3
 800b70c:	6938      	ldr	r0, [r7, #16]
 800b70e:	f7fe fc92 	bl	800a036 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800b712:	f7fc fe43 	bl	800839c <get_fattime>
 800b716:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	3316      	adds	r3, #22
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	b2d2      	uxtb	r2, r2
 800b720:	701a      	strb	r2, [r3, #0]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	b29b      	uxth	r3, r3
 800b726:	0a1b      	lsrs	r3, r3, #8
 800b728:	b29a      	uxth	r2, r3
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	3317      	adds	r3, #23
 800b72e:	b2d2      	uxtb	r2, r2
 800b730:	701a      	strb	r2, [r3, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	0c1a      	lsrs	r2, r3, #16
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	3318      	adds	r3, #24
 800b73a:	b2d2      	uxtb	r2, r2
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	0e1a      	lsrs	r2, r3, #24
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	3319      	adds	r3, #25
 800b746:	b2d2      	uxtb	r2, r2
 800b748:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	3312      	adds	r3, #18
 800b74e:	2200      	movs	r2, #0
 800b750:	701a      	strb	r2, [r3, #0]
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	3313      	adds	r3, #19
 800b756:	2200      	movs	r2, #0
 800b758:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b760:	f023 0320 	bic.w	r3, r3, #32
 800b764:	b2da      	uxtb	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b772:	2201      	movs	r2, #1
 800b774:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fd fe93 	bl	80094aa <sync_fs>
 800b784:	4603      	mov	r3, r0
 800b786:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800b788:	7dfb      	ldrb	r3, [r7, #23]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b084      	sub	sp, #16
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7ff ff3f 	bl	800b61e <f_sync>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b7a4:	7bfb      	ldrb	r3, [r7, #15]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d116      	bne.n	800b7d8 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7ff f998 	bl	800aae0 <validate>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10e      	bne.n	800b7d8 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fd fd8d 	bl	80092e0 <dec_lock>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d103      	bne.n	800b7d8 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b090      	sub	sp, #64	; 0x40
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff f977 	bl	800aae0 <validate>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b7f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <f_lseek+0x24>
 800b800:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b804:	e247      	b.n	800bc96 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d003      	beq.n	800b818 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800b816:	e23e      	b.n	800bc96 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f000 80f2 	beq.w	800ba08 <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b82a:	d164      	bne.n	800b8f6 <f_lseek+0x114>
			tbl = fp->cltbl;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800b832:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	1d1a      	adds	r2, r3, #4
 800b838:	627a      	str	r2, [r7, #36]	; 0x24
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	617b      	str	r3, [r7, #20]
 800b83e:	2302      	movs	r3, #2
 800b840:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b848:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d041      	beq.n	800b8d4 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b852:	613b      	str	r3, [r7, #16]
 800b854:	2300      	movs	r3, #0
 800b856:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85a:	3302      	adds	r3, #2
 800b85c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800b85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b860:	60fb      	str	r3, [r7, #12]
 800b862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b864:	3301      	adds	r3, #1
 800b866:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b86e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b870:	4618      	mov	r0, r3
 800b872:	f7fd fee9 	bl	8009648 <get_fat>
 800b876:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800b878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d805      	bhi.n	800b88a <f_lseek+0xa8>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2202      	movs	r2, #2
 800b882:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b886:	2302      	movs	r3, #2
 800b888:	e205      	b.n	800bc96 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b890:	d105      	bne.n	800b89e <f_lseek+0xbc>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b89a:	2301      	movs	r3, #1
 800b89c:	e1fb      	b.n	800bc96 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d0da      	beq.n	800b85e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d809      	bhi.n	800b8c4 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	1d1a      	adds	r2, r3, #4
 800b8b4:	627a      	str	r2, [r7, #36]	; 0x24
 800b8b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8b8:	601a      	str	r2, [r3, #0]
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	1d1a      	adds	r2, r3, #4
 800b8be:	627a      	str	r2, [r7, #36]	; 0x24
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b8ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d3bd      	bcc.n	800b850 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800b8da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8dc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800b8de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d803      	bhi.n	800b8ee <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	e1d1      	b.n	800bc92 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b8ee:	2311      	movs	r3, #17
 800b8f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b8f4:	e1cd      	b.n	800bc92 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b8fc:	683a      	ldr	r2, [r7, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d903      	bls.n	800b90a <f_lseek+0x128>
				ofs = fp->fsize;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b908:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	f000 81bc 	beq.w	800bc92 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	4619      	mov	r1, r3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7fe f950 	bl	8009bc6 <clmt_clust>
 800b926:	4602      	mov	r2, r0
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b93a:	4619      	mov	r1, r3
 800b93c:	4610      	mov	r0, r2
 800b93e:	f7fd fe61 	bl	8009604 <clust2sect>
 800b942:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d105      	bne.n	800b956 <f_lseek+0x174>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2202      	movs	r2, #2
 800b94e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b952:	2302      	movs	r3, #2
 800b954:	e19f      	b.n	800bc96 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	3b01      	subs	r3, #1
 800b95a:	0a5b      	lsrs	r3, r3, #9
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800b962:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b966:	3a01      	subs	r2, #1
 800b968:	4013      	ands	r3, r2
 800b96a:	69ba      	ldr	r2, [r7, #24]
 800b96c:	4413      	add	r3, r2
 800b96e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f000 8189 	beq.w	800bc92 <f_lseek+0x4b0>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b986:	69ba      	ldr	r2, [r7, #24]
 800b988:	429a      	cmp	r2, r3
 800b98a:	f000 8182 	beq.w	800bc92 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d01d      	beq.n	800b9d8 <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b9a2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b9a6:	6879      	ldr	r1, [r7, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	f7fd fa92 	bl	8008ed8 <disk_write>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d005      	beq.n	800b9c6 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e167      	b.n	800bc96 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b9cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b9de:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800b9e2:	6879      	ldr	r1, [r7, #4]
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	69ba      	ldr	r2, [r7, #24]
 800b9e8:	f7fd fa56 	bl	8008e98 <disk_read>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d005      	beq.n	800b9fe <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e14b      	b.n	800bc96 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	69ba      	ldr	r2, [r7, #24]
 800ba02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800ba06:	e144      	b.n	800bc92 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ba0e:	683a      	ldr	r2, [r7, #0]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d90a      	bls.n	800ba2a <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ba1a:	f003 0302 	and.w	r3, r3, #2
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d103      	bne.n	800ba2a <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ba28:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ba30:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	637b      	str	r3, [r7, #52]	; 0x34
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f000 80c6 	beq.w	800bbd2 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba4c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ba50:	025b      	lsls	r3, r3, #9
 800ba52:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d01e      	beq.n	800ba98 <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	1e5a      	subs	r2, r3, #1
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	1e59      	subs	r1, r3, #1
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d312      	bcc.n	800ba98 <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	1e5a      	subs	r2, r3, #1
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	425b      	negs	r3, r3
 800ba7a:	401a      	ands	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ba88:	683a      	ldr	r2, [r7, #0]
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba94:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba96:	e029      	b.n	800baec <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ba9e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800baa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d11e      	bne.n	800bae4 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800baac:	2100      	movs	r1, #0
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fd ffec 	bl	8009a8c <create_chain>
 800bab4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d105      	bne.n	800bac8 <f_lseek+0x2e6>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2202      	movs	r2, #2
 800bac0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bac4:	2302      	movs	r3, #2
 800bac6:	e0e6      	b.n	800bc96 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bace:	d105      	bne.n	800badc <f_lseek+0x2fa>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bad8:	2301      	movs	r3, #1
 800bada:	e0dc      	b.n	800bc96 <f_lseek+0x4b4>
					fp->sclust = clst;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bae0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bae8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 800baec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d06f      	beq.n	800bbd2 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 800baf2:	e047      	b.n	800bb84 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bafa:	f003 0302 	and.w	r3, r3, #2
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00d      	beq.n	800bb1e <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fd ffbe 	bl	8009a8c <create_chain>
 800bb10:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800bb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10a      	bne.n	800bb2e <f_lseek+0x34c>
							ofs = bcs; break;
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	603b      	str	r3, [r7, #0]
 800bb1c:	e036      	b.n	800bb8c <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fd fd8e 	bl	8009648 <get_fat>
 800bb2c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb34:	d105      	bne.n	800bb42 <f_lseek+0x360>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2201      	movs	r2, #1
 800bb3a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e0a9      	b.n	800bc96 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d907      	bls.n	800bb58 <f_lseek+0x376>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d305      	bcc.n	800bb64 <f_lseek+0x382>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bb60:	2302      	movs	r3, #2
 800bb62:	e098      	b.n	800bc96 <f_lseek+0x4b4>
					fp->clust = clst;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	441a      	add	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800bb84:	683a      	ldr	r2, [r7, #0]
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d8b3      	bhi.n	800baf4 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	441a      	add	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d015      	beq.n	800bbd2 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fd fd28 	bl	8009604 <clust2sect>
 800bbb4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800bbb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d105      	bne.n	800bbc8 <f_lseek+0x3e6>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	e066      	b.n	800bc96 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	0a5b      	lsrs	r3, r3, #9
 800bbcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbce:	4413      	add	r3, r2
 800bbd0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bbd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d041      	beq.n	800bc64 <f_lseek+0x482>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bbe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d03b      	beq.n	800bc64 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bbf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d01d      	beq.n	800bc36 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc00:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bc04:	6879      	ldr	r1, [r7, #4]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	f7fd f963 	bl	8008ed8 <disk_write>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d005      	beq.n	800bc24 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bc20:	2301      	movs	r3, #1
 800bc22:	e038      	b.n	800bc96 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bc2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc2e:	b2da      	uxtb	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc3c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bc40:	6879      	ldr	r1, [r7, #4]
 800bc42:	2301      	movs	r3, #1
 800bc44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc46:	f7fd f927 	bl	8008e98 <disk_read>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d005      	beq.n	800bc5c <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e01c      	b.n	800bc96 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc60:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d90e      	bls.n	800bc92 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bc86:	f043 0320 	orr.w	r3, r3, #32
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800bc92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3740      	adds	r7, #64	; 0x40
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b08e      	sub	sp, #56	; 0x38
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	60f8      	str	r0, [r7, #12]
 800bca6:	60b9      	str	r1, [r7, #8]
 800bca8:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800bcaa:	f107 030c 	add.w	r3, r7, #12
 800bcae:	2200      	movs	r2, #0
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7fe fc4a 	bl	800a54c <find_volume>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800bcc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f040 80af 	bne.w	800be2c <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bcda:	3b02      	subs	r3, #2
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d805      	bhi.n	800bcec <f_getfree+0x4e>
			*nclst = fs->free_clust;
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	e09f      	b.n	800be2c <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bcf2:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800bcf8:	7efb      	ldrb	r3, [r7, #27]
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d125      	bne.n	800bd4a <f_getfree+0xac>
				clst = 2;
 800bcfe:	2302      	movs	r3, #2
 800bd00:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800bd02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd04:	69f8      	ldr	r0, [r7, #28]
 800bd06:	f7fd fc9f 	bl	8009648 <get_fat>
 800bd0a:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd12:	d103      	bne.n	800bd1c <f_getfree+0x7e>
 800bd14:	2301      	movs	r3, #1
 800bd16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd1a:	e077      	b.n	800be0c <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d103      	bne.n	800bd2a <f_getfree+0x8c>
 800bd22:	2302      	movs	r3, #2
 800bd24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bd28:	e070      	b.n	800be0c <f_getfree+0x16e>
					if (stat == 0) n++;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d102      	bne.n	800bd36 <f_getfree+0x98>
 800bd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd32:	3301      	adds	r3, #1
 800bd34:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800bd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd38:	3301      	adds	r3, #1
 800bd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d3dc      	bcc.n	800bd02 <f_getfree+0x64>
 800bd48:	e060      	b.n	800be0c <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd50:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800bd58:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd5e:	2300      	movs	r3, #0
 800bd60:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d112      	bne.n	800bd8e <f_getfree+0xf0>
						res = move_window(fs, sect++);
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	62ba      	str	r2, [r7, #40]	; 0x28
 800bd6e:	4619      	mov	r1, r3
 800bd70:	69f8      	ldr	r0, [r7, #28]
 800bd72:	f7fd fb6c 	bl	800944e <move_window>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800bd7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d142      	bne.n	800be0a <f_getfree+0x16c>
						p = fs->win.d8;
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800bd88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd8c:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800bd8e:	7efb      	ldrb	r3, [r7, #27]
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d115      	bne.n	800bdc0 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	3301      	adds	r3, #1
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	021b      	lsls	r3, r3, #8
 800bd9c:	b21a      	sxth	r2, r3
 800bd9e:	6a3b      	ldr	r3, [r7, #32]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	b21b      	sxth	r3, r3
 800bda4:	4313      	orrs	r3, r2
 800bda6:	b21b      	sxth	r3, r3
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d102      	bne.n	800bdb2 <f_getfree+0x114>
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	3301      	adds	r3, #1
 800bdb0:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800bdb2:	6a3b      	ldr	r3, [r7, #32]
 800bdb4:	3302      	adds	r3, #2
 800bdb6:	623b      	str	r3, [r7, #32]
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	3b02      	subs	r3, #2
 800bdbc:	627b      	str	r3, [r7, #36]	; 0x24
 800bdbe:	e01d      	b.n	800bdfc <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800bdc0:	6a3b      	ldr	r3, [r7, #32]
 800bdc2:	3303      	adds	r3, #3
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	061a      	lsls	r2, r3, #24
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	3302      	adds	r3, #2
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	041b      	lsls	r3, r3, #16
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	6a3a      	ldr	r2, [r7, #32]
 800bdd4:	3201      	adds	r2, #1
 800bdd6:	7812      	ldrb	r2, [r2, #0]
 800bdd8:	0212      	lsls	r2, r2, #8
 800bdda:	4313      	orrs	r3, r2
 800bddc:	6a3a      	ldr	r2, [r7, #32]
 800bdde:	7812      	ldrb	r2, [r2, #0]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d102      	bne.n	800bdf0 <f_getfree+0x152>
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	3301      	adds	r3, #1
 800bdee:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	623b      	str	r3, [r7, #32]
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf8:	3b04      	subs	r3, #4
 800bdfa:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800bdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfe:	3b01      	subs	r3, #1
 800be00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1ac      	bne.n	800bd62 <f_getfree+0xc4>
 800be08:	e000      	b.n	800be0c <f_getfree+0x16e>
						if (res != FR_OK) break;
 800be0a:	bf00      	nop
			}
			fs->free_clust = n;
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be10:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800be1a:	f043 0301 	orr.w	r3, r3, #1
 800be1e:	b2da      	uxtb	r2, r3
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be2a:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800be2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800be30:	4618      	mov	r0, r3
 800be32:	3738      	adds	r7, #56	; 0x38
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b088      	sub	sp, #32
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
	int n = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800be4c:	e01b      	b.n	800be86 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800be4e:	f107 0310 	add.w	r3, r7, #16
 800be52:	f107 0114 	add.w	r1, r7, #20
 800be56:	2201      	movs	r2, #1
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7ff f8c8 	bl	800afee <f_read>
		if (rc != 1) break;
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d116      	bne.n	800be92 <f_gets+0x5a>
		c = s[0];
 800be64:	7d3b      	ldrb	r3, [r7, #20]
 800be66:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800be68:	7dfb      	ldrb	r3, [r7, #23]
 800be6a:	2b0d      	cmp	r3, #13
 800be6c:	d100      	bne.n	800be70 <f_gets+0x38>
 800be6e:	e00a      	b.n	800be86 <f_gets+0x4e>
		*p++ = c;
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	1c5a      	adds	r2, r3, #1
 800be74:	61ba      	str	r2, [r7, #24]
 800be76:	7dfa      	ldrb	r2, [r7, #23]
 800be78:	701a      	strb	r2, [r3, #0]
		n++;
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	3301      	adds	r3, #1
 800be7e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800be80:	7dfb      	ldrb	r3, [r7, #23]
 800be82:	2b0a      	cmp	r3, #10
 800be84:	d007      	beq.n	800be96 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	3b01      	subs	r3, #1
 800be8a:	69fa      	ldr	r2, [r7, #28]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	dbde      	blt.n	800be4e <f_gets+0x16>
 800be90:	e002      	b.n	800be98 <f_gets+0x60>
		if (rc != 1) break;
 800be92:	bf00      	nop
 800be94:	e000      	b.n	800be98 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800be96:	bf00      	nop
	}
	*p = 0;
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	2200      	movs	r2, #0
 800be9c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <f_gets+0x70>
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	e000      	b.n	800beaa <f_gets+0x72>
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3720      	adds	r7, #32
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
	...

0800beb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b087      	sub	sp, #28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	4613      	mov	r3, r2
 800bec0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bec2:	2301      	movs	r3, #1
 800bec4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800beca:	4b1f      	ldr	r3, [pc, #124]	; (800bf48 <FATFS_LinkDriverEx+0x94>)
 800becc:	7a5b      	ldrb	r3, [r3, #9]
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d831      	bhi.n	800bf38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bed4:	4b1c      	ldr	r3, [pc, #112]	; (800bf48 <FATFS_LinkDriverEx+0x94>)
 800bed6:	7a5b      	ldrb	r3, [r3, #9]
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	461a      	mov	r2, r3
 800bedc:	4b1a      	ldr	r3, [pc, #104]	; (800bf48 <FATFS_LinkDriverEx+0x94>)
 800bede:	2100      	movs	r1, #0
 800bee0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800bee2:	4b19      	ldr	r3, [pc, #100]	; (800bf48 <FATFS_LinkDriverEx+0x94>)
 800bee4:	7a5b      	ldrb	r3, [r3, #9]
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	4a17      	ldr	r2, [pc, #92]	; (800bf48 <FATFS_LinkDriverEx+0x94>)
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4413      	add	r3, r2
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800bef2:	4b15      	ldr	r3, [pc, #84]	; (800bf48 <FATFS_LinkDriverEx+0x94>)
 800bef4:	7a5b      	ldrb	r3, [r3, #9]
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	461a      	mov	r2, r3
 800befa:	4b13      	ldr	r3, [pc, #76]	; (800bf48 <FATFS_LinkDriverEx+0x94>)
 800befc:	4413      	add	r3, r2
 800befe:	79fa      	ldrb	r2, [r7, #7]
 800bf00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf02:	4b11      	ldr	r3, [pc, #68]	; (800bf48 <FATFS_LinkDriverEx+0x94>)
 800bf04:	7a5b      	ldrb	r3, [r3, #9]
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	1c5a      	adds	r2, r3, #1
 800bf0a:	b2d1      	uxtb	r1, r2
 800bf0c:	4a0e      	ldr	r2, [pc, #56]	; (800bf48 <FATFS_LinkDriverEx+0x94>)
 800bf0e:	7251      	strb	r1, [r2, #9]
 800bf10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf12:	7dbb      	ldrb	r3, [r7, #22]
 800bf14:	3330      	adds	r3, #48	; 0x30
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	223a      	movs	r2, #58	; 0x3a
 800bf22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	3302      	adds	r3, #2
 800bf28:	222f      	movs	r2, #47	; 0x2f
 800bf2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	3303      	adds	r3, #3
 800bf30:	2200      	movs	r2, #0
 800bf32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bf34:	2300      	movs	r3, #0
 800bf36:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	371c      	adds	r7, #28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	20000338 	.word	0x20000338

0800bf4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bf56:	2200      	movs	r2, #0
 800bf58:	6839      	ldr	r1, [r7, #0]
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7ff ffaa 	bl	800beb4 <FATFS_LinkDriverEx>
 800bf60:	4603      	mov	r3, r0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
	...

0800bf6c <__assert_func>:
 800bf6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf6e:	4614      	mov	r4, r2
 800bf70:	461a      	mov	r2, r3
 800bf72:	4b09      	ldr	r3, [pc, #36]	; (800bf98 <__assert_func+0x2c>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4605      	mov	r5, r0
 800bf78:	68d8      	ldr	r0, [r3, #12]
 800bf7a:	b14c      	cbz	r4, 800bf90 <__assert_func+0x24>
 800bf7c:	4b07      	ldr	r3, [pc, #28]	; (800bf9c <__assert_func+0x30>)
 800bf7e:	9100      	str	r1, [sp, #0]
 800bf80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf84:	4906      	ldr	r1, [pc, #24]	; (800bfa0 <__assert_func+0x34>)
 800bf86:	462b      	mov	r3, r5
 800bf88:	f000 f818 	bl	800bfbc <fiprintf>
 800bf8c:	f001 f8cc 	bl	800d128 <abort>
 800bf90:	4b04      	ldr	r3, [pc, #16]	; (800bfa4 <__assert_func+0x38>)
 800bf92:	461c      	mov	r4, r3
 800bf94:	e7f3      	b.n	800bf7e <__assert_func+0x12>
 800bf96:	bf00      	nop
 800bf98:	20000024 	.word	0x20000024
 800bf9c:	0800f428 	.word	0x0800f428
 800bfa0:	0800f435 	.word	0x0800f435
 800bfa4:	0800f463 	.word	0x0800f463

0800bfa8 <atoi>:
 800bfa8:	220a      	movs	r2, #10
 800bfaa:	2100      	movs	r1, #0
 800bfac:	f000 bfb8 	b.w	800cf20 <strtol>

0800bfb0 <__errno>:
 800bfb0:	4b01      	ldr	r3, [pc, #4]	; (800bfb8 <__errno+0x8>)
 800bfb2:	6818      	ldr	r0, [r3, #0]
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	20000024 	.word	0x20000024

0800bfbc <fiprintf>:
 800bfbc:	b40e      	push	{r1, r2, r3}
 800bfbe:	b503      	push	{r0, r1, lr}
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	ab03      	add	r3, sp, #12
 800bfc4:	4805      	ldr	r0, [pc, #20]	; (800bfdc <fiprintf+0x20>)
 800bfc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfca:	6800      	ldr	r0, [r0, #0]
 800bfcc:	9301      	str	r3, [sp, #4]
 800bfce:	f000 f91d 	bl	800c20c <_vfiprintf_r>
 800bfd2:	b002      	add	sp, #8
 800bfd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfd8:	b003      	add	sp, #12
 800bfda:	4770      	bx	lr
 800bfdc:	20000024 	.word	0x20000024

0800bfe0 <__libc_init_array>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	4d0d      	ldr	r5, [pc, #52]	; (800c018 <__libc_init_array+0x38>)
 800bfe4:	4c0d      	ldr	r4, [pc, #52]	; (800c01c <__libc_init_array+0x3c>)
 800bfe6:	1b64      	subs	r4, r4, r5
 800bfe8:	10a4      	asrs	r4, r4, #2
 800bfea:	2600      	movs	r6, #0
 800bfec:	42a6      	cmp	r6, r4
 800bfee:	d109      	bne.n	800c004 <__libc_init_array+0x24>
 800bff0:	4d0b      	ldr	r5, [pc, #44]	; (800c020 <__libc_init_array+0x40>)
 800bff2:	4c0c      	ldr	r4, [pc, #48]	; (800c024 <__libc_init_array+0x44>)
 800bff4:	f002 ff88 	bl	800ef08 <_init>
 800bff8:	1b64      	subs	r4, r4, r5
 800bffa:	10a4      	asrs	r4, r4, #2
 800bffc:	2600      	movs	r6, #0
 800bffe:	42a6      	cmp	r6, r4
 800c000:	d105      	bne.n	800c00e <__libc_init_array+0x2e>
 800c002:	bd70      	pop	{r4, r5, r6, pc}
 800c004:	f855 3b04 	ldr.w	r3, [r5], #4
 800c008:	4798      	blx	r3
 800c00a:	3601      	adds	r6, #1
 800c00c:	e7ee      	b.n	800bfec <__libc_init_array+0xc>
 800c00e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c012:	4798      	blx	r3
 800c014:	3601      	adds	r6, #1
 800c016:	e7f2      	b.n	800bffe <__libc_init_array+0x1e>
 800c018:	0800f810 	.word	0x0800f810
 800c01c:	0800f810 	.word	0x0800f810
 800c020:	0800f810 	.word	0x0800f810
 800c024:	0800f814 	.word	0x0800f814

0800c028 <malloc>:
 800c028:	4b02      	ldr	r3, [pc, #8]	; (800c034 <malloc+0xc>)
 800c02a:	4601      	mov	r1, r0
 800c02c:	6818      	ldr	r0, [r3, #0]
 800c02e:	f000 b869 	b.w	800c104 <_malloc_r>
 800c032:	bf00      	nop
 800c034:	20000024 	.word	0x20000024

0800c038 <memcpy>:
 800c038:	440a      	add	r2, r1
 800c03a:	4291      	cmp	r1, r2
 800c03c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c040:	d100      	bne.n	800c044 <memcpy+0xc>
 800c042:	4770      	bx	lr
 800c044:	b510      	push	{r4, lr}
 800c046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c04a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c04e:	4291      	cmp	r1, r2
 800c050:	d1f9      	bne.n	800c046 <memcpy+0xe>
 800c052:	bd10      	pop	{r4, pc}

0800c054 <memset>:
 800c054:	4402      	add	r2, r0
 800c056:	4603      	mov	r3, r0
 800c058:	4293      	cmp	r3, r2
 800c05a:	d100      	bne.n	800c05e <memset+0xa>
 800c05c:	4770      	bx	lr
 800c05e:	f803 1b01 	strb.w	r1, [r3], #1
 800c062:	e7f9      	b.n	800c058 <memset+0x4>

0800c064 <_free_r>:
 800c064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c066:	2900      	cmp	r1, #0
 800c068:	d048      	beq.n	800c0fc <_free_r+0x98>
 800c06a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c06e:	9001      	str	r0, [sp, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	f1a1 0404 	sub.w	r4, r1, #4
 800c076:	bfb8      	it	lt
 800c078:	18e4      	addlt	r4, r4, r3
 800c07a:	f002 f913 	bl	800e2a4 <__malloc_lock>
 800c07e:	4a20      	ldr	r2, [pc, #128]	; (800c100 <_free_r+0x9c>)
 800c080:	9801      	ldr	r0, [sp, #4]
 800c082:	6813      	ldr	r3, [r2, #0]
 800c084:	4615      	mov	r5, r2
 800c086:	b933      	cbnz	r3, 800c096 <_free_r+0x32>
 800c088:	6063      	str	r3, [r4, #4]
 800c08a:	6014      	str	r4, [r2, #0]
 800c08c:	b003      	add	sp, #12
 800c08e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c092:	f002 b90d 	b.w	800e2b0 <__malloc_unlock>
 800c096:	42a3      	cmp	r3, r4
 800c098:	d90b      	bls.n	800c0b2 <_free_r+0x4e>
 800c09a:	6821      	ldr	r1, [r4, #0]
 800c09c:	1862      	adds	r2, r4, r1
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	bf04      	itt	eq
 800c0a2:	681a      	ldreq	r2, [r3, #0]
 800c0a4:	685b      	ldreq	r3, [r3, #4]
 800c0a6:	6063      	str	r3, [r4, #4]
 800c0a8:	bf04      	itt	eq
 800c0aa:	1852      	addeq	r2, r2, r1
 800c0ac:	6022      	streq	r2, [r4, #0]
 800c0ae:	602c      	str	r4, [r5, #0]
 800c0b0:	e7ec      	b.n	800c08c <_free_r+0x28>
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	b10b      	cbz	r3, 800c0bc <_free_r+0x58>
 800c0b8:	42a3      	cmp	r3, r4
 800c0ba:	d9fa      	bls.n	800c0b2 <_free_r+0x4e>
 800c0bc:	6811      	ldr	r1, [r2, #0]
 800c0be:	1855      	adds	r5, r2, r1
 800c0c0:	42a5      	cmp	r5, r4
 800c0c2:	d10b      	bne.n	800c0dc <_free_r+0x78>
 800c0c4:	6824      	ldr	r4, [r4, #0]
 800c0c6:	4421      	add	r1, r4
 800c0c8:	1854      	adds	r4, r2, r1
 800c0ca:	42a3      	cmp	r3, r4
 800c0cc:	6011      	str	r1, [r2, #0]
 800c0ce:	d1dd      	bne.n	800c08c <_free_r+0x28>
 800c0d0:	681c      	ldr	r4, [r3, #0]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	6053      	str	r3, [r2, #4]
 800c0d6:	4421      	add	r1, r4
 800c0d8:	6011      	str	r1, [r2, #0]
 800c0da:	e7d7      	b.n	800c08c <_free_r+0x28>
 800c0dc:	d902      	bls.n	800c0e4 <_free_r+0x80>
 800c0de:	230c      	movs	r3, #12
 800c0e0:	6003      	str	r3, [r0, #0]
 800c0e2:	e7d3      	b.n	800c08c <_free_r+0x28>
 800c0e4:	6825      	ldr	r5, [r4, #0]
 800c0e6:	1961      	adds	r1, r4, r5
 800c0e8:	428b      	cmp	r3, r1
 800c0ea:	bf04      	itt	eq
 800c0ec:	6819      	ldreq	r1, [r3, #0]
 800c0ee:	685b      	ldreq	r3, [r3, #4]
 800c0f0:	6063      	str	r3, [r4, #4]
 800c0f2:	bf04      	itt	eq
 800c0f4:	1949      	addeq	r1, r1, r5
 800c0f6:	6021      	streq	r1, [r4, #0]
 800c0f8:	6054      	str	r4, [r2, #4]
 800c0fa:	e7c7      	b.n	800c08c <_free_r+0x28>
 800c0fc:	b003      	add	sp, #12
 800c0fe:	bd30      	pop	{r4, r5, pc}
 800c100:	20000344 	.word	0x20000344

0800c104 <_malloc_r>:
 800c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c106:	1ccd      	adds	r5, r1, #3
 800c108:	f025 0503 	bic.w	r5, r5, #3
 800c10c:	3508      	adds	r5, #8
 800c10e:	2d0c      	cmp	r5, #12
 800c110:	bf38      	it	cc
 800c112:	250c      	movcc	r5, #12
 800c114:	2d00      	cmp	r5, #0
 800c116:	4606      	mov	r6, r0
 800c118:	db01      	blt.n	800c11e <_malloc_r+0x1a>
 800c11a:	42a9      	cmp	r1, r5
 800c11c:	d903      	bls.n	800c126 <_malloc_r+0x22>
 800c11e:	230c      	movs	r3, #12
 800c120:	6033      	str	r3, [r6, #0]
 800c122:	2000      	movs	r0, #0
 800c124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c126:	f002 f8bd 	bl	800e2a4 <__malloc_lock>
 800c12a:	4921      	ldr	r1, [pc, #132]	; (800c1b0 <_malloc_r+0xac>)
 800c12c:	680a      	ldr	r2, [r1, #0]
 800c12e:	4614      	mov	r4, r2
 800c130:	b99c      	cbnz	r4, 800c15a <_malloc_r+0x56>
 800c132:	4f20      	ldr	r7, [pc, #128]	; (800c1b4 <_malloc_r+0xb0>)
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	b923      	cbnz	r3, 800c142 <_malloc_r+0x3e>
 800c138:	4621      	mov	r1, r4
 800c13a:	4630      	mov	r0, r6
 800c13c:	f000 fe00 	bl	800cd40 <_sbrk_r>
 800c140:	6038      	str	r0, [r7, #0]
 800c142:	4629      	mov	r1, r5
 800c144:	4630      	mov	r0, r6
 800c146:	f000 fdfb 	bl	800cd40 <_sbrk_r>
 800c14a:	1c43      	adds	r3, r0, #1
 800c14c:	d123      	bne.n	800c196 <_malloc_r+0x92>
 800c14e:	230c      	movs	r3, #12
 800c150:	6033      	str	r3, [r6, #0]
 800c152:	4630      	mov	r0, r6
 800c154:	f002 f8ac 	bl	800e2b0 <__malloc_unlock>
 800c158:	e7e3      	b.n	800c122 <_malloc_r+0x1e>
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	1b5b      	subs	r3, r3, r5
 800c15e:	d417      	bmi.n	800c190 <_malloc_r+0x8c>
 800c160:	2b0b      	cmp	r3, #11
 800c162:	d903      	bls.n	800c16c <_malloc_r+0x68>
 800c164:	6023      	str	r3, [r4, #0]
 800c166:	441c      	add	r4, r3
 800c168:	6025      	str	r5, [r4, #0]
 800c16a:	e004      	b.n	800c176 <_malloc_r+0x72>
 800c16c:	6863      	ldr	r3, [r4, #4]
 800c16e:	42a2      	cmp	r2, r4
 800c170:	bf0c      	ite	eq
 800c172:	600b      	streq	r3, [r1, #0]
 800c174:	6053      	strne	r3, [r2, #4]
 800c176:	4630      	mov	r0, r6
 800c178:	f002 f89a 	bl	800e2b0 <__malloc_unlock>
 800c17c:	f104 000b 	add.w	r0, r4, #11
 800c180:	1d23      	adds	r3, r4, #4
 800c182:	f020 0007 	bic.w	r0, r0, #7
 800c186:	1ac2      	subs	r2, r0, r3
 800c188:	d0cc      	beq.n	800c124 <_malloc_r+0x20>
 800c18a:	1a1b      	subs	r3, r3, r0
 800c18c:	50a3      	str	r3, [r4, r2]
 800c18e:	e7c9      	b.n	800c124 <_malloc_r+0x20>
 800c190:	4622      	mov	r2, r4
 800c192:	6864      	ldr	r4, [r4, #4]
 800c194:	e7cc      	b.n	800c130 <_malloc_r+0x2c>
 800c196:	1cc4      	adds	r4, r0, #3
 800c198:	f024 0403 	bic.w	r4, r4, #3
 800c19c:	42a0      	cmp	r0, r4
 800c19e:	d0e3      	beq.n	800c168 <_malloc_r+0x64>
 800c1a0:	1a21      	subs	r1, r4, r0
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	f000 fdcc 	bl	800cd40 <_sbrk_r>
 800c1a8:	3001      	adds	r0, #1
 800c1aa:	d1dd      	bne.n	800c168 <_malloc_r+0x64>
 800c1ac:	e7cf      	b.n	800c14e <_malloc_r+0x4a>
 800c1ae:	bf00      	nop
 800c1b0:	20000344 	.word	0x20000344
 800c1b4:	20000348 	.word	0x20000348

0800c1b8 <__sfputc_r>:
 800c1b8:	6893      	ldr	r3, [r2, #8]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	b410      	push	{r4}
 800c1c0:	6093      	str	r3, [r2, #8]
 800c1c2:	da08      	bge.n	800c1d6 <__sfputc_r+0x1e>
 800c1c4:	6994      	ldr	r4, [r2, #24]
 800c1c6:	42a3      	cmp	r3, r4
 800c1c8:	db01      	blt.n	800c1ce <__sfputc_r+0x16>
 800c1ca:	290a      	cmp	r1, #10
 800c1cc:	d103      	bne.n	800c1d6 <__sfputc_r+0x1e>
 800c1ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1d2:	f000 bee9 	b.w	800cfa8 <__swbuf_r>
 800c1d6:	6813      	ldr	r3, [r2, #0]
 800c1d8:	1c58      	adds	r0, r3, #1
 800c1da:	6010      	str	r0, [r2, #0]
 800c1dc:	7019      	strb	r1, [r3, #0]
 800c1de:	4608      	mov	r0, r1
 800c1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <__sfputs_r>:
 800c1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e8:	4606      	mov	r6, r0
 800c1ea:	460f      	mov	r7, r1
 800c1ec:	4614      	mov	r4, r2
 800c1ee:	18d5      	adds	r5, r2, r3
 800c1f0:	42ac      	cmp	r4, r5
 800c1f2:	d101      	bne.n	800c1f8 <__sfputs_r+0x12>
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	e007      	b.n	800c208 <__sfputs_r+0x22>
 800c1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1fc:	463a      	mov	r2, r7
 800c1fe:	4630      	mov	r0, r6
 800c200:	f7ff ffda 	bl	800c1b8 <__sfputc_r>
 800c204:	1c43      	adds	r3, r0, #1
 800c206:	d1f3      	bne.n	800c1f0 <__sfputs_r+0xa>
 800c208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c20c <_vfiprintf_r>:
 800c20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c210:	460d      	mov	r5, r1
 800c212:	b09d      	sub	sp, #116	; 0x74
 800c214:	4614      	mov	r4, r2
 800c216:	4698      	mov	r8, r3
 800c218:	4606      	mov	r6, r0
 800c21a:	b118      	cbz	r0, 800c224 <_vfiprintf_r+0x18>
 800c21c:	6983      	ldr	r3, [r0, #24]
 800c21e:	b90b      	cbnz	r3, 800c224 <_vfiprintf_r+0x18>
 800c220:	f001 ff1c 	bl	800e05c <__sinit>
 800c224:	4b89      	ldr	r3, [pc, #548]	; (800c44c <_vfiprintf_r+0x240>)
 800c226:	429d      	cmp	r5, r3
 800c228:	d11b      	bne.n	800c262 <_vfiprintf_r+0x56>
 800c22a:	6875      	ldr	r5, [r6, #4]
 800c22c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c22e:	07d9      	lsls	r1, r3, #31
 800c230:	d405      	bmi.n	800c23e <_vfiprintf_r+0x32>
 800c232:	89ab      	ldrh	r3, [r5, #12]
 800c234:	059a      	lsls	r2, r3, #22
 800c236:	d402      	bmi.n	800c23e <_vfiprintf_r+0x32>
 800c238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c23a:	f001 ffb2 	bl	800e1a2 <__retarget_lock_acquire_recursive>
 800c23e:	89ab      	ldrh	r3, [r5, #12]
 800c240:	071b      	lsls	r3, r3, #28
 800c242:	d501      	bpl.n	800c248 <_vfiprintf_r+0x3c>
 800c244:	692b      	ldr	r3, [r5, #16]
 800c246:	b9eb      	cbnz	r3, 800c284 <_vfiprintf_r+0x78>
 800c248:	4629      	mov	r1, r5
 800c24a:	4630      	mov	r0, r6
 800c24c:	f000 fefe 	bl	800d04c <__swsetup_r>
 800c250:	b1c0      	cbz	r0, 800c284 <_vfiprintf_r+0x78>
 800c252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c254:	07dc      	lsls	r4, r3, #31
 800c256:	d50e      	bpl.n	800c276 <_vfiprintf_r+0x6a>
 800c258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c25c:	b01d      	add	sp, #116	; 0x74
 800c25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c262:	4b7b      	ldr	r3, [pc, #492]	; (800c450 <_vfiprintf_r+0x244>)
 800c264:	429d      	cmp	r5, r3
 800c266:	d101      	bne.n	800c26c <_vfiprintf_r+0x60>
 800c268:	68b5      	ldr	r5, [r6, #8]
 800c26a:	e7df      	b.n	800c22c <_vfiprintf_r+0x20>
 800c26c:	4b79      	ldr	r3, [pc, #484]	; (800c454 <_vfiprintf_r+0x248>)
 800c26e:	429d      	cmp	r5, r3
 800c270:	bf08      	it	eq
 800c272:	68f5      	ldreq	r5, [r6, #12]
 800c274:	e7da      	b.n	800c22c <_vfiprintf_r+0x20>
 800c276:	89ab      	ldrh	r3, [r5, #12]
 800c278:	0598      	lsls	r0, r3, #22
 800c27a:	d4ed      	bmi.n	800c258 <_vfiprintf_r+0x4c>
 800c27c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c27e:	f001 ff91 	bl	800e1a4 <__retarget_lock_release_recursive>
 800c282:	e7e9      	b.n	800c258 <_vfiprintf_r+0x4c>
 800c284:	2300      	movs	r3, #0
 800c286:	9309      	str	r3, [sp, #36]	; 0x24
 800c288:	2320      	movs	r3, #32
 800c28a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c28e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c292:	2330      	movs	r3, #48	; 0x30
 800c294:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c458 <_vfiprintf_r+0x24c>
 800c298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c29c:	f04f 0901 	mov.w	r9, #1
 800c2a0:	4623      	mov	r3, r4
 800c2a2:	469a      	mov	sl, r3
 800c2a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2a8:	b10a      	cbz	r2, 800c2ae <_vfiprintf_r+0xa2>
 800c2aa:	2a25      	cmp	r2, #37	; 0x25
 800c2ac:	d1f9      	bne.n	800c2a2 <_vfiprintf_r+0x96>
 800c2ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c2b2:	d00b      	beq.n	800c2cc <_vfiprintf_r+0xc0>
 800c2b4:	465b      	mov	r3, fp
 800c2b6:	4622      	mov	r2, r4
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	f7ff ff93 	bl	800c1e6 <__sfputs_r>
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	f000 80aa 	beq.w	800c41a <_vfiprintf_r+0x20e>
 800c2c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2c8:	445a      	add	r2, fp
 800c2ca:	9209      	str	r2, [sp, #36]	; 0x24
 800c2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 80a2 	beq.w	800c41a <_vfiprintf_r+0x20e>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2e0:	f10a 0a01 	add.w	sl, sl, #1
 800c2e4:	9304      	str	r3, [sp, #16]
 800c2e6:	9307      	str	r3, [sp, #28]
 800c2e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2ec:	931a      	str	r3, [sp, #104]	; 0x68
 800c2ee:	4654      	mov	r4, sl
 800c2f0:	2205      	movs	r2, #5
 800c2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f6:	4858      	ldr	r0, [pc, #352]	; (800c458 <_vfiprintf_r+0x24c>)
 800c2f8:	f7f3 ff82 	bl	8000200 <memchr>
 800c2fc:	9a04      	ldr	r2, [sp, #16]
 800c2fe:	b9d8      	cbnz	r0, 800c338 <_vfiprintf_r+0x12c>
 800c300:	06d1      	lsls	r1, r2, #27
 800c302:	bf44      	itt	mi
 800c304:	2320      	movmi	r3, #32
 800c306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c30a:	0713      	lsls	r3, r2, #28
 800c30c:	bf44      	itt	mi
 800c30e:	232b      	movmi	r3, #43	; 0x2b
 800c310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c314:	f89a 3000 	ldrb.w	r3, [sl]
 800c318:	2b2a      	cmp	r3, #42	; 0x2a
 800c31a:	d015      	beq.n	800c348 <_vfiprintf_r+0x13c>
 800c31c:	9a07      	ldr	r2, [sp, #28]
 800c31e:	4654      	mov	r4, sl
 800c320:	2000      	movs	r0, #0
 800c322:	f04f 0c0a 	mov.w	ip, #10
 800c326:	4621      	mov	r1, r4
 800c328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c32c:	3b30      	subs	r3, #48	; 0x30
 800c32e:	2b09      	cmp	r3, #9
 800c330:	d94e      	bls.n	800c3d0 <_vfiprintf_r+0x1c4>
 800c332:	b1b0      	cbz	r0, 800c362 <_vfiprintf_r+0x156>
 800c334:	9207      	str	r2, [sp, #28]
 800c336:	e014      	b.n	800c362 <_vfiprintf_r+0x156>
 800c338:	eba0 0308 	sub.w	r3, r0, r8
 800c33c:	fa09 f303 	lsl.w	r3, r9, r3
 800c340:	4313      	orrs	r3, r2
 800c342:	9304      	str	r3, [sp, #16]
 800c344:	46a2      	mov	sl, r4
 800c346:	e7d2      	b.n	800c2ee <_vfiprintf_r+0xe2>
 800c348:	9b03      	ldr	r3, [sp, #12]
 800c34a:	1d19      	adds	r1, r3, #4
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	9103      	str	r1, [sp, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	bfbb      	ittet	lt
 800c354:	425b      	neglt	r3, r3
 800c356:	f042 0202 	orrlt.w	r2, r2, #2
 800c35a:	9307      	strge	r3, [sp, #28]
 800c35c:	9307      	strlt	r3, [sp, #28]
 800c35e:	bfb8      	it	lt
 800c360:	9204      	strlt	r2, [sp, #16]
 800c362:	7823      	ldrb	r3, [r4, #0]
 800c364:	2b2e      	cmp	r3, #46	; 0x2e
 800c366:	d10c      	bne.n	800c382 <_vfiprintf_r+0x176>
 800c368:	7863      	ldrb	r3, [r4, #1]
 800c36a:	2b2a      	cmp	r3, #42	; 0x2a
 800c36c:	d135      	bne.n	800c3da <_vfiprintf_r+0x1ce>
 800c36e:	9b03      	ldr	r3, [sp, #12]
 800c370:	1d1a      	adds	r2, r3, #4
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	9203      	str	r2, [sp, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	bfb8      	it	lt
 800c37a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c37e:	3402      	adds	r4, #2
 800c380:	9305      	str	r3, [sp, #20]
 800c382:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c468 <_vfiprintf_r+0x25c>
 800c386:	7821      	ldrb	r1, [r4, #0]
 800c388:	2203      	movs	r2, #3
 800c38a:	4650      	mov	r0, sl
 800c38c:	f7f3 ff38 	bl	8000200 <memchr>
 800c390:	b140      	cbz	r0, 800c3a4 <_vfiprintf_r+0x198>
 800c392:	2340      	movs	r3, #64	; 0x40
 800c394:	eba0 000a 	sub.w	r0, r0, sl
 800c398:	fa03 f000 	lsl.w	r0, r3, r0
 800c39c:	9b04      	ldr	r3, [sp, #16]
 800c39e:	4303      	orrs	r3, r0
 800c3a0:	3401      	adds	r4, #1
 800c3a2:	9304      	str	r3, [sp, #16]
 800c3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a8:	482c      	ldr	r0, [pc, #176]	; (800c45c <_vfiprintf_r+0x250>)
 800c3aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3ae:	2206      	movs	r2, #6
 800c3b0:	f7f3 ff26 	bl	8000200 <memchr>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d03f      	beq.n	800c438 <_vfiprintf_r+0x22c>
 800c3b8:	4b29      	ldr	r3, [pc, #164]	; (800c460 <_vfiprintf_r+0x254>)
 800c3ba:	bb1b      	cbnz	r3, 800c404 <_vfiprintf_r+0x1f8>
 800c3bc:	9b03      	ldr	r3, [sp, #12]
 800c3be:	3307      	adds	r3, #7
 800c3c0:	f023 0307 	bic.w	r3, r3, #7
 800c3c4:	3308      	adds	r3, #8
 800c3c6:	9303      	str	r3, [sp, #12]
 800c3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ca:	443b      	add	r3, r7
 800c3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ce:	e767      	b.n	800c2a0 <_vfiprintf_r+0x94>
 800c3d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	2001      	movs	r0, #1
 800c3d8:	e7a5      	b.n	800c326 <_vfiprintf_r+0x11a>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	3401      	adds	r4, #1
 800c3de:	9305      	str	r3, [sp, #20]
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	f04f 0c0a 	mov.w	ip, #10
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ec:	3a30      	subs	r2, #48	; 0x30
 800c3ee:	2a09      	cmp	r2, #9
 800c3f0:	d903      	bls.n	800c3fa <_vfiprintf_r+0x1ee>
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d0c5      	beq.n	800c382 <_vfiprintf_r+0x176>
 800c3f6:	9105      	str	r1, [sp, #20]
 800c3f8:	e7c3      	b.n	800c382 <_vfiprintf_r+0x176>
 800c3fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3fe:	4604      	mov	r4, r0
 800c400:	2301      	movs	r3, #1
 800c402:	e7f0      	b.n	800c3e6 <_vfiprintf_r+0x1da>
 800c404:	ab03      	add	r3, sp, #12
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	462a      	mov	r2, r5
 800c40a:	4b16      	ldr	r3, [pc, #88]	; (800c464 <_vfiprintf_r+0x258>)
 800c40c:	a904      	add	r1, sp, #16
 800c40e:	4630      	mov	r0, r6
 800c410:	f000 f8cc 	bl	800c5ac <_printf_float>
 800c414:	4607      	mov	r7, r0
 800c416:	1c78      	adds	r0, r7, #1
 800c418:	d1d6      	bne.n	800c3c8 <_vfiprintf_r+0x1bc>
 800c41a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c41c:	07d9      	lsls	r1, r3, #31
 800c41e:	d405      	bmi.n	800c42c <_vfiprintf_r+0x220>
 800c420:	89ab      	ldrh	r3, [r5, #12]
 800c422:	059a      	lsls	r2, r3, #22
 800c424:	d402      	bmi.n	800c42c <_vfiprintf_r+0x220>
 800c426:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c428:	f001 febc 	bl	800e1a4 <__retarget_lock_release_recursive>
 800c42c:	89ab      	ldrh	r3, [r5, #12]
 800c42e:	065b      	lsls	r3, r3, #25
 800c430:	f53f af12 	bmi.w	800c258 <_vfiprintf_r+0x4c>
 800c434:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c436:	e711      	b.n	800c25c <_vfiprintf_r+0x50>
 800c438:	ab03      	add	r3, sp, #12
 800c43a:	9300      	str	r3, [sp, #0]
 800c43c:	462a      	mov	r2, r5
 800c43e:	4b09      	ldr	r3, [pc, #36]	; (800c464 <_vfiprintf_r+0x258>)
 800c440:	a904      	add	r1, sp, #16
 800c442:	4630      	mov	r0, r6
 800c444:	f000 fb56 	bl	800caf4 <_printf_i>
 800c448:	e7e4      	b.n	800c414 <_vfiprintf_r+0x208>
 800c44a:	bf00      	nop
 800c44c:	0800f664 	.word	0x0800f664
 800c450:	0800f684 	.word	0x0800f684
 800c454:	0800f644 	.word	0x0800f644
 800c458:	0800f468 	.word	0x0800f468
 800c45c:	0800f472 	.word	0x0800f472
 800c460:	0800c5ad 	.word	0x0800c5ad
 800c464:	0800c1e7 	.word	0x0800c1e7
 800c468:	0800f46e 	.word	0x0800f46e

0800c46c <__cvt>:
 800c46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c470:	ec55 4b10 	vmov	r4, r5, d0
 800c474:	2d00      	cmp	r5, #0
 800c476:	460e      	mov	r6, r1
 800c478:	4619      	mov	r1, r3
 800c47a:	462b      	mov	r3, r5
 800c47c:	bfbb      	ittet	lt
 800c47e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c482:	461d      	movlt	r5, r3
 800c484:	2300      	movge	r3, #0
 800c486:	232d      	movlt	r3, #45	; 0x2d
 800c488:	700b      	strb	r3, [r1, #0]
 800c48a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c48c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c490:	4691      	mov	r9, r2
 800c492:	f023 0820 	bic.w	r8, r3, #32
 800c496:	bfbc      	itt	lt
 800c498:	4622      	movlt	r2, r4
 800c49a:	4614      	movlt	r4, r2
 800c49c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c4a0:	d005      	beq.n	800c4ae <__cvt+0x42>
 800c4a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c4a6:	d100      	bne.n	800c4aa <__cvt+0x3e>
 800c4a8:	3601      	adds	r6, #1
 800c4aa:	2102      	movs	r1, #2
 800c4ac:	e000      	b.n	800c4b0 <__cvt+0x44>
 800c4ae:	2103      	movs	r1, #3
 800c4b0:	ab03      	add	r3, sp, #12
 800c4b2:	9301      	str	r3, [sp, #4]
 800c4b4:	ab02      	add	r3, sp, #8
 800c4b6:	9300      	str	r3, [sp, #0]
 800c4b8:	ec45 4b10 	vmov	d0, r4, r5
 800c4bc:	4653      	mov	r3, sl
 800c4be:	4632      	mov	r2, r6
 800c4c0:	f000 fec6 	bl	800d250 <_dtoa_r>
 800c4c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c4c8:	4607      	mov	r7, r0
 800c4ca:	d102      	bne.n	800c4d2 <__cvt+0x66>
 800c4cc:	f019 0f01 	tst.w	r9, #1
 800c4d0:	d022      	beq.n	800c518 <__cvt+0xac>
 800c4d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c4d6:	eb07 0906 	add.w	r9, r7, r6
 800c4da:	d110      	bne.n	800c4fe <__cvt+0x92>
 800c4dc:	783b      	ldrb	r3, [r7, #0]
 800c4de:	2b30      	cmp	r3, #48	; 0x30
 800c4e0:	d10a      	bne.n	800c4f8 <__cvt+0x8c>
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	f7f4 fafd 	bl	8000ae8 <__aeabi_dcmpeq>
 800c4ee:	b918      	cbnz	r0, 800c4f8 <__cvt+0x8c>
 800c4f0:	f1c6 0601 	rsb	r6, r6, #1
 800c4f4:	f8ca 6000 	str.w	r6, [sl]
 800c4f8:	f8da 3000 	ldr.w	r3, [sl]
 800c4fc:	4499      	add	r9, r3
 800c4fe:	2200      	movs	r2, #0
 800c500:	2300      	movs	r3, #0
 800c502:	4620      	mov	r0, r4
 800c504:	4629      	mov	r1, r5
 800c506:	f7f4 faef 	bl	8000ae8 <__aeabi_dcmpeq>
 800c50a:	b108      	cbz	r0, 800c510 <__cvt+0xa4>
 800c50c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c510:	2230      	movs	r2, #48	; 0x30
 800c512:	9b03      	ldr	r3, [sp, #12]
 800c514:	454b      	cmp	r3, r9
 800c516:	d307      	bcc.n	800c528 <__cvt+0xbc>
 800c518:	9b03      	ldr	r3, [sp, #12]
 800c51a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c51c:	1bdb      	subs	r3, r3, r7
 800c51e:	4638      	mov	r0, r7
 800c520:	6013      	str	r3, [r2, #0]
 800c522:	b004      	add	sp, #16
 800c524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c528:	1c59      	adds	r1, r3, #1
 800c52a:	9103      	str	r1, [sp, #12]
 800c52c:	701a      	strb	r2, [r3, #0]
 800c52e:	e7f0      	b.n	800c512 <__cvt+0xa6>

0800c530 <__exponent>:
 800c530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c532:	4603      	mov	r3, r0
 800c534:	2900      	cmp	r1, #0
 800c536:	bfb8      	it	lt
 800c538:	4249      	neglt	r1, r1
 800c53a:	f803 2b02 	strb.w	r2, [r3], #2
 800c53e:	bfb4      	ite	lt
 800c540:	222d      	movlt	r2, #45	; 0x2d
 800c542:	222b      	movge	r2, #43	; 0x2b
 800c544:	2909      	cmp	r1, #9
 800c546:	7042      	strb	r2, [r0, #1]
 800c548:	dd2a      	ble.n	800c5a0 <__exponent+0x70>
 800c54a:	f10d 0407 	add.w	r4, sp, #7
 800c54e:	46a4      	mov	ip, r4
 800c550:	270a      	movs	r7, #10
 800c552:	46a6      	mov	lr, r4
 800c554:	460a      	mov	r2, r1
 800c556:	fb91 f6f7 	sdiv	r6, r1, r7
 800c55a:	fb07 1516 	mls	r5, r7, r6, r1
 800c55e:	3530      	adds	r5, #48	; 0x30
 800c560:	2a63      	cmp	r2, #99	; 0x63
 800c562:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c566:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c56a:	4631      	mov	r1, r6
 800c56c:	dcf1      	bgt.n	800c552 <__exponent+0x22>
 800c56e:	3130      	adds	r1, #48	; 0x30
 800c570:	f1ae 0502 	sub.w	r5, lr, #2
 800c574:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c578:	1c44      	adds	r4, r0, #1
 800c57a:	4629      	mov	r1, r5
 800c57c:	4561      	cmp	r1, ip
 800c57e:	d30a      	bcc.n	800c596 <__exponent+0x66>
 800c580:	f10d 0209 	add.w	r2, sp, #9
 800c584:	eba2 020e 	sub.w	r2, r2, lr
 800c588:	4565      	cmp	r5, ip
 800c58a:	bf88      	it	hi
 800c58c:	2200      	movhi	r2, #0
 800c58e:	4413      	add	r3, r2
 800c590:	1a18      	subs	r0, r3, r0
 800c592:	b003      	add	sp, #12
 800c594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c59a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c59e:	e7ed      	b.n	800c57c <__exponent+0x4c>
 800c5a0:	2330      	movs	r3, #48	; 0x30
 800c5a2:	3130      	adds	r1, #48	; 0x30
 800c5a4:	7083      	strb	r3, [r0, #2]
 800c5a6:	70c1      	strb	r1, [r0, #3]
 800c5a8:	1d03      	adds	r3, r0, #4
 800c5aa:	e7f1      	b.n	800c590 <__exponent+0x60>

0800c5ac <_printf_float>:
 800c5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b0:	ed2d 8b02 	vpush	{d8}
 800c5b4:	b08d      	sub	sp, #52	; 0x34
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c5bc:	4616      	mov	r6, r2
 800c5be:	461f      	mov	r7, r3
 800c5c0:	4605      	mov	r5, r0
 800c5c2:	f001 fde9 	bl	800e198 <_localeconv_r>
 800c5c6:	f8d0 a000 	ldr.w	sl, [r0]
 800c5ca:	4650      	mov	r0, sl
 800c5cc:	f7f3 fe0a 	bl	80001e4 <strlen>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	9305      	str	r3, [sp, #20]
 800c5d8:	f8d8 3000 	ldr.w	r3, [r8]
 800c5dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c5e0:	3307      	adds	r3, #7
 800c5e2:	f023 0307 	bic.w	r3, r3, #7
 800c5e6:	f103 0208 	add.w	r2, r3, #8
 800c5ea:	f8c8 2000 	str.w	r2, [r8]
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c5f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c5fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c5fe:	9307      	str	r3, [sp, #28]
 800c600:	f8cd 8018 	str.w	r8, [sp, #24]
 800c604:	ee08 0a10 	vmov	s16, r0
 800c608:	4b9f      	ldr	r3, [pc, #636]	; (800c888 <_printf_float+0x2dc>)
 800c60a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c60e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c612:	f7f4 fa9b 	bl	8000b4c <__aeabi_dcmpun>
 800c616:	bb88      	cbnz	r0, 800c67c <_printf_float+0xd0>
 800c618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c61c:	4b9a      	ldr	r3, [pc, #616]	; (800c888 <_printf_float+0x2dc>)
 800c61e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c622:	f7f4 fa75 	bl	8000b10 <__aeabi_dcmple>
 800c626:	bb48      	cbnz	r0, 800c67c <_printf_float+0xd0>
 800c628:	2200      	movs	r2, #0
 800c62a:	2300      	movs	r3, #0
 800c62c:	4640      	mov	r0, r8
 800c62e:	4649      	mov	r1, r9
 800c630:	f7f4 fa64 	bl	8000afc <__aeabi_dcmplt>
 800c634:	b110      	cbz	r0, 800c63c <_printf_float+0x90>
 800c636:	232d      	movs	r3, #45	; 0x2d
 800c638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c63c:	4b93      	ldr	r3, [pc, #588]	; (800c88c <_printf_float+0x2e0>)
 800c63e:	4894      	ldr	r0, [pc, #592]	; (800c890 <_printf_float+0x2e4>)
 800c640:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c644:	bf94      	ite	ls
 800c646:	4698      	movls	r8, r3
 800c648:	4680      	movhi	r8, r0
 800c64a:	2303      	movs	r3, #3
 800c64c:	6123      	str	r3, [r4, #16]
 800c64e:	9b05      	ldr	r3, [sp, #20]
 800c650:	f023 0204 	bic.w	r2, r3, #4
 800c654:	6022      	str	r2, [r4, #0]
 800c656:	f04f 0900 	mov.w	r9, #0
 800c65a:	9700      	str	r7, [sp, #0]
 800c65c:	4633      	mov	r3, r6
 800c65e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c660:	4621      	mov	r1, r4
 800c662:	4628      	mov	r0, r5
 800c664:	f000 f9d8 	bl	800ca18 <_printf_common>
 800c668:	3001      	adds	r0, #1
 800c66a:	f040 8090 	bne.w	800c78e <_printf_float+0x1e2>
 800c66e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c672:	b00d      	add	sp, #52	; 0x34
 800c674:	ecbd 8b02 	vpop	{d8}
 800c678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67c:	4642      	mov	r2, r8
 800c67e:	464b      	mov	r3, r9
 800c680:	4640      	mov	r0, r8
 800c682:	4649      	mov	r1, r9
 800c684:	f7f4 fa62 	bl	8000b4c <__aeabi_dcmpun>
 800c688:	b140      	cbz	r0, 800c69c <_printf_float+0xf0>
 800c68a:	464b      	mov	r3, r9
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	bfbc      	itt	lt
 800c690:	232d      	movlt	r3, #45	; 0x2d
 800c692:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c696:	487f      	ldr	r0, [pc, #508]	; (800c894 <_printf_float+0x2e8>)
 800c698:	4b7f      	ldr	r3, [pc, #508]	; (800c898 <_printf_float+0x2ec>)
 800c69a:	e7d1      	b.n	800c640 <_printf_float+0x94>
 800c69c:	6863      	ldr	r3, [r4, #4]
 800c69e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c6a2:	9206      	str	r2, [sp, #24]
 800c6a4:	1c5a      	adds	r2, r3, #1
 800c6a6:	d13f      	bne.n	800c728 <_printf_float+0x17c>
 800c6a8:	2306      	movs	r3, #6
 800c6aa:	6063      	str	r3, [r4, #4]
 800c6ac:	9b05      	ldr	r3, [sp, #20]
 800c6ae:	6861      	ldr	r1, [r4, #4]
 800c6b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	9303      	str	r3, [sp, #12]
 800c6b8:	ab0a      	add	r3, sp, #40	; 0x28
 800c6ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c6be:	ab09      	add	r3, sp, #36	; 0x24
 800c6c0:	ec49 8b10 	vmov	d0, r8, r9
 800c6c4:	9300      	str	r3, [sp, #0]
 800c6c6:	6022      	str	r2, [r4, #0]
 800c6c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	f7ff fecd 	bl	800c46c <__cvt>
 800c6d2:	9b06      	ldr	r3, [sp, #24]
 800c6d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6d6:	2b47      	cmp	r3, #71	; 0x47
 800c6d8:	4680      	mov	r8, r0
 800c6da:	d108      	bne.n	800c6ee <_printf_float+0x142>
 800c6dc:	1cc8      	adds	r0, r1, #3
 800c6de:	db02      	blt.n	800c6e6 <_printf_float+0x13a>
 800c6e0:	6863      	ldr	r3, [r4, #4]
 800c6e2:	4299      	cmp	r1, r3
 800c6e4:	dd41      	ble.n	800c76a <_printf_float+0x1be>
 800c6e6:	f1ab 0b02 	sub.w	fp, fp, #2
 800c6ea:	fa5f fb8b 	uxtb.w	fp, fp
 800c6ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c6f2:	d820      	bhi.n	800c736 <_printf_float+0x18a>
 800c6f4:	3901      	subs	r1, #1
 800c6f6:	465a      	mov	r2, fp
 800c6f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c6fc:	9109      	str	r1, [sp, #36]	; 0x24
 800c6fe:	f7ff ff17 	bl	800c530 <__exponent>
 800c702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c704:	1813      	adds	r3, r2, r0
 800c706:	2a01      	cmp	r2, #1
 800c708:	4681      	mov	r9, r0
 800c70a:	6123      	str	r3, [r4, #16]
 800c70c:	dc02      	bgt.n	800c714 <_printf_float+0x168>
 800c70e:	6822      	ldr	r2, [r4, #0]
 800c710:	07d2      	lsls	r2, r2, #31
 800c712:	d501      	bpl.n	800c718 <_printf_float+0x16c>
 800c714:	3301      	adds	r3, #1
 800c716:	6123      	str	r3, [r4, #16]
 800c718:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d09c      	beq.n	800c65a <_printf_float+0xae>
 800c720:	232d      	movs	r3, #45	; 0x2d
 800c722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c726:	e798      	b.n	800c65a <_printf_float+0xae>
 800c728:	9a06      	ldr	r2, [sp, #24]
 800c72a:	2a47      	cmp	r2, #71	; 0x47
 800c72c:	d1be      	bne.n	800c6ac <_printf_float+0x100>
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1bc      	bne.n	800c6ac <_printf_float+0x100>
 800c732:	2301      	movs	r3, #1
 800c734:	e7b9      	b.n	800c6aa <_printf_float+0xfe>
 800c736:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c73a:	d118      	bne.n	800c76e <_printf_float+0x1c2>
 800c73c:	2900      	cmp	r1, #0
 800c73e:	6863      	ldr	r3, [r4, #4]
 800c740:	dd0b      	ble.n	800c75a <_printf_float+0x1ae>
 800c742:	6121      	str	r1, [r4, #16]
 800c744:	b913      	cbnz	r3, 800c74c <_printf_float+0x1a0>
 800c746:	6822      	ldr	r2, [r4, #0]
 800c748:	07d0      	lsls	r0, r2, #31
 800c74a:	d502      	bpl.n	800c752 <_printf_float+0x1a6>
 800c74c:	3301      	adds	r3, #1
 800c74e:	440b      	add	r3, r1
 800c750:	6123      	str	r3, [r4, #16]
 800c752:	65a1      	str	r1, [r4, #88]	; 0x58
 800c754:	f04f 0900 	mov.w	r9, #0
 800c758:	e7de      	b.n	800c718 <_printf_float+0x16c>
 800c75a:	b913      	cbnz	r3, 800c762 <_printf_float+0x1b6>
 800c75c:	6822      	ldr	r2, [r4, #0]
 800c75e:	07d2      	lsls	r2, r2, #31
 800c760:	d501      	bpl.n	800c766 <_printf_float+0x1ba>
 800c762:	3302      	adds	r3, #2
 800c764:	e7f4      	b.n	800c750 <_printf_float+0x1a4>
 800c766:	2301      	movs	r3, #1
 800c768:	e7f2      	b.n	800c750 <_printf_float+0x1a4>
 800c76a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c770:	4299      	cmp	r1, r3
 800c772:	db05      	blt.n	800c780 <_printf_float+0x1d4>
 800c774:	6823      	ldr	r3, [r4, #0]
 800c776:	6121      	str	r1, [r4, #16]
 800c778:	07d8      	lsls	r0, r3, #31
 800c77a:	d5ea      	bpl.n	800c752 <_printf_float+0x1a6>
 800c77c:	1c4b      	adds	r3, r1, #1
 800c77e:	e7e7      	b.n	800c750 <_printf_float+0x1a4>
 800c780:	2900      	cmp	r1, #0
 800c782:	bfd4      	ite	le
 800c784:	f1c1 0202 	rsble	r2, r1, #2
 800c788:	2201      	movgt	r2, #1
 800c78a:	4413      	add	r3, r2
 800c78c:	e7e0      	b.n	800c750 <_printf_float+0x1a4>
 800c78e:	6823      	ldr	r3, [r4, #0]
 800c790:	055a      	lsls	r2, r3, #21
 800c792:	d407      	bmi.n	800c7a4 <_printf_float+0x1f8>
 800c794:	6923      	ldr	r3, [r4, #16]
 800c796:	4642      	mov	r2, r8
 800c798:	4631      	mov	r1, r6
 800c79a:	4628      	mov	r0, r5
 800c79c:	47b8      	blx	r7
 800c79e:	3001      	adds	r0, #1
 800c7a0:	d12c      	bne.n	800c7fc <_printf_float+0x250>
 800c7a2:	e764      	b.n	800c66e <_printf_float+0xc2>
 800c7a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c7a8:	f240 80e0 	bls.w	800c96c <_printf_float+0x3c0>
 800c7ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f7f4 f998 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	d034      	beq.n	800c826 <_printf_float+0x27a>
 800c7bc:	4a37      	ldr	r2, [pc, #220]	; (800c89c <_printf_float+0x2f0>)
 800c7be:	2301      	movs	r3, #1
 800c7c0:	4631      	mov	r1, r6
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	47b8      	blx	r7
 800c7c6:	3001      	adds	r0, #1
 800c7c8:	f43f af51 	beq.w	800c66e <_printf_float+0xc2>
 800c7cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	db02      	blt.n	800c7da <_printf_float+0x22e>
 800c7d4:	6823      	ldr	r3, [r4, #0]
 800c7d6:	07d8      	lsls	r0, r3, #31
 800c7d8:	d510      	bpl.n	800c7fc <_printf_float+0x250>
 800c7da:	ee18 3a10 	vmov	r3, s16
 800c7de:	4652      	mov	r2, sl
 800c7e0:	4631      	mov	r1, r6
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	47b8      	blx	r7
 800c7e6:	3001      	adds	r0, #1
 800c7e8:	f43f af41 	beq.w	800c66e <_printf_float+0xc2>
 800c7ec:	f04f 0800 	mov.w	r8, #0
 800c7f0:	f104 091a 	add.w	r9, r4, #26
 800c7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	4543      	cmp	r3, r8
 800c7fa:	dc09      	bgt.n	800c810 <_printf_float+0x264>
 800c7fc:	6823      	ldr	r3, [r4, #0]
 800c7fe:	079b      	lsls	r3, r3, #30
 800c800:	f100 8105 	bmi.w	800ca0e <_printf_float+0x462>
 800c804:	68e0      	ldr	r0, [r4, #12]
 800c806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c808:	4298      	cmp	r0, r3
 800c80a:	bfb8      	it	lt
 800c80c:	4618      	movlt	r0, r3
 800c80e:	e730      	b.n	800c672 <_printf_float+0xc6>
 800c810:	2301      	movs	r3, #1
 800c812:	464a      	mov	r2, r9
 800c814:	4631      	mov	r1, r6
 800c816:	4628      	mov	r0, r5
 800c818:	47b8      	blx	r7
 800c81a:	3001      	adds	r0, #1
 800c81c:	f43f af27 	beq.w	800c66e <_printf_float+0xc2>
 800c820:	f108 0801 	add.w	r8, r8, #1
 800c824:	e7e6      	b.n	800c7f4 <_printf_float+0x248>
 800c826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c828:	2b00      	cmp	r3, #0
 800c82a:	dc39      	bgt.n	800c8a0 <_printf_float+0x2f4>
 800c82c:	4a1b      	ldr	r2, [pc, #108]	; (800c89c <_printf_float+0x2f0>)
 800c82e:	2301      	movs	r3, #1
 800c830:	4631      	mov	r1, r6
 800c832:	4628      	mov	r0, r5
 800c834:	47b8      	blx	r7
 800c836:	3001      	adds	r0, #1
 800c838:	f43f af19 	beq.w	800c66e <_printf_float+0xc2>
 800c83c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c840:	4313      	orrs	r3, r2
 800c842:	d102      	bne.n	800c84a <_printf_float+0x29e>
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	07d9      	lsls	r1, r3, #31
 800c848:	d5d8      	bpl.n	800c7fc <_printf_float+0x250>
 800c84a:	ee18 3a10 	vmov	r3, s16
 800c84e:	4652      	mov	r2, sl
 800c850:	4631      	mov	r1, r6
 800c852:	4628      	mov	r0, r5
 800c854:	47b8      	blx	r7
 800c856:	3001      	adds	r0, #1
 800c858:	f43f af09 	beq.w	800c66e <_printf_float+0xc2>
 800c85c:	f04f 0900 	mov.w	r9, #0
 800c860:	f104 0a1a 	add.w	sl, r4, #26
 800c864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c866:	425b      	negs	r3, r3
 800c868:	454b      	cmp	r3, r9
 800c86a:	dc01      	bgt.n	800c870 <_printf_float+0x2c4>
 800c86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c86e:	e792      	b.n	800c796 <_printf_float+0x1ea>
 800c870:	2301      	movs	r3, #1
 800c872:	4652      	mov	r2, sl
 800c874:	4631      	mov	r1, r6
 800c876:	4628      	mov	r0, r5
 800c878:	47b8      	blx	r7
 800c87a:	3001      	adds	r0, #1
 800c87c:	f43f aef7 	beq.w	800c66e <_printf_float+0xc2>
 800c880:	f109 0901 	add.w	r9, r9, #1
 800c884:	e7ee      	b.n	800c864 <_printf_float+0x2b8>
 800c886:	bf00      	nop
 800c888:	7fefffff 	.word	0x7fefffff
 800c88c:	0800f479 	.word	0x0800f479
 800c890:	0800f47d 	.word	0x0800f47d
 800c894:	0800f485 	.word	0x0800f485
 800c898:	0800f481 	.word	0x0800f481
 800c89c:	0800f489 	.word	0x0800f489
 800c8a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	bfa8      	it	ge
 800c8a8:	461a      	movge	r2, r3
 800c8aa:	2a00      	cmp	r2, #0
 800c8ac:	4691      	mov	r9, r2
 800c8ae:	dc37      	bgt.n	800c920 <_printf_float+0x374>
 800c8b0:	f04f 0b00 	mov.w	fp, #0
 800c8b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8b8:	f104 021a 	add.w	r2, r4, #26
 800c8bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8be:	9305      	str	r3, [sp, #20]
 800c8c0:	eba3 0309 	sub.w	r3, r3, r9
 800c8c4:	455b      	cmp	r3, fp
 800c8c6:	dc33      	bgt.n	800c930 <_printf_float+0x384>
 800c8c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	db3b      	blt.n	800c948 <_printf_float+0x39c>
 800c8d0:	6823      	ldr	r3, [r4, #0]
 800c8d2:	07da      	lsls	r2, r3, #31
 800c8d4:	d438      	bmi.n	800c948 <_printf_float+0x39c>
 800c8d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8d8:	9b05      	ldr	r3, [sp, #20]
 800c8da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	eba2 0901 	sub.w	r9, r2, r1
 800c8e2:	4599      	cmp	r9, r3
 800c8e4:	bfa8      	it	ge
 800c8e6:	4699      	movge	r9, r3
 800c8e8:	f1b9 0f00 	cmp.w	r9, #0
 800c8ec:	dc35      	bgt.n	800c95a <_printf_float+0x3ae>
 800c8ee:	f04f 0800 	mov.w	r8, #0
 800c8f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8f6:	f104 0a1a 	add.w	sl, r4, #26
 800c8fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8fe:	1a9b      	subs	r3, r3, r2
 800c900:	eba3 0309 	sub.w	r3, r3, r9
 800c904:	4543      	cmp	r3, r8
 800c906:	f77f af79 	ble.w	800c7fc <_printf_float+0x250>
 800c90a:	2301      	movs	r3, #1
 800c90c:	4652      	mov	r2, sl
 800c90e:	4631      	mov	r1, r6
 800c910:	4628      	mov	r0, r5
 800c912:	47b8      	blx	r7
 800c914:	3001      	adds	r0, #1
 800c916:	f43f aeaa 	beq.w	800c66e <_printf_float+0xc2>
 800c91a:	f108 0801 	add.w	r8, r8, #1
 800c91e:	e7ec      	b.n	800c8fa <_printf_float+0x34e>
 800c920:	4613      	mov	r3, r2
 800c922:	4631      	mov	r1, r6
 800c924:	4642      	mov	r2, r8
 800c926:	4628      	mov	r0, r5
 800c928:	47b8      	blx	r7
 800c92a:	3001      	adds	r0, #1
 800c92c:	d1c0      	bne.n	800c8b0 <_printf_float+0x304>
 800c92e:	e69e      	b.n	800c66e <_printf_float+0xc2>
 800c930:	2301      	movs	r3, #1
 800c932:	4631      	mov	r1, r6
 800c934:	4628      	mov	r0, r5
 800c936:	9205      	str	r2, [sp, #20]
 800c938:	47b8      	blx	r7
 800c93a:	3001      	adds	r0, #1
 800c93c:	f43f ae97 	beq.w	800c66e <_printf_float+0xc2>
 800c940:	9a05      	ldr	r2, [sp, #20]
 800c942:	f10b 0b01 	add.w	fp, fp, #1
 800c946:	e7b9      	b.n	800c8bc <_printf_float+0x310>
 800c948:	ee18 3a10 	vmov	r3, s16
 800c94c:	4652      	mov	r2, sl
 800c94e:	4631      	mov	r1, r6
 800c950:	4628      	mov	r0, r5
 800c952:	47b8      	blx	r7
 800c954:	3001      	adds	r0, #1
 800c956:	d1be      	bne.n	800c8d6 <_printf_float+0x32a>
 800c958:	e689      	b.n	800c66e <_printf_float+0xc2>
 800c95a:	9a05      	ldr	r2, [sp, #20]
 800c95c:	464b      	mov	r3, r9
 800c95e:	4442      	add	r2, r8
 800c960:	4631      	mov	r1, r6
 800c962:	4628      	mov	r0, r5
 800c964:	47b8      	blx	r7
 800c966:	3001      	adds	r0, #1
 800c968:	d1c1      	bne.n	800c8ee <_printf_float+0x342>
 800c96a:	e680      	b.n	800c66e <_printf_float+0xc2>
 800c96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c96e:	2a01      	cmp	r2, #1
 800c970:	dc01      	bgt.n	800c976 <_printf_float+0x3ca>
 800c972:	07db      	lsls	r3, r3, #31
 800c974:	d538      	bpl.n	800c9e8 <_printf_float+0x43c>
 800c976:	2301      	movs	r3, #1
 800c978:	4642      	mov	r2, r8
 800c97a:	4631      	mov	r1, r6
 800c97c:	4628      	mov	r0, r5
 800c97e:	47b8      	blx	r7
 800c980:	3001      	adds	r0, #1
 800c982:	f43f ae74 	beq.w	800c66e <_printf_float+0xc2>
 800c986:	ee18 3a10 	vmov	r3, s16
 800c98a:	4652      	mov	r2, sl
 800c98c:	4631      	mov	r1, r6
 800c98e:	4628      	mov	r0, r5
 800c990:	47b8      	blx	r7
 800c992:	3001      	adds	r0, #1
 800c994:	f43f ae6b 	beq.w	800c66e <_printf_float+0xc2>
 800c998:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c99c:	2200      	movs	r2, #0
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f7f4 f8a2 	bl	8000ae8 <__aeabi_dcmpeq>
 800c9a4:	b9d8      	cbnz	r0, 800c9de <_printf_float+0x432>
 800c9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9a8:	f108 0201 	add.w	r2, r8, #1
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	4631      	mov	r1, r6
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	47b8      	blx	r7
 800c9b4:	3001      	adds	r0, #1
 800c9b6:	d10e      	bne.n	800c9d6 <_printf_float+0x42a>
 800c9b8:	e659      	b.n	800c66e <_printf_float+0xc2>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	4652      	mov	r2, sl
 800c9be:	4631      	mov	r1, r6
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	47b8      	blx	r7
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	f43f ae52 	beq.w	800c66e <_printf_float+0xc2>
 800c9ca:	f108 0801 	add.w	r8, r8, #1
 800c9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	4543      	cmp	r3, r8
 800c9d4:	dcf1      	bgt.n	800c9ba <_printf_float+0x40e>
 800c9d6:	464b      	mov	r3, r9
 800c9d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c9dc:	e6dc      	b.n	800c798 <_printf_float+0x1ec>
 800c9de:	f04f 0800 	mov.w	r8, #0
 800c9e2:	f104 0a1a 	add.w	sl, r4, #26
 800c9e6:	e7f2      	b.n	800c9ce <_printf_float+0x422>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	4642      	mov	r2, r8
 800c9ec:	e7df      	b.n	800c9ae <_printf_float+0x402>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	464a      	mov	r2, r9
 800c9f2:	4631      	mov	r1, r6
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	47b8      	blx	r7
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	f43f ae38 	beq.w	800c66e <_printf_float+0xc2>
 800c9fe:	f108 0801 	add.w	r8, r8, #1
 800ca02:	68e3      	ldr	r3, [r4, #12]
 800ca04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca06:	1a5b      	subs	r3, r3, r1
 800ca08:	4543      	cmp	r3, r8
 800ca0a:	dcf0      	bgt.n	800c9ee <_printf_float+0x442>
 800ca0c:	e6fa      	b.n	800c804 <_printf_float+0x258>
 800ca0e:	f04f 0800 	mov.w	r8, #0
 800ca12:	f104 0919 	add.w	r9, r4, #25
 800ca16:	e7f4      	b.n	800ca02 <_printf_float+0x456>

0800ca18 <_printf_common>:
 800ca18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca1c:	4616      	mov	r6, r2
 800ca1e:	4699      	mov	r9, r3
 800ca20:	688a      	ldr	r2, [r1, #8]
 800ca22:	690b      	ldr	r3, [r1, #16]
 800ca24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	bfb8      	it	lt
 800ca2c:	4613      	movlt	r3, r2
 800ca2e:	6033      	str	r3, [r6, #0]
 800ca30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca34:	4607      	mov	r7, r0
 800ca36:	460c      	mov	r4, r1
 800ca38:	b10a      	cbz	r2, 800ca3e <_printf_common+0x26>
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	6033      	str	r3, [r6, #0]
 800ca3e:	6823      	ldr	r3, [r4, #0]
 800ca40:	0699      	lsls	r1, r3, #26
 800ca42:	bf42      	ittt	mi
 800ca44:	6833      	ldrmi	r3, [r6, #0]
 800ca46:	3302      	addmi	r3, #2
 800ca48:	6033      	strmi	r3, [r6, #0]
 800ca4a:	6825      	ldr	r5, [r4, #0]
 800ca4c:	f015 0506 	ands.w	r5, r5, #6
 800ca50:	d106      	bne.n	800ca60 <_printf_common+0x48>
 800ca52:	f104 0a19 	add.w	sl, r4, #25
 800ca56:	68e3      	ldr	r3, [r4, #12]
 800ca58:	6832      	ldr	r2, [r6, #0]
 800ca5a:	1a9b      	subs	r3, r3, r2
 800ca5c:	42ab      	cmp	r3, r5
 800ca5e:	dc26      	bgt.n	800caae <_printf_common+0x96>
 800ca60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca64:	1e13      	subs	r3, r2, #0
 800ca66:	6822      	ldr	r2, [r4, #0]
 800ca68:	bf18      	it	ne
 800ca6a:	2301      	movne	r3, #1
 800ca6c:	0692      	lsls	r2, r2, #26
 800ca6e:	d42b      	bmi.n	800cac8 <_printf_common+0xb0>
 800ca70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca74:	4649      	mov	r1, r9
 800ca76:	4638      	mov	r0, r7
 800ca78:	47c0      	blx	r8
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	d01e      	beq.n	800cabc <_printf_common+0xa4>
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	68e5      	ldr	r5, [r4, #12]
 800ca82:	6832      	ldr	r2, [r6, #0]
 800ca84:	f003 0306 	and.w	r3, r3, #6
 800ca88:	2b04      	cmp	r3, #4
 800ca8a:	bf08      	it	eq
 800ca8c:	1aad      	subeq	r5, r5, r2
 800ca8e:	68a3      	ldr	r3, [r4, #8]
 800ca90:	6922      	ldr	r2, [r4, #16]
 800ca92:	bf0c      	ite	eq
 800ca94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca98:	2500      	movne	r5, #0
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	bfc4      	itt	gt
 800ca9e:	1a9b      	subgt	r3, r3, r2
 800caa0:	18ed      	addgt	r5, r5, r3
 800caa2:	2600      	movs	r6, #0
 800caa4:	341a      	adds	r4, #26
 800caa6:	42b5      	cmp	r5, r6
 800caa8:	d11a      	bne.n	800cae0 <_printf_common+0xc8>
 800caaa:	2000      	movs	r0, #0
 800caac:	e008      	b.n	800cac0 <_printf_common+0xa8>
 800caae:	2301      	movs	r3, #1
 800cab0:	4652      	mov	r2, sl
 800cab2:	4649      	mov	r1, r9
 800cab4:	4638      	mov	r0, r7
 800cab6:	47c0      	blx	r8
 800cab8:	3001      	adds	r0, #1
 800caba:	d103      	bne.n	800cac4 <_printf_common+0xac>
 800cabc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac4:	3501      	adds	r5, #1
 800cac6:	e7c6      	b.n	800ca56 <_printf_common+0x3e>
 800cac8:	18e1      	adds	r1, r4, r3
 800caca:	1c5a      	adds	r2, r3, #1
 800cacc:	2030      	movs	r0, #48	; 0x30
 800cace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cad2:	4422      	add	r2, r4
 800cad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cadc:	3302      	adds	r3, #2
 800cade:	e7c7      	b.n	800ca70 <_printf_common+0x58>
 800cae0:	2301      	movs	r3, #1
 800cae2:	4622      	mov	r2, r4
 800cae4:	4649      	mov	r1, r9
 800cae6:	4638      	mov	r0, r7
 800cae8:	47c0      	blx	r8
 800caea:	3001      	adds	r0, #1
 800caec:	d0e6      	beq.n	800cabc <_printf_common+0xa4>
 800caee:	3601      	adds	r6, #1
 800caf0:	e7d9      	b.n	800caa6 <_printf_common+0x8e>
	...

0800caf4 <_printf_i>:
 800caf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caf8:	460c      	mov	r4, r1
 800cafa:	4691      	mov	r9, r2
 800cafc:	7e27      	ldrb	r7, [r4, #24]
 800cafe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cb00:	2f78      	cmp	r7, #120	; 0x78
 800cb02:	4680      	mov	r8, r0
 800cb04:	469a      	mov	sl, r3
 800cb06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb0a:	d807      	bhi.n	800cb1c <_printf_i+0x28>
 800cb0c:	2f62      	cmp	r7, #98	; 0x62
 800cb0e:	d80a      	bhi.n	800cb26 <_printf_i+0x32>
 800cb10:	2f00      	cmp	r7, #0
 800cb12:	f000 80d8 	beq.w	800ccc6 <_printf_i+0x1d2>
 800cb16:	2f58      	cmp	r7, #88	; 0x58
 800cb18:	f000 80a3 	beq.w	800cc62 <_printf_i+0x16e>
 800cb1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cb20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb24:	e03a      	b.n	800cb9c <_printf_i+0xa8>
 800cb26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb2a:	2b15      	cmp	r3, #21
 800cb2c:	d8f6      	bhi.n	800cb1c <_printf_i+0x28>
 800cb2e:	a001      	add	r0, pc, #4	; (adr r0, 800cb34 <_printf_i+0x40>)
 800cb30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cb34:	0800cb8d 	.word	0x0800cb8d
 800cb38:	0800cba1 	.word	0x0800cba1
 800cb3c:	0800cb1d 	.word	0x0800cb1d
 800cb40:	0800cb1d 	.word	0x0800cb1d
 800cb44:	0800cb1d 	.word	0x0800cb1d
 800cb48:	0800cb1d 	.word	0x0800cb1d
 800cb4c:	0800cba1 	.word	0x0800cba1
 800cb50:	0800cb1d 	.word	0x0800cb1d
 800cb54:	0800cb1d 	.word	0x0800cb1d
 800cb58:	0800cb1d 	.word	0x0800cb1d
 800cb5c:	0800cb1d 	.word	0x0800cb1d
 800cb60:	0800ccad 	.word	0x0800ccad
 800cb64:	0800cbd1 	.word	0x0800cbd1
 800cb68:	0800cc8f 	.word	0x0800cc8f
 800cb6c:	0800cb1d 	.word	0x0800cb1d
 800cb70:	0800cb1d 	.word	0x0800cb1d
 800cb74:	0800cccf 	.word	0x0800cccf
 800cb78:	0800cb1d 	.word	0x0800cb1d
 800cb7c:	0800cbd1 	.word	0x0800cbd1
 800cb80:	0800cb1d 	.word	0x0800cb1d
 800cb84:	0800cb1d 	.word	0x0800cb1d
 800cb88:	0800cc97 	.word	0x0800cc97
 800cb8c:	680b      	ldr	r3, [r1, #0]
 800cb8e:	1d1a      	adds	r2, r3, #4
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	600a      	str	r2, [r1, #0]
 800cb94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cb98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e0a3      	b.n	800cce8 <_printf_i+0x1f4>
 800cba0:	6825      	ldr	r5, [r4, #0]
 800cba2:	6808      	ldr	r0, [r1, #0]
 800cba4:	062e      	lsls	r6, r5, #24
 800cba6:	f100 0304 	add.w	r3, r0, #4
 800cbaa:	d50a      	bpl.n	800cbc2 <_printf_i+0xce>
 800cbac:	6805      	ldr	r5, [r0, #0]
 800cbae:	600b      	str	r3, [r1, #0]
 800cbb0:	2d00      	cmp	r5, #0
 800cbb2:	da03      	bge.n	800cbbc <_printf_i+0xc8>
 800cbb4:	232d      	movs	r3, #45	; 0x2d
 800cbb6:	426d      	negs	r5, r5
 800cbb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbbc:	485e      	ldr	r0, [pc, #376]	; (800cd38 <_printf_i+0x244>)
 800cbbe:	230a      	movs	r3, #10
 800cbc0:	e019      	b.n	800cbf6 <_printf_i+0x102>
 800cbc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cbc6:	6805      	ldr	r5, [r0, #0]
 800cbc8:	600b      	str	r3, [r1, #0]
 800cbca:	bf18      	it	ne
 800cbcc:	b22d      	sxthne	r5, r5
 800cbce:	e7ef      	b.n	800cbb0 <_printf_i+0xbc>
 800cbd0:	680b      	ldr	r3, [r1, #0]
 800cbd2:	6825      	ldr	r5, [r4, #0]
 800cbd4:	1d18      	adds	r0, r3, #4
 800cbd6:	6008      	str	r0, [r1, #0]
 800cbd8:	0628      	lsls	r0, r5, #24
 800cbda:	d501      	bpl.n	800cbe0 <_printf_i+0xec>
 800cbdc:	681d      	ldr	r5, [r3, #0]
 800cbde:	e002      	b.n	800cbe6 <_printf_i+0xf2>
 800cbe0:	0669      	lsls	r1, r5, #25
 800cbe2:	d5fb      	bpl.n	800cbdc <_printf_i+0xe8>
 800cbe4:	881d      	ldrh	r5, [r3, #0]
 800cbe6:	4854      	ldr	r0, [pc, #336]	; (800cd38 <_printf_i+0x244>)
 800cbe8:	2f6f      	cmp	r7, #111	; 0x6f
 800cbea:	bf0c      	ite	eq
 800cbec:	2308      	moveq	r3, #8
 800cbee:	230a      	movne	r3, #10
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbf6:	6866      	ldr	r6, [r4, #4]
 800cbf8:	60a6      	str	r6, [r4, #8]
 800cbfa:	2e00      	cmp	r6, #0
 800cbfc:	bfa2      	ittt	ge
 800cbfe:	6821      	ldrge	r1, [r4, #0]
 800cc00:	f021 0104 	bicge.w	r1, r1, #4
 800cc04:	6021      	strge	r1, [r4, #0]
 800cc06:	b90d      	cbnz	r5, 800cc0c <_printf_i+0x118>
 800cc08:	2e00      	cmp	r6, #0
 800cc0a:	d04d      	beq.n	800cca8 <_printf_i+0x1b4>
 800cc0c:	4616      	mov	r6, r2
 800cc0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cc12:	fb03 5711 	mls	r7, r3, r1, r5
 800cc16:	5dc7      	ldrb	r7, [r0, r7]
 800cc18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cc1c:	462f      	mov	r7, r5
 800cc1e:	42bb      	cmp	r3, r7
 800cc20:	460d      	mov	r5, r1
 800cc22:	d9f4      	bls.n	800cc0e <_printf_i+0x11a>
 800cc24:	2b08      	cmp	r3, #8
 800cc26:	d10b      	bne.n	800cc40 <_printf_i+0x14c>
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	07df      	lsls	r7, r3, #31
 800cc2c:	d508      	bpl.n	800cc40 <_printf_i+0x14c>
 800cc2e:	6923      	ldr	r3, [r4, #16]
 800cc30:	6861      	ldr	r1, [r4, #4]
 800cc32:	4299      	cmp	r1, r3
 800cc34:	bfde      	ittt	le
 800cc36:	2330      	movle	r3, #48	; 0x30
 800cc38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc3c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800cc40:	1b92      	subs	r2, r2, r6
 800cc42:	6122      	str	r2, [r4, #16]
 800cc44:	f8cd a000 	str.w	sl, [sp]
 800cc48:	464b      	mov	r3, r9
 800cc4a:	aa03      	add	r2, sp, #12
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	4640      	mov	r0, r8
 800cc50:	f7ff fee2 	bl	800ca18 <_printf_common>
 800cc54:	3001      	adds	r0, #1
 800cc56:	d14c      	bne.n	800ccf2 <_printf_i+0x1fe>
 800cc58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc5c:	b004      	add	sp, #16
 800cc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc62:	4835      	ldr	r0, [pc, #212]	; (800cd38 <_printf_i+0x244>)
 800cc64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc68:	6823      	ldr	r3, [r4, #0]
 800cc6a:	680e      	ldr	r6, [r1, #0]
 800cc6c:	061f      	lsls	r7, r3, #24
 800cc6e:	f856 5b04 	ldr.w	r5, [r6], #4
 800cc72:	600e      	str	r6, [r1, #0]
 800cc74:	d514      	bpl.n	800cca0 <_printf_i+0x1ac>
 800cc76:	07d9      	lsls	r1, r3, #31
 800cc78:	bf44      	itt	mi
 800cc7a:	f043 0320 	orrmi.w	r3, r3, #32
 800cc7e:	6023      	strmi	r3, [r4, #0]
 800cc80:	b91d      	cbnz	r5, 800cc8a <_printf_i+0x196>
 800cc82:	6823      	ldr	r3, [r4, #0]
 800cc84:	f023 0320 	bic.w	r3, r3, #32
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	2310      	movs	r3, #16
 800cc8c:	e7b0      	b.n	800cbf0 <_printf_i+0xfc>
 800cc8e:	6823      	ldr	r3, [r4, #0]
 800cc90:	f043 0320 	orr.w	r3, r3, #32
 800cc94:	6023      	str	r3, [r4, #0]
 800cc96:	2378      	movs	r3, #120	; 0x78
 800cc98:	4828      	ldr	r0, [pc, #160]	; (800cd3c <_printf_i+0x248>)
 800cc9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc9e:	e7e3      	b.n	800cc68 <_printf_i+0x174>
 800cca0:	065e      	lsls	r6, r3, #25
 800cca2:	bf48      	it	mi
 800cca4:	b2ad      	uxthmi	r5, r5
 800cca6:	e7e6      	b.n	800cc76 <_printf_i+0x182>
 800cca8:	4616      	mov	r6, r2
 800ccaa:	e7bb      	b.n	800cc24 <_printf_i+0x130>
 800ccac:	680b      	ldr	r3, [r1, #0]
 800ccae:	6826      	ldr	r6, [r4, #0]
 800ccb0:	6960      	ldr	r0, [r4, #20]
 800ccb2:	1d1d      	adds	r5, r3, #4
 800ccb4:	600d      	str	r5, [r1, #0]
 800ccb6:	0635      	lsls	r5, r6, #24
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	d501      	bpl.n	800ccc0 <_printf_i+0x1cc>
 800ccbc:	6018      	str	r0, [r3, #0]
 800ccbe:	e002      	b.n	800ccc6 <_printf_i+0x1d2>
 800ccc0:	0671      	lsls	r1, r6, #25
 800ccc2:	d5fb      	bpl.n	800ccbc <_printf_i+0x1c8>
 800ccc4:	8018      	strh	r0, [r3, #0]
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	6123      	str	r3, [r4, #16]
 800ccca:	4616      	mov	r6, r2
 800cccc:	e7ba      	b.n	800cc44 <_printf_i+0x150>
 800ccce:	680b      	ldr	r3, [r1, #0]
 800ccd0:	1d1a      	adds	r2, r3, #4
 800ccd2:	600a      	str	r2, [r1, #0]
 800ccd4:	681e      	ldr	r6, [r3, #0]
 800ccd6:	6862      	ldr	r2, [r4, #4]
 800ccd8:	2100      	movs	r1, #0
 800ccda:	4630      	mov	r0, r6
 800ccdc:	f7f3 fa90 	bl	8000200 <memchr>
 800cce0:	b108      	cbz	r0, 800cce6 <_printf_i+0x1f2>
 800cce2:	1b80      	subs	r0, r0, r6
 800cce4:	6060      	str	r0, [r4, #4]
 800cce6:	6863      	ldr	r3, [r4, #4]
 800cce8:	6123      	str	r3, [r4, #16]
 800ccea:	2300      	movs	r3, #0
 800ccec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccf0:	e7a8      	b.n	800cc44 <_printf_i+0x150>
 800ccf2:	6923      	ldr	r3, [r4, #16]
 800ccf4:	4632      	mov	r2, r6
 800ccf6:	4649      	mov	r1, r9
 800ccf8:	4640      	mov	r0, r8
 800ccfa:	47d0      	blx	sl
 800ccfc:	3001      	adds	r0, #1
 800ccfe:	d0ab      	beq.n	800cc58 <_printf_i+0x164>
 800cd00:	6823      	ldr	r3, [r4, #0]
 800cd02:	079b      	lsls	r3, r3, #30
 800cd04:	d413      	bmi.n	800cd2e <_printf_i+0x23a>
 800cd06:	68e0      	ldr	r0, [r4, #12]
 800cd08:	9b03      	ldr	r3, [sp, #12]
 800cd0a:	4298      	cmp	r0, r3
 800cd0c:	bfb8      	it	lt
 800cd0e:	4618      	movlt	r0, r3
 800cd10:	e7a4      	b.n	800cc5c <_printf_i+0x168>
 800cd12:	2301      	movs	r3, #1
 800cd14:	4632      	mov	r2, r6
 800cd16:	4649      	mov	r1, r9
 800cd18:	4640      	mov	r0, r8
 800cd1a:	47d0      	blx	sl
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d09b      	beq.n	800cc58 <_printf_i+0x164>
 800cd20:	3501      	adds	r5, #1
 800cd22:	68e3      	ldr	r3, [r4, #12]
 800cd24:	9903      	ldr	r1, [sp, #12]
 800cd26:	1a5b      	subs	r3, r3, r1
 800cd28:	42ab      	cmp	r3, r5
 800cd2a:	dcf2      	bgt.n	800cd12 <_printf_i+0x21e>
 800cd2c:	e7eb      	b.n	800cd06 <_printf_i+0x212>
 800cd2e:	2500      	movs	r5, #0
 800cd30:	f104 0619 	add.w	r6, r4, #25
 800cd34:	e7f5      	b.n	800cd22 <_printf_i+0x22e>
 800cd36:	bf00      	nop
 800cd38:	0800f48b 	.word	0x0800f48b
 800cd3c:	0800f49c 	.word	0x0800f49c

0800cd40 <_sbrk_r>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	4d06      	ldr	r5, [pc, #24]	; (800cd5c <_sbrk_r+0x1c>)
 800cd44:	2300      	movs	r3, #0
 800cd46:	4604      	mov	r4, r0
 800cd48:	4608      	mov	r0, r1
 800cd4a:	602b      	str	r3, [r5, #0]
 800cd4c:	f7f5 fca0 	bl	8002690 <_sbrk>
 800cd50:	1c43      	adds	r3, r0, #1
 800cd52:	d102      	bne.n	800cd5a <_sbrk_r+0x1a>
 800cd54:	682b      	ldr	r3, [r5, #0]
 800cd56:	b103      	cbz	r3, 800cd5a <_sbrk_r+0x1a>
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}
 800cd5c:	20000d9c 	.word	0x20000d9c

0800cd60 <siprintf>:
 800cd60:	b40e      	push	{r1, r2, r3}
 800cd62:	b500      	push	{lr}
 800cd64:	b09c      	sub	sp, #112	; 0x70
 800cd66:	ab1d      	add	r3, sp, #116	; 0x74
 800cd68:	9002      	str	r0, [sp, #8]
 800cd6a:	9006      	str	r0, [sp, #24]
 800cd6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd70:	4809      	ldr	r0, [pc, #36]	; (800cd98 <siprintf+0x38>)
 800cd72:	9107      	str	r1, [sp, #28]
 800cd74:	9104      	str	r1, [sp, #16]
 800cd76:	4909      	ldr	r1, [pc, #36]	; (800cd9c <siprintf+0x3c>)
 800cd78:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd7c:	9105      	str	r1, [sp, #20]
 800cd7e:	6800      	ldr	r0, [r0, #0]
 800cd80:	9301      	str	r3, [sp, #4]
 800cd82:	a902      	add	r1, sp, #8
 800cd84:	f001 fea8 	bl	800ead8 <_svfiprintf_r>
 800cd88:	9b02      	ldr	r3, [sp, #8]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	701a      	strb	r2, [r3, #0]
 800cd8e:	b01c      	add	sp, #112	; 0x70
 800cd90:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd94:	b003      	add	sp, #12
 800cd96:	4770      	bx	lr
 800cd98:	20000024 	.word	0x20000024
 800cd9c:	ffff0208 	.word	0xffff0208

0800cda0 <strcat>:
 800cda0:	b510      	push	{r4, lr}
 800cda2:	4602      	mov	r2, r0
 800cda4:	7814      	ldrb	r4, [r2, #0]
 800cda6:	4613      	mov	r3, r2
 800cda8:	3201      	adds	r2, #1
 800cdaa:	2c00      	cmp	r4, #0
 800cdac:	d1fa      	bne.n	800cda4 <strcat+0x4>
 800cdae:	3b01      	subs	r3, #1
 800cdb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdb4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdb8:	2a00      	cmp	r2, #0
 800cdba:	d1f9      	bne.n	800cdb0 <strcat+0x10>
 800cdbc:	bd10      	pop	{r4, pc}

0800cdbe <strcpy>:
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdc4:	f803 2b01 	strb.w	r2, [r3], #1
 800cdc8:	2a00      	cmp	r2, #0
 800cdca:	d1f9      	bne.n	800cdc0 <strcpy+0x2>
 800cdcc:	4770      	bx	lr

0800cdce <strcspn>:
 800cdce:	b570      	push	{r4, r5, r6, lr}
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	461e      	mov	r6, r3
 800cdd4:	f813 4b01 	ldrb.w	r4, [r3], #1
 800cdd8:	b144      	cbz	r4, 800cdec <strcspn+0x1e>
 800cdda:	1e4a      	subs	r2, r1, #1
 800cddc:	e001      	b.n	800cde2 <strcspn+0x14>
 800cdde:	42a5      	cmp	r5, r4
 800cde0:	d004      	beq.n	800cdec <strcspn+0x1e>
 800cde2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800cde6:	2d00      	cmp	r5, #0
 800cde8:	d1f9      	bne.n	800cdde <strcspn+0x10>
 800cdea:	e7f2      	b.n	800cdd2 <strcspn+0x4>
 800cdec:	1a30      	subs	r0, r6, r0
 800cdee:	bd70      	pop	{r4, r5, r6, pc}

0800cdf0 <strncpy>:
 800cdf0:	b510      	push	{r4, lr}
 800cdf2:	3901      	subs	r1, #1
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	b132      	cbz	r2, 800ce06 <strncpy+0x16>
 800cdf8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cdfc:	f803 4b01 	strb.w	r4, [r3], #1
 800ce00:	3a01      	subs	r2, #1
 800ce02:	2c00      	cmp	r4, #0
 800ce04:	d1f7      	bne.n	800cdf6 <strncpy+0x6>
 800ce06:	441a      	add	r2, r3
 800ce08:	2100      	movs	r1, #0
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d100      	bne.n	800ce10 <strncpy+0x20>
 800ce0e:	bd10      	pop	{r4, pc}
 800ce10:	f803 1b01 	strb.w	r1, [r3], #1
 800ce14:	e7f9      	b.n	800ce0a <strncpy+0x1a>
	...

0800ce18 <_strtol_l.isra.0>:
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce1e:	d001      	beq.n	800ce24 <_strtol_l.isra.0+0xc>
 800ce20:	2b24      	cmp	r3, #36	; 0x24
 800ce22:	d906      	bls.n	800ce32 <_strtol_l.isra.0+0x1a>
 800ce24:	f7ff f8c4 	bl	800bfb0 <__errno>
 800ce28:	2316      	movs	r3, #22
 800ce2a:	6003      	str	r3, [r0, #0]
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce32:	4f3a      	ldr	r7, [pc, #232]	; (800cf1c <_strtol_l.isra.0+0x104>)
 800ce34:	468e      	mov	lr, r1
 800ce36:	4676      	mov	r6, lr
 800ce38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ce3c:	5de5      	ldrb	r5, [r4, r7]
 800ce3e:	f015 0508 	ands.w	r5, r5, #8
 800ce42:	d1f8      	bne.n	800ce36 <_strtol_l.isra.0+0x1e>
 800ce44:	2c2d      	cmp	r4, #45	; 0x2d
 800ce46:	d134      	bne.n	800ceb2 <_strtol_l.isra.0+0x9a>
 800ce48:	f89e 4000 	ldrb.w	r4, [lr]
 800ce4c:	f04f 0801 	mov.w	r8, #1
 800ce50:	f106 0e02 	add.w	lr, r6, #2
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d05c      	beq.n	800cf12 <_strtol_l.isra.0+0xfa>
 800ce58:	2b10      	cmp	r3, #16
 800ce5a:	d10c      	bne.n	800ce76 <_strtol_l.isra.0+0x5e>
 800ce5c:	2c30      	cmp	r4, #48	; 0x30
 800ce5e:	d10a      	bne.n	800ce76 <_strtol_l.isra.0+0x5e>
 800ce60:	f89e 4000 	ldrb.w	r4, [lr]
 800ce64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ce68:	2c58      	cmp	r4, #88	; 0x58
 800ce6a:	d14d      	bne.n	800cf08 <_strtol_l.isra.0+0xf0>
 800ce6c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ce70:	2310      	movs	r3, #16
 800ce72:	f10e 0e02 	add.w	lr, lr, #2
 800ce76:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ce7a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ce7e:	2600      	movs	r6, #0
 800ce80:	fbbc f9f3 	udiv	r9, ip, r3
 800ce84:	4635      	mov	r5, r6
 800ce86:	fb03 ca19 	mls	sl, r3, r9, ip
 800ce8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ce8e:	2f09      	cmp	r7, #9
 800ce90:	d818      	bhi.n	800cec4 <_strtol_l.isra.0+0xac>
 800ce92:	463c      	mov	r4, r7
 800ce94:	42a3      	cmp	r3, r4
 800ce96:	dd24      	ble.n	800cee2 <_strtol_l.isra.0+0xca>
 800ce98:	2e00      	cmp	r6, #0
 800ce9a:	db1f      	blt.n	800cedc <_strtol_l.isra.0+0xc4>
 800ce9c:	45a9      	cmp	r9, r5
 800ce9e:	d31d      	bcc.n	800cedc <_strtol_l.isra.0+0xc4>
 800cea0:	d101      	bne.n	800cea6 <_strtol_l.isra.0+0x8e>
 800cea2:	45a2      	cmp	sl, r4
 800cea4:	db1a      	blt.n	800cedc <_strtol_l.isra.0+0xc4>
 800cea6:	fb05 4503 	mla	r5, r5, r3, r4
 800ceaa:	2601      	movs	r6, #1
 800ceac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ceb0:	e7eb      	b.n	800ce8a <_strtol_l.isra.0+0x72>
 800ceb2:	2c2b      	cmp	r4, #43	; 0x2b
 800ceb4:	bf08      	it	eq
 800ceb6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ceba:	46a8      	mov	r8, r5
 800cebc:	bf08      	it	eq
 800cebe:	f106 0e02 	addeq.w	lr, r6, #2
 800cec2:	e7c7      	b.n	800ce54 <_strtol_l.isra.0+0x3c>
 800cec4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800cec8:	2f19      	cmp	r7, #25
 800ceca:	d801      	bhi.n	800ced0 <_strtol_l.isra.0+0xb8>
 800cecc:	3c37      	subs	r4, #55	; 0x37
 800cece:	e7e1      	b.n	800ce94 <_strtol_l.isra.0+0x7c>
 800ced0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ced4:	2f19      	cmp	r7, #25
 800ced6:	d804      	bhi.n	800cee2 <_strtol_l.isra.0+0xca>
 800ced8:	3c57      	subs	r4, #87	; 0x57
 800ceda:	e7db      	b.n	800ce94 <_strtol_l.isra.0+0x7c>
 800cedc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800cee0:	e7e4      	b.n	800ceac <_strtol_l.isra.0+0x94>
 800cee2:	2e00      	cmp	r6, #0
 800cee4:	da05      	bge.n	800cef2 <_strtol_l.isra.0+0xda>
 800cee6:	2322      	movs	r3, #34	; 0x22
 800cee8:	6003      	str	r3, [r0, #0]
 800ceea:	4665      	mov	r5, ip
 800ceec:	b942      	cbnz	r2, 800cf00 <_strtol_l.isra.0+0xe8>
 800ceee:	4628      	mov	r0, r5
 800cef0:	e79d      	b.n	800ce2e <_strtol_l.isra.0+0x16>
 800cef2:	f1b8 0f00 	cmp.w	r8, #0
 800cef6:	d000      	beq.n	800cefa <_strtol_l.isra.0+0xe2>
 800cef8:	426d      	negs	r5, r5
 800cefa:	2a00      	cmp	r2, #0
 800cefc:	d0f7      	beq.n	800ceee <_strtol_l.isra.0+0xd6>
 800cefe:	b10e      	cbz	r6, 800cf04 <_strtol_l.isra.0+0xec>
 800cf00:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800cf04:	6011      	str	r1, [r2, #0]
 800cf06:	e7f2      	b.n	800ceee <_strtol_l.isra.0+0xd6>
 800cf08:	2430      	movs	r4, #48	; 0x30
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1b3      	bne.n	800ce76 <_strtol_l.isra.0+0x5e>
 800cf0e:	2308      	movs	r3, #8
 800cf10:	e7b1      	b.n	800ce76 <_strtol_l.isra.0+0x5e>
 800cf12:	2c30      	cmp	r4, #48	; 0x30
 800cf14:	d0a4      	beq.n	800ce60 <_strtol_l.isra.0+0x48>
 800cf16:	230a      	movs	r3, #10
 800cf18:	e7ad      	b.n	800ce76 <_strtol_l.isra.0+0x5e>
 800cf1a:	bf00      	nop
 800cf1c:	0800f4ae 	.word	0x0800f4ae

0800cf20 <strtol>:
 800cf20:	4613      	mov	r3, r2
 800cf22:	460a      	mov	r2, r1
 800cf24:	4601      	mov	r1, r0
 800cf26:	4802      	ldr	r0, [pc, #8]	; (800cf30 <strtol+0x10>)
 800cf28:	6800      	ldr	r0, [r0, #0]
 800cf2a:	f7ff bf75 	b.w	800ce18 <_strtol_l.isra.0>
 800cf2e:	bf00      	nop
 800cf30:	20000024 	.word	0x20000024

0800cf34 <_vsniprintf_r>:
 800cf34:	b530      	push	{r4, r5, lr}
 800cf36:	1e14      	subs	r4, r2, #0
 800cf38:	4605      	mov	r5, r0
 800cf3a:	b09b      	sub	sp, #108	; 0x6c
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	da05      	bge.n	800cf4c <_vsniprintf_r+0x18>
 800cf40:	238b      	movs	r3, #139	; 0x8b
 800cf42:	602b      	str	r3, [r5, #0]
 800cf44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf48:	b01b      	add	sp, #108	; 0x6c
 800cf4a:	bd30      	pop	{r4, r5, pc}
 800cf4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cf50:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cf54:	bf14      	ite	ne
 800cf56:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cf5a:	4623      	moveq	r3, r4
 800cf5c:	9302      	str	r3, [sp, #8]
 800cf5e:	9305      	str	r3, [sp, #20]
 800cf60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf64:	9100      	str	r1, [sp, #0]
 800cf66:	9104      	str	r1, [sp, #16]
 800cf68:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cf70:	4669      	mov	r1, sp
 800cf72:	4628      	mov	r0, r5
 800cf74:	f001 fdb0 	bl	800ead8 <_svfiprintf_r>
 800cf78:	1c43      	adds	r3, r0, #1
 800cf7a:	bfbc      	itt	lt
 800cf7c:	238b      	movlt	r3, #139	; 0x8b
 800cf7e:	602b      	strlt	r3, [r5, #0]
 800cf80:	2c00      	cmp	r4, #0
 800cf82:	d0e1      	beq.n	800cf48 <_vsniprintf_r+0x14>
 800cf84:	9b00      	ldr	r3, [sp, #0]
 800cf86:	2200      	movs	r2, #0
 800cf88:	701a      	strb	r2, [r3, #0]
 800cf8a:	e7dd      	b.n	800cf48 <_vsniprintf_r+0x14>

0800cf8c <vsniprintf>:
 800cf8c:	b507      	push	{r0, r1, r2, lr}
 800cf8e:	9300      	str	r3, [sp, #0]
 800cf90:	4613      	mov	r3, r2
 800cf92:	460a      	mov	r2, r1
 800cf94:	4601      	mov	r1, r0
 800cf96:	4803      	ldr	r0, [pc, #12]	; (800cfa4 <vsniprintf+0x18>)
 800cf98:	6800      	ldr	r0, [r0, #0]
 800cf9a:	f7ff ffcb 	bl	800cf34 <_vsniprintf_r>
 800cf9e:	b003      	add	sp, #12
 800cfa0:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfa4:	20000024 	.word	0x20000024

0800cfa8 <__swbuf_r>:
 800cfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfaa:	460e      	mov	r6, r1
 800cfac:	4614      	mov	r4, r2
 800cfae:	4605      	mov	r5, r0
 800cfb0:	b118      	cbz	r0, 800cfba <__swbuf_r+0x12>
 800cfb2:	6983      	ldr	r3, [r0, #24]
 800cfb4:	b90b      	cbnz	r3, 800cfba <__swbuf_r+0x12>
 800cfb6:	f001 f851 	bl	800e05c <__sinit>
 800cfba:	4b21      	ldr	r3, [pc, #132]	; (800d040 <__swbuf_r+0x98>)
 800cfbc:	429c      	cmp	r4, r3
 800cfbe:	d12b      	bne.n	800d018 <__swbuf_r+0x70>
 800cfc0:	686c      	ldr	r4, [r5, #4]
 800cfc2:	69a3      	ldr	r3, [r4, #24]
 800cfc4:	60a3      	str	r3, [r4, #8]
 800cfc6:	89a3      	ldrh	r3, [r4, #12]
 800cfc8:	071a      	lsls	r2, r3, #28
 800cfca:	d52f      	bpl.n	800d02c <__swbuf_r+0x84>
 800cfcc:	6923      	ldr	r3, [r4, #16]
 800cfce:	b36b      	cbz	r3, 800d02c <__swbuf_r+0x84>
 800cfd0:	6923      	ldr	r3, [r4, #16]
 800cfd2:	6820      	ldr	r0, [r4, #0]
 800cfd4:	1ac0      	subs	r0, r0, r3
 800cfd6:	6963      	ldr	r3, [r4, #20]
 800cfd8:	b2f6      	uxtb	r6, r6
 800cfda:	4283      	cmp	r3, r0
 800cfdc:	4637      	mov	r7, r6
 800cfde:	dc04      	bgt.n	800cfea <__swbuf_r+0x42>
 800cfe0:	4621      	mov	r1, r4
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	f000 ffa6 	bl	800df34 <_fflush_r>
 800cfe8:	bb30      	cbnz	r0, 800d038 <__swbuf_r+0x90>
 800cfea:	68a3      	ldr	r3, [r4, #8]
 800cfec:	3b01      	subs	r3, #1
 800cfee:	60a3      	str	r3, [r4, #8]
 800cff0:	6823      	ldr	r3, [r4, #0]
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	6022      	str	r2, [r4, #0]
 800cff6:	701e      	strb	r6, [r3, #0]
 800cff8:	6963      	ldr	r3, [r4, #20]
 800cffa:	3001      	adds	r0, #1
 800cffc:	4283      	cmp	r3, r0
 800cffe:	d004      	beq.n	800d00a <__swbuf_r+0x62>
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	07db      	lsls	r3, r3, #31
 800d004:	d506      	bpl.n	800d014 <__swbuf_r+0x6c>
 800d006:	2e0a      	cmp	r6, #10
 800d008:	d104      	bne.n	800d014 <__swbuf_r+0x6c>
 800d00a:	4621      	mov	r1, r4
 800d00c:	4628      	mov	r0, r5
 800d00e:	f000 ff91 	bl	800df34 <_fflush_r>
 800d012:	b988      	cbnz	r0, 800d038 <__swbuf_r+0x90>
 800d014:	4638      	mov	r0, r7
 800d016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d018:	4b0a      	ldr	r3, [pc, #40]	; (800d044 <__swbuf_r+0x9c>)
 800d01a:	429c      	cmp	r4, r3
 800d01c:	d101      	bne.n	800d022 <__swbuf_r+0x7a>
 800d01e:	68ac      	ldr	r4, [r5, #8]
 800d020:	e7cf      	b.n	800cfc2 <__swbuf_r+0x1a>
 800d022:	4b09      	ldr	r3, [pc, #36]	; (800d048 <__swbuf_r+0xa0>)
 800d024:	429c      	cmp	r4, r3
 800d026:	bf08      	it	eq
 800d028:	68ec      	ldreq	r4, [r5, #12]
 800d02a:	e7ca      	b.n	800cfc2 <__swbuf_r+0x1a>
 800d02c:	4621      	mov	r1, r4
 800d02e:	4628      	mov	r0, r5
 800d030:	f000 f80c 	bl	800d04c <__swsetup_r>
 800d034:	2800      	cmp	r0, #0
 800d036:	d0cb      	beq.n	800cfd0 <__swbuf_r+0x28>
 800d038:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d03c:	e7ea      	b.n	800d014 <__swbuf_r+0x6c>
 800d03e:	bf00      	nop
 800d040:	0800f664 	.word	0x0800f664
 800d044:	0800f684 	.word	0x0800f684
 800d048:	0800f644 	.word	0x0800f644

0800d04c <__swsetup_r>:
 800d04c:	4b32      	ldr	r3, [pc, #200]	; (800d118 <__swsetup_r+0xcc>)
 800d04e:	b570      	push	{r4, r5, r6, lr}
 800d050:	681d      	ldr	r5, [r3, #0]
 800d052:	4606      	mov	r6, r0
 800d054:	460c      	mov	r4, r1
 800d056:	b125      	cbz	r5, 800d062 <__swsetup_r+0x16>
 800d058:	69ab      	ldr	r3, [r5, #24]
 800d05a:	b913      	cbnz	r3, 800d062 <__swsetup_r+0x16>
 800d05c:	4628      	mov	r0, r5
 800d05e:	f000 fffd 	bl	800e05c <__sinit>
 800d062:	4b2e      	ldr	r3, [pc, #184]	; (800d11c <__swsetup_r+0xd0>)
 800d064:	429c      	cmp	r4, r3
 800d066:	d10f      	bne.n	800d088 <__swsetup_r+0x3c>
 800d068:	686c      	ldr	r4, [r5, #4]
 800d06a:	89a3      	ldrh	r3, [r4, #12]
 800d06c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d070:	0719      	lsls	r1, r3, #28
 800d072:	d42c      	bmi.n	800d0ce <__swsetup_r+0x82>
 800d074:	06dd      	lsls	r5, r3, #27
 800d076:	d411      	bmi.n	800d09c <__swsetup_r+0x50>
 800d078:	2309      	movs	r3, #9
 800d07a:	6033      	str	r3, [r6, #0]
 800d07c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d080:	81a3      	strh	r3, [r4, #12]
 800d082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d086:	e03e      	b.n	800d106 <__swsetup_r+0xba>
 800d088:	4b25      	ldr	r3, [pc, #148]	; (800d120 <__swsetup_r+0xd4>)
 800d08a:	429c      	cmp	r4, r3
 800d08c:	d101      	bne.n	800d092 <__swsetup_r+0x46>
 800d08e:	68ac      	ldr	r4, [r5, #8]
 800d090:	e7eb      	b.n	800d06a <__swsetup_r+0x1e>
 800d092:	4b24      	ldr	r3, [pc, #144]	; (800d124 <__swsetup_r+0xd8>)
 800d094:	429c      	cmp	r4, r3
 800d096:	bf08      	it	eq
 800d098:	68ec      	ldreq	r4, [r5, #12]
 800d09a:	e7e6      	b.n	800d06a <__swsetup_r+0x1e>
 800d09c:	0758      	lsls	r0, r3, #29
 800d09e:	d512      	bpl.n	800d0c6 <__swsetup_r+0x7a>
 800d0a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0a2:	b141      	cbz	r1, 800d0b6 <__swsetup_r+0x6a>
 800d0a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0a8:	4299      	cmp	r1, r3
 800d0aa:	d002      	beq.n	800d0b2 <__swsetup_r+0x66>
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	f7fe ffd9 	bl	800c064 <_free_r>
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	6363      	str	r3, [r4, #52]	; 0x34
 800d0b6:	89a3      	ldrh	r3, [r4, #12]
 800d0b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0bc:	81a3      	strh	r3, [r4, #12]
 800d0be:	2300      	movs	r3, #0
 800d0c0:	6063      	str	r3, [r4, #4]
 800d0c2:	6923      	ldr	r3, [r4, #16]
 800d0c4:	6023      	str	r3, [r4, #0]
 800d0c6:	89a3      	ldrh	r3, [r4, #12]
 800d0c8:	f043 0308 	orr.w	r3, r3, #8
 800d0cc:	81a3      	strh	r3, [r4, #12]
 800d0ce:	6923      	ldr	r3, [r4, #16]
 800d0d0:	b94b      	cbnz	r3, 800d0e6 <__swsetup_r+0x9a>
 800d0d2:	89a3      	ldrh	r3, [r4, #12]
 800d0d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d0d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0dc:	d003      	beq.n	800d0e6 <__swsetup_r+0x9a>
 800d0de:	4621      	mov	r1, r4
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f001 f885 	bl	800e1f0 <__smakebuf_r>
 800d0e6:	89a0      	ldrh	r0, [r4, #12]
 800d0e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0ec:	f010 0301 	ands.w	r3, r0, #1
 800d0f0:	d00a      	beq.n	800d108 <__swsetup_r+0xbc>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	60a3      	str	r3, [r4, #8]
 800d0f6:	6963      	ldr	r3, [r4, #20]
 800d0f8:	425b      	negs	r3, r3
 800d0fa:	61a3      	str	r3, [r4, #24]
 800d0fc:	6923      	ldr	r3, [r4, #16]
 800d0fe:	b943      	cbnz	r3, 800d112 <__swsetup_r+0xc6>
 800d100:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d104:	d1ba      	bne.n	800d07c <__swsetup_r+0x30>
 800d106:	bd70      	pop	{r4, r5, r6, pc}
 800d108:	0781      	lsls	r1, r0, #30
 800d10a:	bf58      	it	pl
 800d10c:	6963      	ldrpl	r3, [r4, #20]
 800d10e:	60a3      	str	r3, [r4, #8]
 800d110:	e7f4      	b.n	800d0fc <__swsetup_r+0xb0>
 800d112:	2000      	movs	r0, #0
 800d114:	e7f7      	b.n	800d106 <__swsetup_r+0xba>
 800d116:	bf00      	nop
 800d118:	20000024 	.word	0x20000024
 800d11c:	0800f664 	.word	0x0800f664
 800d120:	0800f684 	.word	0x0800f684
 800d124:	0800f644 	.word	0x0800f644

0800d128 <abort>:
 800d128:	b508      	push	{r3, lr}
 800d12a:	2006      	movs	r0, #6
 800d12c:	f001 fdfc 	bl	800ed28 <raise>
 800d130:	2001      	movs	r0, #1
 800d132:	f7f5 fa35 	bl	80025a0 <_exit>

0800d136 <quorem>:
 800d136:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13a:	6903      	ldr	r3, [r0, #16]
 800d13c:	690c      	ldr	r4, [r1, #16]
 800d13e:	42a3      	cmp	r3, r4
 800d140:	4607      	mov	r7, r0
 800d142:	f2c0 8081 	blt.w	800d248 <quorem+0x112>
 800d146:	3c01      	subs	r4, #1
 800d148:	f101 0814 	add.w	r8, r1, #20
 800d14c:	f100 0514 	add.w	r5, r0, #20
 800d150:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d154:	9301      	str	r3, [sp, #4]
 800d156:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d15a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d15e:	3301      	adds	r3, #1
 800d160:	429a      	cmp	r2, r3
 800d162:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d166:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d16a:	fbb2 f6f3 	udiv	r6, r2, r3
 800d16e:	d331      	bcc.n	800d1d4 <quorem+0x9e>
 800d170:	f04f 0e00 	mov.w	lr, #0
 800d174:	4640      	mov	r0, r8
 800d176:	46ac      	mov	ip, r5
 800d178:	46f2      	mov	sl, lr
 800d17a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d17e:	b293      	uxth	r3, r2
 800d180:	fb06 e303 	mla	r3, r6, r3, lr
 800d184:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d188:	b29b      	uxth	r3, r3
 800d18a:	ebaa 0303 	sub.w	r3, sl, r3
 800d18e:	0c12      	lsrs	r2, r2, #16
 800d190:	f8dc a000 	ldr.w	sl, [ip]
 800d194:	fb06 e202 	mla	r2, r6, r2, lr
 800d198:	fa13 f38a 	uxtah	r3, r3, sl
 800d19c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1a0:	fa1f fa82 	uxth.w	sl, r2
 800d1a4:	f8dc 2000 	ldr.w	r2, [ip]
 800d1a8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d1ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1b6:	4581      	cmp	r9, r0
 800d1b8:	f84c 3b04 	str.w	r3, [ip], #4
 800d1bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d1c0:	d2db      	bcs.n	800d17a <quorem+0x44>
 800d1c2:	f855 300b 	ldr.w	r3, [r5, fp]
 800d1c6:	b92b      	cbnz	r3, 800d1d4 <quorem+0x9e>
 800d1c8:	9b01      	ldr	r3, [sp, #4]
 800d1ca:	3b04      	subs	r3, #4
 800d1cc:	429d      	cmp	r5, r3
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	d32e      	bcc.n	800d230 <quorem+0xfa>
 800d1d2:	613c      	str	r4, [r7, #16]
 800d1d4:	4638      	mov	r0, r7
 800d1d6:	f001 faef 	bl	800e7b8 <__mcmp>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	db24      	blt.n	800d228 <quorem+0xf2>
 800d1de:	3601      	adds	r6, #1
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	f04f 0c00 	mov.w	ip, #0
 800d1e6:	f858 2b04 	ldr.w	r2, [r8], #4
 800d1ea:	f8d0 e000 	ldr.w	lr, [r0]
 800d1ee:	b293      	uxth	r3, r2
 800d1f0:	ebac 0303 	sub.w	r3, ip, r3
 800d1f4:	0c12      	lsrs	r2, r2, #16
 800d1f6:	fa13 f38e 	uxtah	r3, r3, lr
 800d1fa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d1fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d202:	b29b      	uxth	r3, r3
 800d204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d208:	45c1      	cmp	r9, r8
 800d20a:	f840 3b04 	str.w	r3, [r0], #4
 800d20e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d212:	d2e8      	bcs.n	800d1e6 <quorem+0xb0>
 800d214:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d218:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d21c:	b922      	cbnz	r2, 800d228 <quorem+0xf2>
 800d21e:	3b04      	subs	r3, #4
 800d220:	429d      	cmp	r5, r3
 800d222:	461a      	mov	r2, r3
 800d224:	d30a      	bcc.n	800d23c <quorem+0x106>
 800d226:	613c      	str	r4, [r7, #16]
 800d228:	4630      	mov	r0, r6
 800d22a:	b003      	add	sp, #12
 800d22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d230:	6812      	ldr	r2, [r2, #0]
 800d232:	3b04      	subs	r3, #4
 800d234:	2a00      	cmp	r2, #0
 800d236:	d1cc      	bne.n	800d1d2 <quorem+0x9c>
 800d238:	3c01      	subs	r4, #1
 800d23a:	e7c7      	b.n	800d1cc <quorem+0x96>
 800d23c:	6812      	ldr	r2, [r2, #0]
 800d23e:	3b04      	subs	r3, #4
 800d240:	2a00      	cmp	r2, #0
 800d242:	d1f0      	bne.n	800d226 <quorem+0xf0>
 800d244:	3c01      	subs	r4, #1
 800d246:	e7eb      	b.n	800d220 <quorem+0xea>
 800d248:	2000      	movs	r0, #0
 800d24a:	e7ee      	b.n	800d22a <quorem+0xf4>
 800d24c:	0000      	movs	r0, r0
	...

0800d250 <_dtoa_r>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	ed2d 8b02 	vpush	{d8}
 800d258:	ec57 6b10 	vmov	r6, r7, d0
 800d25c:	b095      	sub	sp, #84	; 0x54
 800d25e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d260:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d264:	9105      	str	r1, [sp, #20]
 800d266:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d26a:	4604      	mov	r4, r0
 800d26c:	9209      	str	r2, [sp, #36]	; 0x24
 800d26e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d270:	b975      	cbnz	r5, 800d290 <_dtoa_r+0x40>
 800d272:	2010      	movs	r0, #16
 800d274:	f7fe fed8 	bl	800c028 <malloc>
 800d278:	4602      	mov	r2, r0
 800d27a:	6260      	str	r0, [r4, #36]	; 0x24
 800d27c:	b920      	cbnz	r0, 800d288 <_dtoa_r+0x38>
 800d27e:	4bb2      	ldr	r3, [pc, #712]	; (800d548 <_dtoa_r+0x2f8>)
 800d280:	21ea      	movs	r1, #234	; 0xea
 800d282:	48b2      	ldr	r0, [pc, #712]	; (800d54c <_dtoa_r+0x2fc>)
 800d284:	f7fe fe72 	bl	800bf6c <__assert_func>
 800d288:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d28c:	6005      	str	r5, [r0, #0]
 800d28e:	60c5      	str	r5, [r0, #12]
 800d290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d292:	6819      	ldr	r1, [r3, #0]
 800d294:	b151      	cbz	r1, 800d2ac <_dtoa_r+0x5c>
 800d296:	685a      	ldr	r2, [r3, #4]
 800d298:	604a      	str	r2, [r1, #4]
 800d29a:	2301      	movs	r3, #1
 800d29c:	4093      	lsls	r3, r2
 800d29e:	608b      	str	r3, [r1, #8]
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f001 f84b 	bl	800e33c <_Bfree>
 800d2a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	601a      	str	r2, [r3, #0]
 800d2ac:	1e3b      	subs	r3, r7, #0
 800d2ae:	bfb9      	ittee	lt
 800d2b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d2b4:	9303      	strlt	r3, [sp, #12]
 800d2b6:	2300      	movge	r3, #0
 800d2b8:	f8c8 3000 	strge.w	r3, [r8]
 800d2bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d2c0:	4ba3      	ldr	r3, [pc, #652]	; (800d550 <_dtoa_r+0x300>)
 800d2c2:	bfbc      	itt	lt
 800d2c4:	2201      	movlt	r2, #1
 800d2c6:	f8c8 2000 	strlt.w	r2, [r8]
 800d2ca:	ea33 0309 	bics.w	r3, r3, r9
 800d2ce:	d11b      	bne.n	800d308 <_dtoa_r+0xb8>
 800d2d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d2d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d2d6:	6013      	str	r3, [r2, #0]
 800d2d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2dc:	4333      	orrs	r3, r6
 800d2de:	f000 857a 	beq.w	800ddd6 <_dtoa_r+0xb86>
 800d2e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2e4:	b963      	cbnz	r3, 800d300 <_dtoa_r+0xb0>
 800d2e6:	4b9b      	ldr	r3, [pc, #620]	; (800d554 <_dtoa_r+0x304>)
 800d2e8:	e024      	b.n	800d334 <_dtoa_r+0xe4>
 800d2ea:	4b9b      	ldr	r3, [pc, #620]	; (800d558 <_dtoa_r+0x308>)
 800d2ec:	9300      	str	r3, [sp, #0]
 800d2ee:	3308      	adds	r3, #8
 800d2f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d2f2:	6013      	str	r3, [r2, #0]
 800d2f4:	9800      	ldr	r0, [sp, #0]
 800d2f6:	b015      	add	sp, #84	; 0x54
 800d2f8:	ecbd 8b02 	vpop	{d8}
 800d2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d300:	4b94      	ldr	r3, [pc, #592]	; (800d554 <_dtoa_r+0x304>)
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	3303      	adds	r3, #3
 800d306:	e7f3      	b.n	800d2f0 <_dtoa_r+0xa0>
 800d308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d30c:	2200      	movs	r2, #0
 800d30e:	ec51 0b17 	vmov	r0, r1, d7
 800d312:	2300      	movs	r3, #0
 800d314:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d318:	f7f3 fbe6 	bl	8000ae8 <__aeabi_dcmpeq>
 800d31c:	4680      	mov	r8, r0
 800d31e:	b158      	cbz	r0, 800d338 <_dtoa_r+0xe8>
 800d320:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d322:	2301      	movs	r3, #1
 800d324:	6013      	str	r3, [r2, #0]
 800d326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f000 8551 	beq.w	800ddd0 <_dtoa_r+0xb80>
 800d32e:	488b      	ldr	r0, [pc, #556]	; (800d55c <_dtoa_r+0x30c>)
 800d330:	6018      	str	r0, [r3, #0]
 800d332:	1e43      	subs	r3, r0, #1
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	e7dd      	b.n	800d2f4 <_dtoa_r+0xa4>
 800d338:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d33c:	aa12      	add	r2, sp, #72	; 0x48
 800d33e:	a913      	add	r1, sp, #76	; 0x4c
 800d340:	4620      	mov	r0, r4
 800d342:	f001 fadd 	bl	800e900 <__d2b>
 800d346:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d34a:	4683      	mov	fp, r0
 800d34c:	2d00      	cmp	r5, #0
 800d34e:	d07c      	beq.n	800d44a <_dtoa_r+0x1fa>
 800d350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d352:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d35a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d35e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d362:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d36a:	4b7d      	ldr	r3, [pc, #500]	; (800d560 <_dtoa_r+0x310>)
 800d36c:	2200      	movs	r2, #0
 800d36e:	4630      	mov	r0, r6
 800d370:	4639      	mov	r1, r7
 800d372:	f7f2 ff99 	bl	80002a8 <__aeabi_dsub>
 800d376:	a36e      	add	r3, pc, #440	; (adr r3, 800d530 <_dtoa_r+0x2e0>)
 800d378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37c:	f7f3 f94c 	bl	8000618 <__aeabi_dmul>
 800d380:	a36d      	add	r3, pc, #436	; (adr r3, 800d538 <_dtoa_r+0x2e8>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	f7f2 ff91 	bl	80002ac <__adddf3>
 800d38a:	4606      	mov	r6, r0
 800d38c:	4628      	mov	r0, r5
 800d38e:	460f      	mov	r7, r1
 800d390:	f7f3 f8d8 	bl	8000544 <__aeabi_i2d>
 800d394:	a36a      	add	r3, pc, #424	; (adr r3, 800d540 <_dtoa_r+0x2f0>)
 800d396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39a:	f7f3 f93d 	bl	8000618 <__aeabi_dmul>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	4639      	mov	r1, r7
 800d3a6:	f7f2 ff81 	bl	80002ac <__adddf3>
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	460f      	mov	r7, r1
 800d3ae:	f7f3 fbe3 	bl	8000b78 <__aeabi_d2iz>
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	4682      	mov	sl, r0
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	4639      	mov	r1, r7
 800d3bc:	f7f3 fb9e 	bl	8000afc <__aeabi_dcmplt>
 800d3c0:	b148      	cbz	r0, 800d3d6 <_dtoa_r+0x186>
 800d3c2:	4650      	mov	r0, sl
 800d3c4:	f7f3 f8be 	bl	8000544 <__aeabi_i2d>
 800d3c8:	4632      	mov	r2, r6
 800d3ca:	463b      	mov	r3, r7
 800d3cc:	f7f3 fb8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800d3d0:	b908      	cbnz	r0, 800d3d6 <_dtoa_r+0x186>
 800d3d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d3d6:	f1ba 0f16 	cmp.w	sl, #22
 800d3da:	d854      	bhi.n	800d486 <_dtoa_r+0x236>
 800d3dc:	4b61      	ldr	r3, [pc, #388]	; (800d564 <_dtoa_r+0x314>)
 800d3de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d3ea:	f7f3 fb87 	bl	8000afc <__aeabi_dcmplt>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d04b      	beq.n	800d48a <_dtoa_r+0x23a>
 800d3f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	930e      	str	r3, [sp, #56]	; 0x38
 800d3fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3fc:	1b5d      	subs	r5, r3, r5
 800d3fe:	1e6b      	subs	r3, r5, #1
 800d400:	9304      	str	r3, [sp, #16]
 800d402:	bf43      	ittte	mi
 800d404:	2300      	movmi	r3, #0
 800d406:	f1c5 0801 	rsbmi	r8, r5, #1
 800d40a:	9304      	strmi	r3, [sp, #16]
 800d40c:	f04f 0800 	movpl.w	r8, #0
 800d410:	f1ba 0f00 	cmp.w	sl, #0
 800d414:	db3b      	blt.n	800d48e <_dtoa_r+0x23e>
 800d416:	9b04      	ldr	r3, [sp, #16]
 800d418:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d41c:	4453      	add	r3, sl
 800d41e:	9304      	str	r3, [sp, #16]
 800d420:	2300      	movs	r3, #0
 800d422:	9306      	str	r3, [sp, #24]
 800d424:	9b05      	ldr	r3, [sp, #20]
 800d426:	2b09      	cmp	r3, #9
 800d428:	d869      	bhi.n	800d4fe <_dtoa_r+0x2ae>
 800d42a:	2b05      	cmp	r3, #5
 800d42c:	bfc4      	itt	gt
 800d42e:	3b04      	subgt	r3, #4
 800d430:	9305      	strgt	r3, [sp, #20]
 800d432:	9b05      	ldr	r3, [sp, #20]
 800d434:	f1a3 0302 	sub.w	r3, r3, #2
 800d438:	bfcc      	ite	gt
 800d43a:	2500      	movgt	r5, #0
 800d43c:	2501      	movle	r5, #1
 800d43e:	2b03      	cmp	r3, #3
 800d440:	d869      	bhi.n	800d516 <_dtoa_r+0x2c6>
 800d442:	e8df f003 	tbb	[pc, r3]
 800d446:	4e2c      	.short	0x4e2c
 800d448:	5a4c      	.short	0x5a4c
 800d44a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d44e:	441d      	add	r5, r3
 800d450:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d454:	2b20      	cmp	r3, #32
 800d456:	bfc1      	itttt	gt
 800d458:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d45c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d460:	fa09 f303 	lslgt.w	r3, r9, r3
 800d464:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d468:	bfda      	itte	le
 800d46a:	f1c3 0320 	rsble	r3, r3, #32
 800d46e:	fa06 f003 	lslle.w	r0, r6, r3
 800d472:	4318      	orrgt	r0, r3
 800d474:	f7f3 f856 	bl	8000524 <__aeabi_ui2d>
 800d478:	2301      	movs	r3, #1
 800d47a:	4606      	mov	r6, r0
 800d47c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d480:	3d01      	subs	r5, #1
 800d482:	9310      	str	r3, [sp, #64]	; 0x40
 800d484:	e771      	b.n	800d36a <_dtoa_r+0x11a>
 800d486:	2301      	movs	r3, #1
 800d488:	e7b6      	b.n	800d3f8 <_dtoa_r+0x1a8>
 800d48a:	900e      	str	r0, [sp, #56]	; 0x38
 800d48c:	e7b5      	b.n	800d3fa <_dtoa_r+0x1aa>
 800d48e:	f1ca 0300 	rsb	r3, sl, #0
 800d492:	9306      	str	r3, [sp, #24]
 800d494:	2300      	movs	r3, #0
 800d496:	eba8 080a 	sub.w	r8, r8, sl
 800d49a:	930d      	str	r3, [sp, #52]	; 0x34
 800d49c:	e7c2      	b.n	800d424 <_dtoa_r+0x1d4>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	9308      	str	r3, [sp, #32]
 800d4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	dc39      	bgt.n	800d51c <_dtoa_r+0x2cc>
 800d4a8:	f04f 0901 	mov.w	r9, #1
 800d4ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800d4b0:	464b      	mov	r3, r9
 800d4b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d4b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	6042      	str	r2, [r0, #4]
 800d4bc:	2204      	movs	r2, #4
 800d4be:	f102 0614 	add.w	r6, r2, #20
 800d4c2:	429e      	cmp	r6, r3
 800d4c4:	6841      	ldr	r1, [r0, #4]
 800d4c6:	d92f      	bls.n	800d528 <_dtoa_r+0x2d8>
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f000 fef7 	bl	800e2bc <_Balloc>
 800d4ce:	9000      	str	r0, [sp, #0]
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	d14b      	bne.n	800d56c <_dtoa_r+0x31c>
 800d4d4:	4b24      	ldr	r3, [pc, #144]	; (800d568 <_dtoa_r+0x318>)
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d4dc:	e6d1      	b.n	800d282 <_dtoa_r+0x32>
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e7de      	b.n	800d4a0 <_dtoa_r+0x250>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	9308      	str	r3, [sp, #32]
 800d4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e8:	eb0a 0903 	add.w	r9, sl, r3
 800d4ec:	f109 0301 	add.w	r3, r9, #1
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	9301      	str	r3, [sp, #4]
 800d4f4:	bfb8      	it	lt
 800d4f6:	2301      	movlt	r3, #1
 800d4f8:	e7dd      	b.n	800d4b6 <_dtoa_r+0x266>
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e7f2      	b.n	800d4e4 <_dtoa_r+0x294>
 800d4fe:	2501      	movs	r5, #1
 800d500:	2300      	movs	r3, #0
 800d502:	9305      	str	r3, [sp, #20]
 800d504:	9508      	str	r5, [sp, #32]
 800d506:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800d50a:	2200      	movs	r2, #0
 800d50c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d510:	2312      	movs	r3, #18
 800d512:	9209      	str	r2, [sp, #36]	; 0x24
 800d514:	e7cf      	b.n	800d4b6 <_dtoa_r+0x266>
 800d516:	2301      	movs	r3, #1
 800d518:	9308      	str	r3, [sp, #32]
 800d51a:	e7f4      	b.n	800d506 <_dtoa_r+0x2b6>
 800d51c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d520:	f8cd 9004 	str.w	r9, [sp, #4]
 800d524:	464b      	mov	r3, r9
 800d526:	e7c6      	b.n	800d4b6 <_dtoa_r+0x266>
 800d528:	3101      	adds	r1, #1
 800d52a:	6041      	str	r1, [r0, #4]
 800d52c:	0052      	lsls	r2, r2, #1
 800d52e:	e7c6      	b.n	800d4be <_dtoa_r+0x26e>
 800d530:	636f4361 	.word	0x636f4361
 800d534:	3fd287a7 	.word	0x3fd287a7
 800d538:	8b60c8b3 	.word	0x8b60c8b3
 800d53c:	3fc68a28 	.word	0x3fc68a28
 800d540:	509f79fb 	.word	0x509f79fb
 800d544:	3fd34413 	.word	0x3fd34413
 800d548:	0800f5bb 	.word	0x0800f5bb
 800d54c:	0800f5d2 	.word	0x0800f5d2
 800d550:	7ff00000 	.word	0x7ff00000
 800d554:	0800f5b7 	.word	0x0800f5b7
 800d558:	0800f5ae 	.word	0x0800f5ae
 800d55c:	0800f48a 	.word	0x0800f48a
 800d560:	3ff80000 	.word	0x3ff80000
 800d564:	0800f730 	.word	0x0800f730
 800d568:	0800f631 	.word	0x0800f631
 800d56c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d56e:	9a00      	ldr	r2, [sp, #0]
 800d570:	601a      	str	r2, [r3, #0]
 800d572:	9b01      	ldr	r3, [sp, #4]
 800d574:	2b0e      	cmp	r3, #14
 800d576:	f200 80ad 	bhi.w	800d6d4 <_dtoa_r+0x484>
 800d57a:	2d00      	cmp	r5, #0
 800d57c:	f000 80aa 	beq.w	800d6d4 <_dtoa_r+0x484>
 800d580:	f1ba 0f00 	cmp.w	sl, #0
 800d584:	dd36      	ble.n	800d5f4 <_dtoa_r+0x3a4>
 800d586:	4ac3      	ldr	r2, [pc, #780]	; (800d894 <_dtoa_r+0x644>)
 800d588:	f00a 030f 	and.w	r3, sl, #15
 800d58c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d590:	ed93 7b00 	vldr	d7, [r3]
 800d594:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d598:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d59c:	eeb0 8a47 	vmov.f32	s16, s14
 800d5a0:	eef0 8a67 	vmov.f32	s17, s15
 800d5a4:	d016      	beq.n	800d5d4 <_dtoa_r+0x384>
 800d5a6:	4bbc      	ldr	r3, [pc, #752]	; (800d898 <_dtoa_r+0x648>)
 800d5a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d5ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5b0:	f7f3 f95c 	bl	800086c <__aeabi_ddiv>
 800d5b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5b8:	f007 070f 	and.w	r7, r7, #15
 800d5bc:	2503      	movs	r5, #3
 800d5be:	4eb6      	ldr	r6, [pc, #728]	; (800d898 <_dtoa_r+0x648>)
 800d5c0:	b957      	cbnz	r7, 800d5d8 <_dtoa_r+0x388>
 800d5c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5c6:	ec53 2b18 	vmov	r2, r3, d8
 800d5ca:	f7f3 f94f 	bl	800086c <__aeabi_ddiv>
 800d5ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5d2:	e029      	b.n	800d628 <_dtoa_r+0x3d8>
 800d5d4:	2502      	movs	r5, #2
 800d5d6:	e7f2      	b.n	800d5be <_dtoa_r+0x36e>
 800d5d8:	07f9      	lsls	r1, r7, #31
 800d5da:	d508      	bpl.n	800d5ee <_dtoa_r+0x39e>
 800d5dc:	ec51 0b18 	vmov	r0, r1, d8
 800d5e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d5e4:	f7f3 f818 	bl	8000618 <__aeabi_dmul>
 800d5e8:	ec41 0b18 	vmov	d8, r0, r1
 800d5ec:	3501      	adds	r5, #1
 800d5ee:	107f      	asrs	r7, r7, #1
 800d5f0:	3608      	adds	r6, #8
 800d5f2:	e7e5      	b.n	800d5c0 <_dtoa_r+0x370>
 800d5f4:	f000 80a6 	beq.w	800d744 <_dtoa_r+0x4f4>
 800d5f8:	f1ca 0600 	rsb	r6, sl, #0
 800d5fc:	4ba5      	ldr	r3, [pc, #660]	; (800d894 <_dtoa_r+0x644>)
 800d5fe:	4fa6      	ldr	r7, [pc, #664]	; (800d898 <_dtoa_r+0x648>)
 800d600:	f006 020f 	and.w	r2, r6, #15
 800d604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d610:	f7f3 f802 	bl	8000618 <__aeabi_dmul>
 800d614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d618:	1136      	asrs	r6, r6, #4
 800d61a:	2300      	movs	r3, #0
 800d61c:	2502      	movs	r5, #2
 800d61e:	2e00      	cmp	r6, #0
 800d620:	f040 8085 	bne.w	800d72e <_dtoa_r+0x4de>
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1d2      	bne.n	800d5ce <_dtoa_r+0x37e>
 800d628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f000 808c 	beq.w	800d748 <_dtoa_r+0x4f8>
 800d630:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d634:	4b99      	ldr	r3, [pc, #612]	; (800d89c <_dtoa_r+0x64c>)
 800d636:	2200      	movs	r2, #0
 800d638:	4630      	mov	r0, r6
 800d63a:	4639      	mov	r1, r7
 800d63c:	f7f3 fa5e 	bl	8000afc <__aeabi_dcmplt>
 800d640:	2800      	cmp	r0, #0
 800d642:	f000 8081 	beq.w	800d748 <_dtoa_r+0x4f8>
 800d646:	9b01      	ldr	r3, [sp, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d07d      	beq.n	800d748 <_dtoa_r+0x4f8>
 800d64c:	f1b9 0f00 	cmp.w	r9, #0
 800d650:	dd3c      	ble.n	800d6cc <_dtoa_r+0x47c>
 800d652:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d656:	9307      	str	r3, [sp, #28]
 800d658:	2200      	movs	r2, #0
 800d65a:	4b91      	ldr	r3, [pc, #580]	; (800d8a0 <_dtoa_r+0x650>)
 800d65c:	4630      	mov	r0, r6
 800d65e:	4639      	mov	r1, r7
 800d660:	f7f2 ffda 	bl	8000618 <__aeabi_dmul>
 800d664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d668:	3501      	adds	r5, #1
 800d66a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d66e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d672:	4628      	mov	r0, r5
 800d674:	f7f2 ff66 	bl	8000544 <__aeabi_i2d>
 800d678:	4632      	mov	r2, r6
 800d67a:	463b      	mov	r3, r7
 800d67c:	f7f2 ffcc 	bl	8000618 <__aeabi_dmul>
 800d680:	4b88      	ldr	r3, [pc, #544]	; (800d8a4 <_dtoa_r+0x654>)
 800d682:	2200      	movs	r2, #0
 800d684:	f7f2 fe12 	bl	80002ac <__adddf3>
 800d688:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d68c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d690:	9303      	str	r3, [sp, #12]
 800d692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d694:	2b00      	cmp	r3, #0
 800d696:	d15c      	bne.n	800d752 <_dtoa_r+0x502>
 800d698:	4b83      	ldr	r3, [pc, #524]	; (800d8a8 <_dtoa_r+0x658>)
 800d69a:	2200      	movs	r2, #0
 800d69c:	4630      	mov	r0, r6
 800d69e:	4639      	mov	r1, r7
 800d6a0:	f7f2 fe02 	bl	80002a8 <__aeabi_dsub>
 800d6a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6a8:	4606      	mov	r6, r0
 800d6aa:	460f      	mov	r7, r1
 800d6ac:	f7f3 fa44 	bl	8000b38 <__aeabi_dcmpgt>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	f040 8296 	bne.w	800dbe2 <_dtoa_r+0x992>
 800d6b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6c0:	4639      	mov	r1, r7
 800d6c2:	f7f3 fa1b 	bl	8000afc <__aeabi_dcmplt>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	f040 8288 	bne.w	800dbdc <_dtoa_r+0x98c>
 800d6cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d6d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f2c0 8158 	blt.w	800d98c <_dtoa_r+0x73c>
 800d6dc:	f1ba 0f0e 	cmp.w	sl, #14
 800d6e0:	f300 8154 	bgt.w	800d98c <_dtoa_r+0x73c>
 800d6e4:	4b6b      	ldr	r3, [pc, #428]	; (800d894 <_dtoa_r+0x644>)
 800d6e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d6ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f280 80e3 	bge.w	800d8bc <_dtoa_r+0x66c>
 800d6f6:	9b01      	ldr	r3, [sp, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	f300 80df 	bgt.w	800d8bc <_dtoa_r+0x66c>
 800d6fe:	f040 826d 	bne.w	800dbdc <_dtoa_r+0x98c>
 800d702:	4b69      	ldr	r3, [pc, #420]	; (800d8a8 <_dtoa_r+0x658>)
 800d704:	2200      	movs	r2, #0
 800d706:	4640      	mov	r0, r8
 800d708:	4649      	mov	r1, r9
 800d70a:	f7f2 ff85 	bl	8000618 <__aeabi_dmul>
 800d70e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d712:	f7f3 fa07 	bl	8000b24 <__aeabi_dcmpge>
 800d716:	9e01      	ldr	r6, [sp, #4]
 800d718:	4637      	mov	r7, r6
 800d71a:	2800      	cmp	r0, #0
 800d71c:	f040 8243 	bne.w	800dba6 <_dtoa_r+0x956>
 800d720:	9d00      	ldr	r5, [sp, #0]
 800d722:	2331      	movs	r3, #49	; 0x31
 800d724:	f805 3b01 	strb.w	r3, [r5], #1
 800d728:	f10a 0a01 	add.w	sl, sl, #1
 800d72c:	e23f      	b.n	800dbae <_dtoa_r+0x95e>
 800d72e:	07f2      	lsls	r2, r6, #31
 800d730:	d505      	bpl.n	800d73e <_dtoa_r+0x4ee>
 800d732:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d736:	f7f2 ff6f 	bl	8000618 <__aeabi_dmul>
 800d73a:	3501      	adds	r5, #1
 800d73c:	2301      	movs	r3, #1
 800d73e:	1076      	asrs	r6, r6, #1
 800d740:	3708      	adds	r7, #8
 800d742:	e76c      	b.n	800d61e <_dtoa_r+0x3ce>
 800d744:	2502      	movs	r5, #2
 800d746:	e76f      	b.n	800d628 <_dtoa_r+0x3d8>
 800d748:	9b01      	ldr	r3, [sp, #4]
 800d74a:	f8cd a01c 	str.w	sl, [sp, #28]
 800d74e:	930c      	str	r3, [sp, #48]	; 0x30
 800d750:	e78d      	b.n	800d66e <_dtoa_r+0x41e>
 800d752:	9900      	ldr	r1, [sp, #0]
 800d754:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d758:	4b4e      	ldr	r3, [pc, #312]	; (800d894 <_dtoa_r+0x644>)
 800d75a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d75e:	4401      	add	r1, r0
 800d760:	9102      	str	r1, [sp, #8]
 800d762:	9908      	ldr	r1, [sp, #32]
 800d764:	eeb0 8a47 	vmov.f32	s16, s14
 800d768:	eef0 8a67 	vmov.f32	s17, s15
 800d76c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d770:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d774:	2900      	cmp	r1, #0
 800d776:	d045      	beq.n	800d804 <_dtoa_r+0x5b4>
 800d778:	494c      	ldr	r1, [pc, #304]	; (800d8ac <_dtoa_r+0x65c>)
 800d77a:	2000      	movs	r0, #0
 800d77c:	f7f3 f876 	bl	800086c <__aeabi_ddiv>
 800d780:	ec53 2b18 	vmov	r2, r3, d8
 800d784:	f7f2 fd90 	bl	80002a8 <__aeabi_dsub>
 800d788:	9d00      	ldr	r5, [sp, #0]
 800d78a:	ec41 0b18 	vmov	d8, r0, r1
 800d78e:	4639      	mov	r1, r7
 800d790:	4630      	mov	r0, r6
 800d792:	f7f3 f9f1 	bl	8000b78 <__aeabi_d2iz>
 800d796:	900c      	str	r0, [sp, #48]	; 0x30
 800d798:	f7f2 fed4 	bl	8000544 <__aeabi_i2d>
 800d79c:	4602      	mov	r2, r0
 800d79e:	460b      	mov	r3, r1
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	4639      	mov	r1, r7
 800d7a4:	f7f2 fd80 	bl	80002a8 <__aeabi_dsub>
 800d7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7aa:	3330      	adds	r3, #48	; 0x30
 800d7ac:	f805 3b01 	strb.w	r3, [r5], #1
 800d7b0:	ec53 2b18 	vmov	r2, r3, d8
 800d7b4:	4606      	mov	r6, r0
 800d7b6:	460f      	mov	r7, r1
 800d7b8:	f7f3 f9a0 	bl	8000afc <__aeabi_dcmplt>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d165      	bne.n	800d88c <_dtoa_r+0x63c>
 800d7c0:	4632      	mov	r2, r6
 800d7c2:	463b      	mov	r3, r7
 800d7c4:	4935      	ldr	r1, [pc, #212]	; (800d89c <_dtoa_r+0x64c>)
 800d7c6:	2000      	movs	r0, #0
 800d7c8:	f7f2 fd6e 	bl	80002a8 <__aeabi_dsub>
 800d7cc:	ec53 2b18 	vmov	r2, r3, d8
 800d7d0:	f7f3 f994 	bl	8000afc <__aeabi_dcmplt>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	f040 80b9 	bne.w	800d94c <_dtoa_r+0x6fc>
 800d7da:	9b02      	ldr	r3, [sp, #8]
 800d7dc:	429d      	cmp	r5, r3
 800d7de:	f43f af75 	beq.w	800d6cc <_dtoa_r+0x47c>
 800d7e2:	4b2f      	ldr	r3, [pc, #188]	; (800d8a0 <_dtoa_r+0x650>)
 800d7e4:	ec51 0b18 	vmov	r0, r1, d8
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f7f2 ff15 	bl	8000618 <__aeabi_dmul>
 800d7ee:	4b2c      	ldr	r3, [pc, #176]	; (800d8a0 <_dtoa_r+0x650>)
 800d7f0:	ec41 0b18 	vmov	d8, r0, r1
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	4639      	mov	r1, r7
 800d7fa:	f7f2 ff0d 	bl	8000618 <__aeabi_dmul>
 800d7fe:	4606      	mov	r6, r0
 800d800:	460f      	mov	r7, r1
 800d802:	e7c4      	b.n	800d78e <_dtoa_r+0x53e>
 800d804:	ec51 0b17 	vmov	r0, r1, d7
 800d808:	f7f2 ff06 	bl	8000618 <__aeabi_dmul>
 800d80c:	9b02      	ldr	r3, [sp, #8]
 800d80e:	9d00      	ldr	r5, [sp, #0]
 800d810:	930c      	str	r3, [sp, #48]	; 0x30
 800d812:	ec41 0b18 	vmov	d8, r0, r1
 800d816:	4639      	mov	r1, r7
 800d818:	4630      	mov	r0, r6
 800d81a:	f7f3 f9ad 	bl	8000b78 <__aeabi_d2iz>
 800d81e:	9011      	str	r0, [sp, #68]	; 0x44
 800d820:	f7f2 fe90 	bl	8000544 <__aeabi_i2d>
 800d824:	4602      	mov	r2, r0
 800d826:	460b      	mov	r3, r1
 800d828:	4630      	mov	r0, r6
 800d82a:	4639      	mov	r1, r7
 800d82c:	f7f2 fd3c 	bl	80002a8 <__aeabi_dsub>
 800d830:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d832:	3330      	adds	r3, #48	; 0x30
 800d834:	f805 3b01 	strb.w	r3, [r5], #1
 800d838:	9b02      	ldr	r3, [sp, #8]
 800d83a:	429d      	cmp	r5, r3
 800d83c:	4606      	mov	r6, r0
 800d83e:	460f      	mov	r7, r1
 800d840:	f04f 0200 	mov.w	r2, #0
 800d844:	d134      	bne.n	800d8b0 <_dtoa_r+0x660>
 800d846:	4b19      	ldr	r3, [pc, #100]	; (800d8ac <_dtoa_r+0x65c>)
 800d848:	ec51 0b18 	vmov	r0, r1, d8
 800d84c:	f7f2 fd2e 	bl	80002ac <__adddf3>
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	4630      	mov	r0, r6
 800d856:	4639      	mov	r1, r7
 800d858:	f7f3 f96e 	bl	8000b38 <__aeabi_dcmpgt>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d175      	bne.n	800d94c <_dtoa_r+0x6fc>
 800d860:	ec53 2b18 	vmov	r2, r3, d8
 800d864:	4911      	ldr	r1, [pc, #68]	; (800d8ac <_dtoa_r+0x65c>)
 800d866:	2000      	movs	r0, #0
 800d868:	f7f2 fd1e 	bl	80002a8 <__aeabi_dsub>
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	4630      	mov	r0, r6
 800d872:	4639      	mov	r1, r7
 800d874:	f7f3 f942 	bl	8000afc <__aeabi_dcmplt>
 800d878:	2800      	cmp	r0, #0
 800d87a:	f43f af27 	beq.w	800d6cc <_dtoa_r+0x47c>
 800d87e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d880:	1e6b      	subs	r3, r5, #1
 800d882:	930c      	str	r3, [sp, #48]	; 0x30
 800d884:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d888:	2b30      	cmp	r3, #48	; 0x30
 800d88a:	d0f8      	beq.n	800d87e <_dtoa_r+0x62e>
 800d88c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d890:	e04a      	b.n	800d928 <_dtoa_r+0x6d8>
 800d892:	bf00      	nop
 800d894:	0800f730 	.word	0x0800f730
 800d898:	0800f708 	.word	0x0800f708
 800d89c:	3ff00000 	.word	0x3ff00000
 800d8a0:	40240000 	.word	0x40240000
 800d8a4:	401c0000 	.word	0x401c0000
 800d8a8:	40140000 	.word	0x40140000
 800d8ac:	3fe00000 	.word	0x3fe00000
 800d8b0:	4baf      	ldr	r3, [pc, #700]	; (800db70 <_dtoa_r+0x920>)
 800d8b2:	f7f2 feb1 	bl	8000618 <__aeabi_dmul>
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	460f      	mov	r7, r1
 800d8ba:	e7ac      	b.n	800d816 <_dtoa_r+0x5c6>
 800d8bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d8c0:	9d00      	ldr	r5, [sp, #0]
 800d8c2:	4642      	mov	r2, r8
 800d8c4:	464b      	mov	r3, r9
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	4639      	mov	r1, r7
 800d8ca:	f7f2 ffcf 	bl	800086c <__aeabi_ddiv>
 800d8ce:	f7f3 f953 	bl	8000b78 <__aeabi_d2iz>
 800d8d2:	9002      	str	r0, [sp, #8]
 800d8d4:	f7f2 fe36 	bl	8000544 <__aeabi_i2d>
 800d8d8:	4642      	mov	r2, r8
 800d8da:	464b      	mov	r3, r9
 800d8dc:	f7f2 fe9c 	bl	8000618 <__aeabi_dmul>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	4639      	mov	r1, r7
 800d8e8:	f7f2 fcde 	bl	80002a8 <__aeabi_dsub>
 800d8ec:	9e02      	ldr	r6, [sp, #8]
 800d8ee:	9f01      	ldr	r7, [sp, #4]
 800d8f0:	3630      	adds	r6, #48	; 0x30
 800d8f2:	f805 6b01 	strb.w	r6, [r5], #1
 800d8f6:	9e00      	ldr	r6, [sp, #0]
 800d8f8:	1bae      	subs	r6, r5, r6
 800d8fa:	42b7      	cmp	r7, r6
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	460b      	mov	r3, r1
 800d900:	d137      	bne.n	800d972 <_dtoa_r+0x722>
 800d902:	f7f2 fcd3 	bl	80002ac <__adddf3>
 800d906:	4642      	mov	r2, r8
 800d908:	464b      	mov	r3, r9
 800d90a:	4606      	mov	r6, r0
 800d90c:	460f      	mov	r7, r1
 800d90e:	f7f3 f913 	bl	8000b38 <__aeabi_dcmpgt>
 800d912:	b9c8      	cbnz	r0, 800d948 <_dtoa_r+0x6f8>
 800d914:	4642      	mov	r2, r8
 800d916:	464b      	mov	r3, r9
 800d918:	4630      	mov	r0, r6
 800d91a:	4639      	mov	r1, r7
 800d91c:	f7f3 f8e4 	bl	8000ae8 <__aeabi_dcmpeq>
 800d920:	b110      	cbz	r0, 800d928 <_dtoa_r+0x6d8>
 800d922:	9b02      	ldr	r3, [sp, #8]
 800d924:	07d9      	lsls	r1, r3, #31
 800d926:	d40f      	bmi.n	800d948 <_dtoa_r+0x6f8>
 800d928:	4620      	mov	r0, r4
 800d92a:	4659      	mov	r1, fp
 800d92c:	f000 fd06 	bl	800e33c <_Bfree>
 800d930:	2300      	movs	r3, #0
 800d932:	702b      	strb	r3, [r5, #0]
 800d934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d936:	f10a 0001 	add.w	r0, sl, #1
 800d93a:	6018      	str	r0, [r3, #0]
 800d93c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f43f acd8 	beq.w	800d2f4 <_dtoa_r+0xa4>
 800d944:	601d      	str	r5, [r3, #0]
 800d946:	e4d5      	b.n	800d2f4 <_dtoa_r+0xa4>
 800d948:	f8cd a01c 	str.w	sl, [sp, #28]
 800d94c:	462b      	mov	r3, r5
 800d94e:	461d      	mov	r5, r3
 800d950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d954:	2a39      	cmp	r2, #57	; 0x39
 800d956:	d108      	bne.n	800d96a <_dtoa_r+0x71a>
 800d958:	9a00      	ldr	r2, [sp, #0]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d1f7      	bne.n	800d94e <_dtoa_r+0x6fe>
 800d95e:	9a07      	ldr	r2, [sp, #28]
 800d960:	9900      	ldr	r1, [sp, #0]
 800d962:	3201      	adds	r2, #1
 800d964:	9207      	str	r2, [sp, #28]
 800d966:	2230      	movs	r2, #48	; 0x30
 800d968:	700a      	strb	r2, [r1, #0]
 800d96a:	781a      	ldrb	r2, [r3, #0]
 800d96c:	3201      	adds	r2, #1
 800d96e:	701a      	strb	r2, [r3, #0]
 800d970:	e78c      	b.n	800d88c <_dtoa_r+0x63c>
 800d972:	4b7f      	ldr	r3, [pc, #508]	; (800db70 <_dtoa_r+0x920>)
 800d974:	2200      	movs	r2, #0
 800d976:	f7f2 fe4f 	bl	8000618 <__aeabi_dmul>
 800d97a:	2200      	movs	r2, #0
 800d97c:	2300      	movs	r3, #0
 800d97e:	4606      	mov	r6, r0
 800d980:	460f      	mov	r7, r1
 800d982:	f7f3 f8b1 	bl	8000ae8 <__aeabi_dcmpeq>
 800d986:	2800      	cmp	r0, #0
 800d988:	d09b      	beq.n	800d8c2 <_dtoa_r+0x672>
 800d98a:	e7cd      	b.n	800d928 <_dtoa_r+0x6d8>
 800d98c:	9a08      	ldr	r2, [sp, #32]
 800d98e:	2a00      	cmp	r2, #0
 800d990:	f000 80c4 	beq.w	800db1c <_dtoa_r+0x8cc>
 800d994:	9a05      	ldr	r2, [sp, #20]
 800d996:	2a01      	cmp	r2, #1
 800d998:	f300 80a8 	bgt.w	800daec <_dtoa_r+0x89c>
 800d99c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d99e:	2a00      	cmp	r2, #0
 800d9a0:	f000 80a0 	beq.w	800dae4 <_dtoa_r+0x894>
 800d9a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d9a8:	9e06      	ldr	r6, [sp, #24]
 800d9aa:	4645      	mov	r5, r8
 800d9ac:	9a04      	ldr	r2, [sp, #16]
 800d9ae:	2101      	movs	r1, #1
 800d9b0:	441a      	add	r2, r3
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	4498      	add	r8, r3
 800d9b6:	9204      	str	r2, [sp, #16]
 800d9b8:	f000 fd7c 	bl	800e4b4 <__i2b>
 800d9bc:	4607      	mov	r7, r0
 800d9be:	2d00      	cmp	r5, #0
 800d9c0:	dd0b      	ble.n	800d9da <_dtoa_r+0x78a>
 800d9c2:	9b04      	ldr	r3, [sp, #16]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	dd08      	ble.n	800d9da <_dtoa_r+0x78a>
 800d9c8:	42ab      	cmp	r3, r5
 800d9ca:	9a04      	ldr	r2, [sp, #16]
 800d9cc:	bfa8      	it	ge
 800d9ce:	462b      	movge	r3, r5
 800d9d0:	eba8 0803 	sub.w	r8, r8, r3
 800d9d4:	1aed      	subs	r5, r5, r3
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	9304      	str	r3, [sp, #16]
 800d9da:	9b06      	ldr	r3, [sp, #24]
 800d9dc:	b1fb      	cbz	r3, 800da1e <_dtoa_r+0x7ce>
 800d9de:	9b08      	ldr	r3, [sp, #32]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f000 809f 	beq.w	800db24 <_dtoa_r+0x8d4>
 800d9e6:	2e00      	cmp	r6, #0
 800d9e8:	dd11      	ble.n	800da0e <_dtoa_r+0x7be>
 800d9ea:	4639      	mov	r1, r7
 800d9ec:	4632      	mov	r2, r6
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f000 fe1c 	bl	800e62c <__pow5mult>
 800d9f4:	465a      	mov	r2, fp
 800d9f6:	4601      	mov	r1, r0
 800d9f8:	4607      	mov	r7, r0
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f000 fd70 	bl	800e4e0 <__multiply>
 800da00:	4659      	mov	r1, fp
 800da02:	9007      	str	r0, [sp, #28]
 800da04:	4620      	mov	r0, r4
 800da06:	f000 fc99 	bl	800e33c <_Bfree>
 800da0a:	9b07      	ldr	r3, [sp, #28]
 800da0c:	469b      	mov	fp, r3
 800da0e:	9b06      	ldr	r3, [sp, #24]
 800da10:	1b9a      	subs	r2, r3, r6
 800da12:	d004      	beq.n	800da1e <_dtoa_r+0x7ce>
 800da14:	4659      	mov	r1, fp
 800da16:	4620      	mov	r0, r4
 800da18:	f000 fe08 	bl	800e62c <__pow5mult>
 800da1c:	4683      	mov	fp, r0
 800da1e:	2101      	movs	r1, #1
 800da20:	4620      	mov	r0, r4
 800da22:	f000 fd47 	bl	800e4b4 <__i2b>
 800da26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da28:	2b00      	cmp	r3, #0
 800da2a:	4606      	mov	r6, r0
 800da2c:	dd7c      	ble.n	800db28 <_dtoa_r+0x8d8>
 800da2e:	461a      	mov	r2, r3
 800da30:	4601      	mov	r1, r0
 800da32:	4620      	mov	r0, r4
 800da34:	f000 fdfa 	bl	800e62c <__pow5mult>
 800da38:	9b05      	ldr	r3, [sp, #20]
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	4606      	mov	r6, r0
 800da3e:	dd76      	ble.n	800db2e <_dtoa_r+0x8de>
 800da40:	2300      	movs	r3, #0
 800da42:	9306      	str	r3, [sp, #24]
 800da44:	6933      	ldr	r3, [r6, #16]
 800da46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800da4a:	6918      	ldr	r0, [r3, #16]
 800da4c:	f000 fce2 	bl	800e414 <__hi0bits>
 800da50:	f1c0 0020 	rsb	r0, r0, #32
 800da54:	9b04      	ldr	r3, [sp, #16]
 800da56:	4418      	add	r0, r3
 800da58:	f010 001f 	ands.w	r0, r0, #31
 800da5c:	f000 8086 	beq.w	800db6c <_dtoa_r+0x91c>
 800da60:	f1c0 0320 	rsb	r3, r0, #32
 800da64:	2b04      	cmp	r3, #4
 800da66:	dd7f      	ble.n	800db68 <_dtoa_r+0x918>
 800da68:	f1c0 001c 	rsb	r0, r0, #28
 800da6c:	9b04      	ldr	r3, [sp, #16]
 800da6e:	4403      	add	r3, r0
 800da70:	4480      	add	r8, r0
 800da72:	4405      	add	r5, r0
 800da74:	9304      	str	r3, [sp, #16]
 800da76:	f1b8 0f00 	cmp.w	r8, #0
 800da7a:	dd05      	ble.n	800da88 <_dtoa_r+0x838>
 800da7c:	4659      	mov	r1, fp
 800da7e:	4642      	mov	r2, r8
 800da80:	4620      	mov	r0, r4
 800da82:	f000 fe2d 	bl	800e6e0 <__lshift>
 800da86:	4683      	mov	fp, r0
 800da88:	9b04      	ldr	r3, [sp, #16]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	dd05      	ble.n	800da9a <_dtoa_r+0x84a>
 800da8e:	4631      	mov	r1, r6
 800da90:	461a      	mov	r2, r3
 800da92:	4620      	mov	r0, r4
 800da94:	f000 fe24 	bl	800e6e0 <__lshift>
 800da98:	4606      	mov	r6, r0
 800da9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d069      	beq.n	800db74 <_dtoa_r+0x924>
 800daa0:	4631      	mov	r1, r6
 800daa2:	4658      	mov	r0, fp
 800daa4:	f000 fe88 	bl	800e7b8 <__mcmp>
 800daa8:	2800      	cmp	r0, #0
 800daaa:	da63      	bge.n	800db74 <_dtoa_r+0x924>
 800daac:	2300      	movs	r3, #0
 800daae:	4659      	mov	r1, fp
 800dab0:	220a      	movs	r2, #10
 800dab2:	4620      	mov	r0, r4
 800dab4:	f000 fc64 	bl	800e380 <__multadd>
 800dab8:	9b08      	ldr	r3, [sp, #32]
 800daba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dabe:	4683      	mov	fp, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f000 818f 	beq.w	800dde4 <_dtoa_r+0xb94>
 800dac6:	4639      	mov	r1, r7
 800dac8:	2300      	movs	r3, #0
 800daca:	220a      	movs	r2, #10
 800dacc:	4620      	mov	r0, r4
 800dace:	f000 fc57 	bl	800e380 <__multadd>
 800dad2:	f1b9 0f00 	cmp.w	r9, #0
 800dad6:	4607      	mov	r7, r0
 800dad8:	f300 808e 	bgt.w	800dbf8 <_dtoa_r+0x9a8>
 800dadc:	9b05      	ldr	r3, [sp, #20]
 800dade:	2b02      	cmp	r3, #2
 800dae0:	dc50      	bgt.n	800db84 <_dtoa_r+0x934>
 800dae2:	e089      	b.n	800dbf8 <_dtoa_r+0x9a8>
 800dae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dae6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800daea:	e75d      	b.n	800d9a8 <_dtoa_r+0x758>
 800daec:	9b01      	ldr	r3, [sp, #4]
 800daee:	1e5e      	subs	r6, r3, #1
 800daf0:	9b06      	ldr	r3, [sp, #24]
 800daf2:	42b3      	cmp	r3, r6
 800daf4:	bfbf      	itttt	lt
 800daf6:	9b06      	ldrlt	r3, [sp, #24]
 800daf8:	9606      	strlt	r6, [sp, #24]
 800dafa:	1af2      	sublt	r2, r6, r3
 800dafc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800dafe:	bfb6      	itet	lt
 800db00:	189b      	addlt	r3, r3, r2
 800db02:	1b9e      	subge	r6, r3, r6
 800db04:	930d      	strlt	r3, [sp, #52]	; 0x34
 800db06:	9b01      	ldr	r3, [sp, #4]
 800db08:	bfb8      	it	lt
 800db0a:	2600      	movlt	r6, #0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	bfb5      	itete	lt
 800db10:	eba8 0503 	sublt.w	r5, r8, r3
 800db14:	9b01      	ldrge	r3, [sp, #4]
 800db16:	2300      	movlt	r3, #0
 800db18:	4645      	movge	r5, r8
 800db1a:	e747      	b.n	800d9ac <_dtoa_r+0x75c>
 800db1c:	9e06      	ldr	r6, [sp, #24]
 800db1e:	9f08      	ldr	r7, [sp, #32]
 800db20:	4645      	mov	r5, r8
 800db22:	e74c      	b.n	800d9be <_dtoa_r+0x76e>
 800db24:	9a06      	ldr	r2, [sp, #24]
 800db26:	e775      	b.n	800da14 <_dtoa_r+0x7c4>
 800db28:	9b05      	ldr	r3, [sp, #20]
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	dc18      	bgt.n	800db60 <_dtoa_r+0x910>
 800db2e:	9b02      	ldr	r3, [sp, #8]
 800db30:	b9b3      	cbnz	r3, 800db60 <_dtoa_r+0x910>
 800db32:	9b03      	ldr	r3, [sp, #12]
 800db34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db38:	b9a3      	cbnz	r3, 800db64 <_dtoa_r+0x914>
 800db3a:	9b03      	ldr	r3, [sp, #12]
 800db3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db40:	0d1b      	lsrs	r3, r3, #20
 800db42:	051b      	lsls	r3, r3, #20
 800db44:	b12b      	cbz	r3, 800db52 <_dtoa_r+0x902>
 800db46:	9b04      	ldr	r3, [sp, #16]
 800db48:	3301      	adds	r3, #1
 800db4a:	9304      	str	r3, [sp, #16]
 800db4c:	f108 0801 	add.w	r8, r8, #1
 800db50:	2301      	movs	r3, #1
 800db52:	9306      	str	r3, [sp, #24]
 800db54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db56:	2b00      	cmp	r3, #0
 800db58:	f47f af74 	bne.w	800da44 <_dtoa_r+0x7f4>
 800db5c:	2001      	movs	r0, #1
 800db5e:	e779      	b.n	800da54 <_dtoa_r+0x804>
 800db60:	2300      	movs	r3, #0
 800db62:	e7f6      	b.n	800db52 <_dtoa_r+0x902>
 800db64:	9b02      	ldr	r3, [sp, #8]
 800db66:	e7f4      	b.n	800db52 <_dtoa_r+0x902>
 800db68:	d085      	beq.n	800da76 <_dtoa_r+0x826>
 800db6a:	4618      	mov	r0, r3
 800db6c:	301c      	adds	r0, #28
 800db6e:	e77d      	b.n	800da6c <_dtoa_r+0x81c>
 800db70:	40240000 	.word	0x40240000
 800db74:	9b01      	ldr	r3, [sp, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	dc38      	bgt.n	800dbec <_dtoa_r+0x99c>
 800db7a:	9b05      	ldr	r3, [sp, #20]
 800db7c:	2b02      	cmp	r3, #2
 800db7e:	dd35      	ble.n	800dbec <_dtoa_r+0x99c>
 800db80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800db84:	f1b9 0f00 	cmp.w	r9, #0
 800db88:	d10d      	bne.n	800dba6 <_dtoa_r+0x956>
 800db8a:	4631      	mov	r1, r6
 800db8c:	464b      	mov	r3, r9
 800db8e:	2205      	movs	r2, #5
 800db90:	4620      	mov	r0, r4
 800db92:	f000 fbf5 	bl	800e380 <__multadd>
 800db96:	4601      	mov	r1, r0
 800db98:	4606      	mov	r6, r0
 800db9a:	4658      	mov	r0, fp
 800db9c:	f000 fe0c 	bl	800e7b8 <__mcmp>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	f73f adbd 	bgt.w	800d720 <_dtoa_r+0x4d0>
 800dba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dba8:	9d00      	ldr	r5, [sp, #0]
 800dbaa:	ea6f 0a03 	mvn.w	sl, r3
 800dbae:	f04f 0800 	mov.w	r8, #0
 800dbb2:	4631      	mov	r1, r6
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f000 fbc1 	bl	800e33c <_Bfree>
 800dbba:	2f00      	cmp	r7, #0
 800dbbc:	f43f aeb4 	beq.w	800d928 <_dtoa_r+0x6d8>
 800dbc0:	f1b8 0f00 	cmp.w	r8, #0
 800dbc4:	d005      	beq.n	800dbd2 <_dtoa_r+0x982>
 800dbc6:	45b8      	cmp	r8, r7
 800dbc8:	d003      	beq.n	800dbd2 <_dtoa_r+0x982>
 800dbca:	4641      	mov	r1, r8
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f000 fbb5 	bl	800e33c <_Bfree>
 800dbd2:	4639      	mov	r1, r7
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f000 fbb1 	bl	800e33c <_Bfree>
 800dbda:	e6a5      	b.n	800d928 <_dtoa_r+0x6d8>
 800dbdc:	2600      	movs	r6, #0
 800dbde:	4637      	mov	r7, r6
 800dbe0:	e7e1      	b.n	800dba6 <_dtoa_r+0x956>
 800dbe2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800dbe4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800dbe8:	4637      	mov	r7, r6
 800dbea:	e599      	b.n	800d720 <_dtoa_r+0x4d0>
 800dbec:	9b08      	ldr	r3, [sp, #32]
 800dbee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	f000 80fd 	beq.w	800ddf2 <_dtoa_r+0xba2>
 800dbf8:	2d00      	cmp	r5, #0
 800dbfa:	dd05      	ble.n	800dc08 <_dtoa_r+0x9b8>
 800dbfc:	4639      	mov	r1, r7
 800dbfe:	462a      	mov	r2, r5
 800dc00:	4620      	mov	r0, r4
 800dc02:	f000 fd6d 	bl	800e6e0 <__lshift>
 800dc06:	4607      	mov	r7, r0
 800dc08:	9b06      	ldr	r3, [sp, #24]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d05c      	beq.n	800dcc8 <_dtoa_r+0xa78>
 800dc0e:	6879      	ldr	r1, [r7, #4]
 800dc10:	4620      	mov	r0, r4
 800dc12:	f000 fb53 	bl	800e2bc <_Balloc>
 800dc16:	4605      	mov	r5, r0
 800dc18:	b928      	cbnz	r0, 800dc26 <_dtoa_r+0x9d6>
 800dc1a:	4b80      	ldr	r3, [pc, #512]	; (800de1c <_dtoa_r+0xbcc>)
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dc22:	f7ff bb2e 	b.w	800d282 <_dtoa_r+0x32>
 800dc26:	693a      	ldr	r2, [r7, #16]
 800dc28:	3202      	adds	r2, #2
 800dc2a:	0092      	lsls	r2, r2, #2
 800dc2c:	f107 010c 	add.w	r1, r7, #12
 800dc30:	300c      	adds	r0, #12
 800dc32:	f7fe fa01 	bl	800c038 <memcpy>
 800dc36:	2201      	movs	r2, #1
 800dc38:	4629      	mov	r1, r5
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f000 fd50 	bl	800e6e0 <__lshift>
 800dc40:	9b00      	ldr	r3, [sp, #0]
 800dc42:	3301      	adds	r3, #1
 800dc44:	9301      	str	r3, [sp, #4]
 800dc46:	9b00      	ldr	r3, [sp, #0]
 800dc48:	444b      	add	r3, r9
 800dc4a:	9307      	str	r3, [sp, #28]
 800dc4c:	9b02      	ldr	r3, [sp, #8]
 800dc4e:	f003 0301 	and.w	r3, r3, #1
 800dc52:	46b8      	mov	r8, r7
 800dc54:	9306      	str	r3, [sp, #24]
 800dc56:	4607      	mov	r7, r0
 800dc58:	9b01      	ldr	r3, [sp, #4]
 800dc5a:	4631      	mov	r1, r6
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	4658      	mov	r0, fp
 800dc60:	9302      	str	r3, [sp, #8]
 800dc62:	f7ff fa68 	bl	800d136 <quorem>
 800dc66:	4603      	mov	r3, r0
 800dc68:	3330      	adds	r3, #48	; 0x30
 800dc6a:	9004      	str	r0, [sp, #16]
 800dc6c:	4641      	mov	r1, r8
 800dc6e:	4658      	mov	r0, fp
 800dc70:	9308      	str	r3, [sp, #32]
 800dc72:	f000 fda1 	bl	800e7b8 <__mcmp>
 800dc76:	463a      	mov	r2, r7
 800dc78:	4681      	mov	r9, r0
 800dc7a:	4631      	mov	r1, r6
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	f000 fdb7 	bl	800e7f0 <__mdiff>
 800dc82:	68c2      	ldr	r2, [r0, #12]
 800dc84:	9b08      	ldr	r3, [sp, #32]
 800dc86:	4605      	mov	r5, r0
 800dc88:	bb02      	cbnz	r2, 800dccc <_dtoa_r+0xa7c>
 800dc8a:	4601      	mov	r1, r0
 800dc8c:	4658      	mov	r0, fp
 800dc8e:	f000 fd93 	bl	800e7b8 <__mcmp>
 800dc92:	9b08      	ldr	r3, [sp, #32]
 800dc94:	4602      	mov	r2, r0
 800dc96:	4629      	mov	r1, r5
 800dc98:	4620      	mov	r0, r4
 800dc9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800dc9e:	f000 fb4d 	bl	800e33c <_Bfree>
 800dca2:	9b05      	ldr	r3, [sp, #20]
 800dca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dca6:	9d01      	ldr	r5, [sp, #4]
 800dca8:	ea43 0102 	orr.w	r1, r3, r2
 800dcac:	9b06      	ldr	r3, [sp, #24]
 800dcae:	430b      	orrs	r3, r1
 800dcb0:	9b08      	ldr	r3, [sp, #32]
 800dcb2:	d10d      	bne.n	800dcd0 <_dtoa_r+0xa80>
 800dcb4:	2b39      	cmp	r3, #57	; 0x39
 800dcb6:	d029      	beq.n	800dd0c <_dtoa_r+0xabc>
 800dcb8:	f1b9 0f00 	cmp.w	r9, #0
 800dcbc:	dd01      	ble.n	800dcc2 <_dtoa_r+0xa72>
 800dcbe:	9b04      	ldr	r3, [sp, #16]
 800dcc0:	3331      	adds	r3, #49	; 0x31
 800dcc2:	9a02      	ldr	r2, [sp, #8]
 800dcc4:	7013      	strb	r3, [r2, #0]
 800dcc6:	e774      	b.n	800dbb2 <_dtoa_r+0x962>
 800dcc8:	4638      	mov	r0, r7
 800dcca:	e7b9      	b.n	800dc40 <_dtoa_r+0x9f0>
 800dccc:	2201      	movs	r2, #1
 800dcce:	e7e2      	b.n	800dc96 <_dtoa_r+0xa46>
 800dcd0:	f1b9 0f00 	cmp.w	r9, #0
 800dcd4:	db06      	blt.n	800dce4 <_dtoa_r+0xa94>
 800dcd6:	9905      	ldr	r1, [sp, #20]
 800dcd8:	ea41 0909 	orr.w	r9, r1, r9
 800dcdc:	9906      	ldr	r1, [sp, #24]
 800dcde:	ea59 0101 	orrs.w	r1, r9, r1
 800dce2:	d120      	bne.n	800dd26 <_dtoa_r+0xad6>
 800dce4:	2a00      	cmp	r2, #0
 800dce6:	ddec      	ble.n	800dcc2 <_dtoa_r+0xa72>
 800dce8:	4659      	mov	r1, fp
 800dcea:	2201      	movs	r2, #1
 800dcec:	4620      	mov	r0, r4
 800dcee:	9301      	str	r3, [sp, #4]
 800dcf0:	f000 fcf6 	bl	800e6e0 <__lshift>
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	4683      	mov	fp, r0
 800dcf8:	f000 fd5e 	bl	800e7b8 <__mcmp>
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	9b01      	ldr	r3, [sp, #4]
 800dd00:	dc02      	bgt.n	800dd08 <_dtoa_r+0xab8>
 800dd02:	d1de      	bne.n	800dcc2 <_dtoa_r+0xa72>
 800dd04:	07da      	lsls	r2, r3, #31
 800dd06:	d5dc      	bpl.n	800dcc2 <_dtoa_r+0xa72>
 800dd08:	2b39      	cmp	r3, #57	; 0x39
 800dd0a:	d1d8      	bne.n	800dcbe <_dtoa_r+0xa6e>
 800dd0c:	9a02      	ldr	r2, [sp, #8]
 800dd0e:	2339      	movs	r3, #57	; 0x39
 800dd10:	7013      	strb	r3, [r2, #0]
 800dd12:	462b      	mov	r3, r5
 800dd14:	461d      	mov	r5, r3
 800dd16:	3b01      	subs	r3, #1
 800dd18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd1c:	2a39      	cmp	r2, #57	; 0x39
 800dd1e:	d050      	beq.n	800ddc2 <_dtoa_r+0xb72>
 800dd20:	3201      	adds	r2, #1
 800dd22:	701a      	strb	r2, [r3, #0]
 800dd24:	e745      	b.n	800dbb2 <_dtoa_r+0x962>
 800dd26:	2a00      	cmp	r2, #0
 800dd28:	dd03      	ble.n	800dd32 <_dtoa_r+0xae2>
 800dd2a:	2b39      	cmp	r3, #57	; 0x39
 800dd2c:	d0ee      	beq.n	800dd0c <_dtoa_r+0xabc>
 800dd2e:	3301      	adds	r3, #1
 800dd30:	e7c7      	b.n	800dcc2 <_dtoa_r+0xa72>
 800dd32:	9a01      	ldr	r2, [sp, #4]
 800dd34:	9907      	ldr	r1, [sp, #28]
 800dd36:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dd3a:	428a      	cmp	r2, r1
 800dd3c:	d02a      	beq.n	800dd94 <_dtoa_r+0xb44>
 800dd3e:	4659      	mov	r1, fp
 800dd40:	2300      	movs	r3, #0
 800dd42:	220a      	movs	r2, #10
 800dd44:	4620      	mov	r0, r4
 800dd46:	f000 fb1b 	bl	800e380 <__multadd>
 800dd4a:	45b8      	cmp	r8, r7
 800dd4c:	4683      	mov	fp, r0
 800dd4e:	f04f 0300 	mov.w	r3, #0
 800dd52:	f04f 020a 	mov.w	r2, #10
 800dd56:	4641      	mov	r1, r8
 800dd58:	4620      	mov	r0, r4
 800dd5a:	d107      	bne.n	800dd6c <_dtoa_r+0xb1c>
 800dd5c:	f000 fb10 	bl	800e380 <__multadd>
 800dd60:	4680      	mov	r8, r0
 800dd62:	4607      	mov	r7, r0
 800dd64:	9b01      	ldr	r3, [sp, #4]
 800dd66:	3301      	adds	r3, #1
 800dd68:	9301      	str	r3, [sp, #4]
 800dd6a:	e775      	b.n	800dc58 <_dtoa_r+0xa08>
 800dd6c:	f000 fb08 	bl	800e380 <__multadd>
 800dd70:	4639      	mov	r1, r7
 800dd72:	4680      	mov	r8, r0
 800dd74:	2300      	movs	r3, #0
 800dd76:	220a      	movs	r2, #10
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f000 fb01 	bl	800e380 <__multadd>
 800dd7e:	4607      	mov	r7, r0
 800dd80:	e7f0      	b.n	800dd64 <_dtoa_r+0xb14>
 800dd82:	f1b9 0f00 	cmp.w	r9, #0
 800dd86:	9a00      	ldr	r2, [sp, #0]
 800dd88:	bfcc      	ite	gt
 800dd8a:	464d      	movgt	r5, r9
 800dd8c:	2501      	movle	r5, #1
 800dd8e:	4415      	add	r5, r2
 800dd90:	f04f 0800 	mov.w	r8, #0
 800dd94:	4659      	mov	r1, fp
 800dd96:	2201      	movs	r2, #1
 800dd98:	4620      	mov	r0, r4
 800dd9a:	9301      	str	r3, [sp, #4]
 800dd9c:	f000 fca0 	bl	800e6e0 <__lshift>
 800dda0:	4631      	mov	r1, r6
 800dda2:	4683      	mov	fp, r0
 800dda4:	f000 fd08 	bl	800e7b8 <__mcmp>
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	dcb2      	bgt.n	800dd12 <_dtoa_r+0xac2>
 800ddac:	d102      	bne.n	800ddb4 <_dtoa_r+0xb64>
 800ddae:	9b01      	ldr	r3, [sp, #4]
 800ddb0:	07db      	lsls	r3, r3, #31
 800ddb2:	d4ae      	bmi.n	800dd12 <_dtoa_r+0xac2>
 800ddb4:	462b      	mov	r3, r5
 800ddb6:	461d      	mov	r5, r3
 800ddb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddbc:	2a30      	cmp	r2, #48	; 0x30
 800ddbe:	d0fa      	beq.n	800ddb6 <_dtoa_r+0xb66>
 800ddc0:	e6f7      	b.n	800dbb2 <_dtoa_r+0x962>
 800ddc2:	9a00      	ldr	r2, [sp, #0]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d1a5      	bne.n	800dd14 <_dtoa_r+0xac4>
 800ddc8:	f10a 0a01 	add.w	sl, sl, #1
 800ddcc:	2331      	movs	r3, #49	; 0x31
 800ddce:	e779      	b.n	800dcc4 <_dtoa_r+0xa74>
 800ddd0:	4b13      	ldr	r3, [pc, #76]	; (800de20 <_dtoa_r+0xbd0>)
 800ddd2:	f7ff baaf 	b.w	800d334 <_dtoa_r+0xe4>
 800ddd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	f47f aa86 	bne.w	800d2ea <_dtoa_r+0x9a>
 800ddde:	4b11      	ldr	r3, [pc, #68]	; (800de24 <_dtoa_r+0xbd4>)
 800dde0:	f7ff baa8 	b.w	800d334 <_dtoa_r+0xe4>
 800dde4:	f1b9 0f00 	cmp.w	r9, #0
 800dde8:	dc03      	bgt.n	800ddf2 <_dtoa_r+0xba2>
 800ddea:	9b05      	ldr	r3, [sp, #20]
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	f73f aec9 	bgt.w	800db84 <_dtoa_r+0x934>
 800ddf2:	9d00      	ldr	r5, [sp, #0]
 800ddf4:	4631      	mov	r1, r6
 800ddf6:	4658      	mov	r0, fp
 800ddf8:	f7ff f99d 	bl	800d136 <quorem>
 800ddfc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800de00:	f805 3b01 	strb.w	r3, [r5], #1
 800de04:	9a00      	ldr	r2, [sp, #0]
 800de06:	1aaa      	subs	r2, r5, r2
 800de08:	4591      	cmp	r9, r2
 800de0a:	ddba      	ble.n	800dd82 <_dtoa_r+0xb32>
 800de0c:	4659      	mov	r1, fp
 800de0e:	2300      	movs	r3, #0
 800de10:	220a      	movs	r2, #10
 800de12:	4620      	mov	r0, r4
 800de14:	f000 fab4 	bl	800e380 <__multadd>
 800de18:	4683      	mov	fp, r0
 800de1a:	e7eb      	b.n	800ddf4 <_dtoa_r+0xba4>
 800de1c:	0800f631 	.word	0x0800f631
 800de20:	0800f489 	.word	0x0800f489
 800de24:	0800f5ae 	.word	0x0800f5ae

0800de28 <__sflush_r>:
 800de28:	898a      	ldrh	r2, [r1, #12]
 800de2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de2e:	4605      	mov	r5, r0
 800de30:	0710      	lsls	r0, r2, #28
 800de32:	460c      	mov	r4, r1
 800de34:	d458      	bmi.n	800dee8 <__sflush_r+0xc0>
 800de36:	684b      	ldr	r3, [r1, #4]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	dc05      	bgt.n	800de48 <__sflush_r+0x20>
 800de3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de3e:	2b00      	cmp	r3, #0
 800de40:	dc02      	bgt.n	800de48 <__sflush_r+0x20>
 800de42:	2000      	movs	r0, #0
 800de44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de4a:	2e00      	cmp	r6, #0
 800de4c:	d0f9      	beq.n	800de42 <__sflush_r+0x1a>
 800de4e:	2300      	movs	r3, #0
 800de50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de54:	682f      	ldr	r7, [r5, #0]
 800de56:	602b      	str	r3, [r5, #0]
 800de58:	d032      	beq.n	800dec0 <__sflush_r+0x98>
 800de5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de5c:	89a3      	ldrh	r3, [r4, #12]
 800de5e:	075a      	lsls	r2, r3, #29
 800de60:	d505      	bpl.n	800de6e <__sflush_r+0x46>
 800de62:	6863      	ldr	r3, [r4, #4]
 800de64:	1ac0      	subs	r0, r0, r3
 800de66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de68:	b10b      	cbz	r3, 800de6e <__sflush_r+0x46>
 800de6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de6c:	1ac0      	subs	r0, r0, r3
 800de6e:	2300      	movs	r3, #0
 800de70:	4602      	mov	r2, r0
 800de72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de74:	6a21      	ldr	r1, [r4, #32]
 800de76:	4628      	mov	r0, r5
 800de78:	47b0      	blx	r6
 800de7a:	1c43      	adds	r3, r0, #1
 800de7c:	89a3      	ldrh	r3, [r4, #12]
 800de7e:	d106      	bne.n	800de8e <__sflush_r+0x66>
 800de80:	6829      	ldr	r1, [r5, #0]
 800de82:	291d      	cmp	r1, #29
 800de84:	d82c      	bhi.n	800dee0 <__sflush_r+0xb8>
 800de86:	4a2a      	ldr	r2, [pc, #168]	; (800df30 <__sflush_r+0x108>)
 800de88:	40ca      	lsrs	r2, r1
 800de8a:	07d6      	lsls	r6, r2, #31
 800de8c:	d528      	bpl.n	800dee0 <__sflush_r+0xb8>
 800de8e:	2200      	movs	r2, #0
 800de90:	6062      	str	r2, [r4, #4]
 800de92:	04d9      	lsls	r1, r3, #19
 800de94:	6922      	ldr	r2, [r4, #16]
 800de96:	6022      	str	r2, [r4, #0]
 800de98:	d504      	bpl.n	800dea4 <__sflush_r+0x7c>
 800de9a:	1c42      	adds	r2, r0, #1
 800de9c:	d101      	bne.n	800dea2 <__sflush_r+0x7a>
 800de9e:	682b      	ldr	r3, [r5, #0]
 800dea0:	b903      	cbnz	r3, 800dea4 <__sflush_r+0x7c>
 800dea2:	6560      	str	r0, [r4, #84]	; 0x54
 800dea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dea6:	602f      	str	r7, [r5, #0]
 800dea8:	2900      	cmp	r1, #0
 800deaa:	d0ca      	beq.n	800de42 <__sflush_r+0x1a>
 800deac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800deb0:	4299      	cmp	r1, r3
 800deb2:	d002      	beq.n	800deba <__sflush_r+0x92>
 800deb4:	4628      	mov	r0, r5
 800deb6:	f7fe f8d5 	bl	800c064 <_free_r>
 800deba:	2000      	movs	r0, #0
 800debc:	6360      	str	r0, [r4, #52]	; 0x34
 800debe:	e7c1      	b.n	800de44 <__sflush_r+0x1c>
 800dec0:	6a21      	ldr	r1, [r4, #32]
 800dec2:	2301      	movs	r3, #1
 800dec4:	4628      	mov	r0, r5
 800dec6:	47b0      	blx	r6
 800dec8:	1c41      	adds	r1, r0, #1
 800deca:	d1c7      	bne.n	800de5c <__sflush_r+0x34>
 800decc:	682b      	ldr	r3, [r5, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d0c4      	beq.n	800de5c <__sflush_r+0x34>
 800ded2:	2b1d      	cmp	r3, #29
 800ded4:	d001      	beq.n	800deda <__sflush_r+0xb2>
 800ded6:	2b16      	cmp	r3, #22
 800ded8:	d101      	bne.n	800dede <__sflush_r+0xb6>
 800deda:	602f      	str	r7, [r5, #0]
 800dedc:	e7b1      	b.n	800de42 <__sflush_r+0x1a>
 800dede:	89a3      	ldrh	r3, [r4, #12]
 800dee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dee4:	81a3      	strh	r3, [r4, #12]
 800dee6:	e7ad      	b.n	800de44 <__sflush_r+0x1c>
 800dee8:	690f      	ldr	r7, [r1, #16]
 800deea:	2f00      	cmp	r7, #0
 800deec:	d0a9      	beq.n	800de42 <__sflush_r+0x1a>
 800deee:	0793      	lsls	r3, r2, #30
 800def0:	680e      	ldr	r6, [r1, #0]
 800def2:	bf08      	it	eq
 800def4:	694b      	ldreq	r3, [r1, #20]
 800def6:	600f      	str	r7, [r1, #0]
 800def8:	bf18      	it	ne
 800defa:	2300      	movne	r3, #0
 800defc:	eba6 0807 	sub.w	r8, r6, r7
 800df00:	608b      	str	r3, [r1, #8]
 800df02:	f1b8 0f00 	cmp.w	r8, #0
 800df06:	dd9c      	ble.n	800de42 <__sflush_r+0x1a>
 800df08:	6a21      	ldr	r1, [r4, #32]
 800df0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df0c:	4643      	mov	r3, r8
 800df0e:	463a      	mov	r2, r7
 800df10:	4628      	mov	r0, r5
 800df12:	47b0      	blx	r6
 800df14:	2800      	cmp	r0, #0
 800df16:	dc06      	bgt.n	800df26 <__sflush_r+0xfe>
 800df18:	89a3      	ldrh	r3, [r4, #12]
 800df1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df1e:	81a3      	strh	r3, [r4, #12]
 800df20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df24:	e78e      	b.n	800de44 <__sflush_r+0x1c>
 800df26:	4407      	add	r7, r0
 800df28:	eba8 0800 	sub.w	r8, r8, r0
 800df2c:	e7e9      	b.n	800df02 <__sflush_r+0xda>
 800df2e:	bf00      	nop
 800df30:	20400001 	.word	0x20400001

0800df34 <_fflush_r>:
 800df34:	b538      	push	{r3, r4, r5, lr}
 800df36:	690b      	ldr	r3, [r1, #16]
 800df38:	4605      	mov	r5, r0
 800df3a:	460c      	mov	r4, r1
 800df3c:	b913      	cbnz	r3, 800df44 <_fflush_r+0x10>
 800df3e:	2500      	movs	r5, #0
 800df40:	4628      	mov	r0, r5
 800df42:	bd38      	pop	{r3, r4, r5, pc}
 800df44:	b118      	cbz	r0, 800df4e <_fflush_r+0x1a>
 800df46:	6983      	ldr	r3, [r0, #24]
 800df48:	b90b      	cbnz	r3, 800df4e <_fflush_r+0x1a>
 800df4a:	f000 f887 	bl	800e05c <__sinit>
 800df4e:	4b14      	ldr	r3, [pc, #80]	; (800dfa0 <_fflush_r+0x6c>)
 800df50:	429c      	cmp	r4, r3
 800df52:	d11b      	bne.n	800df8c <_fflush_r+0x58>
 800df54:	686c      	ldr	r4, [r5, #4]
 800df56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d0ef      	beq.n	800df3e <_fflush_r+0xa>
 800df5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df60:	07d0      	lsls	r0, r2, #31
 800df62:	d404      	bmi.n	800df6e <_fflush_r+0x3a>
 800df64:	0599      	lsls	r1, r3, #22
 800df66:	d402      	bmi.n	800df6e <_fflush_r+0x3a>
 800df68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df6a:	f000 f91a 	bl	800e1a2 <__retarget_lock_acquire_recursive>
 800df6e:	4628      	mov	r0, r5
 800df70:	4621      	mov	r1, r4
 800df72:	f7ff ff59 	bl	800de28 <__sflush_r>
 800df76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df78:	07da      	lsls	r2, r3, #31
 800df7a:	4605      	mov	r5, r0
 800df7c:	d4e0      	bmi.n	800df40 <_fflush_r+0xc>
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	059b      	lsls	r3, r3, #22
 800df82:	d4dd      	bmi.n	800df40 <_fflush_r+0xc>
 800df84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df86:	f000 f90d 	bl	800e1a4 <__retarget_lock_release_recursive>
 800df8a:	e7d9      	b.n	800df40 <_fflush_r+0xc>
 800df8c:	4b05      	ldr	r3, [pc, #20]	; (800dfa4 <_fflush_r+0x70>)
 800df8e:	429c      	cmp	r4, r3
 800df90:	d101      	bne.n	800df96 <_fflush_r+0x62>
 800df92:	68ac      	ldr	r4, [r5, #8]
 800df94:	e7df      	b.n	800df56 <_fflush_r+0x22>
 800df96:	4b04      	ldr	r3, [pc, #16]	; (800dfa8 <_fflush_r+0x74>)
 800df98:	429c      	cmp	r4, r3
 800df9a:	bf08      	it	eq
 800df9c:	68ec      	ldreq	r4, [r5, #12]
 800df9e:	e7da      	b.n	800df56 <_fflush_r+0x22>
 800dfa0:	0800f664 	.word	0x0800f664
 800dfa4:	0800f684 	.word	0x0800f684
 800dfa8:	0800f644 	.word	0x0800f644

0800dfac <std>:
 800dfac:	2300      	movs	r3, #0
 800dfae:	b510      	push	{r4, lr}
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	e9c0 3300 	strd	r3, r3, [r0]
 800dfb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dfba:	6083      	str	r3, [r0, #8]
 800dfbc:	8181      	strh	r1, [r0, #12]
 800dfbe:	6643      	str	r3, [r0, #100]	; 0x64
 800dfc0:	81c2      	strh	r2, [r0, #14]
 800dfc2:	6183      	str	r3, [r0, #24]
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	2208      	movs	r2, #8
 800dfc8:	305c      	adds	r0, #92	; 0x5c
 800dfca:	f7fe f843 	bl	800c054 <memset>
 800dfce:	4b05      	ldr	r3, [pc, #20]	; (800dfe4 <std+0x38>)
 800dfd0:	6263      	str	r3, [r4, #36]	; 0x24
 800dfd2:	4b05      	ldr	r3, [pc, #20]	; (800dfe8 <std+0x3c>)
 800dfd4:	62a3      	str	r3, [r4, #40]	; 0x28
 800dfd6:	4b05      	ldr	r3, [pc, #20]	; (800dfec <std+0x40>)
 800dfd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dfda:	4b05      	ldr	r3, [pc, #20]	; (800dff0 <std+0x44>)
 800dfdc:	6224      	str	r4, [r4, #32]
 800dfde:	6323      	str	r3, [r4, #48]	; 0x30
 800dfe0:	bd10      	pop	{r4, pc}
 800dfe2:	bf00      	nop
 800dfe4:	0800ed61 	.word	0x0800ed61
 800dfe8:	0800ed83 	.word	0x0800ed83
 800dfec:	0800edbb 	.word	0x0800edbb
 800dff0:	0800eddf 	.word	0x0800eddf

0800dff4 <_cleanup_r>:
 800dff4:	4901      	ldr	r1, [pc, #4]	; (800dffc <_cleanup_r+0x8>)
 800dff6:	f000 b8af 	b.w	800e158 <_fwalk_reent>
 800dffa:	bf00      	nop
 800dffc:	0800df35 	.word	0x0800df35

0800e000 <__sfmoreglue>:
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	1e4a      	subs	r2, r1, #1
 800e004:	2568      	movs	r5, #104	; 0x68
 800e006:	4355      	muls	r5, r2
 800e008:	460e      	mov	r6, r1
 800e00a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e00e:	f7fe f879 	bl	800c104 <_malloc_r>
 800e012:	4604      	mov	r4, r0
 800e014:	b140      	cbz	r0, 800e028 <__sfmoreglue+0x28>
 800e016:	2100      	movs	r1, #0
 800e018:	e9c0 1600 	strd	r1, r6, [r0]
 800e01c:	300c      	adds	r0, #12
 800e01e:	60a0      	str	r0, [r4, #8]
 800e020:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e024:	f7fe f816 	bl	800c054 <memset>
 800e028:	4620      	mov	r0, r4
 800e02a:	bd70      	pop	{r4, r5, r6, pc}

0800e02c <__sfp_lock_acquire>:
 800e02c:	4801      	ldr	r0, [pc, #4]	; (800e034 <__sfp_lock_acquire+0x8>)
 800e02e:	f000 b8b8 	b.w	800e1a2 <__retarget_lock_acquire_recursive>
 800e032:	bf00      	nop
 800e034:	20000d98 	.word	0x20000d98

0800e038 <__sfp_lock_release>:
 800e038:	4801      	ldr	r0, [pc, #4]	; (800e040 <__sfp_lock_release+0x8>)
 800e03a:	f000 b8b3 	b.w	800e1a4 <__retarget_lock_release_recursive>
 800e03e:	bf00      	nop
 800e040:	20000d98 	.word	0x20000d98

0800e044 <__sinit_lock_acquire>:
 800e044:	4801      	ldr	r0, [pc, #4]	; (800e04c <__sinit_lock_acquire+0x8>)
 800e046:	f000 b8ac 	b.w	800e1a2 <__retarget_lock_acquire_recursive>
 800e04a:	bf00      	nop
 800e04c:	20000d93 	.word	0x20000d93

0800e050 <__sinit_lock_release>:
 800e050:	4801      	ldr	r0, [pc, #4]	; (800e058 <__sinit_lock_release+0x8>)
 800e052:	f000 b8a7 	b.w	800e1a4 <__retarget_lock_release_recursive>
 800e056:	bf00      	nop
 800e058:	20000d93 	.word	0x20000d93

0800e05c <__sinit>:
 800e05c:	b510      	push	{r4, lr}
 800e05e:	4604      	mov	r4, r0
 800e060:	f7ff fff0 	bl	800e044 <__sinit_lock_acquire>
 800e064:	69a3      	ldr	r3, [r4, #24]
 800e066:	b11b      	cbz	r3, 800e070 <__sinit+0x14>
 800e068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e06c:	f7ff bff0 	b.w	800e050 <__sinit_lock_release>
 800e070:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e074:	6523      	str	r3, [r4, #80]	; 0x50
 800e076:	4b13      	ldr	r3, [pc, #76]	; (800e0c4 <__sinit+0x68>)
 800e078:	4a13      	ldr	r2, [pc, #76]	; (800e0c8 <__sinit+0x6c>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e07e:	42a3      	cmp	r3, r4
 800e080:	bf04      	itt	eq
 800e082:	2301      	moveq	r3, #1
 800e084:	61a3      	streq	r3, [r4, #24]
 800e086:	4620      	mov	r0, r4
 800e088:	f000 f820 	bl	800e0cc <__sfp>
 800e08c:	6060      	str	r0, [r4, #4]
 800e08e:	4620      	mov	r0, r4
 800e090:	f000 f81c 	bl	800e0cc <__sfp>
 800e094:	60a0      	str	r0, [r4, #8]
 800e096:	4620      	mov	r0, r4
 800e098:	f000 f818 	bl	800e0cc <__sfp>
 800e09c:	2200      	movs	r2, #0
 800e09e:	60e0      	str	r0, [r4, #12]
 800e0a0:	2104      	movs	r1, #4
 800e0a2:	6860      	ldr	r0, [r4, #4]
 800e0a4:	f7ff ff82 	bl	800dfac <std>
 800e0a8:	68a0      	ldr	r0, [r4, #8]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	2109      	movs	r1, #9
 800e0ae:	f7ff ff7d 	bl	800dfac <std>
 800e0b2:	68e0      	ldr	r0, [r4, #12]
 800e0b4:	2202      	movs	r2, #2
 800e0b6:	2112      	movs	r1, #18
 800e0b8:	f7ff ff78 	bl	800dfac <std>
 800e0bc:	2301      	movs	r3, #1
 800e0be:	61a3      	str	r3, [r4, #24]
 800e0c0:	e7d2      	b.n	800e068 <__sinit+0xc>
 800e0c2:	bf00      	nop
 800e0c4:	0800f464 	.word	0x0800f464
 800e0c8:	0800dff5 	.word	0x0800dff5

0800e0cc <__sfp>:
 800e0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ce:	4607      	mov	r7, r0
 800e0d0:	f7ff ffac 	bl	800e02c <__sfp_lock_acquire>
 800e0d4:	4b1e      	ldr	r3, [pc, #120]	; (800e150 <__sfp+0x84>)
 800e0d6:	681e      	ldr	r6, [r3, #0]
 800e0d8:	69b3      	ldr	r3, [r6, #24]
 800e0da:	b913      	cbnz	r3, 800e0e2 <__sfp+0x16>
 800e0dc:	4630      	mov	r0, r6
 800e0de:	f7ff ffbd 	bl	800e05c <__sinit>
 800e0e2:	3648      	adds	r6, #72	; 0x48
 800e0e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	d503      	bpl.n	800e0f4 <__sfp+0x28>
 800e0ec:	6833      	ldr	r3, [r6, #0]
 800e0ee:	b30b      	cbz	r3, 800e134 <__sfp+0x68>
 800e0f0:	6836      	ldr	r6, [r6, #0]
 800e0f2:	e7f7      	b.n	800e0e4 <__sfp+0x18>
 800e0f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e0f8:	b9d5      	cbnz	r5, 800e130 <__sfp+0x64>
 800e0fa:	4b16      	ldr	r3, [pc, #88]	; (800e154 <__sfp+0x88>)
 800e0fc:	60e3      	str	r3, [r4, #12]
 800e0fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e102:	6665      	str	r5, [r4, #100]	; 0x64
 800e104:	f000 f84c 	bl	800e1a0 <__retarget_lock_init_recursive>
 800e108:	f7ff ff96 	bl	800e038 <__sfp_lock_release>
 800e10c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e110:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e114:	6025      	str	r5, [r4, #0]
 800e116:	61a5      	str	r5, [r4, #24]
 800e118:	2208      	movs	r2, #8
 800e11a:	4629      	mov	r1, r5
 800e11c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e120:	f7fd ff98 	bl	800c054 <memset>
 800e124:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e128:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e12c:	4620      	mov	r0, r4
 800e12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e130:	3468      	adds	r4, #104	; 0x68
 800e132:	e7d9      	b.n	800e0e8 <__sfp+0x1c>
 800e134:	2104      	movs	r1, #4
 800e136:	4638      	mov	r0, r7
 800e138:	f7ff ff62 	bl	800e000 <__sfmoreglue>
 800e13c:	4604      	mov	r4, r0
 800e13e:	6030      	str	r0, [r6, #0]
 800e140:	2800      	cmp	r0, #0
 800e142:	d1d5      	bne.n	800e0f0 <__sfp+0x24>
 800e144:	f7ff ff78 	bl	800e038 <__sfp_lock_release>
 800e148:	230c      	movs	r3, #12
 800e14a:	603b      	str	r3, [r7, #0]
 800e14c:	e7ee      	b.n	800e12c <__sfp+0x60>
 800e14e:	bf00      	nop
 800e150:	0800f464 	.word	0x0800f464
 800e154:	ffff0001 	.word	0xffff0001

0800e158 <_fwalk_reent>:
 800e158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e15c:	4606      	mov	r6, r0
 800e15e:	4688      	mov	r8, r1
 800e160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e164:	2700      	movs	r7, #0
 800e166:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e16a:	f1b9 0901 	subs.w	r9, r9, #1
 800e16e:	d505      	bpl.n	800e17c <_fwalk_reent+0x24>
 800e170:	6824      	ldr	r4, [r4, #0]
 800e172:	2c00      	cmp	r4, #0
 800e174:	d1f7      	bne.n	800e166 <_fwalk_reent+0xe>
 800e176:	4638      	mov	r0, r7
 800e178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e17c:	89ab      	ldrh	r3, [r5, #12]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d907      	bls.n	800e192 <_fwalk_reent+0x3a>
 800e182:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e186:	3301      	adds	r3, #1
 800e188:	d003      	beq.n	800e192 <_fwalk_reent+0x3a>
 800e18a:	4629      	mov	r1, r5
 800e18c:	4630      	mov	r0, r6
 800e18e:	47c0      	blx	r8
 800e190:	4307      	orrs	r7, r0
 800e192:	3568      	adds	r5, #104	; 0x68
 800e194:	e7e9      	b.n	800e16a <_fwalk_reent+0x12>
	...

0800e198 <_localeconv_r>:
 800e198:	4800      	ldr	r0, [pc, #0]	; (800e19c <_localeconv_r+0x4>)
 800e19a:	4770      	bx	lr
 800e19c:	20000178 	.word	0x20000178

0800e1a0 <__retarget_lock_init_recursive>:
 800e1a0:	4770      	bx	lr

0800e1a2 <__retarget_lock_acquire_recursive>:
 800e1a2:	4770      	bx	lr

0800e1a4 <__retarget_lock_release_recursive>:
 800e1a4:	4770      	bx	lr

0800e1a6 <__swhatbuf_r>:
 800e1a6:	b570      	push	{r4, r5, r6, lr}
 800e1a8:	460e      	mov	r6, r1
 800e1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ae:	2900      	cmp	r1, #0
 800e1b0:	b096      	sub	sp, #88	; 0x58
 800e1b2:	4614      	mov	r4, r2
 800e1b4:	461d      	mov	r5, r3
 800e1b6:	da07      	bge.n	800e1c8 <__swhatbuf_r+0x22>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	602b      	str	r3, [r5, #0]
 800e1bc:	89b3      	ldrh	r3, [r6, #12]
 800e1be:	061a      	lsls	r2, r3, #24
 800e1c0:	d410      	bmi.n	800e1e4 <__swhatbuf_r+0x3e>
 800e1c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1c6:	e00e      	b.n	800e1e6 <__swhatbuf_r+0x40>
 800e1c8:	466a      	mov	r2, sp
 800e1ca:	f000 fe2f 	bl	800ee2c <_fstat_r>
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	dbf2      	blt.n	800e1b8 <__swhatbuf_r+0x12>
 800e1d2:	9a01      	ldr	r2, [sp, #4]
 800e1d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e1d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e1dc:	425a      	negs	r2, r3
 800e1de:	415a      	adcs	r2, r3
 800e1e0:	602a      	str	r2, [r5, #0]
 800e1e2:	e7ee      	b.n	800e1c2 <__swhatbuf_r+0x1c>
 800e1e4:	2340      	movs	r3, #64	; 0x40
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	6023      	str	r3, [r4, #0]
 800e1ea:	b016      	add	sp, #88	; 0x58
 800e1ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e1f0 <__smakebuf_r>:
 800e1f0:	898b      	ldrh	r3, [r1, #12]
 800e1f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1f4:	079d      	lsls	r5, r3, #30
 800e1f6:	4606      	mov	r6, r0
 800e1f8:	460c      	mov	r4, r1
 800e1fa:	d507      	bpl.n	800e20c <__smakebuf_r+0x1c>
 800e1fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e200:	6023      	str	r3, [r4, #0]
 800e202:	6123      	str	r3, [r4, #16]
 800e204:	2301      	movs	r3, #1
 800e206:	6163      	str	r3, [r4, #20]
 800e208:	b002      	add	sp, #8
 800e20a:	bd70      	pop	{r4, r5, r6, pc}
 800e20c:	ab01      	add	r3, sp, #4
 800e20e:	466a      	mov	r2, sp
 800e210:	f7ff ffc9 	bl	800e1a6 <__swhatbuf_r>
 800e214:	9900      	ldr	r1, [sp, #0]
 800e216:	4605      	mov	r5, r0
 800e218:	4630      	mov	r0, r6
 800e21a:	f7fd ff73 	bl	800c104 <_malloc_r>
 800e21e:	b948      	cbnz	r0, 800e234 <__smakebuf_r+0x44>
 800e220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e224:	059a      	lsls	r2, r3, #22
 800e226:	d4ef      	bmi.n	800e208 <__smakebuf_r+0x18>
 800e228:	f023 0303 	bic.w	r3, r3, #3
 800e22c:	f043 0302 	orr.w	r3, r3, #2
 800e230:	81a3      	strh	r3, [r4, #12]
 800e232:	e7e3      	b.n	800e1fc <__smakebuf_r+0xc>
 800e234:	4b0d      	ldr	r3, [pc, #52]	; (800e26c <__smakebuf_r+0x7c>)
 800e236:	62b3      	str	r3, [r6, #40]	; 0x28
 800e238:	89a3      	ldrh	r3, [r4, #12]
 800e23a:	6020      	str	r0, [r4, #0]
 800e23c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e240:	81a3      	strh	r3, [r4, #12]
 800e242:	9b00      	ldr	r3, [sp, #0]
 800e244:	6163      	str	r3, [r4, #20]
 800e246:	9b01      	ldr	r3, [sp, #4]
 800e248:	6120      	str	r0, [r4, #16]
 800e24a:	b15b      	cbz	r3, 800e264 <__smakebuf_r+0x74>
 800e24c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e250:	4630      	mov	r0, r6
 800e252:	f000 fdfd 	bl	800ee50 <_isatty_r>
 800e256:	b128      	cbz	r0, 800e264 <__smakebuf_r+0x74>
 800e258:	89a3      	ldrh	r3, [r4, #12]
 800e25a:	f023 0303 	bic.w	r3, r3, #3
 800e25e:	f043 0301 	orr.w	r3, r3, #1
 800e262:	81a3      	strh	r3, [r4, #12]
 800e264:	89a0      	ldrh	r0, [r4, #12]
 800e266:	4305      	orrs	r5, r0
 800e268:	81a5      	strh	r5, [r4, #12]
 800e26a:	e7cd      	b.n	800e208 <__smakebuf_r+0x18>
 800e26c:	0800dff5 	.word	0x0800dff5

0800e270 <memmove>:
 800e270:	4288      	cmp	r0, r1
 800e272:	b510      	push	{r4, lr}
 800e274:	eb01 0402 	add.w	r4, r1, r2
 800e278:	d902      	bls.n	800e280 <memmove+0x10>
 800e27a:	4284      	cmp	r4, r0
 800e27c:	4623      	mov	r3, r4
 800e27e:	d807      	bhi.n	800e290 <memmove+0x20>
 800e280:	1e43      	subs	r3, r0, #1
 800e282:	42a1      	cmp	r1, r4
 800e284:	d008      	beq.n	800e298 <memmove+0x28>
 800e286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e28a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e28e:	e7f8      	b.n	800e282 <memmove+0x12>
 800e290:	4402      	add	r2, r0
 800e292:	4601      	mov	r1, r0
 800e294:	428a      	cmp	r2, r1
 800e296:	d100      	bne.n	800e29a <memmove+0x2a>
 800e298:	bd10      	pop	{r4, pc}
 800e29a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e29e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2a2:	e7f7      	b.n	800e294 <memmove+0x24>

0800e2a4 <__malloc_lock>:
 800e2a4:	4801      	ldr	r0, [pc, #4]	; (800e2ac <__malloc_lock+0x8>)
 800e2a6:	f7ff bf7c 	b.w	800e1a2 <__retarget_lock_acquire_recursive>
 800e2aa:	bf00      	nop
 800e2ac:	20000d94 	.word	0x20000d94

0800e2b0 <__malloc_unlock>:
 800e2b0:	4801      	ldr	r0, [pc, #4]	; (800e2b8 <__malloc_unlock+0x8>)
 800e2b2:	f7ff bf77 	b.w	800e1a4 <__retarget_lock_release_recursive>
 800e2b6:	bf00      	nop
 800e2b8:	20000d94 	.word	0x20000d94

0800e2bc <_Balloc>:
 800e2bc:	b570      	push	{r4, r5, r6, lr}
 800e2be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	460d      	mov	r5, r1
 800e2c4:	b976      	cbnz	r6, 800e2e4 <_Balloc+0x28>
 800e2c6:	2010      	movs	r0, #16
 800e2c8:	f7fd feae 	bl	800c028 <malloc>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	6260      	str	r0, [r4, #36]	; 0x24
 800e2d0:	b920      	cbnz	r0, 800e2dc <_Balloc+0x20>
 800e2d2:	4b18      	ldr	r3, [pc, #96]	; (800e334 <_Balloc+0x78>)
 800e2d4:	4818      	ldr	r0, [pc, #96]	; (800e338 <_Balloc+0x7c>)
 800e2d6:	2166      	movs	r1, #102	; 0x66
 800e2d8:	f7fd fe48 	bl	800bf6c <__assert_func>
 800e2dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2e0:	6006      	str	r6, [r0, #0]
 800e2e2:	60c6      	str	r6, [r0, #12]
 800e2e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e2e6:	68f3      	ldr	r3, [r6, #12]
 800e2e8:	b183      	cbz	r3, 800e30c <_Balloc+0x50>
 800e2ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2f2:	b9b8      	cbnz	r0, 800e324 <_Balloc+0x68>
 800e2f4:	2101      	movs	r1, #1
 800e2f6:	fa01 f605 	lsl.w	r6, r1, r5
 800e2fa:	1d72      	adds	r2, r6, #5
 800e2fc:	0092      	lsls	r2, r2, #2
 800e2fe:	4620      	mov	r0, r4
 800e300:	f000 fb5a 	bl	800e9b8 <_calloc_r>
 800e304:	b160      	cbz	r0, 800e320 <_Balloc+0x64>
 800e306:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e30a:	e00e      	b.n	800e32a <_Balloc+0x6e>
 800e30c:	2221      	movs	r2, #33	; 0x21
 800e30e:	2104      	movs	r1, #4
 800e310:	4620      	mov	r0, r4
 800e312:	f000 fb51 	bl	800e9b8 <_calloc_r>
 800e316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e318:	60f0      	str	r0, [r6, #12]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d1e4      	bne.n	800e2ea <_Balloc+0x2e>
 800e320:	2000      	movs	r0, #0
 800e322:	bd70      	pop	{r4, r5, r6, pc}
 800e324:	6802      	ldr	r2, [r0, #0]
 800e326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e32a:	2300      	movs	r3, #0
 800e32c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e330:	e7f7      	b.n	800e322 <_Balloc+0x66>
 800e332:	bf00      	nop
 800e334:	0800f5bb 	.word	0x0800f5bb
 800e338:	0800f6a4 	.word	0x0800f6a4

0800e33c <_Bfree>:
 800e33c:	b570      	push	{r4, r5, r6, lr}
 800e33e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e340:	4605      	mov	r5, r0
 800e342:	460c      	mov	r4, r1
 800e344:	b976      	cbnz	r6, 800e364 <_Bfree+0x28>
 800e346:	2010      	movs	r0, #16
 800e348:	f7fd fe6e 	bl	800c028 <malloc>
 800e34c:	4602      	mov	r2, r0
 800e34e:	6268      	str	r0, [r5, #36]	; 0x24
 800e350:	b920      	cbnz	r0, 800e35c <_Bfree+0x20>
 800e352:	4b09      	ldr	r3, [pc, #36]	; (800e378 <_Bfree+0x3c>)
 800e354:	4809      	ldr	r0, [pc, #36]	; (800e37c <_Bfree+0x40>)
 800e356:	218a      	movs	r1, #138	; 0x8a
 800e358:	f7fd fe08 	bl	800bf6c <__assert_func>
 800e35c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e360:	6006      	str	r6, [r0, #0]
 800e362:	60c6      	str	r6, [r0, #12]
 800e364:	b13c      	cbz	r4, 800e376 <_Bfree+0x3a>
 800e366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e368:	6862      	ldr	r2, [r4, #4]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e370:	6021      	str	r1, [r4, #0]
 800e372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e376:	bd70      	pop	{r4, r5, r6, pc}
 800e378:	0800f5bb 	.word	0x0800f5bb
 800e37c:	0800f6a4 	.word	0x0800f6a4

0800e380 <__multadd>:
 800e380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e384:	690e      	ldr	r6, [r1, #16]
 800e386:	4607      	mov	r7, r0
 800e388:	4698      	mov	r8, r3
 800e38a:	460c      	mov	r4, r1
 800e38c:	f101 0014 	add.w	r0, r1, #20
 800e390:	2300      	movs	r3, #0
 800e392:	6805      	ldr	r5, [r0, #0]
 800e394:	b2a9      	uxth	r1, r5
 800e396:	fb02 8101 	mla	r1, r2, r1, r8
 800e39a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e39e:	0c2d      	lsrs	r5, r5, #16
 800e3a0:	fb02 c505 	mla	r5, r2, r5, ip
 800e3a4:	b289      	uxth	r1, r1
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e3ac:	429e      	cmp	r6, r3
 800e3ae:	f840 1b04 	str.w	r1, [r0], #4
 800e3b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e3b6:	dcec      	bgt.n	800e392 <__multadd+0x12>
 800e3b8:	f1b8 0f00 	cmp.w	r8, #0
 800e3bc:	d022      	beq.n	800e404 <__multadd+0x84>
 800e3be:	68a3      	ldr	r3, [r4, #8]
 800e3c0:	42b3      	cmp	r3, r6
 800e3c2:	dc19      	bgt.n	800e3f8 <__multadd+0x78>
 800e3c4:	6861      	ldr	r1, [r4, #4]
 800e3c6:	4638      	mov	r0, r7
 800e3c8:	3101      	adds	r1, #1
 800e3ca:	f7ff ff77 	bl	800e2bc <_Balloc>
 800e3ce:	4605      	mov	r5, r0
 800e3d0:	b928      	cbnz	r0, 800e3de <__multadd+0x5e>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	4b0d      	ldr	r3, [pc, #52]	; (800e40c <__multadd+0x8c>)
 800e3d6:	480e      	ldr	r0, [pc, #56]	; (800e410 <__multadd+0x90>)
 800e3d8:	21b5      	movs	r1, #181	; 0xb5
 800e3da:	f7fd fdc7 	bl	800bf6c <__assert_func>
 800e3de:	6922      	ldr	r2, [r4, #16]
 800e3e0:	3202      	adds	r2, #2
 800e3e2:	f104 010c 	add.w	r1, r4, #12
 800e3e6:	0092      	lsls	r2, r2, #2
 800e3e8:	300c      	adds	r0, #12
 800e3ea:	f7fd fe25 	bl	800c038 <memcpy>
 800e3ee:	4621      	mov	r1, r4
 800e3f0:	4638      	mov	r0, r7
 800e3f2:	f7ff ffa3 	bl	800e33c <_Bfree>
 800e3f6:	462c      	mov	r4, r5
 800e3f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e3fc:	3601      	adds	r6, #1
 800e3fe:	f8c3 8014 	str.w	r8, [r3, #20]
 800e402:	6126      	str	r6, [r4, #16]
 800e404:	4620      	mov	r0, r4
 800e406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e40a:	bf00      	nop
 800e40c:	0800f631 	.word	0x0800f631
 800e410:	0800f6a4 	.word	0x0800f6a4

0800e414 <__hi0bits>:
 800e414:	0c03      	lsrs	r3, r0, #16
 800e416:	041b      	lsls	r3, r3, #16
 800e418:	b9d3      	cbnz	r3, 800e450 <__hi0bits+0x3c>
 800e41a:	0400      	lsls	r0, r0, #16
 800e41c:	2310      	movs	r3, #16
 800e41e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e422:	bf04      	itt	eq
 800e424:	0200      	lsleq	r0, r0, #8
 800e426:	3308      	addeq	r3, #8
 800e428:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e42c:	bf04      	itt	eq
 800e42e:	0100      	lsleq	r0, r0, #4
 800e430:	3304      	addeq	r3, #4
 800e432:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e436:	bf04      	itt	eq
 800e438:	0080      	lsleq	r0, r0, #2
 800e43a:	3302      	addeq	r3, #2
 800e43c:	2800      	cmp	r0, #0
 800e43e:	db05      	blt.n	800e44c <__hi0bits+0x38>
 800e440:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e444:	f103 0301 	add.w	r3, r3, #1
 800e448:	bf08      	it	eq
 800e44a:	2320      	moveq	r3, #32
 800e44c:	4618      	mov	r0, r3
 800e44e:	4770      	bx	lr
 800e450:	2300      	movs	r3, #0
 800e452:	e7e4      	b.n	800e41e <__hi0bits+0xa>

0800e454 <__lo0bits>:
 800e454:	6803      	ldr	r3, [r0, #0]
 800e456:	f013 0207 	ands.w	r2, r3, #7
 800e45a:	4601      	mov	r1, r0
 800e45c:	d00b      	beq.n	800e476 <__lo0bits+0x22>
 800e45e:	07da      	lsls	r2, r3, #31
 800e460:	d424      	bmi.n	800e4ac <__lo0bits+0x58>
 800e462:	0798      	lsls	r0, r3, #30
 800e464:	bf49      	itett	mi
 800e466:	085b      	lsrmi	r3, r3, #1
 800e468:	089b      	lsrpl	r3, r3, #2
 800e46a:	2001      	movmi	r0, #1
 800e46c:	600b      	strmi	r3, [r1, #0]
 800e46e:	bf5c      	itt	pl
 800e470:	600b      	strpl	r3, [r1, #0]
 800e472:	2002      	movpl	r0, #2
 800e474:	4770      	bx	lr
 800e476:	b298      	uxth	r0, r3
 800e478:	b9b0      	cbnz	r0, 800e4a8 <__lo0bits+0x54>
 800e47a:	0c1b      	lsrs	r3, r3, #16
 800e47c:	2010      	movs	r0, #16
 800e47e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e482:	bf04      	itt	eq
 800e484:	0a1b      	lsreq	r3, r3, #8
 800e486:	3008      	addeq	r0, #8
 800e488:	071a      	lsls	r2, r3, #28
 800e48a:	bf04      	itt	eq
 800e48c:	091b      	lsreq	r3, r3, #4
 800e48e:	3004      	addeq	r0, #4
 800e490:	079a      	lsls	r2, r3, #30
 800e492:	bf04      	itt	eq
 800e494:	089b      	lsreq	r3, r3, #2
 800e496:	3002      	addeq	r0, #2
 800e498:	07da      	lsls	r2, r3, #31
 800e49a:	d403      	bmi.n	800e4a4 <__lo0bits+0x50>
 800e49c:	085b      	lsrs	r3, r3, #1
 800e49e:	f100 0001 	add.w	r0, r0, #1
 800e4a2:	d005      	beq.n	800e4b0 <__lo0bits+0x5c>
 800e4a4:	600b      	str	r3, [r1, #0]
 800e4a6:	4770      	bx	lr
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	e7e8      	b.n	800e47e <__lo0bits+0x2a>
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	4770      	bx	lr
 800e4b0:	2020      	movs	r0, #32
 800e4b2:	4770      	bx	lr

0800e4b4 <__i2b>:
 800e4b4:	b510      	push	{r4, lr}
 800e4b6:	460c      	mov	r4, r1
 800e4b8:	2101      	movs	r1, #1
 800e4ba:	f7ff feff 	bl	800e2bc <_Balloc>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	b928      	cbnz	r0, 800e4ce <__i2b+0x1a>
 800e4c2:	4b05      	ldr	r3, [pc, #20]	; (800e4d8 <__i2b+0x24>)
 800e4c4:	4805      	ldr	r0, [pc, #20]	; (800e4dc <__i2b+0x28>)
 800e4c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e4ca:	f7fd fd4f 	bl	800bf6c <__assert_func>
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	6144      	str	r4, [r0, #20]
 800e4d2:	6103      	str	r3, [r0, #16]
 800e4d4:	bd10      	pop	{r4, pc}
 800e4d6:	bf00      	nop
 800e4d8:	0800f631 	.word	0x0800f631
 800e4dc:	0800f6a4 	.word	0x0800f6a4

0800e4e0 <__multiply>:
 800e4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e4:	4614      	mov	r4, r2
 800e4e6:	690a      	ldr	r2, [r1, #16]
 800e4e8:	6923      	ldr	r3, [r4, #16]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	bfb8      	it	lt
 800e4ee:	460b      	movlt	r3, r1
 800e4f0:	460d      	mov	r5, r1
 800e4f2:	bfbc      	itt	lt
 800e4f4:	4625      	movlt	r5, r4
 800e4f6:	461c      	movlt	r4, r3
 800e4f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e4fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e500:	68ab      	ldr	r3, [r5, #8]
 800e502:	6869      	ldr	r1, [r5, #4]
 800e504:	eb0a 0709 	add.w	r7, sl, r9
 800e508:	42bb      	cmp	r3, r7
 800e50a:	b085      	sub	sp, #20
 800e50c:	bfb8      	it	lt
 800e50e:	3101      	addlt	r1, #1
 800e510:	f7ff fed4 	bl	800e2bc <_Balloc>
 800e514:	b930      	cbnz	r0, 800e524 <__multiply+0x44>
 800e516:	4602      	mov	r2, r0
 800e518:	4b42      	ldr	r3, [pc, #264]	; (800e624 <__multiply+0x144>)
 800e51a:	4843      	ldr	r0, [pc, #268]	; (800e628 <__multiply+0x148>)
 800e51c:	f240 115d 	movw	r1, #349	; 0x15d
 800e520:	f7fd fd24 	bl	800bf6c <__assert_func>
 800e524:	f100 0614 	add.w	r6, r0, #20
 800e528:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e52c:	4633      	mov	r3, r6
 800e52e:	2200      	movs	r2, #0
 800e530:	4543      	cmp	r3, r8
 800e532:	d31e      	bcc.n	800e572 <__multiply+0x92>
 800e534:	f105 0c14 	add.w	ip, r5, #20
 800e538:	f104 0314 	add.w	r3, r4, #20
 800e53c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e540:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e544:	9202      	str	r2, [sp, #8]
 800e546:	ebac 0205 	sub.w	r2, ip, r5
 800e54a:	3a15      	subs	r2, #21
 800e54c:	f022 0203 	bic.w	r2, r2, #3
 800e550:	3204      	adds	r2, #4
 800e552:	f105 0115 	add.w	r1, r5, #21
 800e556:	458c      	cmp	ip, r1
 800e558:	bf38      	it	cc
 800e55a:	2204      	movcc	r2, #4
 800e55c:	9201      	str	r2, [sp, #4]
 800e55e:	9a02      	ldr	r2, [sp, #8]
 800e560:	9303      	str	r3, [sp, #12]
 800e562:	429a      	cmp	r2, r3
 800e564:	d808      	bhi.n	800e578 <__multiply+0x98>
 800e566:	2f00      	cmp	r7, #0
 800e568:	dc55      	bgt.n	800e616 <__multiply+0x136>
 800e56a:	6107      	str	r7, [r0, #16]
 800e56c:	b005      	add	sp, #20
 800e56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e572:	f843 2b04 	str.w	r2, [r3], #4
 800e576:	e7db      	b.n	800e530 <__multiply+0x50>
 800e578:	f8b3 a000 	ldrh.w	sl, [r3]
 800e57c:	f1ba 0f00 	cmp.w	sl, #0
 800e580:	d020      	beq.n	800e5c4 <__multiply+0xe4>
 800e582:	f105 0e14 	add.w	lr, r5, #20
 800e586:	46b1      	mov	r9, r6
 800e588:	2200      	movs	r2, #0
 800e58a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e58e:	f8d9 b000 	ldr.w	fp, [r9]
 800e592:	b2a1      	uxth	r1, r4
 800e594:	fa1f fb8b 	uxth.w	fp, fp
 800e598:	fb0a b101 	mla	r1, sl, r1, fp
 800e59c:	4411      	add	r1, r2
 800e59e:	f8d9 2000 	ldr.w	r2, [r9]
 800e5a2:	0c24      	lsrs	r4, r4, #16
 800e5a4:	0c12      	lsrs	r2, r2, #16
 800e5a6:	fb0a 2404 	mla	r4, sl, r4, r2
 800e5aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e5ae:	b289      	uxth	r1, r1
 800e5b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e5b4:	45f4      	cmp	ip, lr
 800e5b6:	f849 1b04 	str.w	r1, [r9], #4
 800e5ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e5be:	d8e4      	bhi.n	800e58a <__multiply+0xaa>
 800e5c0:	9901      	ldr	r1, [sp, #4]
 800e5c2:	5072      	str	r2, [r6, r1]
 800e5c4:	9a03      	ldr	r2, [sp, #12]
 800e5c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e5ca:	3304      	adds	r3, #4
 800e5cc:	f1b9 0f00 	cmp.w	r9, #0
 800e5d0:	d01f      	beq.n	800e612 <__multiply+0x132>
 800e5d2:	6834      	ldr	r4, [r6, #0]
 800e5d4:	f105 0114 	add.w	r1, r5, #20
 800e5d8:	46b6      	mov	lr, r6
 800e5da:	f04f 0a00 	mov.w	sl, #0
 800e5de:	880a      	ldrh	r2, [r1, #0]
 800e5e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e5e4:	fb09 b202 	mla	r2, r9, r2, fp
 800e5e8:	4492      	add	sl, r2
 800e5ea:	b2a4      	uxth	r4, r4
 800e5ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e5f0:	f84e 4b04 	str.w	r4, [lr], #4
 800e5f4:	f851 4b04 	ldr.w	r4, [r1], #4
 800e5f8:	f8be 2000 	ldrh.w	r2, [lr]
 800e5fc:	0c24      	lsrs	r4, r4, #16
 800e5fe:	fb09 2404 	mla	r4, r9, r4, r2
 800e602:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e606:	458c      	cmp	ip, r1
 800e608:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e60c:	d8e7      	bhi.n	800e5de <__multiply+0xfe>
 800e60e:	9a01      	ldr	r2, [sp, #4]
 800e610:	50b4      	str	r4, [r6, r2]
 800e612:	3604      	adds	r6, #4
 800e614:	e7a3      	b.n	800e55e <__multiply+0x7e>
 800e616:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1a5      	bne.n	800e56a <__multiply+0x8a>
 800e61e:	3f01      	subs	r7, #1
 800e620:	e7a1      	b.n	800e566 <__multiply+0x86>
 800e622:	bf00      	nop
 800e624:	0800f631 	.word	0x0800f631
 800e628:	0800f6a4 	.word	0x0800f6a4

0800e62c <__pow5mult>:
 800e62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e630:	4615      	mov	r5, r2
 800e632:	f012 0203 	ands.w	r2, r2, #3
 800e636:	4606      	mov	r6, r0
 800e638:	460f      	mov	r7, r1
 800e63a:	d007      	beq.n	800e64c <__pow5mult+0x20>
 800e63c:	4c25      	ldr	r4, [pc, #148]	; (800e6d4 <__pow5mult+0xa8>)
 800e63e:	3a01      	subs	r2, #1
 800e640:	2300      	movs	r3, #0
 800e642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e646:	f7ff fe9b 	bl	800e380 <__multadd>
 800e64a:	4607      	mov	r7, r0
 800e64c:	10ad      	asrs	r5, r5, #2
 800e64e:	d03d      	beq.n	800e6cc <__pow5mult+0xa0>
 800e650:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e652:	b97c      	cbnz	r4, 800e674 <__pow5mult+0x48>
 800e654:	2010      	movs	r0, #16
 800e656:	f7fd fce7 	bl	800c028 <malloc>
 800e65a:	4602      	mov	r2, r0
 800e65c:	6270      	str	r0, [r6, #36]	; 0x24
 800e65e:	b928      	cbnz	r0, 800e66c <__pow5mult+0x40>
 800e660:	4b1d      	ldr	r3, [pc, #116]	; (800e6d8 <__pow5mult+0xac>)
 800e662:	481e      	ldr	r0, [pc, #120]	; (800e6dc <__pow5mult+0xb0>)
 800e664:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e668:	f7fd fc80 	bl	800bf6c <__assert_func>
 800e66c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e670:	6004      	str	r4, [r0, #0]
 800e672:	60c4      	str	r4, [r0, #12]
 800e674:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e67c:	b94c      	cbnz	r4, 800e692 <__pow5mult+0x66>
 800e67e:	f240 2171 	movw	r1, #625	; 0x271
 800e682:	4630      	mov	r0, r6
 800e684:	f7ff ff16 	bl	800e4b4 <__i2b>
 800e688:	2300      	movs	r3, #0
 800e68a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e68e:	4604      	mov	r4, r0
 800e690:	6003      	str	r3, [r0, #0]
 800e692:	f04f 0900 	mov.w	r9, #0
 800e696:	07eb      	lsls	r3, r5, #31
 800e698:	d50a      	bpl.n	800e6b0 <__pow5mult+0x84>
 800e69a:	4639      	mov	r1, r7
 800e69c:	4622      	mov	r2, r4
 800e69e:	4630      	mov	r0, r6
 800e6a0:	f7ff ff1e 	bl	800e4e0 <__multiply>
 800e6a4:	4639      	mov	r1, r7
 800e6a6:	4680      	mov	r8, r0
 800e6a8:	4630      	mov	r0, r6
 800e6aa:	f7ff fe47 	bl	800e33c <_Bfree>
 800e6ae:	4647      	mov	r7, r8
 800e6b0:	106d      	asrs	r5, r5, #1
 800e6b2:	d00b      	beq.n	800e6cc <__pow5mult+0xa0>
 800e6b4:	6820      	ldr	r0, [r4, #0]
 800e6b6:	b938      	cbnz	r0, 800e6c8 <__pow5mult+0x9c>
 800e6b8:	4622      	mov	r2, r4
 800e6ba:	4621      	mov	r1, r4
 800e6bc:	4630      	mov	r0, r6
 800e6be:	f7ff ff0f 	bl	800e4e0 <__multiply>
 800e6c2:	6020      	str	r0, [r4, #0]
 800e6c4:	f8c0 9000 	str.w	r9, [r0]
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	e7e4      	b.n	800e696 <__pow5mult+0x6a>
 800e6cc:	4638      	mov	r0, r7
 800e6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6d2:	bf00      	nop
 800e6d4:	0800f7f8 	.word	0x0800f7f8
 800e6d8:	0800f5bb 	.word	0x0800f5bb
 800e6dc:	0800f6a4 	.word	0x0800f6a4

0800e6e0 <__lshift>:
 800e6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e4:	460c      	mov	r4, r1
 800e6e6:	6849      	ldr	r1, [r1, #4]
 800e6e8:	6923      	ldr	r3, [r4, #16]
 800e6ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6ee:	68a3      	ldr	r3, [r4, #8]
 800e6f0:	4607      	mov	r7, r0
 800e6f2:	4691      	mov	r9, r2
 800e6f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6f8:	f108 0601 	add.w	r6, r8, #1
 800e6fc:	42b3      	cmp	r3, r6
 800e6fe:	db0b      	blt.n	800e718 <__lshift+0x38>
 800e700:	4638      	mov	r0, r7
 800e702:	f7ff fddb 	bl	800e2bc <_Balloc>
 800e706:	4605      	mov	r5, r0
 800e708:	b948      	cbnz	r0, 800e71e <__lshift+0x3e>
 800e70a:	4602      	mov	r2, r0
 800e70c:	4b28      	ldr	r3, [pc, #160]	; (800e7b0 <__lshift+0xd0>)
 800e70e:	4829      	ldr	r0, [pc, #164]	; (800e7b4 <__lshift+0xd4>)
 800e710:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e714:	f7fd fc2a 	bl	800bf6c <__assert_func>
 800e718:	3101      	adds	r1, #1
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	e7ee      	b.n	800e6fc <__lshift+0x1c>
 800e71e:	2300      	movs	r3, #0
 800e720:	f100 0114 	add.w	r1, r0, #20
 800e724:	f100 0210 	add.w	r2, r0, #16
 800e728:	4618      	mov	r0, r3
 800e72a:	4553      	cmp	r3, sl
 800e72c:	db33      	blt.n	800e796 <__lshift+0xb6>
 800e72e:	6920      	ldr	r0, [r4, #16]
 800e730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e734:	f104 0314 	add.w	r3, r4, #20
 800e738:	f019 091f 	ands.w	r9, r9, #31
 800e73c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e740:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e744:	d02b      	beq.n	800e79e <__lshift+0xbe>
 800e746:	f1c9 0e20 	rsb	lr, r9, #32
 800e74a:	468a      	mov	sl, r1
 800e74c:	2200      	movs	r2, #0
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	fa00 f009 	lsl.w	r0, r0, r9
 800e754:	4302      	orrs	r2, r0
 800e756:	f84a 2b04 	str.w	r2, [sl], #4
 800e75a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e75e:	459c      	cmp	ip, r3
 800e760:	fa22 f20e 	lsr.w	r2, r2, lr
 800e764:	d8f3      	bhi.n	800e74e <__lshift+0x6e>
 800e766:	ebac 0304 	sub.w	r3, ip, r4
 800e76a:	3b15      	subs	r3, #21
 800e76c:	f023 0303 	bic.w	r3, r3, #3
 800e770:	3304      	adds	r3, #4
 800e772:	f104 0015 	add.w	r0, r4, #21
 800e776:	4584      	cmp	ip, r0
 800e778:	bf38      	it	cc
 800e77a:	2304      	movcc	r3, #4
 800e77c:	50ca      	str	r2, [r1, r3]
 800e77e:	b10a      	cbz	r2, 800e784 <__lshift+0xa4>
 800e780:	f108 0602 	add.w	r6, r8, #2
 800e784:	3e01      	subs	r6, #1
 800e786:	4638      	mov	r0, r7
 800e788:	612e      	str	r6, [r5, #16]
 800e78a:	4621      	mov	r1, r4
 800e78c:	f7ff fdd6 	bl	800e33c <_Bfree>
 800e790:	4628      	mov	r0, r5
 800e792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e796:	f842 0f04 	str.w	r0, [r2, #4]!
 800e79a:	3301      	adds	r3, #1
 800e79c:	e7c5      	b.n	800e72a <__lshift+0x4a>
 800e79e:	3904      	subs	r1, #4
 800e7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7a8:	459c      	cmp	ip, r3
 800e7aa:	d8f9      	bhi.n	800e7a0 <__lshift+0xc0>
 800e7ac:	e7ea      	b.n	800e784 <__lshift+0xa4>
 800e7ae:	bf00      	nop
 800e7b0:	0800f631 	.word	0x0800f631
 800e7b4:	0800f6a4 	.word	0x0800f6a4

0800e7b8 <__mcmp>:
 800e7b8:	b530      	push	{r4, r5, lr}
 800e7ba:	6902      	ldr	r2, [r0, #16]
 800e7bc:	690c      	ldr	r4, [r1, #16]
 800e7be:	1b12      	subs	r2, r2, r4
 800e7c0:	d10e      	bne.n	800e7e0 <__mcmp+0x28>
 800e7c2:	f100 0314 	add.w	r3, r0, #20
 800e7c6:	3114      	adds	r1, #20
 800e7c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e7cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e7d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e7d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e7d8:	42a5      	cmp	r5, r4
 800e7da:	d003      	beq.n	800e7e4 <__mcmp+0x2c>
 800e7dc:	d305      	bcc.n	800e7ea <__mcmp+0x32>
 800e7de:	2201      	movs	r2, #1
 800e7e0:	4610      	mov	r0, r2
 800e7e2:	bd30      	pop	{r4, r5, pc}
 800e7e4:	4283      	cmp	r3, r0
 800e7e6:	d3f3      	bcc.n	800e7d0 <__mcmp+0x18>
 800e7e8:	e7fa      	b.n	800e7e0 <__mcmp+0x28>
 800e7ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7ee:	e7f7      	b.n	800e7e0 <__mcmp+0x28>

0800e7f0 <__mdiff>:
 800e7f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f4:	460c      	mov	r4, r1
 800e7f6:	4606      	mov	r6, r0
 800e7f8:	4611      	mov	r1, r2
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	4617      	mov	r7, r2
 800e7fe:	f7ff ffdb 	bl	800e7b8 <__mcmp>
 800e802:	1e05      	subs	r5, r0, #0
 800e804:	d110      	bne.n	800e828 <__mdiff+0x38>
 800e806:	4629      	mov	r1, r5
 800e808:	4630      	mov	r0, r6
 800e80a:	f7ff fd57 	bl	800e2bc <_Balloc>
 800e80e:	b930      	cbnz	r0, 800e81e <__mdiff+0x2e>
 800e810:	4b39      	ldr	r3, [pc, #228]	; (800e8f8 <__mdiff+0x108>)
 800e812:	4602      	mov	r2, r0
 800e814:	f240 2132 	movw	r1, #562	; 0x232
 800e818:	4838      	ldr	r0, [pc, #224]	; (800e8fc <__mdiff+0x10c>)
 800e81a:	f7fd fba7 	bl	800bf6c <__assert_func>
 800e81e:	2301      	movs	r3, #1
 800e820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e824:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e828:	bfa4      	itt	ge
 800e82a:	463b      	movge	r3, r7
 800e82c:	4627      	movge	r7, r4
 800e82e:	4630      	mov	r0, r6
 800e830:	6879      	ldr	r1, [r7, #4]
 800e832:	bfa6      	itte	ge
 800e834:	461c      	movge	r4, r3
 800e836:	2500      	movge	r5, #0
 800e838:	2501      	movlt	r5, #1
 800e83a:	f7ff fd3f 	bl	800e2bc <_Balloc>
 800e83e:	b920      	cbnz	r0, 800e84a <__mdiff+0x5a>
 800e840:	4b2d      	ldr	r3, [pc, #180]	; (800e8f8 <__mdiff+0x108>)
 800e842:	4602      	mov	r2, r0
 800e844:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e848:	e7e6      	b.n	800e818 <__mdiff+0x28>
 800e84a:	693e      	ldr	r6, [r7, #16]
 800e84c:	60c5      	str	r5, [r0, #12]
 800e84e:	6925      	ldr	r5, [r4, #16]
 800e850:	f107 0114 	add.w	r1, r7, #20
 800e854:	f104 0914 	add.w	r9, r4, #20
 800e858:	f100 0e14 	add.w	lr, r0, #20
 800e85c:	f107 0210 	add.w	r2, r7, #16
 800e860:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e864:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e868:	46f2      	mov	sl, lr
 800e86a:	2700      	movs	r7, #0
 800e86c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e870:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e874:	fa1f f883 	uxth.w	r8, r3
 800e878:	fa17 f78b 	uxtah	r7, r7, fp
 800e87c:	0c1b      	lsrs	r3, r3, #16
 800e87e:	eba7 0808 	sub.w	r8, r7, r8
 800e882:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e886:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e88a:	fa1f f888 	uxth.w	r8, r8
 800e88e:	141f      	asrs	r7, r3, #16
 800e890:	454d      	cmp	r5, r9
 800e892:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e896:	f84a 3b04 	str.w	r3, [sl], #4
 800e89a:	d8e7      	bhi.n	800e86c <__mdiff+0x7c>
 800e89c:	1b2b      	subs	r3, r5, r4
 800e89e:	3b15      	subs	r3, #21
 800e8a0:	f023 0303 	bic.w	r3, r3, #3
 800e8a4:	3304      	adds	r3, #4
 800e8a6:	3415      	adds	r4, #21
 800e8a8:	42a5      	cmp	r5, r4
 800e8aa:	bf38      	it	cc
 800e8ac:	2304      	movcc	r3, #4
 800e8ae:	4419      	add	r1, r3
 800e8b0:	4473      	add	r3, lr
 800e8b2:	469e      	mov	lr, r3
 800e8b4:	460d      	mov	r5, r1
 800e8b6:	4565      	cmp	r5, ip
 800e8b8:	d30e      	bcc.n	800e8d8 <__mdiff+0xe8>
 800e8ba:	f10c 0203 	add.w	r2, ip, #3
 800e8be:	1a52      	subs	r2, r2, r1
 800e8c0:	f022 0203 	bic.w	r2, r2, #3
 800e8c4:	3903      	subs	r1, #3
 800e8c6:	458c      	cmp	ip, r1
 800e8c8:	bf38      	it	cc
 800e8ca:	2200      	movcc	r2, #0
 800e8cc:	441a      	add	r2, r3
 800e8ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e8d2:	b17b      	cbz	r3, 800e8f4 <__mdiff+0x104>
 800e8d4:	6106      	str	r6, [r0, #16]
 800e8d6:	e7a5      	b.n	800e824 <__mdiff+0x34>
 800e8d8:	f855 8b04 	ldr.w	r8, [r5], #4
 800e8dc:	fa17 f488 	uxtah	r4, r7, r8
 800e8e0:	1422      	asrs	r2, r4, #16
 800e8e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e8e6:	b2a4      	uxth	r4, r4
 800e8e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e8ec:	f84e 4b04 	str.w	r4, [lr], #4
 800e8f0:	1417      	asrs	r7, r2, #16
 800e8f2:	e7e0      	b.n	800e8b6 <__mdiff+0xc6>
 800e8f4:	3e01      	subs	r6, #1
 800e8f6:	e7ea      	b.n	800e8ce <__mdiff+0xde>
 800e8f8:	0800f631 	.word	0x0800f631
 800e8fc:	0800f6a4 	.word	0x0800f6a4

0800e900 <__d2b>:
 800e900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e904:	4689      	mov	r9, r1
 800e906:	2101      	movs	r1, #1
 800e908:	ec57 6b10 	vmov	r6, r7, d0
 800e90c:	4690      	mov	r8, r2
 800e90e:	f7ff fcd5 	bl	800e2bc <_Balloc>
 800e912:	4604      	mov	r4, r0
 800e914:	b930      	cbnz	r0, 800e924 <__d2b+0x24>
 800e916:	4602      	mov	r2, r0
 800e918:	4b25      	ldr	r3, [pc, #148]	; (800e9b0 <__d2b+0xb0>)
 800e91a:	4826      	ldr	r0, [pc, #152]	; (800e9b4 <__d2b+0xb4>)
 800e91c:	f240 310a 	movw	r1, #778	; 0x30a
 800e920:	f7fd fb24 	bl	800bf6c <__assert_func>
 800e924:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e928:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e92c:	bb35      	cbnz	r5, 800e97c <__d2b+0x7c>
 800e92e:	2e00      	cmp	r6, #0
 800e930:	9301      	str	r3, [sp, #4]
 800e932:	d028      	beq.n	800e986 <__d2b+0x86>
 800e934:	4668      	mov	r0, sp
 800e936:	9600      	str	r6, [sp, #0]
 800e938:	f7ff fd8c 	bl	800e454 <__lo0bits>
 800e93c:	9900      	ldr	r1, [sp, #0]
 800e93e:	b300      	cbz	r0, 800e982 <__d2b+0x82>
 800e940:	9a01      	ldr	r2, [sp, #4]
 800e942:	f1c0 0320 	rsb	r3, r0, #32
 800e946:	fa02 f303 	lsl.w	r3, r2, r3
 800e94a:	430b      	orrs	r3, r1
 800e94c:	40c2      	lsrs	r2, r0
 800e94e:	6163      	str	r3, [r4, #20]
 800e950:	9201      	str	r2, [sp, #4]
 800e952:	9b01      	ldr	r3, [sp, #4]
 800e954:	61a3      	str	r3, [r4, #24]
 800e956:	2b00      	cmp	r3, #0
 800e958:	bf14      	ite	ne
 800e95a:	2202      	movne	r2, #2
 800e95c:	2201      	moveq	r2, #1
 800e95e:	6122      	str	r2, [r4, #16]
 800e960:	b1d5      	cbz	r5, 800e998 <__d2b+0x98>
 800e962:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e966:	4405      	add	r5, r0
 800e968:	f8c9 5000 	str.w	r5, [r9]
 800e96c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e970:	f8c8 0000 	str.w	r0, [r8]
 800e974:	4620      	mov	r0, r4
 800e976:	b003      	add	sp, #12
 800e978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e97c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e980:	e7d5      	b.n	800e92e <__d2b+0x2e>
 800e982:	6161      	str	r1, [r4, #20]
 800e984:	e7e5      	b.n	800e952 <__d2b+0x52>
 800e986:	a801      	add	r0, sp, #4
 800e988:	f7ff fd64 	bl	800e454 <__lo0bits>
 800e98c:	9b01      	ldr	r3, [sp, #4]
 800e98e:	6163      	str	r3, [r4, #20]
 800e990:	2201      	movs	r2, #1
 800e992:	6122      	str	r2, [r4, #16]
 800e994:	3020      	adds	r0, #32
 800e996:	e7e3      	b.n	800e960 <__d2b+0x60>
 800e998:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e99c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e9a0:	f8c9 0000 	str.w	r0, [r9]
 800e9a4:	6918      	ldr	r0, [r3, #16]
 800e9a6:	f7ff fd35 	bl	800e414 <__hi0bits>
 800e9aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e9ae:	e7df      	b.n	800e970 <__d2b+0x70>
 800e9b0:	0800f631 	.word	0x0800f631
 800e9b4:	0800f6a4 	.word	0x0800f6a4

0800e9b8 <_calloc_r>:
 800e9b8:	b513      	push	{r0, r1, r4, lr}
 800e9ba:	434a      	muls	r2, r1
 800e9bc:	4611      	mov	r1, r2
 800e9be:	9201      	str	r2, [sp, #4]
 800e9c0:	f7fd fba0 	bl	800c104 <_malloc_r>
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	b118      	cbz	r0, 800e9d0 <_calloc_r+0x18>
 800e9c8:	9a01      	ldr	r2, [sp, #4]
 800e9ca:	2100      	movs	r1, #0
 800e9cc:	f7fd fb42 	bl	800c054 <memset>
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	b002      	add	sp, #8
 800e9d4:	bd10      	pop	{r4, pc}

0800e9d6 <_realloc_r>:
 800e9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9d8:	4607      	mov	r7, r0
 800e9da:	4614      	mov	r4, r2
 800e9dc:	460e      	mov	r6, r1
 800e9de:	b921      	cbnz	r1, 800e9ea <_realloc_r+0x14>
 800e9e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e9e4:	4611      	mov	r1, r2
 800e9e6:	f7fd bb8d 	b.w	800c104 <_malloc_r>
 800e9ea:	b922      	cbnz	r2, 800e9f6 <_realloc_r+0x20>
 800e9ec:	f7fd fb3a 	bl	800c064 <_free_r>
 800e9f0:	4625      	mov	r5, r4
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9f6:	f000 fa5f 	bl	800eeb8 <_malloc_usable_size_r>
 800e9fa:	42a0      	cmp	r0, r4
 800e9fc:	d20f      	bcs.n	800ea1e <_realloc_r+0x48>
 800e9fe:	4621      	mov	r1, r4
 800ea00:	4638      	mov	r0, r7
 800ea02:	f7fd fb7f 	bl	800c104 <_malloc_r>
 800ea06:	4605      	mov	r5, r0
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	d0f2      	beq.n	800e9f2 <_realloc_r+0x1c>
 800ea0c:	4631      	mov	r1, r6
 800ea0e:	4622      	mov	r2, r4
 800ea10:	f7fd fb12 	bl	800c038 <memcpy>
 800ea14:	4631      	mov	r1, r6
 800ea16:	4638      	mov	r0, r7
 800ea18:	f7fd fb24 	bl	800c064 <_free_r>
 800ea1c:	e7e9      	b.n	800e9f2 <_realloc_r+0x1c>
 800ea1e:	4635      	mov	r5, r6
 800ea20:	e7e7      	b.n	800e9f2 <_realloc_r+0x1c>

0800ea22 <__ssputs_r>:
 800ea22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea26:	688e      	ldr	r6, [r1, #8]
 800ea28:	429e      	cmp	r6, r3
 800ea2a:	4682      	mov	sl, r0
 800ea2c:	460c      	mov	r4, r1
 800ea2e:	4690      	mov	r8, r2
 800ea30:	461f      	mov	r7, r3
 800ea32:	d838      	bhi.n	800eaa6 <__ssputs_r+0x84>
 800ea34:	898a      	ldrh	r2, [r1, #12]
 800ea36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea3a:	d032      	beq.n	800eaa2 <__ssputs_r+0x80>
 800ea3c:	6825      	ldr	r5, [r4, #0]
 800ea3e:	6909      	ldr	r1, [r1, #16]
 800ea40:	eba5 0901 	sub.w	r9, r5, r1
 800ea44:	6965      	ldr	r5, [r4, #20]
 800ea46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea4e:	3301      	adds	r3, #1
 800ea50:	444b      	add	r3, r9
 800ea52:	106d      	asrs	r5, r5, #1
 800ea54:	429d      	cmp	r5, r3
 800ea56:	bf38      	it	cc
 800ea58:	461d      	movcc	r5, r3
 800ea5a:	0553      	lsls	r3, r2, #21
 800ea5c:	d531      	bpl.n	800eac2 <__ssputs_r+0xa0>
 800ea5e:	4629      	mov	r1, r5
 800ea60:	f7fd fb50 	bl	800c104 <_malloc_r>
 800ea64:	4606      	mov	r6, r0
 800ea66:	b950      	cbnz	r0, 800ea7e <__ssputs_r+0x5c>
 800ea68:	230c      	movs	r3, #12
 800ea6a:	f8ca 3000 	str.w	r3, [sl]
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea74:	81a3      	strh	r3, [r4, #12]
 800ea76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea7e:	6921      	ldr	r1, [r4, #16]
 800ea80:	464a      	mov	r2, r9
 800ea82:	f7fd fad9 	bl	800c038 <memcpy>
 800ea86:	89a3      	ldrh	r3, [r4, #12]
 800ea88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea90:	81a3      	strh	r3, [r4, #12]
 800ea92:	6126      	str	r6, [r4, #16]
 800ea94:	6165      	str	r5, [r4, #20]
 800ea96:	444e      	add	r6, r9
 800ea98:	eba5 0509 	sub.w	r5, r5, r9
 800ea9c:	6026      	str	r6, [r4, #0]
 800ea9e:	60a5      	str	r5, [r4, #8]
 800eaa0:	463e      	mov	r6, r7
 800eaa2:	42be      	cmp	r6, r7
 800eaa4:	d900      	bls.n	800eaa8 <__ssputs_r+0x86>
 800eaa6:	463e      	mov	r6, r7
 800eaa8:	4632      	mov	r2, r6
 800eaaa:	6820      	ldr	r0, [r4, #0]
 800eaac:	4641      	mov	r1, r8
 800eaae:	f7ff fbdf 	bl	800e270 <memmove>
 800eab2:	68a3      	ldr	r3, [r4, #8]
 800eab4:	6822      	ldr	r2, [r4, #0]
 800eab6:	1b9b      	subs	r3, r3, r6
 800eab8:	4432      	add	r2, r6
 800eaba:	60a3      	str	r3, [r4, #8]
 800eabc:	6022      	str	r2, [r4, #0]
 800eabe:	2000      	movs	r0, #0
 800eac0:	e7db      	b.n	800ea7a <__ssputs_r+0x58>
 800eac2:	462a      	mov	r2, r5
 800eac4:	f7ff ff87 	bl	800e9d6 <_realloc_r>
 800eac8:	4606      	mov	r6, r0
 800eaca:	2800      	cmp	r0, #0
 800eacc:	d1e1      	bne.n	800ea92 <__ssputs_r+0x70>
 800eace:	6921      	ldr	r1, [r4, #16]
 800ead0:	4650      	mov	r0, sl
 800ead2:	f7fd fac7 	bl	800c064 <_free_r>
 800ead6:	e7c7      	b.n	800ea68 <__ssputs_r+0x46>

0800ead8 <_svfiprintf_r>:
 800ead8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eadc:	4698      	mov	r8, r3
 800eade:	898b      	ldrh	r3, [r1, #12]
 800eae0:	061b      	lsls	r3, r3, #24
 800eae2:	b09d      	sub	sp, #116	; 0x74
 800eae4:	4607      	mov	r7, r0
 800eae6:	460d      	mov	r5, r1
 800eae8:	4614      	mov	r4, r2
 800eaea:	d50e      	bpl.n	800eb0a <_svfiprintf_r+0x32>
 800eaec:	690b      	ldr	r3, [r1, #16]
 800eaee:	b963      	cbnz	r3, 800eb0a <_svfiprintf_r+0x32>
 800eaf0:	2140      	movs	r1, #64	; 0x40
 800eaf2:	f7fd fb07 	bl	800c104 <_malloc_r>
 800eaf6:	6028      	str	r0, [r5, #0]
 800eaf8:	6128      	str	r0, [r5, #16]
 800eafa:	b920      	cbnz	r0, 800eb06 <_svfiprintf_r+0x2e>
 800eafc:	230c      	movs	r3, #12
 800eafe:	603b      	str	r3, [r7, #0]
 800eb00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb04:	e0d1      	b.n	800ecaa <_svfiprintf_r+0x1d2>
 800eb06:	2340      	movs	r3, #64	; 0x40
 800eb08:	616b      	str	r3, [r5, #20]
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	9309      	str	r3, [sp, #36]	; 0x24
 800eb0e:	2320      	movs	r3, #32
 800eb10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb14:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb18:	2330      	movs	r3, #48	; 0x30
 800eb1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ecc4 <_svfiprintf_r+0x1ec>
 800eb1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb22:	f04f 0901 	mov.w	r9, #1
 800eb26:	4623      	mov	r3, r4
 800eb28:	469a      	mov	sl, r3
 800eb2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb2e:	b10a      	cbz	r2, 800eb34 <_svfiprintf_r+0x5c>
 800eb30:	2a25      	cmp	r2, #37	; 0x25
 800eb32:	d1f9      	bne.n	800eb28 <_svfiprintf_r+0x50>
 800eb34:	ebba 0b04 	subs.w	fp, sl, r4
 800eb38:	d00b      	beq.n	800eb52 <_svfiprintf_r+0x7a>
 800eb3a:	465b      	mov	r3, fp
 800eb3c:	4622      	mov	r2, r4
 800eb3e:	4629      	mov	r1, r5
 800eb40:	4638      	mov	r0, r7
 800eb42:	f7ff ff6e 	bl	800ea22 <__ssputs_r>
 800eb46:	3001      	adds	r0, #1
 800eb48:	f000 80aa 	beq.w	800eca0 <_svfiprintf_r+0x1c8>
 800eb4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb4e:	445a      	add	r2, fp
 800eb50:	9209      	str	r2, [sp, #36]	; 0x24
 800eb52:	f89a 3000 	ldrb.w	r3, [sl]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	f000 80a2 	beq.w	800eca0 <_svfiprintf_r+0x1c8>
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb66:	f10a 0a01 	add.w	sl, sl, #1
 800eb6a:	9304      	str	r3, [sp, #16]
 800eb6c:	9307      	str	r3, [sp, #28]
 800eb6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb72:	931a      	str	r3, [sp, #104]	; 0x68
 800eb74:	4654      	mov	r4, sl
 800eb76:	2205      	movs	r2, #5
 800eb78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb7c:	4851      	ldr	r0, [pc, #324]	; (800ecc4 <_svfiprintf_r+0x1ec>)
 800eb7e:	f7f1 fb3f 	bl	8000200 <memchr>
 800eb82:	9a04      	ldr	r2, [sp, #16]
 800eb84:	b9d8      	cbnz	r0, 800ebbe <_svfiprintf_r+0xe6>
 800eb86:	06d0      	lsls	r0, r2, #27
 800eb88:	bf44      	itt	mi
 800eb8a:	2320      	movmi	r3, #32
 800eb8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb90:	0711      	lsls	r1, r2, #28
 800eb92:	bf44      	itt	mi
 800eb94:	232b      	movmi	r3, #43	; 0x2b
 800eb96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb9a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb9e:	2b2a      	cmp	r3, #42	; 0x2a
 800eba0:	d015      	beq.n	800ebce <_svfiprintf_r+0xf6>
 800eba2:	9a07      	ldr	r2, [sp, #28]
 800eba4:	4654      	mov	r4, sl
 800eba6:	2000      	movs	r0, #0
 800eba8:	f04f 0c0a 	mov.w	ip, #10
 800ebac:	4621      	mov	r1, r4
 800ebae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebb2:	3b30      	subs	r3, #48	; 0x30
 800ebb4:	2b09      	cmp	r3, #9
 800ebb6:	d94e      	bls.n	800ec56 <_svfiprintf_r+0x17e>
 800ebb8:	b1b0      	cbz	r0, 800ebe8 <_svfiprintf_r+0x110>
 800ebba:	9207      	str	r2, [sp, #28]
 800ebbc:	e014      	b.n	800ebe8 <_svfiprintf_r+0x110>
 800ebbe:	eba0 0308 	sub.w	r3, r0, r8
 800ebc2:	fa09 f303 	lsl.w	r3, r9, r3
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	9304      	str	r3, [sp, #16]
 800ebca:	46a2      	mov	sl, r4
 800ebcc:	e7d2      	b.n	800eb74 <_svfiprintf_r+0x9c>
 800ebce:	9b03      	ldr	r3, [sp, #12]
 800ebd0:	1d19      	adds	r1, r3, #4
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	9103      	str	r1, [sp, #12]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	bfbb      	ittet	lt
 800ebda:	425b      	neglt	r3, r3
 800ebdc:	f042 0202 	orrlt.w	r2, r2, #2
 800ebe0:	9307      	strge	r3, [sp, #28]
 800ebe2:	9307      	strlt	r3, [sp, #28]
 800ebe4:	bfb8      	it	lt
 800ebe6:	9204      	strlt	r2, [sp, #16]
 800ebe8:	7823      	ldrb	r3, [r4, #0]
 800ebea:	2b2e      	cmp	r3, #46	; 0x2e
 800ebec:	d10c      	bne.n	800ec08 <_svfiprintf_r+0x130>
 800ebee:	7863      	ldrb	r3, [r4, #1]
 800ebf0:	2b2a      	cmp	r3, #42	; 0x2a
 800ebf2:	d135      	bne.n	800ec60 <_svfiprintf_r+0x188>
 800ebf4:	9b03      	ldr	r3, [sp, #12]
 800ebf6:	1d1a      	adds	r2, r3, #4
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	9203      	str	r2, [sp, #12]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	bfb8      	it	lt
 800ec00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ec04:	3402      	adds	r4, #2
 800ec06:	9305      	str	r3, [sp, #20]
 800ec08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ecd4 <_svfiprintf_r+0x1fc>
 800ec0c:	7821      	ldrb	r1, [r4, #0]
 800ec0e:	2203      	movs	r2, #3
 800ec10:	4650      	mov	r0, sl
 800ec12:	f7f1 faf5 	bl	8000200 <memchr>
 800ec16:	b140      	cbz	r0, 800ec2a <_svfiprintf_r+0x152>
 800ec18:	2340      	movs	r3, #64	; 0x40
 800ec1a:	eba0 000a 	sub.w	r0, r0, sl
 800ec1e:	fa03 f000 	lsl.w	r0, r3, r0
 800ec22:	9b04      	ldr	r3, [sp, #16]
 800ec24:	4303      	orrs	r3, r0
 800ec26:	3401      	adds	r4, #1
 800ec28:	9304      	str	r3, [sp, #16]
 800ec2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec2e:	4826      	ldr	r0, [pc, #152]	; (800ecc8 <_svfiprintf_r+0x1f0>)
 800ec30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec34:	2206      	movs	r2, #6
 800ec36:	f7f1 fae3 	bl	8000200 <memchr>
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	d038      	beq.n	800ecb0 <_svfiprintf_r+0x1d8>
 800ec3e:	4b23      	ldr	r3, [pc, #140]	; (800eccc <_svfiprintf_r+0x1f4>)
 800ec40:	bb1b      	cbnz	r3, 800ec8a <_svfiprintf_r+0x1b2>
 800ec42:	9b03      	ldr	r3, [sp, #12]
 800ec44:	3307      	adds	r3, #7
 800ec46:	f023 0307 	bic.w	r3, r3, #7
 800ec4a:	3308      	adds	r3, #8
 800ec4c:	9303      	str	r3, [sp, #12]
 800ec4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec50:	4433      	add	r3, r6
 800ec52:	9309      	str	r3, [sp, #36]	; 0x24
 800ec54:	e767      	b.n	800eb26 <_svfiprintf_r+0x4e>
 800ec56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec5a:	460c      	mov	r4, r1
 800ec5c:	2001      	movs	r0, #1
 800ec5e:	e7a5      	b.n	800ebac <_svfiprintf_r+0xd4>
 800ec60:	2300      	movs	r3, #0
 800ec62:	3401      	adds	r4, #1
 800ec64:	9305      	str	r3, [sp, #20]
 800ec66:	4619      	mov	r1, r3
 800ec68:	f04f 0c0a 	mov.w	ip, #10
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec72:	3a30      	subs	r2, #48	; 0x30
 800ec74:	2a09      	cmp	r2, #9
 800ec76:	d903      	bls.n	800ec80 <_svfiprintf_r+0x1a8>
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d0c5      	beq.n	800ec08 <_svfiprintf_r+0x130>
 800ec7c:	9105      	str	r1, [sp, #20]
 800ec7e:	e7c3      	b.n	800ec08 <_svfiprintf_r+0x130>
 800ec80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec84:	4604      	mov	r4, r0
 800ec86:	2301      	movs	r3, #1
 800ec88:	e7f0      	b.n	800ec6c <_svfiprintf_r+0x194>
 800ec8a:	ab03      	add	r3, sp, #12
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	462a      	mov	r2, r5
 800ec90:	4b0f      	ldr	r3, [pc, #60]	; (800ecd0 <_svfiprintf_r+0x1f8>)
 800ec92:	a904      	add	r1, sp, #16
 800ec94:	4638      	mov	r0, r7
 800ec96:	f7fd fc89 	bl	800c5ac <_printf_float>
 800ec9a:	1c42      	adds	r2, r0, #1
 800ec9c:	4606      	mov	r6, r0
 800ec9e:	d1d6      	bne.n	800ec4e <_svfiprintf_r+0x176>
 800eca0:	89ab      	ldrh	r3, [r5, #12]
 800eca2:	065b      	lsls	r3, r3, #25
 800eca4:	f53f af2c 	bmi.w	800eb00 <_svfiprintf_r+0x28>
 800eca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecaa:	b01d      	add	sp, #116	; 0x74
 800ecac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb0:	ab03      	add	r3, sp, #12
 800ecb2:	9300      	str	r3, [sp, #0]
 800ecb4:	462a      	mov	r2, r5
 800ecb6:	4b06      	ldr	r3, [pc, #24]	; (800ecd0 <_svfiprintf_r+0x1f8>)
 800ecb8:	a904      	add	r1, sp, #16
 800ecba:	4638      	mov	r0, r7
 800ecbc:	f7fd ff1a 	bl	800caf4 <_printf_i>
 800ecc0:	e7eb      	b.n	800ec9a <_svfiprintf_r+0x1c2>
 800ecc2:	bf00      	nop
 800ecc4:	0800f468 	.word	0x0800f468
 800ecc8:	0800f472 	.word	0x0800f472
 800eccc:	0800c5ad 	.word	0x0800c5ad
 800ecd0:	0800ea23 	.word	0x0800ea23
 800ecd4:	0800f46e 	.word	0x0800f46e

0800ecd8 <_raise_r>:
 800ecd8:	291f      	cmp	r1, #31
 800ecda:	b538      	push	{r3, r4, r5, lr}
 800ecdc:	4604      	mov	r4, r0
 800ecde:	460d      	mov	r5, r1
 800ece0:	d904      	bls.n	800ecec <_raise_r+0x14>
 800ece2:	2316      	movs	r3, #22
 800ece4:	6003      	str	r3, [r0, #0]
 800ece6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ecea:	bd38      	pop	{r3, r4, r5, pc}
 800ecec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ecee:	b112      	cbz	r2, 800ecf6 <_raise_r+0x1e>
 800ecf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecf4:	b94b      	cbnz	r3, 800ed0a <_raise_r+0x32>
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f000 f830 	bl	800ed5c <_getpid_r>
 800ecfc:	462a      	mov	r2, r5
 800ecfe:	4601      	mov	r1, r0
 800ed00:	4620      	mov	r0, r4
 800ed02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed06:	f000 b817 	b.w	800ed38 <_kill_r>
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d00a      	beq.n	800ed24 <_raise_r+0x4c>
 800ed0e:	1c59      	adds	r1, r3, #1
 800ed10:	d103      	bne.n	800ed1a <_raise_r+0x42>
 800ed12:	2316      	movs	r3, #22
 800ed14:	6003      	str	r3, [r0, #0]
 800ed16:	2001      	movs	r0, #1
 800ed18:	e7e7      	b.n	800ecea <_raise_r+0x12>
 800ed1a:	2400      	movs	r4, #0
 800ed1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ed20:	4628      	mov	r0, r5
 800ed22:	4798      	blx	r3
 800ed24:	2000      	movs	r0, #0
 800ed26:	e7e0      	b.n	800ecea <_raise_r+0x12>

0800ed28 <raise>:
 800ed28:	4b02      	ldr	r3, [pc, #8]	; (800ed34 <raise+0xc>)
 800ed2a:	4601      	mov	r1, r0
 800ed2c:	6818      	ldr	r0, [r3, #0]
 800ed2e:	f7ff bfd3 	b.w	800ecd8 <_raise_r>
 800ed32:	bf00      	nop
 800ed34:	20000024 	.word	0x20000024

0800ed38 <_kill_r>:
 800ed38:	b538      	push	{r3, r4, r5, lr}
 800ed3a:	4d07      	ldr	r5, [pc, #28]	; (800ed58 <_kill_r+0x20>)
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	4604      	mov	r4, r0
 800ed40:	4608      	mov	r0, r1
 800ed42:	4611      	mov	r1, r2
 800ed44:	602b      	str	r3, [r5, #0]
 800ed46:	f7f3 fc1b 	bl	8002580 <_kill>
 800ed4a:	1c43      	adds	r3, r0, #1
 800ed4c:	d102      	bne.n	800ed54 <_kill_r+0x1c>
 800ed4e:	682b      	ldr	r3, [r5, #0]
 800ed50:	b103      	cbz	r3, 800ed54 <_kill_r+0x1c>
 800ed52:	6023      	str	r3, [r4, #0]
 800ed54:	bd38      	pop	{r3, r4, r5, pc}
 800ed56:	bf00      	nop
 800ed58:	20000d9c 	.word	0x20000d9c

0800ed5c <_getpid_r>:
 800ed5c:	f7f3 bc08 	b.w	8002570 <_getpid>

0800ed60 <__sread>:
 800ed60:	b510      	push	{r4, lr}
 800ed62:	460c      	mov	r4, r1
 800ed64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed68:	f000 f8ae 	bl	800eec8 <_read_r>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	bfab      	itete	ge
 800ed70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ed72:	89a3      	ldrhlt	r3, [r4, #12]
 800ed74:	181b      	addge	r3, r3, r0
 800ed76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ed7a:	bfac      	ite	ge
 800ed7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ed7e:	81a3      	strhlt	r3, [r4, #12]
 800ed80:	bd10      	pop	{r4, pc}

0800ed82 <__swrite>:
 800ed82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed86:	461f      	mov	r7, r3
 800ed88:	898b      	ldrh	r3, [r1, #12]
 800ed8a:	05db      	lsls	r3, r3, #23
 800ed8c:	4605      	mov	r5, r0
 800ed8e:	460c      	mov	r4, r1
 800ed90:	4616      	mov	r6, r2
 800ed92:	d505      	bpl.n	800eda0 <__swrite+0x1e>
 800ed94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed98:	2302      	movs	r3, #2
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f000 f868 	bl	800ee70 <_lseek_r>
 800eda0:	89a3      	ldrh	r3, [r4, #12]
 800eda2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eda6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800edaa:	81a3      	strh	r3, [r4, #12]
 800edac:	4632      	mov	r2, r6
 800edae:	463b      	mov	r3, r7
 800edb0:	4628      	mov	r0, r5
 800edb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edb6:	f000 b817 	b.w	800ede8 <_write_r>

0800edba <__sseek>:
 800edba:	b510      	push	{r4, lr}
 800edbc:	460c      	mov	r4, r1
 800edbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edc2:	f000 f855 	bl	800ee70 <_lseek_r>
 800edc6:	1c43      	adds	r3, r0, #1
 800edc8:	89a3      	ldrh	r3, [r4, #12]
 800edca:	bf15      	itete	ne
 800edcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800edce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800edd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800edd6:	81a3      	strheq	r3, [r4, #12]
 800edd8:	bf18      	it	ne
 800edda:	81a3      	strhne	r3, [r4, #12]
 800eddc:	bd10      	pop	{r4, pc}

0800edde <__sclose>:
 800edde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ede2:	f000 b813 	b.w	800ee0c <_close_r>
	...

0800ede8 <_write_r>:
 800ede8:	b538      	push	{r3, r4, r5, lr}
 800edea:	4d07      	ldr	r5, [pc, #28]	; (800ee08 <_write_r+0x20>)
 800edec:	4604      	mov	r4, r0
 800edee:	4608      	mov	r0, r1
 800edf0:	4611      	mov	r1, r2
 800edf2:	2200      	movs	r2, #0
 800edf4:	602a      	str	r2, [r5, #0]
 800edf6:	461a      	mov	r2, r3
 800edf8:	f7f3 fbf9 	bl	80025ee <_write>
 800edfc:	1c43      	adds	r3, r0, #1
 800edfe:	d102      	bne.n	800ee06 <_write_r+0x1e>
 800ee00:	682b      	ldr	r3, [r5, #0]
 800ee02:	b103      	cbz	r3, 800ee06 <_write_r+0x1e>
 800ee04:	6023      	str	r3, [r4, #0]
 800ee06:	bd38      	pop	{r3, r4, r5, pc}
 800ee08:	20000d9c 	.word	0x20000d9c

0800ee0c <_close_r>:
 800ee0c:	b538      	push	{r3, r4, r5, lr}
 800ee0e:	4d06      	ldr	r5, [pc, #24]	; (800ee28 <_close_r+0x1c>)
 800ee10:	2300      	movs	r3, #0
 800ee12:	4604      	mov	r4, r0
 800ee14:	4608      	mov	r0, r1
 800ee16:	602b      	str	r3, [r5, #0]
 800ee18:	f7f3 fc05 	bl	8002626 <_close>
 800ee1c:	1c43      	adds	r3, r0, #1
 800ee1e:	d102      	bne.n	800ee26 <_close_r+0x1a>
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	b103      	cbz	r3, 800ee26 <_close_r+0x1a>
 800ee24:	6023      	str	r3, [r4, #0]
 800ee26:	bd38      	pop	{r3, r4, r5, pc}
 800ee28:	20000d9c 	.word	0x20000d9c

0800ee2c <_fstat_r>:
 800ee2c:	b538      	push	{r3, r4, r5, lr}
 800ee2e:	4d07      	ldr	r5, [pc, #28]	; (800ee4c <_fstat_r+0x20>)
 800ee30:	2300      	movs	r3, #0
 800ee32:	4604      	mov	r4, r0
 800ee34:	4608      	mov	r0, r1
 800ee36:	4611      	mov	r1, r2
 800ee38:	602b      	str	r3, [r5, #0]
 800ee3a:	f7f3 fc00 	bl	800263e <_fstat>
 800ee3e:	1c43      	adds	r3, r0, #1
 800ee40:	d102      	bne.n	800ee48 <_fstat_r+0x1c>
 800ee42:	682b      	ldr	r3, [r5, #0]
 800ee44:	b103      	cbz	r3, 800ee48 <_fstat_r+0x1c>
 800ee46:	6023      	str	r3, [r4, #0]
 800ee48:	bd38      	pop	{r3, r4, r5, pc}
 800ee4a:	bf00      	nop
 800ee4c:	20000d9c 	.word	0x20000d9c

0800ee50 <_isatty_r>:
 800ee50:	b538      	push	{r3, r4, r5, lr}
 800ee52:	4d06      	ldr	r5, [pc, #24]	; (800ee6c <_isatty_r+0x1c>)
 800ee54:	2300      	movs	r3, #0
 800ee56:	4604      	mov	r4, r0
 800ee58:	4608      	mov	r0, r1
 800ee5a:	602b      	str	r3, [r5, #0]
 800ee5c:	f7f3 fbff 	bl	800265e <_isatty>
 800ee60:	1c43      	adds	r3, r0, #1
 800ee62:	d102      	bne.n	800ee6a <_isatty_r+0x1a>
 800ee64:	682b      	ldr	r3, [r5, #0]
 800ee66:	b103      	cbz	r3, 800ee6a <_isatty_r+0x1a>
 800ee68:	6023      	str	r3, [r4, #0]
 800ee6a:	bd38      	pop	{r3, r4, r5, pc}
 800ee6c:	20000d9c 	.word	0x20000d9c

0800ee70 <_lseek_r>:
 800ee70:	b538      	push	{r3, r4, r5, lr}
 800ee72:	4d07      	ldr	r5, [pc, #28]	; (800ee90 <_lseek_r+0x20>)
 800ee74:	4604      	mov	r4, r0
 800ee76:	4608      	mov	r0, r1
 800ee78:	4611      	mov	r1, r2
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	602a      	str	r2, [r5, #0]
 800ee7e:	461a      	mov	r2, r3
 800ee80:	f7f3 fbf8 	bl	8002674 <_lseek>
 800ee84:	1c43      	adds	r3, r0, #1
 800ee86:	d102      	bne.n	800ee8e <_lseek_r+0x1e>
 800ee88:	682b      	ldr	r3, [r5, #0]
 800ee8a:	b103      	cbz	r3, 800ee8e <_lseek_r+0x1e>
 800ee8c:	6023      	str	r3, [r4, #0]
 800ee8e:	bd38      	pop	{r3, r4, r5, pc}
 800ee90:	20000d9c 	.word	0x20000d9c

0800ee94 <__ascii_mbtowc>:
 800ee94:	b082      	sub	sp, #8
 800ee96:	b901      	cbnz	r1, 800ee9a <__ascii_mbtowc+0x6>
 800ee98:	a901      	add	r1, sp, #4
 800ee9a:	b142      	cbz	r2, 800eeae <__ascii_mbtowc+0x1a>
 800ee9c:	b14b      	cbz	r3, 800eeb2 <__ascii_mbtowc+0x1e>
 800ee9e:	7813      	ldrb	r3, [r2, #0]
 800eea0:	600b      	str	r3, [r1, #0]
 800eea2:	7812      	ldrb	r2, [r2, #0]
 800eea4:	1e10      	subs	r0, r2, #0
 800eea6:	bf18      	it	ne
 800eea8:	2001      	movne	r0, #1
 800eeaa:	b002      	add	sp, #8
 800eeac:	4770      	bx	lr
 800eeae:	4610      	mov	r0, r2
 800eeb0:	e7fb      	b.n	800eeaa <__ascii_mbtowc+0x16>
 800eeb2:	f06f 0001 	mvn.w	r0, #1
 800eeb6:	e7f8      	b.n	800eeaa <__ascii_mbtowc+0x16>

0800eeb8 <_malloc_usable_size_r>:
 800eeb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eebc:	1f18      	subs	r0, r3, #4
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	bfbc      	itt	lt
 800eec2:	580b      	ldrlt	r3, [r1, r0]
 800eec4:	18c0      	addlt	r0, r0, r3
 800eec6:	4770      	bx	lr

0800eec8 <_read_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4d07      	ldr	r5, [pc, #28]	; (800eee8 <_read_r+0x20>)
 800eecc:	4604      	mov	r4, r0
 800eece:	4608      	mov	r0, r1
 800eed0:	4611      	mov	r1, r2
 800eed2:	2200      	movs	r2, #0
 800eed4:	602a      	str	r2, [r5, #0]
 800eed6:	461a      	mov	r2, r3
 800eed8:	f7f3 fb6c 	bl	80025b4 <_read>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d102      	bne.n	800eee6 <_read_r+0x1e>
 800eee0:	682b      	ldr	r3, [r5, #0]
 800eee2:	b103      	cbz	r3, 800eee6 <_read_r+0x1e>
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}
 800eee8:	20000d9c 	.word	0x20000d9c

0800eeec <__ascii_wctomb>:
 800eeec:	b149      	cbz	r1, 800ef02 <__ascii_wctomb+0x16>
 800eeee:	2aff      	cmp	r2, #255	; 0xff
 800eef0:	bf85      	ittet	hi
 800eef2:	238a      	movhi	r3, #138	; 0x8a
 800eef4:	6003      	strhi	r3, [r0, #0]
 800eef6:	700a      	strbls	r2, [r1, #0]
 800eef8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800eefc:	bf98      	it	ls
 800eefe:	2001      	movls	r0, #1
 800ef00:	4770      	bx	lr
 800ef02:	4608      	mov	r0, r1
 800ef04:	4770      	bx	lr
	...

0800ef08 <_init>:
 800ef08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef0a:	bf00      	nop
 800ef0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef0e:	bc08      	pop	{r3}
 800ef10:	469e      	mov	lr, r3
 800ef12:	4770      	bx	lr

0800ef14 <_fini>:
 800ef14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef16:	bf00      	nop
 800ef18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef1a:	bc08      	pop	{r3}
 800ef1c:	469e      	mov	lr, r3
 800ef1e:	4770      	bx	lr
